import require$$0$3 from "os";
import require$$1 from "path";
import require$$1$1 from "util";
import require$$0$2 from "fs";
import require$$6 from "url";
import require$$2 from "tty";
import require$$5 from "crypto";
import require$$0$1 from "events";
import require$$8 from "net";
import require$$9 from "tls";
import require$$10$1 from "assert";
import require$$11 from "child_process";
import require$$12 from "stream";
import require$$13 from "zlib";
import require$$14$1 from "buffer";
import require$$15 from "dns";
import require$$16 from "module";
import require$$1$2 from "https";
import require$$20 from "http";
import require$$21 from "constants";
import require$$2$3 from "http2";
import require$$2$1 from "readline";
import require$$2$2 from "inspector";
import require$$0$4 from "async_hooks";
import require$$0$5 from "chromium-bidi/lib/cjs/bidiMapper/BidiMapper";
import require$$1$3 from "chromium-bidi/lib/cjs/cdp/CdpConnection";
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var inProcessFactory = {};
var server = {};
function commonjsRequire(path2) {
  throw new Error('Could not dynamically require "' + path2 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var registry = {};
var utilsBundle = {};
var hp = Object.create;
var $r$1 = Object.defineProperty;
var pp = Object.getOwnPropertyDescriptor;
var dp = Object.getOwnPropertyNames;
var mp = Object.getPrototypeOf, gp = Object.prototype.hasOwnProperty;
var E$1 = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports), vp = (t, e) => {
  for (var i in e) $r$1(t, i, { get: e[i], enumerable: true });
}, sa = (t, e, i, r) => {
  if (e && typeof e == "object" || typeof e == "function") for (let n of dp(e)) !gp.call(t, n) && n !== i && $r$1(t, n, { get: () => e[n], enumerable: !(r = pp(e, n)) || r.enumerable });
  return t;
};
var De = (t, e, i) => (i = t != null ? hp(mp(t)) : {}, sa(e || !t || !t.__esModule ? $r$1(i, "default", { value: t, enumerable: true }) : i, t)), _p = (t) => sa($r$1({}, "__esModule", { value: true }), t);
var ca = E$1((G_, la) => {
  var aa = {};
  la.exports = aa;
  var oa = { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29], black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], gray: [90, 39], grey: [90, 39], brightRed: [91, 39], brightGreen: [92, 39], brightYellow: [93, 39], brightBlue: [94, 39], brightMagenta: [95, 39], brightCyan: [96, 39], brightWhite: [97, 39], bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgGray: [100, 49], bgGrey: [100, 49], bgBrightRed: [101, 49], bgBrightGreen: [102, 49], bgBrightYellow: [103, 49], bgBrightBlue: [104, 49], bgBrightMagenta: [105, 49], bgBrightCyan: [106, 49], bgBrightWhite: [107, 49], blackBG: [40, 49], redBG: [41, 49], greenBG: [42, 49], yellowBG: [43, 49], blueBG: [44, 49], magentaBG: [45, 49], cyanBG: [46, 49], whiteBG: [47, 49] };
  Object.keys(oa).forEach(function(t) {
    var e = oa[t], i = aa[t] = [];
    i.open = "\x1B[" + e[0] + "m", i.close = "\x1B[" + e[1] + "m";
  });
});
var fa = E$1((z_, ua) => {
  ua.exports = function(t, e) {
    e = e || process.argv;
    var i = e.indexOf("--"), r = /^-{1,2}/.test(t) ? "" : "--", n = e.indexOf(r + t);
    return n !== -1 && (i === -1 ? true : n < i);
  };
});
var pa = E$1((W_, ha) => {
  var xp = require$$0$3, kt = fa(), tt = process.env, Ni = void 0;
  kt("no-color") || kt("no-colors") || kt("color=false") ? Ni = false : (kt("color") || kt("colors") || kt("color=true") || kt("color=always")) && (Ni = true);
  "FORCE_COLOR" in tt && (Ni = tt.FORCE_COLOR.length === 0 || parseInt(tt.FORCE_COLOR, 10) !== 0);
  function yp(t) {
    return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
  }
  function bp(t) {
    if (Ni === false) return 0;
    if (kt("color=16m") || kt("color=full") || kt("color=truecolor")) return 3;
    if (kt("color=256")) return 2;
    if (t && !t.isTTY && Ni !== true) return 0;
    var e = Ni ? 1 : 0;
    if (process.platform === "win32") {
      var i = xp.release().split(".");
      return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in tt) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(n) {
      return n in tt;
    }) || tt.CI_NAME === "codeship" ? 1 : e;
    if ("TEAMCITY_VERSION" in tt) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(tt.TEAMCITY_VERSION) ? 1 : 0;
    if ("TERM_PROGRAM" in tt) {
      var r = parseInt((tt.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (tt.TERM_PROGRAM) {
        case "iTerm.app":
          return r >= 3 ? 3 : 2;
        case "Hyper":
          return 3;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(tt.TERM) ? 2 : /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(tt.TERM) || "COLORTERM" in tt ? 1 : (tt.TERM === "dumb", e);
  }
  function Gn(t) {
    var e = bp(t);
    return yp(e);
  }
  ha.exports = { supportsColor: Gn, stdout: Gn(process.stdout), stderr: Gn(process.stderr) };
});
var ma = E$1((Y_, da) => {
  da.exports = function(e, i) {
    var r = "";
    e = e || "Run the trap, drop the bass", e = e.split("");
    var n = { a: ["@", "Ą", "Ⱥ", "Ʌ", "Δ", "Λ", "Д"], b: ["ß", "Ɓ", "Ƀ", "ɮ", "β", "฿"], c: ["©", "Ȼ", "Ͼ"], d: ["Ð", "Ɗ", "Ԁ", "ԁ", "Ԃ", "ԃ"], e: ["Ë", "ĕ", "Ǝ", "ɘ", "Σ", "ξ", "Ҽ", "੬"], f: ["Ӻ"], g: ["ɢ"], h: ["Ħ", "ƕ", "Ң", "Һ", "Ӈ", "Ԋ"], i: ["༏"], j: ["Ĵ"], k: ["ĸ", "Ҡ", "Ӄ", "Ԟ"], l: ["Ĺ"], m: ["ʍ", "Ӎ", "ӎ", "Ԡ", "ԡ", "൩"], n: ["Ñ", "ŋ", "Ɲ", "Ͷ", "Π", "Ҋ"], o: ["Ø", "õ", "ø", "Ǿ", "ʘ", "Ѻ", "ם", "۝", "๏"], p: ["Ƿ", "Ҏ"], q: ["্"], r: ["®", "Ʀ", "Ȑ", "Ɍ", "ʀ", "Я"], s: ["§", "Ϟ", "ϟ", "Ϩ"], t: ["Ł", "Ŧ", "ͳ"], u: ["Ʊ", "Ս"], v: ["ט"], w: ["Ш", "Ѡ", "Ѽ", "൰"], x: ["Ҳ", "Ӿ", "Ӽ", "ӽ"], y: ["¥", "Ұ", "Ӌ"], z: ["Ƶ", "ɀ"] };
    return e.forEach(function(s) {
      s = s.toLowerCase();
      var o = n[s] || [" "], c = Math.floor(Math.random() * o.length);
      typeof n[s] != "undefined" ? r += n[s][c] : r += s;
    }), r;
  };
});
var va = E$1((K_, ga) => {
  ga.exports = function(e, i) {
    e = e || "   he is here   ";
    var r = { up: ["̍", "̎", "̄", "̅", "̿", "̑", "̆", "̐", "͒", "͗", "͑", "̇", "̈", "̊", "͂", "̓", "̈", "͊", "͋", "͌", "̃", "̂", "̌", "͐", "̀", "́", "̋", "̏", "̒", "̓", "̔", "̽", "̉", "ͣ", "ͤ", "ͥ", "ͦ", "ͧ", "ͨ", "ͩ", "ͪ", "ͫ", "ͬ", "ͭ", "ͮ", "ͯ", "̾", "͛", "͆", "̚"], down: ["̖", "̗", "̘", "̙", "̜", "̝", "̞", "̟", "̠", "̤", "̥", "̦", "̩", "̪", "̫", "̬", "̭", "̮", "̯", "̰", "̱", "̲", "̳", "̹", "̺", "̻", "̼", "ͅ", "͇", "͈", "͉", "͍", "͎", "͓", "͔", "͕", "͖", "͙", "͚", "̣"], mid: ["̕", "̛", "̀", "́", "͘", "̡", "̢", "̧", "̨", "̴", "̵", "̶", "͜", "͝", "͞", "͟", "͠", "͢", "̸", "̷", "͡", " ҉"] }, n = [].concat(r.up, r.down, r.mid);
    function s(u) {
      var h = Math.floor(Math.random() * u);
      return h;
    }
    function o(u) {
      var h = false;
      return n.filter(function(l) {
        h = l === u;
      }), h;
    }
    function c(u, h) {
      var l = "", d, m;
      h = h || {}, h.up = typeof h.up != "undefined" ? h.up : true, h.mid = typeof h.mid != "undefined" ? h.mid : true, h.down = typeof h.down != "undefined" ? h.down : true, h.size = typeof h.size != "undefined" ? h.size : "maxi", u = u.split("");
      for (m in u) if (!o(m)) {
        switch (l = l + u[m], d = { up: 0, down: 0, mid: 0 }, h.size) {
          case "mini":
            d.up = s(8), d.mid = s(2), d.down = s(8);
            break;
          case "maxi":
            d.up = s(16) + 3, d.mid = s(4) + 1, d.down = s(64) + 3;
            break;
          default:
            d.up = s(8) + 1, d.mid = s(6) / 2, d.down = s(8) + 1;
            break;
        }
        var v = ["up", "mid", "down"];
        for (var g in v) for (var x = v[g], y = 0; y <= d[x]; y++) h[x] && (l = l + r[x][s(r[x].length)]);
      }
      return l;
    }
    return c(e, i);
  };
});
var xa = E$1((Z_, _a) => {
  _a.exports = function(t) {
    return function(e, i, r) {
      if (e === " ") return e;
      switch (i % 3) {
        case 0:
          return t.red(e);
        case 1:
          return t.white(e);
        case 2:
          return t.blue(e);
      }
    };
  };
});
var ba = E$1((X_, ya) => {
  ya.exports = function(t) {
    return function(e, i, r) {
      return i % 2 === 0 ? e : t.inverse(e);
    };
  };
});
var Ea = E$1((J_, wa) => {
  wa.exports = function(t) {
    var e = ["red", "yellow", "green", "blue", "magenta"];
    return function(i, r, n) {
      return i === " " ? i : t[e[r++ % e.length]](i);
    };
  };
});
var ka = E$1((Q_, Sa) => {
  Sa.exports = function(t) {
    var e = ["underline", "inverse", "grey", "yellow", "red", "green", "blue", "white", "cyan", "magenta", "brightYellow", "brightRed", "brightGreen", "brightBlue", "brightWhite", "brightCyan", "brightMagenta"];
    return function(i, r, n) {
      return i === " " ? i : t[e[Math.round(Math.random() * (e.length - 2))]](i);
    };
  };
});
var Ba = E$1((tx, Aa) => {
  var ve = {};
  Aa.exports = ve;
  ve.themes = {};
  var wp = require$$1$1, pi = ve.styles = ca(), Ca = Object.defineProperties, Ep = new RegExp(/[\r\n]+/g);
  ve.supportsColor = pa().supportsColor;
  typeof ve.enabled == "undefined" && (ve.enabled = ve.supportsColor() !== false);
  ve.enable = function() {
    ve.enabled = true;
  };
  ve.disable = function() {
    ve.enabled = false;
  };
  ve.stripColors = ve.strip = function(t) {
    return ("" + t).replace(/\x1B\[\d+m/g, "");
  };
  ve.stylize = function(e, i) {
    if (!ve.enabled) return e + "";
    var r = pi[i];
    return !r && i in ve ? ve[i](e) : r.open + e + r.close;
  };
  var Sp = /[|\\{}()[\]^$+*?.]/g, kp = function(t) {
    if (typeof t != "string") throw new TypeError("Expected a string");
    return t.replace(Sp, "\\$&");
  };
  function Ta(t) {
    var e = function i() {
      return Cp.apply(i, arguments);
    };
    return e._styles = t, e.__proto__ = Op, e;
  }
  var Ia = function() {
    var t = {};
    return pi.grey = pi.gray, Object.keys(pi).forEach(function(e) {
      pi[e].closeRe = new RegExp(kp(pi[e].close), "g"), t[e] = { get: function() {
        return Ta(this._styles.concat(e));
      } };
    }), t;
  }(), Op = Ca(function() {
  }, Ia);
  function Cp() {
    var t = Array.prototype.slice.call(arguments), e = t.map(function(o) {
      return o != null && o.constructor === String ? o : wp.inspect(o);
    }).join(" ");
    if (!ve.enabled || !e) return e;
    for (var i = e.indexOf(`
`) != -1, r = this._styles, n = r.length; n--; ) {
      var s = pi[r[n]];
      e = s.open + e.replace(s.closeRe, s.open) + s.close, i && (e = e.replace(Ep, function(o) {
        return s.close + o + s.open;
      }));
    }
    return e;
  }
  ve.setTheme = function(t) {
    if (typeof t == "string") {
      console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
      return;
    }
    for (var e in t) (function(i) {
      ve[i] = function(r) {
        if (typeof t[i] == "object") {
          var n = r;
          for (var s in t[i]) n = ve[t[i][s]](n);
          return n;
        }
        return ve[t[i]](r);
      };
    })(e);
  };
  function Tp() {
    var t = {};
    return Object.keys(Ia).forEach(function(e) {
      t[e] = { get: function() {
        return Ta([e]);
      } };
    }), t;
  }
  var Ip = function(e, i) {
    var r = i.split("");
    return r = r.map(e), r.join("");
  };
  ve.trap = ma();
  ve.zalgo = va();
  ve.maps = {};
  ve.maps.america = xa()(ve);
  ve.maps.zebra = ba()(ve);
  ve.maps.rainbow = Ea()(ve);
  ve.maps.random = ka()(ve);
  for (Oa in ve.maps) (function(t) {
    ve[t] = function(e) {
      return Ip(ve.maps[t], e);
    };
  })(Oa);
  var Oa;
  Ca(ve, Tp());
});
var Pa = E$1((ix, Ra) => {
  var Ap = Ba();
  Ra.exports = Ap;
});
var La = E$1((rx, Na) => {
  var Li = 1e3, Fi = Li * 60, Mi = Fi * 60, di = Mi * 24, Bp = di * 7, Rp = di * 365.25;
  Na.exports = function(t, e) {
    e = e || {};
    var i = typeof t;
    if (i === "string" && t.length > 0) return Pp(t);
    if (i === "number" && isFinite(t)) return e.long ? Lp(t) : Np(t);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
  };
  function Pp(t) {
    if (t = String(t), !(t.length > 100)) {
      var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
      if (e) {
        var i = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
        switch (r) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return i * Rp;
          case "weeks":
          case "week":
          case "w":
            return i * Bp;
          case "days":
          case "day":
          case "d":
            return i * di;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return i * Mi;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return i * Fi;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return i * Li;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return i;
          default:
            return;
        }
      }
    }
  }
  function Np(t) {
    var e = Math.abs(t);
    return e >= di ? Math.round(t / di) + "d" : e >= Mi ? Math.round(t / Mi) + "h" : e >= Fi ? Math.round(t / Fi) + "m" : e >= Li ? Math.round(t / Li) + "s" : t + "ms";
  }
  function Lp(t) {
    var e = Math.abs(t);
    return e >= di ? Gr(t, e, di, "day") : e >= Mi ? Gr(t, e, Mi, "hour") : e >= Fi ? Gr(t, e, Fi, "minute") : e >= Li ? Gr(t, e, Li, "second") : t + " ms";
  }
  function Gr(t, e, i, r) {
    var n = e >= i * 1.5;
    return Math.round(t / i) + " " + r + (n ? "s" : "");
  }
});
var zn$1 = E$1((nx, Fa) => {
  function Fp(t) {
    i.debug = i, i.default = i, i.coerce = u, i.disable = s, i.enable = n, i.enabled = o, i.humanize = La(), i.destroy = h, Object.keys(t).forEach((l) => {
      i[l] = t[l];
    }), i.names = [], i.skips = [], i.formatters = {};
    function e(l) {
      let d = 0;
      for (let m = 0; m < l.length; m++) d = (d << 5) - d + l.charCodeAt(m), d |= 0;
      return i.colors[Math.abs(d) % i.colors.length];
    }
    i.selectColor = e;
    function i(l) {
      let d, m = null, v, g;
      function x(...y) {
        if (!x.enabled) return;
        let O = x, B = Number(/* @__PURE__ */ new Date()), C = B - (d || B);
        O.diff = C, O.prev = d, O.curr = B, d = B, y[0] = i.coerce(y[0]), typeof y[0] != "string" && y.unshift("%O");
        let P = 0;
        y[0] = y[0].replace(/%([a-zA-Z%])/g, (J, A) => {
          if (J === "%%") return "%";
          P++;
          let z = i.formatters[A];
          if (typeof z == "function") {
            let k = y[P];
            J = z.call(O, k), y.splice(P, 1), P--;
          }
          return J;
        }), i.formatArgs.call(O, y), (O.log || i.log).apply(O, y);
      }
      return x.namespace = l, x.useColors = i.useColors(), x.color = i.selectColor(l), x.extend = r, x.destroy = i.destroy, Object.defineProperty(x, "enabled", { enumerable: true, configurable: false, get: () => m !== null ? m : (v !== i.namespaces && (v = i.namespaces, g = i.enabled(l)), g), set: (y) => {
        m = y;
      } }), typeof i.init == "function" && i.init(x), x;
    }
    function r(l, d) {
      let m = i(this.namespace + (typeof d == "undefined" ? ":" : d) + l);
      return m.log = this.log, m;
    }
    function n(l) {
      i.save(l), i.namespaces = l, i.names = [], i.skips = [];
      let d, m = (typeof l == "string" ? l : "").split(/[\s,]+/), v = m.length;
      for (d = 0; d < v; d++) m[d] && (l = m[d].replace(/\*/g, ".*?"), l[0] === "-" ? i.skips.push(new RegExp("^" + l.slice(1) + "$")) : i.names.push(new RegExp("^" + l + "$")));
    }
    function s() {
      let l = [...i.names.map(c), ...i.skips.map(c).map((d) => "-" + d)].join(",");
      return i.enable(""), l;
    }
    function o(l) {
      if (l[l.length - 1] === "*") return true;
      let d, m;
      for (d = 0, m = i.skips.length; d < m; d++) if (i.skips[d].test(l)) return false;
      for (d = 0, m = i.names.length; d < m; d++) if (i.names[d].test(l)) return true;
      return false;
    }
    function c(l) {
      return l.toString().substring(2, l.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function u(l) {
      return l instanceof Error ? l.stack || l.message : l;
    }
    function h() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return i.enable(i.load()), i;
  }
  Fa.exports = Fp;
});
var Ma = E$1((ht2, zr2) => {
  ht2.formatArgs = Dp;
  ht2.save = Up;
  ht2.load = jp;
  ht2.useColors = Mp;
  ht2.storage = qp();
  ht2.destroy = /* @__PURE__ */ (() => {
    let t = false;
    return () => {
      t || (t = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
  })();
  ht2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
  function Mp() {
    return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function Dp(t) {
    if (t[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t[0] + (this.useColors ? "%c " : " ") + "+" + zr2.exports.humanize(this.diff), !this.useColors) return;
    let e = "color: " + this.color;
    t.splice(1, 0, e, "color: inherit");
    let i = 0, r = 0;
    t[0].replace(/%[a-zA-Z%]/g, (n) => {
      n !== "%%" && (i++, n === "%c" && (r = i));
    }), t.splice(r, 0, e);
  }
  ht2.log = console.debug || console.log || (() => {
  });
  function Up(t) {
    try {
      t ? ht2.storage.setItem("debug", t) : ht2.storage.removeItem("debug");
    } catch {
    }
  }
  function jp() {
    let t;
    try {
      t = ht2.storage.getItem("debug");
    } catch {
    }
    return !t && typeof process != "undefined" && "env" in process && (t = process.env.DEBUG), t;
  }
  function qp() {
    try {
      return localStorage;
    } catch {
    }
  }
  zr2.exports = zn$1()(ht2);
  var { formatters: Vp } = zr2.exports;
  Vp.j = function(t) {
    try {
      return JSON.stringify(t);
    } catch (e) {
      return "[UnexpectedJSONParseError]: " + e.message;
    }
  };
});
var Ua = E$1((sx, Da) => {
  Da.exports = (t, e) => {
    e = e || process.argv;
    let i = t.startsWith("-") ? "" : t.length === 1 ? "-" : "--", r = e.indexOf(i + t), n = e.indexOf("--");
    return r !== -1 && (n === -1 ? true : r < n);
  };
});
var qa = E$1((ox, ja) => {
  var Hp = require$$0$3, Ot = Ua(), Ze = process.env, Di;
  Ot("no-color") || Ot("no-colors") || Ot("color=false") ? Di = false : (Ot("color") || Ot("colors") || Ot("color=true") || Ot("color=always")) && (Di = true);
  "FORCE_COLOR" in Ze && (Di = Ze.FORCE_COLOR.length === 0 || parseInt(Ze.FORCE_COLOR, 10) !== 0);
  function $p(t) {
    return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
  }
  function Gp(t) {
    if (Di === false) return 0;
    if (Ot("color=16m") || Ot("color=full") || Ot("color=truecolor")) return 3;
    if (Ot("color=256")) return 2;
    if (t && !t.isTTY && Di !== true) return 0;
    let e = Di ? 1 : 0;
    if (process.platform === "win32") {
      let i = Hp.release().split(".");
      return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in Ze) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((i) => i in Ze) || Ze.CI_NAME === "codeship" ? 1 : e;
    if ("TEAMCITY_VERSION" in Ze) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Ze.TEAMCITY_VERSION) ? 1 : 0;
    if (Ze.COLORTERM === "truecolor") return 3;
    if ("TERM_PROGRAM" in Ze) {
      let i = parseInt((Ze.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (Ze.TERM_PROGRAM) {
        case "iTerm.app":
          return i >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(Ze.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Ze.TERM) || "COLORTERM" in Ze ? 1 : (Ze.TERM === "dumb", e);
  }
  function Wn(t) {
    let e = Gp(t);
    return $p(e);
  }
  ja.exports = { supportsColor: Wn, stdout: Wn(process.stdout), stderr: Wn(process.stderr) };
});
var Ha = E$1((We, Yr2) => {
  var zp = require$$2, Wr = require$$1$1;
  We.init = Qp;
  We.log = Zp;
  We.formatArgs = Yp;
  We.save = Xp;
  We.load = Jp;
  We.useColors = Wp;
  We.destroy = Wr.deprecate(() => {
  }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  We.colors = [6, 2, 3, 4, 5, 1];
  try {
    let t = qa();
    t && (t.stderr || t).level >= 2 && (We.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
  } catch {
  }
  We.inspectOpts = Object.keys(process.env).filter((t) => /^debug_/i.test(t)).reduce((t, e) => {
    let i = e.substring(6).toLowerCase().replace(/_([a-z])/g, (n, s) => s.toUpperCase()), r = process.env[e];
    return /^(yes|on|true|enabled)$/i.test(r) ? r = true : /^(no|off|false|disabled)$/i.test(r) ? r = false : r === "null" ? r = null : r = Number(r), t[i] = r, t;
  }, {});
  function Wp() {
    return "colors" in We.inspectOpts ? !!We.inspectOpts.colors : zp.isatty(process.stderr.fd);
  }
  function Yp(t) {
    let { namespace: e, useColors: i } = this;
    if (i) {
      let r = this.color, n = "\x1B[3" + (r < 8 ? r : "8;5;" + r), s = `  ${n};1m${e} \x1B[0m`;
      t[0] = s + t[0].split(`
`).join(`
` + s), t.push(n + "m+" + Yr2.exports.humanize(this.diff) + "\x1B[0m");
    } else t[0] = Kp() + e + " " + t[0];
  }
  function Kp() {
    return We.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
  }
  function Zp(...t) {
    return process.stderr.write(Wr.format(...t) + `
`);
  }
  function Xp(t) {
    t ? process.env.DEBUG = t : delete process.env.DEBUG;
  }
  function Jp() {
    return process.env.DEBUG;
  }
  function Qp(t) {
    t.inspectOpts = {};
    let e = Object.keys(We.inspectOpts);
    for (let i = 0; i < e.length; i++) t.inspectOpts[e[i]] = We.inspectOpts[e[i]];
  }
  Yr2.exports = zn$1()(We);
  var { formatters: Va } = Yr2.exports;
  Va.o = function(t) {
    return this.inspectOpts.colors = this.useColors, Wr.inspect(t, this.inspectOpts).split(`
`).map((e) => e.trim()).join(" ");
  };
  Va.O = function(t) {
    return this.inspectOpts.colors = this.useColors, Wr.inspect(t, this.inspectOpts);
  };
});
var Ui = E$1((ax, Yn) => {
  typeof process == "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs ? Yn.exports = Ma() : Yn.exports = Ha();
});
var $a = E$1((lx, ed) => {
  ed.exports = { name: "dotenv", version: "16.4.5", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { types: "./lib/main.d.ts", require: "./lib/main.js", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", "lint-readme": "standard-markdown", pretest: "npm run lint && npm run dts-check", test: "tap tests/*.js --100 -Rspec", "test:coverage": "tap --coverage-report=lcov", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, funding: "https://dotenvx.com", keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@definitelytyped/dtslint": "^0.0.133", "@types/node": "^18.11.3", decache: "^4.6.1", sinon: "^14.0.1", standard: "^17.0.0", "standard-markdown": "^7.1.0", "standard-version": "^9.5.0", tap: "^16.3.0", tar: "^6.1.11", typescript: "^4.8.4" }, engines: { node: ">=12" }, browser: { fs: false } };
});
var Ya = E$1((cx, qt) => {
  var Kn = require$$0$2, Zn = require$$1, td = require$$0$3, id = require$$5, rd = $a(), Xn = rd.version, nd = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
  function sd(t) {
    let e = {}, i = t.toString();
    i = i.replace(/\r\n?/mg, `
`);
    let r;
    for (; (r = nd.exec(i)) != null; ) {
      let n = r[1], s = r[2] || "";
      s = s.trim();
      let o = s[0];
      s = s.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), o === '"' && (s = s.replace(/\\n/g, `
`), s = s.replace(/\\r/g, "\r")), e[n] = s;
    }
    return e;
  }
  function od(t) {
    let e = Wa(t), i = Ue2.configDotenv({ path: e });
    if (!i.parsed) {
      let o = new Error(`MISSING_DATA: Cannot parse ${e} for an unknown reason`);
      throw o.code = "MISSING_DATA", o;
    }
    let r = za(t).split(","), n = r.length, s;
    for (let o = 0; o < n; o++) try {
      let c = r[o].trim(), u = cd(i, c);
      s = Ue2.decrypt(u.ciphertext, u.key);
      break;
    } catch (c) {
      if (o + 1 >= n) throw c;
    }
    return Ue2.parse(s);
  }
  function ad(t) {
    console.log(`[dotenv@${Xn}][INFO] ${t}`);
  }
  function ld(t) {
    console.log(`[dotenv@${Xn}][WARN] ${t}`);
  }
  function Kr2(t) {
    console.log(`[dotenv@${Xn}][DEBUG] ${t}`);
  }
  function za(t) {
    return t && t.DOTENV_KEY && t.DOTENV_KEY.length > 0 ? t.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : "";
  }
  function cd(t, e) {
    let i;
    try {
      i = new URL(e);
    } catch (c) {
      if (c.code === "ERR_INVALID_URL") {
        let u = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
        throw u.code = "INVALID_DOTENV_KEY", u;
      }
      throw c;
    }
    let r = i.password;
    if (!r) {
      let c = new Error("INVALID_DOTENV_KEY: Missing key part");
      throw c.code = "INVALID_DOTENV_KEY", c;
    }
    let n = i.searchParams.get("environment");
    if (!n) {
      let c = new Error("INVALID_DOTENV_KEY: Missing environment part");
      throw c.code = "INVALID_DOTENV_KEY", c;
    }
    let s = `DOTENV_VAULT_${n.toUpperCase()}`, o = t.parsed[s];
    if (!o) {
      let c = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);
      throw c.code = "NOT_FOUND_DOTENV_ENVIRONMENT", c;
    }
    return { ciphertext: o, key: r };
  }
  function Wa(t) {
    let e = null;
    if (t && t.path && t.path.length > 0) if (Array.isArray(t.path)) for (let i of t.path) Kn.existsSync(i) && (e = i.endsWith(".vault") ? i : `${i}.vault`);
    else e = t.path.endsWith(".vault") ? t.path : `${t.path}.vault`;
    else e = Zn.resolve(process.cwd(), ".env.vault");
    return Kn.existsSync(e) ? e : null;
  }
  function Ga(t) {
    return t[0] === "~" ? Zn.join(td.homedir(), t.slice(1)) : t;
  }
  function ud(t) {
    ad("Loading env from encrypted .env.vault");
    let e = Ue2._parseVault(t), i = process.env;
    return t && t.processEnv != null && (i = t.processEnv), Ue2.populate(i, e, t), { parsed: e };
  }
  function fd(t) {
    let e = Zn.resolve(process.cwd(), ".env"), i = "utf8", r = !!(t && t.debug);
    t && t.encoding ? i = t.encoding : r && Kr2("No encoding is specified. UTF-8 is used by default");
    let n = [e];
    if (t && t.path) if (!Array.isArray(t.path)) n = [Ga(t.path)];
    else {
      n = [];
      for (let u of t.path) n.push(Ga(u));
    }
    let s, o = {};
    for (let u of n) try {
      let h = Ue2.parse(Kn.readFileSync(u, { encoding: i }));
      Ue2.populate(o, h, t);
    } catch (h) {
      r && Kr2(`Failed to load ${u} ${h.message}`), s = h;
    }
    let c = process.env;
    return t && t.processEnv != null && (c = t.processEnv), Ue2.populate(c, o, t), s ? { parsed: o, error: s } : { parsed: o };
  }
  function hd(t) {
    if (za(t).length === 0) return Ue2.configDotenv(t);
    let e = Wa(t);
    return e ? Ue2._configVault(t) : (ld(`You set DOTENV_KEY but you are missing a .env.vault file at ${e}. Did you forget to build it?`), Ue2.configDotenv(t));
  }
  function pd(t, e) {
    let i = Buffer.from(e.slice(-64), "hex"), r = Buffer.from(t, "base64"), n = r.subarray(0, 12), s = r.subarray(-16);
    r = r.subarray(12, -16);
    try {
      let o = id.createDecipheriv("aes-256-gcm", i, n);
      return o.setAuthTag(s), `${o.update(r)}${o.final()}`;
    } catch (o) {
      let c = o instanceof RangeError, u = o.message === "Invalid key length", h = o.message === "Unsupported state or unable to authenticate data";
      if (c || u) {
        let l = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
        throw l.code = "INVALID_DOTENV_KEY", l;
      } else if (h) {
        let l = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
        throw l.code = "DECRYPTION_FAILED", l;
      } else throw o;
    }
  }
  function dd(t, e, i = {}) {
    let r = !!(i && i.debug), n = !!(i && i.override);
    if (typeof e != "object") {
      let s = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
      throw s.code = "OBJECT_REQUIRED", s;
    }
    for (let s of Object.keys(e)) Object.prototype.hasOwnProperty.call(t, s) ? (n === true && (t[s] = e[s]), r && Kr2(n === true ? `"${s}" is already defined and WAS overwritten` : `"${s}" is already defined and was NOT overwritten`)) : t[s] = e[s];
  }
  var Ue2 = { configDotenv: fd, _configVault: ud, _parseVault: od, config: hd, decrypt: pd, parse: sd, populate: dd };
  qt.exports.configDotenv = Ue2.configDotenv;
  qt.exports._configVault = Ue2._configVault;
  qt.exports._parseVault = Ue2._parseVault;
  qt.exports.config = Ue2.config;
  qt.exports.decrypt = Ue2.decrypt;
  qt.exports.parse = Ue2.parse;
  qt.exports.populate = Ue2.populate;
  qt.exports = Ue2;
});
var Za = E$1((Ka) => {
  var md = require$$6.parse, gd = { ftp: 21, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, vd = String.prototype.endsWith || function(t) {
    return t.length <= this.length && this.indexOf(t, this.length - t.length) !== -1;
  };
  function _d(t) {
    var e = typeof t == "string" ? md(t) : t || {}, i = e.protocol, r = e.host, n = e.port;
    if (typeof r != "string" || !r || typeof i != "string" || (i = i.split(":", 1)[0], r = r.replace(/:\d*$/, ""), n = parseInt(n) || gd[i] || 0, !xd(r, n))) return "";
    var s = ji("npm_config_" + i + "_proxy") || ji(i + "_proxy") || ji("npm_config_proxy") || ji("all_proxy");
    return s && s.indexOf("://") === -1 && (s = i + "://" + s), s;
  }
  function xd(t, e) {
    var i = (ji("npm_config_no_proxy") || ji("no_proxy")).toLowerCase();
    return i ? i === "*" ? false : i.split(/[,\s]/).every(function(r) {
      if (!r) return true;
      var n = r.match(/^(.+):(\d+)$/), s = n ? n[1] : r, o = n ? parseInt(n[2]) : 0;
      return o && o !== e ? true : /^[.*]/.test(s) ? (s.charAt(0) === "*" && (s = s.slice(1)), !vd.call(t, s)) : t !== s;
    }) : true;
  }
  function ji(t) {
    return process.env[t.toLowerCase()] || process.env[t.toUpperCase()] || "";
  }
  Ka.getProxyForUrl = _d;
});
var Xa = E$1((Jn) => {
  Object.defineProperty(Jn, "__esModule", { value: true });
  function yd(t) {
    return function(e, i) {
      return new Promise((r, n) => {
        t.call(this, e, i, (s, o) => {
          s ? n(s) : r(o);
        });
      });
    };
  }
  Jn.default = yd;
});
var ts = E$1((es, Qa) => {
  var Ja = es && es.__importDefault || function(t) {
    return t && t.__esModule ? t : { default: t };
  }, bd = require$$0$1, wd = Ja(Ui()), Ed = Ja(Xa()), cr = wd.default("agent-base");
  function Sd(t) {
    return !!t && typeof t.addRequest == "function";
  }
  function Qn() {
    let { stack: t } = new Error();
    return typeof t != "string" ? false : t.split(`
`).some((e) => e.indexOf("(https.js:") !== -1 || e.indexOf("node:https:") !== -1);
  }
  function Zr2(t, e) {
    return new Zr2.Agent(t, e);
  }
  (function(t) {
    class e extends bd.EventEmitter {
      constructor(r, n) {
        super();
        let s = n;
        typeof r == "function" ? this.callback = r : r && (s = r), this.timeout = null, s && typeof s.timeout == "number" && (this.timeout = s.timeout), this.maxFreeSockets = 1, this.maxSockets = 1, this.maxTotalSockets = 1 / 0, this.sockets = {}, this.freeSockets = {}, this.requests = {}, this.options = {};
      }
      get defaultPort() {
        return typeof this.explicitDefaultPort == "number" ? this.explicitDefaultPort : Qn() ? 443 : 80;
      }
      set defaultPort(r) {
        this.explicitDefaultPort = r;
      }
      get protocol() {
        return typeof this.explicitProtocol == "string" ? this.explicitProtocol : Qn() ? "https:" : "http:";
      }
      set protocol(r) {
        this.explicitProtocol = r;
      }
      callback(r, n, s) {
        throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
      }
      addRequest(r, n) {
        let s = Object.assign({}, n);
        typeof s.secureEndpoint != "boolean" && (s.secureEndpoint = Qn()), s.host == null && (s.host = "localhost"), s.port == null && (s.port = s.secureEndpoint ? 443 : 80), s.protocol == null && (s.protocol = s.secureEndpoint ? "https:" : "http:"), s.host && s.path && delete s.path, delete s.agent, delete s.hostname, delete s._defaultAgent, delete s.defaultPort, delete s.createConnection, r._last = true, r.shouldKeepAlive = false;
        let o = false, c = null, u = s.timeout || this.timeout, h = (v) => {
          r._hadError || (r.emit("error", v), r._hadError = true);
        }, l = () => {
          c = null, o = true;
          let v = new Error(`A "socket" was not created for HTTP request before ${u}ms`);
          v.code = "ETIMEOUT", h(v);
        }, d = (v) => {
          o || (c !== null && (clearTimeout(c), c = null), h(v));
        }, m = (v) => {
          if (o) return;
          if (c != null && (clearTimeout(c), c = null), Sd(v)) {
            cr("Callback returned another Agent instance %o", v.constructor.name), v.addRequest(r, s);
            return;
          }
          if (v) {
            v.once("free", () => {
              this.freeSocket(v, s);
            }), r.onSocket(v);
            return;
          }
          let g = new Error(`no Duplex stream was returned to agent-base for \`${r.method} ${r.path}\``);
          h(g);
        };
        if (typeof this.callback != "function") {
          h(new Error("`callback` is not defined"));
          return;
        }
        this.promisifiedCallback || (this.callback.length >= 3 ? (cr("Converting legacy callback function to promise"), this.promisifiedCallback = Ed.default(this.callback)) : this.promisifiedCallback = this.callback), typeof u == "number" && u > 0 && (c = setTimeout(l, u)), "port" in s && typeof s.port != "number" && (s.port = Number(s.port));
        try {
          cr("Resolving socket for %o request: %o", s.protocol, `${r.method} ${r.path}`), Promise.resolve(this.promisifiedCallback(r, s)).then(m, d);
        } catch (v) {
          Promise.reject(v).catch(d);
        }
      }
      freeSocket(r, n) {
        cr("Freeing socket %o %o", r.constructor.name, n), r.destroy();
      }
      destroy() {
        cr("Destroying agent %o", this.constructor.name);
      }
    }
    t.Agent = e, t.prototype = t.Agent.prototype;
  })(Zr2 || (Zr2 = {}));
  Qa.exports = Zr2;
});
var el = E$1((fr) => {
  var kd = fr && fr.__importDefault || function(t) {
    return t && t.__esModule ? t : { default: t };
  };
  Object.defineProperty(fr, "__esModule", { value: true });
  var Od = kd(Ui()), ur = Od.default("https-proxy-agent:parse-proxy-response");
  function Cd(t) {
    return new Promise((e, i) => {
      let r = 0, n = [];
      function s() {
        let d = t.read();
        d ? l(d) : t.once("readable", s);
      }
      function o() {
        t.removeListener("end", u), t.removeListener("error", h), t.removeListener("close", c), t.removeListener("readable", s);
      }
      function c(d) {
        ur("onclose had error %o", d);
      }
      function u() {
        ur("onend");
      }
      function h(d) {
        o(), ur("onerror %o", d), i(d);
      }
      function l(d) {
        n.push(d), r += d.length;
        let m = Buffer.concat(n, r);
        if (m.indexOf(`\r
\r
`) === -1) {
          ur("have not received end of HTTP headers yet..."), s();
          return;
        }
        let g = m.toString("ascii", 0, m.indexOf(`\r
`)), x = +g.split(" ")[1];
        ur("got proxy server response: %o", g), e({ statusCode: x, buffered: m });
      }
      t.on("error", h), t.on("close", c), t.on("end", u), s();
    });
  }
  fr.default = Cd;
});
var rl = E$1((mi) => {
  var Td = mi && mi.__awaiter || function(t, e, i, r) {
    function n(s) {
      return s instanceof i ? s : new i(function(o) {
        o(s);
      });
    }
    return new (i || (i = Promise))(function(s, o) {
      function c(l) {
        try {
          h(r.next(l));
        } catch (d) {
          o(d);
        }
      }
      function u(l) {
        try {
          h(r.throw(l));
        } catch (d) {
          o(d);
        }
      }
      function h(l) {
        l.done ? s(l.value) : n(l.value).then(c, u);
      }
      h((r = r.apply(t, e || [])).next());
    });
  }, qi = mi && mi.__importDefault || function(t) {
    return t && t.__esModule ? t : { default: t };
  };
  Object.defineProperty(mi, "__esModule", { value: true });
  var tl = qi(require$$8), il = qi(require$$9), Id = qi(require$$6), Ad = qi(require$$10$1), Bd = qi(Ui()), Rd = ts(), Pd = qi(el()), hr = Bd.default("https-proxy-agent:agent"), is = class extends Rd.Agent {
    constructor(e) {
      let i;
      if (typeof e == "string" ? i = Id.default.parse(e) : i = e, !i) throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
      hr("creating new HttpsProxyAgent instance: %o", i), super(i);
      let r = Object.assign({}, i);
      this.secureProxy = i.secureProxy || Fd(r.protocol), r.host = r.hostname || r.host, typeof r.port == "string" && (r.port = parseInt(r.port, 10)), !r.port && r.host && (r.port = this.secureProxy ? 443 : 80), this.secureProxy && !("ALPNProtocols" in r) && (r.ALPNProtocols = ["http 1.1"]), r.host && r.path && (delete r.path, delete r.pathname), this.proxy = r;
    }
    callback(e, i) {
      return Td(this, void 0, void 0, function* () {
        let { proxy: r, secureProxy: n } = this, s;
        n ? (hr("Creating `tls.Socket`: %o", r), s = il.default.connect(r)) : (hr("Creating `net.Socket`: %o", r), s = tl.default.connect(r));
        let o = Object.assign({}, r.headers), u = `CONNECT ${`${i.host}:${i.port}`} HTTP/1.1\r
`;
        r.auth && (o["Proxy-Authorization"] = `Basic ${Buffer.from(r.auth).toString("base64")}`);
        let { host: h, port: l, secureEndpoint: d } = i;
        Ld(l, d) || (h += `:${l}`), o.Host = h, o.Connection = "close";
        for (let y of Object.keys(o)) u += `${y}: ${o[y]}\r
`;
        let m = Pd.default(s);
        s.write(`${u}\r
`);
        let { statusCode: v, buffered: g } = yield m;
        if (v === 200) {
          if (e.once("socket", Nd), i.secureEndpoint) {
            let y = i.servername || i.host;
            if (!y) throw new Error('Could not determine "servername"');
            return hr("Upgrading socket connection to TLS"), il.default.connect(Object.assign(Object.assign({}, Md(i, "host", "hostname", "path", "port")), { socket: s, servername: y }));
          }
          return s;
        }
        s.destroy();
        let x = new tl.default.Socket();
        return x.readable = true, e.once("socket", (y) => {
          hr("replaying proxy buffer for failed request"), Ad.default(y.listenerCount("data") > 0), y.push(g), y.push(null);
        }), x;
      });
    }
  };
  mi.default = is;
  function Nd(t) {
    t.resume();
  }
  function Ld(t, e) {
    return !!(!e && t === 80 || e && t === 443);
  }
  function Fd(t) {
    return typeof t == "string" ? /^https:?$/i.test(t) : false;
  }
  function Md(t, ...e) {
    let i = {}, r;
    for (r in t) e.includes(r) || (i[r] = t[r]);
    return i;
  }
});
var sl = E$1((ss, nl) => {
  var Dd = ss && ss.__importDefault || function(t) {
    return t && t.__esModule ? t : { default: t };
  }, rs = Dd(rl());
  function ns(t) {
    return new rs.default(t);
  }
  (function(t) {
    t.HttpsProxyAgent = rs.default, t.prototype = rs.default.prototype;
  })(ns || (ns = {}));
  nl.exports = ns;
});
var ll = E$1((dx, Xr) => {
  function Ud(t) {
    var r = Math.floor, n = new Array(64), s = new Array(64), o = new Array(64), c = new Array(64), u, h, l, d, m = new Array(65535), v = new Array(65535), g = new Array(64), x = new Array(64), y = [], O = 0, B = 7, C = new Array(64), P = new Array(64), S = new Array(64), J = new Array(256), A = new Array(2048), z, k = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], L = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], X = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], j = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], se = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], M = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], $ = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], Y = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
    function Q(b) {
      for (var W = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], ee = 0; ee < 64; ee++) {
        var Z = r((W[ee] * b + 50) / 100);
        Z < 1 ? Z = 1 : Z > 255 && (Z = 255), n[k[ee]] = Z;
      }
      for (var oe = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], ae2 = 0; ae2 < 64; ae2++) {
        var xe = r((oe[ae2] * b + 50) / 100);
        xe < 1 ? xe = 1 : xe > 255 && (xe = 255), s[k[ae2]] = xe;
      }
      for (var ye = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379], Be2 = 0, Oe = 0; Oe < 8; Oe++) for (var N = 0; N < 8; N++) o[Be2] = 1 / (n[k[Be2]] * ye[Oe] * ye[N] * 8), c[Be2] = 1 / (s[k[Be2]] * ye[Oe] * ye[N] * 8), Be2++;
    }
    function V(b, W) {
      for (var ee = 0, Z = 0, oe = new Array(), ae2 = 1; ae2 <= 16; ae2++) {
        for (var xe = 1; xe <= b[ae2]; xe++) oe[W[Z]] = [], oe[W[Z]][0] = ee, oe[W[Z]][1] = ae2, Z++, ee++;
        ee *= 2;
      }
      return oe;
    }
    function we() {
      u = V(L, D), h = V(se, M), l = V(X, j), d = V($, Y);
    }
    function de() {
      for (var b = 1, W = 2, ee = 1; ee <= 15; ee++) {
        for (var Z = b; Z < W; Z++) v[32767 + Z] = ee, m[32767 + Z] = [], m[32767 + Z][1] = ee, m[32767 + Z][0] = Z;
        for (var oe = -(W - 1); oe <= -b; oe++) v[32767 + oe] = ee, m[32767 + oe] = [], m[32767 + oe][1] = ee, m[32767 + oe][0] = W - 1 + oe;
        b <<= 1, W <<= 1;
      }
    }
    function le() {
      for (var b = 0; b < 256; b++) A[b] = 19595 * b, A[b + 256 >> 0] = 38470 * b, A[b + 512 >> 0] = 7471 * b + 32768, A[b + 768 >> 0] = -11059 * b, A[b + 1024 >> 0] = -21709 * b, A[b + 1280 >> 0] = 32768 * b + 8421375, A[b + 1536 >> 0] = -27439 * b, A[b + 1792 >> 0] = -5329 * b;
    }
    function ce(b) {
      for (var W = b[0], ee = b[1] - 1; ee >= 0; ) W & 1 << ee && (O |= 1 << B), ee--, B--, B < 0 && (O == 255 ? (w(255), w(0)) : w(O), B = 7, O = 0);
    }
    function w(b) {
      y.push(b);
    }
    function K(b) {
      w(b >> 8 & 255), w(b & 255);
    }
    function Se(b, W) {
      var ee, Z, oe, ae2, xe, ye, Be2, Oe, N = 0, G, re = 8, Te = 64;
      for (G = 0; G < re; ++G) {
        ee = b[N], Z = b[N + 1], oe = b[N + 2], ae2 = b[N + 3], xe = b[N + 4], ye = b[N + 5], Be2 = b[N + 6], Oe = b[N + 7];
        var ne = ee + Oe, pe = ee - Oe, Ee = Z + Be2, te = Z - Be2, be = oe + ye, Me = oe - ye, Ce = ae2 + xe, at2 = ae2 - xe, gt = ne + Ce, Dt = ne - Ce, Wt = Ee + be, Yt = Ee - be;
        b[N] = gt + Wt, b[N + 4] = gt - Wt;
        var si = (Yt + Dt) * 0.707106781;
        b[N + 2] = Dt + si, b[N + 6] = Dt - si, gt = at2 + Me, Wt = Me + te, Yt = te + pe;
        var oi = (gt - Yt) * 0.382683433, Bi = 0.5411961 * gt + oi, ai = 1.306562965 * Yt + oi, li = Wt * 0.707106781, ci = pe + li, ui = pe - li;
        b[N + 5] = ui + Bi, b[N + 3] = ui - Bi, b[N + 1] = ci + ai, b[N + 7] = ci - ai, N += 8;
      }
      for (N = 0, G = 0; G < re; ++G) {
        ee = b[N], Z = b[N + 8], oe = b[N + 16], ae2 = b[N + 24], xe = b[N + 32], ye = b[N + 40], Be2 = b[N + 48], Oe = b[N + 56];
        var Ir = ee + Oe, lr = ee - Oe, Ar = Z + Be2, Br = Z - Be2, Rr = oe + ye, Pr = oe - ye, Nr = ae2 + xe, jn = ae2 - xe, fi = Ir + Nr, Ut = Ir - Nr, hi = Ar + Rr, Ri = Ar - Rr;
        b[N] = fi + hi, b[N + 32] = fi - hi;
        var Lr2 = (Ri + Ut) * 0.707106781;
        b[N + 16] = Ut + Lr2, b[N + 48] = Ut - Lr2, fi = jn + Pr, hi = Pr + Br, Ri = Br + lr;
        var Fr = (fi - Ri) * 0.382683433, Mr2 = 0.5411961 * fi + Fr, Dr = 1.306562965 * Ri + Fr, Bt = hi * 0.707106781, Ur = lr + Bt, jr = lr - Bt;
        b[N + 40] = jr + Mr2, b[N + 24] = jr - Mr2, b[N + 8] = Ur + Dr, b[N + 56] = Ur - Dr, N++;
      }
      var Pi;
      for (G = 0; G < Te; ++G) Pi = b[G] * W[G], g[G] = Pi > 0 ? Pi + 0.5 | 0 : Pi - 0.5 | 0;
      return g;
    }
    function _e() {
      K(65504), K(16), w(74), w(70), w(73), w(70), w(0), w(1), w(1), w(0), K(1), K(1), w(0), w(0);
    }
    function me(b) {
      if (b) {
        K(65505), b[0] === 69 && b[1] === 120 && b[2] === 105 && b[3] === 102 ? K(b.length + 2) : (K(b.length + 5 + 2), w(69), w(120), w(105), w(102), w(0));
        for (var W = 0; W < b.length; W++) w(b[W]);
      }
    }
    function ge(b, W) {
      K(65472), K(17), w(8), K(W), K(b), w(3), w(1), w(17), w(0), w(2), w(17), w(1), w(3), w(17), w(1);
    }
    function ue() {
      K(65499), K(132), w(0);
      for (var b = 0; b < 64; b++) w(n[b]);
      w(1);
      for (var W = 0; W < 64; W++) w(s[W]);
    }
    function H() {
      K(65476), K(418), w(0);
      for (var b = 0; b < 16; b++) w(L[b + 1]);
      for (var W = 0; W <= 11; W++) w(D[W]);
      w(16);
      for (var ee = 0; ee < 16; ee++) w(X[ee + 1]);
      for (var Z = 0; Z <= 161; Z++) w(j[Z]);
      w(1);
      for (var oe = 0; oe < 16; oe++) w(se[oe + 1]);
      for (var ae2 = 0; ae2 <= 11; ae2++) w(M[ae2]);
      w(17);
      for (var xe = 0; xe < 16; xe++) w($[xe + 1]);
      for (var ye = 0; ye <= 161; ye++) w(Y[ye]);
    }
    function F(b) {
      typeof b == "undefined" || b.constructor !== Array || b.forEach((W) => {
        if (typeof W == "string") {
          K(65534);
          var ee = W.length;
          K(ee + 2);
          var Z;
          for (Z = 0; Z < ee; Z++) w(W.charCodeAt(Z));
        }
      });
    }
    function ke() {
      K(65498), K(12), w(3), w(1), w(0), w(2), w(17), w(3), w(17), w(0), w(63), w(0);
    }
    function ie(b, W, ee, Z, oe) {
      for (var ae2 = oe[0], xe = oe[240], ye, Be2 = 16, Oe = 63, N = 64, G = Se(b, W), re = 0; re < N; ++re) x[k[re]] = G[re];
      var Te = x[0] - ee;
      ee = x[0], Te == 0 ? ce(Z[0]) : (ye = 32767 + Te, ce(Z[v[ye]]), ce(m[ye]));
      for (var ne = 63; ne > 0 && x[ne] == 0; ne--) ;
      if (ne == 0) return ce(ae2), ee;
      for (var pe = 1, Ee; pe <= ne; ) {
        for (var te = pe; x[pe] == 0 && pe <= ne; ++pe) ;
        var be = pe - te;
        if (be >= Be2) {
          Ee = be >> 4;
          for (var Me = 1; Me <= Ee; ++Me) ce(xe);
          be = be & 15;
        }
        ye = 32767 + x[pe], ce(oe[(be << 4) + v[ye]]), ce(m[ye]), pe++;
      }
      return ne != Oe && ce(ae2), ee;
    }
    function fe() {
      for (var b = String.fromCharCode, W = 0; W < 256; W++) J[W] = b(W);
    }
    this.encode = function(b, W) {
      (/* @__PURE__ */ new Date()).getTime();
      W && ot2(W), y = new Array(), O = 0, B = 7, K(65496), _e(), F(b.comments), me(b.exifBuffer), ue(), ge(b.width, b.height), H(), ke();
      var Z = 0, oe = 0, ae2 = 0;
      O = 0, B = 7, this.encode.displayName = "_encode_";
      for (var xe = b.data, ye = b.width, Be2 = b.height, Oe = ye * 4, N = ye * 3, G, re = 0, Te, ne, pe, Ee, te, be, Me, Ce; re < Be2; ) {
        for (G = 0; G < Oe; ) {
          for (Ee = Oe * re + G, te = Ee, be = -1, Me = 0, Ce = 0; Ce < 64; Ce++) Me = Ce >> 3, be = (Ce & 7) * 4, te = Ee + Me * Oe + be, re + Me >= Be2 && (te -= Oe * (re + 1 + Me - Be2)), G + be >= Oe && (te -= G + be - Oe + 4), Te = xe[te++], ne = xe[te++], pe = xe[te++], C[Ce] = (A[Te] + A[ne + 256 >> 0] + A[pe + 512 >> 0] >> 16) - 128, P[Ce] = (A[Te + 768 >> 0] + A[ne + 1024 >> 0] + A[pe + 1280 >> 0] >> 16) - 128, S[Ce] = (A[Te + 1280 >> 0] + A[ne + 1536 >> 0] + A[pe + 1792 >> 0] >> 16) - 128;
          Z = ie(C, o, Z, u, l), oe = ie(P, c, oe, h, d), ae2 = ie(S, c, ae2, h, d), G += 32;
        }
        re += 8;
      }
      if (B >= 0) {
        var at2 = [];
        at2[1] = B + 1, at2[0] = (1 << B + 1) - 1, ce(at2);
      }
      if (K(65497), typeof Xr == "undefined") return new Uint8Array(y);
      return Buffer.from(y);
    };
    function ot2(b) {
      if (b <= 0 && (b = 1), b > 100 && (b = 100), z != b) {
        var W = 0;
        b < 50 ? W = Math.floor(5e3 / b) : W = Math.floor(200 - b * 2), Q(W), z = b;
      }
    }
    function ct2() {
      var b = (/* @__PURE__ */ new Date()).getTime();
      t || (t = 50), fe(), we(), de(), le(), ot2(t);
      (/* @__PURE__ */ new Date()).getTime() - b;
    }
    ct2();
  }
  typeof Xr != "undefined" ? Xr.exports = ol : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].encode = ol);
  function ol(t, e) {
    typeof e == "undefined" && (e = 50);
    var i = new Ud(e), r = i.encode(t, e);
    return { data: r, width: t.width, height: t.height };
  }
});
var ul = E$1((mx, as) => {
  var os = function() {
    var e = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), i = 4017, r = 799, n = 3406, s = 2276, o = 1567, c = 3784, u = 5793, h = 2896;
    function l() {
    }
    function d(B, C) {
      for (var P = 0, S = [], J, A, z = 16; z > 0 && !B[z - 1]; ) z--;
      S.push({ children: [], index: 0 });
      var k = S[0], L;
      for (J = 0; J < z; J++) {
        for (A = 0; A < B[J]; A++) {
          for (k = S.pop(), k.children[k.index] = C[P]; k.index > 0; ) {
            if (S.length === 0) throw new Error("Could not recreate Huffman Table");
            k = S.pop();
          }
          for (k.index++, S.push(k); S.length <= J; ) S.push(L = { children: [], index: 0 }), k.children[k.index] = L.children, k = L;
          P++;
        }
        J + 1 < z && (S.push(L = { children: [], index: 0 }), k.children[k.index] = L.children, k = L);
      }
      return S[0].children;
    }
    function m(B, C, P, S, J, A, z, k, L, D) {
      P.precision;
      P.samplesPerLine;
      P.scanLines;
      var M = P.mcusPerLine, $ = P.progressive;
      P.maxH;
      P.maxV;
      var V = C, we = 0, de = 0;
      function le() {
        if (de > 0) return de--, we >> de & 1;
        if (we = B[C++], we == 255) {
          var N = B[C++];
          if (N) throw new Error("unexpected marker: " + (we << 8 | N).toString(16));
        }
        return de = 7, we >>> 7;
      }
      function ce(N) {
        for (var G = N, re; (re = le()) !== null; ) {
          if (G = G[re], typeof G == "number") return G;
          if (typeof G != "object") throw new Error("invalid huffman sequence");
        }
        return null;
      }
      function w(N) {
        for (var G = 0; N > 0; ) {
          var re = le();
          if (re === null) return;
          G = G << 1 | re, N--;
        }
        return G;
      }
      function K(N) {
        var G = w(N);
        return G >= 1 << N - 1 ? G : G + (-1 << N) + 1;
      }
      function Se(N, G) {
        var re = ce(N.huffmanTableDC), Te = re === 0 ? 0 : K(re);
        G[0] = N.pred += Te;
        for (var ne = 1; ne < 64; ) {
          var pe = ce(N.huffmanTableAC), Ee = pe & 15, te = pe >> 4;
          if (Ee === 0) {
            if (te < 15) break;
            ne += 16;
            continue;
          }
          ne += te;
          var be = e[ne];
          G[be] = K(Ee), ne++;
        }
      }
      function _e(N, G) {
        var re = ce(N.huffmanTableDC), Te = re === 0 ? 0 : K(re) << L;
        G[0] = N.pred += Te;
      }
      function me(N, G) {
        G[0] |= le() << L;
      }
      var ge = 0;
      function ue(N, G) {
        if (ge > 0) {
          ge--;
          return;
        }
        for (var re = A, Te = z; re <= Te; ) {
          var ne = ce(N.huffmanTableAC), pe = ne & 15, Ee = ne >> 4;
          if (pe === 0) {
            if (Ee < 15) {
              ge = w(Ee) + (1 << Ee) - 1;
              break;
            }
            re += 16;
            continue;
          }
          re += Ee;
          var te = e[re];
          G[te] = K(pe) * (1 << L), re++;
        }
      }
      var H = 0, F;
      function ke(N, G) {
        for (var re = A, Te = z, ne = 0; re <= Te; ) {
          var pe = e[re], Ee = G[pe] < 0 ? -1 : 1;
          switch (H) {
            case 0:
              var te = ce(N.huffmanTableAC), be = te & 15, ne = te >> 4;
              if (be === 0) ne < 15 ? (ge = w(ne) + (1 << ne), H = 4) : (ne = 16, H = 1);
              else {
                if (be !== 1) throw new Error("invalid ACn encoding");
                F = K(be), H = ne ? 2 : 3;
              }
              continue;
            case 1:
            case 2:
              G[pe] ? G[pe] += (le() << L) * Ee : (ne--, ne === 0 && (H = H == 2 ? 3 : 0));
              break;
            case 3:
              G[pe] ? G[pe] += (le() << L) * Ee : (G[pe] = F << L, H = 0);
              break;
            case 4:
              G[pe] && (G[pe] += (le() << L) * Ee);
              break;
          }
          re++;
        }
        H === 4 && (ge--, ge === 0 && (H = 0));
      }
      function ie(N, G, re, Te, ne) {
        var pe = re / M | 0, Ee = re % M, te = pe * N.v + Te, be = Ee * N.h + ne;
        N.blocks[te] === void 0 && D.tolerantDecoding || G(N, N.blocks[te][be]);
      }
      function fe(N, G, re) {
        var Te = re / N.blocksPerLine | 0, ne = re % N.blocksPerLine;
        N.blocks[Te] === void 0 && D.tolerantDecoding || G(N, N.blocks[Te][ne]);
      }
      var ot2 = S.length, ct2, b, W, ee, Z, oe;
      $ ? A === 0 ? oe = k === 0 ? _e : me : oe = k === 0 ? ue : ke : oe = Se;
      var ae2 = 0, xe, ye;
      ot2 == 1 ? ye = S[0].blocksPerLine * S[0].blocksPerColumn : ye = M * P.mcusPerColumn, J || (J = ye);
      for (var Be2, Oe; ae2 < ye; ) {
        for (b = 0; b < ot2; b++) S[b].pred = 0;
        if (ge = 0, ot2 == 1) for (ct2 = S[0], Z = 0; Z < J; Z++) fe(ct2, oe, ae2), ae2++;
        else for (Z = 0; Z < J; Z++) {
          for (b = 0; b < ot2; b++) for (ct2 = S[b], Be2 = ct2.h, Oe = ct2.v, W = 0; W < Oe; W++) for (ee = 0; ee < Be2; ee++) ie(ct2, oe, ae2, W, ee);
          if (ae2++, ae2 === ye) break;
        }
        if (ae2 === ye) do {
          if (B[C] === 255 && B[C + 1] !== 0) break;
          C += 1;
        } while (C < B.length - 2);
        if (de = 0, xe = B[C] << 8 | B[C + 1], xe < 65280) throw new Error("marker was not found");
        if (xe >= 65488 && xe <= 65495) C += 2;
        else break;
      }
      return C - V;
    }
    function v(B, C) {
      var P = [], S = C.blocksPerLine, J = C.blocksPerColumn, A = S << 3, z = new Int32Array(64), k = new Uint8Array(64);
      function L(V, we, de) {
        var le = C.quantizationTable, ce, w, K, Se, _e, me, ge, ue, H, F = de, ke;
        for (ke = 0; ke < 64; ke++) F[ke] = V[ke] * le[ke];
        for (ke = 0; ke < 8; ++ke) {
          var ie = 8 * ke;
          if (F[1 + ie] == 0 && F[2 + ie] == 0 && F[3 + ie] == 0 && F[4 + ie] == 0 && F[5 + ie] == 0 && F[6 + ie] == 0 && F[7 + ie] == 0) {
            H = u * F[0 + ie] + 512 >> 10, F[0 + ie] = H, F[1 + ie] = H, F[2 + ie] = H, F[3 + ie] = H, F[4 + ie] = H, F[5 + ie] = H, F[6 + ie] = H, F[7 + ie] = H;
            continue;
          }
          ce = u * F[0 + ie] + 128 >> 8, w = u * F[4 + ie] + 128 >> 8, K = F[2 + ie], Se = F[6 + ie], _e = h * (F[1 + ie] - F[7 + ie]) + 128 >> 8, ue = h * (F[1 + ie] + F[7 + ie]) + 128 >> 8, me = F[3 + ie] << 4, ge = F[5 + ie] << 4, H = ce - w + 1 >> 1, ce = ce + w + 1 >> 1, w = H, H = K * c + Se * o + 128 >> 8, K = K * o - Se * c + 128 >> 8, Se = H, H = _e - ge + 1 >> 1, _e = _e + ge + 1 >> 1, ge = H, H = ue + me + 1 >> 1, me = ue - me + 1 >> 1, ue = H, H = ce - Se + 1 >> 1, ce = ce + Se + 1 >> 1, Se = H, H = w - K + 1 >> 1, w = w + K + 1 >> 1, K = H, H = _e * s + ue * n + 2048 >> 12, _e = _e * n - ue * s + 2048 >> 12, ue = H, H = me * r + ge * i + 2048 >> 12, me = me * i - ge * r + 2048 >> 12, ge = H, F[0 + ie] = ce + ue, F[7 + ie] = ce - ue, F[1 + ie] = w + ge, F[6 + ie] = w - ge, F[2 + ie] = K + me, F[5 + ie] = K - me, F[3 + ie] = Se + _e, F[4 + ie] = Se - _e;
        }
        for (ke = 0; ke < 8; ++ke) {
          var fe = ke;
          if (F[8 + fe] == 0 && F[16 + fe] == 0 && F[24 + fe] == 0 && F[32 + fe] == 0 && F[40 + fe] == 0 && F[48 + fe] == 0 && F[56 + fe] == 0) {
            H = u * de[ke + 0] + 8192 >> 14, F[0 + fe] = H, F[8 + fe] = H, F[16 + fe] = H, F[24 + fe] = H, F[32 + fe] = H, F[40 + fe] = H, F[48 + fe] = H, F[56 + fe] = H;
            continue;
          }
          ce = u * F[0 + fe] + 2048 >> 12, w = u * F[32 + fe] + 2048 >> 12, K = F[16 + fe], Se = F[48 + fe], _e = h * (F[8 + fe] - F[56 + fe]) + 2048 >> 12, ue = h * (F[8 + fe] + F[56 + fe]) + 2048 >> 12, me = F[24 + fe], ge = F[40 + fe], H = ce - w + 1 >> 1, ce = ce + w + 1 >> 1, w = H, H = K * c + Se * o + 2048 >> 12, K = K * o - Se * c + 2048 >> 12, Se = H, H = _e - ge + 1 >> 1, _e = _e + ge + 1 >> 1, ge = H, H = ue + me + 1 >> 1, me = ue - me + 1 >> 1, ue = H, H = ce - Se + 1 >> 1, ce = ce + Se + 1 >> 1, Se = H, H = w - K + 1 >> 1, w = w + K + 1 >> 1, K = H, H = _e * s + ue * n + 2048 >> 12, _e = _e * n - ue * s + 2048 >> 12, ue = H, H = me * r + ge * i + 2048 >> 12, me = me * i - ge * r + 2048 >> 12, ge = H, F[0 + fe] = ce + ue, F[56 + fe] = ce - ue, F[8 + fe] = w + ge, F[48 + fe] = w - ge, F[16 + fe] = K + me, F[40 + fe] = K - me, F[24 + fe] = Se + _e, F[32 + fe] = Se - _e;
        }
        for (ke = 0; ke < 64; ++ke) {
          var ot2 = 128 + (F[ke] + 8 >> 4);
          we[ke] = ot2 < 0 ? 0 : ot2 > 255 ? 255 : ot2;
        }
      }
      O(A * J * 8);
      for (var D, X, j = 0; j < J; j++) {
        var se = j << 3;
        for (D = 0; D < 8; D++) P.push(new Uint8Array(A));
        for (var M = 0; M < S; M++) {
          L(C.blocks[j][M], k, z);
          var $ = 0, Y = M << 3;
          for (X = 0; X < 8; X++) {
            var Q = P[se + X];
            for (D = 0; D < 8; D++) Q[Y + D] = k[$++];
          }
        }
      }
      return P;
    }
    function g(B) {
      return B < 0 ? 0 : B > 255 ? 255 : B;
    }
    l.prototype = { load: function(C) {
      var P = new XMLHttpRequest();
      P.open("GET", C, true), P.responseType = "arraybuffer", P.onload = (function() {
        var S = new Uint8Array(P.response || P.mozResponseArrayBuffer);
        this.parse(S), this.onload && this.onload();
      }).bind(this), P.send(null);
    }, parse: function(C) {
      var P = this.opts.maxResolutionInMP * 1e3 * 1e3, S = 0;
      C.length;
      function A() {
        var te = C[S] << 8 | C[S + 1];
        return S += 2, te;
      }
      function z() {
        var te = A(), be = C.subarray(S, S + te - 2);
        return S += be.length, be;
      }
      function k(te) {
        var be = 1, Me = 1, Ce, at2;
        for (at2 in te.components) te.components.hasOwnProperty(at2) && (Ce = te.components[at2], be < Ce.h && (be = Ce.h), Me < Ce.v && (Me = Ce.v));
        var gt = Math.ceil(te.samplesPerLine / 8 / be), Dt = Math.ceil(te.scanLines / 8 / Me);
        for (at2 in te.components) if (te.components.hasOwnProperty(at2)) {
          Ce = te.components[at2];
          var Wt = Math.ceil(Math.ceil(te.samplesPerLine / 8) * Ce.h / be), Yt = Math.ceil(Math.ceil(te.scanLines / 8) * Ce.v / Me), si = gt * Ce.h, oi = Dt * Ce.v, Bi = oi * si, ai = [];
          O(Bi * 256);
          for (var li = 0; li < oi; li++) {
            for (var ci = [], ui = 0; ui < si; ui++) ci.push(new Int32Array(64));
            ai.push(ci);
          }
          Ce.blocksPerLine = Wt, Ce.blocksPerColumn = Yt, Ce.blocks = ai;
        }
        te.maxH = be, te.maxV = Me, te.mcusPerLine = gt, te.mcusPerColumn = Dt;
      }
      var L = null, D = null, j, se, M = [], $ = [], Y = [], Q = [], V = A(), we = -1;
      if (this.comments = [], V != 65496) throw new Error("SOI not found");
      for (V = A(); V != 65497; ) {
        var de, le;
        switch (V) {
          case 65280:
            break;
          case 65504:
          case 65505:
          case 65506:
          case 65507:
          case 65508:
          case 65509:
          case 65510:
          case 65511:
          case 65512:
          case 65513:
          case 65514:
          case 65515:
          case 65516:
          case 65517:
          case 65518:
          case 65519:
          case 65534:
            var w = z();
            if (V === 65534) {
              var K = String.fromCharCode.apply(null, w);
              this.comments.push(K);
            }
            V === 65504 && w[0] === 74 && w[1] === 70 && w[2] === 73 && w[3] === 70 && w[4] === 0 && (L = { version: { major: w[5], minor: w[6] }, densityUnits: w[7], xDensity: w[8] << 8 | w[9], yDensity: w[10] << 8 | w[11], thumbWidth: w[12], thumbHeight: w[13], thumbData: w.subarray(14, 14 + 3 * w[12] * w[13]) }), V === 65505 && w[0] === 69 && w[1] === 120 && w[2] === 105 && w[3] === 102 && w[4] === 0 && (this.exifBuffer = w.subarray(5, w.length)), V === 65518 && w[0] === 65 && w[1] === 100 && w[2] === 111 && w[3] === 98 && w[4] === 101 && w[5] === 0 && (D = { version: w[6], flags0: w[7] << 8 | w[8], flags1: w[9] << 8 | w[10], transformCode: w[11] });
            break;
          case 65499:
            for (var Se = A(), _e = Se + S - 2; S < _e; ) {
              var me = C[S++];
              O(256);
              var ge = new Int32Array(64);
              if (me >> 4) if (me >> 4 === 1) for (le = 0; le < 64; le++) {
                var ue = e[le];
                ge[ue] = A();
              }
              else throw new Error("DQT: invalid table spec");
              else for (le = 0; le < 64; le++) {
                var ue = e[le];
                ge[ue] = C[S++];
              }
              M[me & 15] = ge;
            }
            break;
          case 65472:
          case 65473:
          case 65474:
            A(), j = {}, j.extended = V === 65473, j.progressive = V === 65474, j.precision = C[S++], j.scanLines = A(), j.samplesPerLine = A(), j.components = {}, j.componentsOrder = [];
            var H = j.scanLines * j.samplesPerLine;
            if (H > P) {
              var F = Math.ceil((H - P) / 1e6);
              throw new Error(`maxResolutionInMP limit exceeded by ${F}MP`);
            }
            var ke = C[S++], ie;
            for (de = 0; de < ke; de++) {
              ie = C[S];
              var ct2 = C[S + 1] >> 4, b = C[S + 1] & 15, W = C[S + 2];
              if (ct2 <= 0 || b <= 0) throw new Error("Invalid sampling factor, expected values above 0");
              j.componentsOrder.push(ie), j.components[ie] = { h: ct2, v: b, quantizationIdx: W }, S += 3;
            }
            k(j), $.push(j);
            break;
          case 65476:
            var ee = A();
            for (de = 2; de < ee; ) {
              var Z = C[S++], oe = new Uint8Array(16), ae2 = 0;
              for (le = 0; le < 16; le++, S++) ae2 += oe[le] = C[S];
              O(16 + ae2);
              var xe = new Uint8Array(ae2);
              for (le = 0; le < ae2; le++, S++) xe[le] = C[S];
              de += 17 + ae2, (Z >> 4 ? Y : Q)[Z & 15] = d(oe, xe);
            }
            break;
          case 65501:
            A(), se = A();
            break;
          case 65500:
            A(), A();
            break;
          case 65498:
            A();
            var Be2 = C[S++], Oe = [], N;
            for (de = 0; de < Be2; de++) {
              N = j.components[C[S++]];
              var G = C[S++];
              N.huffmanTableDC = Q[G >> 4], N.huffmanTableAC = Y[G & 15], Oe.push(N);
            }
            var re = C[S++], Te = C[S++], ne = C[S++], pe = m(C, S, j, Oe, se, re, Te, ne >> 4, ne & 15, this.opts);
            S += pe;
            break;
          case 65535:
            C[S] !== 255 && S--;
            break;
          default:
            if (C[S - 3] == 255 && C[S - 2] >= 192 && C[S - 2] <= 254) {
              S -= 3;
              break;
            } else if (V === 224 || V == 225) {
              if (we !== -1) throw new Error(`first unknown JPEG marker at offset ${we.toString(16)}, second unknown JPEG marker ${V.toString(16)} at offset ${(S - 1).toString(16)}`);
              we = S - 1;
              let te = A();
              if (C[S + te - 2] === 255) {
                S += te - 2;
                break;
              }
            }
            throw new Error("unknown JPEG marker " + V.toString(16));
        }
        V = A();
      }
      if ($.length != 1) throw new Error("only single frame JPEGs supported");
      for (var de = 0; de < $.length; de++) {
        var Ee = $[de].components;
        for (var le in Ee) Ee[le].quantizationTable = M[Ee[le].quantizationIdx], delete Ee[le].quantizationIdx;
      }
      this.width = j.samplesPerLine, this.height = j.scanLines, this.jfif = L, this.adobe = D, this.components = [];
      for (var de = 0; de < j.componentsOrder.length; de++) {
        var N = j.components[j.componentsOrder[de]];
        this.components.push({ lines: v(j, N), scaleX: N.h / j.maxH, scaleY: N.v / j.maxV });
      }
    }, getData: function(C, P) {
      var S = this.width / C, J = this.height / P, A, z, k, L, D, X, j, se, M, $, Y = 0, Q, V, we, de, le, ce, w, K, Se, _e, me, ge = C * P * this.components.length;
      O(ge);
      var ue = new Uint8Array(ge);
      switch (this.components.length) {
        case 1:
          for (A = this.components[0], $ = 0; $ < P; $++) for (D = A.lines[0 | $ * A.scaleY * J], M = 0; M < C; M++) Q = D[0 | M * A.scaleX * S], ue[Y++] = Q;
          break;
        case 2:
          for (A = this.components[0], z = this.components[1], $ = 0; $ < P; $++) for (D = A.lines[0 | $ * A.scaleY * J], X = z.lines[0 | $ * z.scaleY * J], M = 0; M < C; M++) Q = D[0 | M * A.scaleX * S], ue[Y++] = Q, Q = X[0 | M * z.scaleX * S], ue[Y++] = Q;
          break;
        case 3:
          for (me = true, this.adobe && this.adobe.transformCode ? me = true : typeof this.opts.colorTransform != "undefined" && (me = !!this.opts.colorTransform), A = this.components[0], z = this.components[1], k = this.components[2], $ = 0; $ < P; $++) for (D = A.lines[0 | $ * A.scaleY * J], X = z.lines[0 | $ * z.scaleY * J], j = k.lines[0 | $ * k.scaleY * J], M = 0; M < C; M++) me ? (Q = D[0 | M * A.scaleX * S], V = X[0 | M * z.scaleX * S], we = j[0 | M * k.scaleX * S], K = g(Q + 1.402 * (we - 128)), Se = g(Q - 0.3441363 * (V - 128) - 0.71413636 * (we - 128)), _e = g(Q + 1.772 * (V - 128))) : (K = D[0 | M * A.scaleX * S], Se = X[0 | M * z.scaleX * S], _e = j[0 | M * k.scaleX * S]), ue[Y++] = K, ue[Y++] = Se, ue[Y++] = _e;
          break;
        case 4:
          if (!this.adobe) throw new Error("Unsupported color mode (4 components)");
          for (me = false, this.adobe && this.adobe.transformCode ? me = true : typeof this.opts.colorTransform != "undefined" && (me = !!this.opts.colorTransform), A = this.components[0], z = this.components[1], k = this.components[2], L = this.components[3], $ = 0; $ < P; $++) for (D = A.lines[0 | $ * A.scaleY * J], X = z.lines[0 | $ * z.scaleY * J], j = k.lines[0 | $ * k.scaleY * J], se = L.lines[0 | $ * L.scaleY * J], M = 0; M < C; M++) me ? (Q = D[0 | M * A.scaleX * S], V = X[0 | M * z.scaleX * S], we = j[0 | M * k.scaleX * S], de = se[0 | M * L.scaleX * S], le = 255 - g(Q + 1.402 * (we - 128)), ce = 255 - g(Q - 0.3441363 * (V - 128) - 0.71413636 * (we - 128)), w = 255 - g(Q + 1.772 * (V - 128))) : (le = D[0 | M * A.scaleX * S], ce = X[0 | M * z.scaleX * S], w = j[0 | M * k.scaleX * S], de = se[0 | M * L.scaleX * S]), ue[Y++] = 255 - le, ue[Y++] = 255 - ce, ue[Y++] = 255 - w, ue[Y++] = 255 - de;
          break;
        default:
          throw new Error("Unsupported color mode");
      }
      return ue;
    }, copyToImageData: function(C, P) {
      var S = C.width, J = C.height, A = C.data, z = this.getData(S, J), k = 0, L = 0, D, X, j, se, M, $, Y, Q, V;
      switch (this.components.length) {
        case 1:
          for (X = 0; X < J; X++) for (D = 0; D < S; D++) j = z[k++], A[L++] = j, A[L++] = j, A[L++] = j, P && (A[L++] = 255);
          break;
        case 3:
          for (X = 0; X < J; X++) for (D = 0; D < S; D++) Y = z[k++], Q = z[k++], V = z[k++], A[L++] = Y, A[L++] = Q, A[L++] = V, P && (A[L++] = 255);
          break;
        case 4:
          for (X = 0; X < J; X++) for (D = 0; D < S; D++) M = z[k++], $ = z[k++], j = z[k++], se = z[k++], Y = 255 - g(M * (1 - se / 255) + se), Q = 255 - g($ * (1 - se / 255) + se), V = 255 - g(j * (1 - se / 255) + se), A[L++] = Y, A[L++] = Q, A[L++] = V, P && (A[L++] = 255);
          break;
        default:
          throw new Error("Unsupported color mode");
      }
    } };
    var x = 0, y = 0;
    function O(B = 0) {
      var C = x + B;
      if (C > y) {
        var P = Math.ceil((C - y) / 1024 / 1024);
        throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${P}MB`);
      }
      x = C;
    }
    return l.resetMaxMemoryUsage = function(B) {
      x = 0, y = B;
    }, l.getBytesAllocated = function() {
      return x;
    }, l.requestMemoryAllocation = O, l;
  }();
  typeof as != "undefined" ? as.exports = cl : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].decode = cl);
  function cl(t, e = {}) {
    var i = { colorTransform: void 0, useTArray: false, formatAsRGBA: true, tolerantDecoding: true, maxResolutionInMP: 100, maxMemoryUsageInMB: 512 }, r = { ...i, ...e }, n = new Uint8Array(t), s = new os();
    s.opts = r, os.resetMaxMemoryUsage(r.maxMemoryUsageInMB * 1024 * 1024), s.parse(n);
    var o = r.formatAsRGBA ? 4 : 3, c = s.width * s.height * o;
    try {
      os.requestMemoryAllocation(c);
      var u = { width: s.width, height: s.height, exifBuffer: s.exifBuffer, data: r.useTArray ? new Uint8Array(c) : Buffer.alloc(c) };
      s.comments.length > 0 && (u.comments = s.comments);
    } catch (h) {
      throw h instanceof RangeError ? new Error("Could not allocate enough memory for the image. Required: " + c) : h instanceof ReferenceError && h.message === "Buffer is not defined" ? new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true") : h;
    }
    return s.copyToImageData(u, r.formatAsRGBA), u;
  }
});
var hl = E$1((gx, fl) => {
  var jd = ll(), qd = ul();
  fl.exports = { encode: jd, decode: qd };
});
var dl = E$1((vx, pl) => {
  function Jr() {
    this._types = /* @__PURE__ */ Object.create(null), this._extensions = /* @__PURE__ */ Object.create(null);
    for (let t = 0; t < arguments.length; t++) this.define(arguments[t]);
    this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
  }
  Jr.prototype.define = function(t, e) {
    for (let i in t) {
      let r = t[i].map(function(n) {
        return n.toLowerCase();
      });
      i = i.toLowerCase();
      for (let n = 0; n < r.length; n++) {
        let s = r[n];
        if (s[0] !== "*") {
          if (!e && s in this._types) throw new Error('Attempt to change mapping for "' + s + '" extension from "' + this._types[s] + '" to "' + i + '". Pass `force=true` to allow this, otherwise remove "' + s + '" from the list of extensions for "' + i + '".');
          this._types[s] = i;
        }
      }
      if (e || !this._extensions[i]) {
        let n = r[0];
        this._extensions[i] = n[0] !== "*" ? n : n.substr(1);
      }
    }
  };
  Jr.prototype.getType = function(t) {
    t = String(t);
    let e = t.replace(/^.*[/\\]/, "").toLowerCase(), i = e.replace(/^.*\./, "").toLowerCase(), r = e.length < t.length;
    return (i.length < e.length - 1 || !r) && this._types[i] || null;
  };
  Jr.prototype.getExtension = function(t) {
    return t = /^\s*([^;\s]*)/.test(t) && RegExp.$1, t && this._extensions[t.toLowerCase()] || null;
  };
  pl.exports = Jr;
});
var gl = E$1((_x, ml) => {
  ml.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
});
var _l = E$1((xx, vl) => {
  vl.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
});
var yl = E$1((yx, xl) => {
  var Vd = dl();
  xl.exports = new Vd(gl(), _l());
});
var wl = E$1((bx, bl) => {
  bl.exports = function(t, e) {
    for (var i = [], r = 0; r < t.length; r++) {
      var n = e(t[r], r);
      Hd(n) ? i.push.apply(i, n) : i.push(n);
    }
    return i;
  };
  var Hd = Array.isArray || function(t) {
    return Object.prototype.toString.call(t) === "[object Array]";
  };
});
var Cl = E$1((wx, Ol) => {
  Ol.exports = Sl;
  function Sl(t, e, i) {
    t instanceof RegExp && (t = El(t, i)), e instanceof RegExp && (e = El(e, i));
    var r = kl(t, e, i);
    return r && { start: r[0], end: r[1], pre: i.slice(0, r[0]), body: i.slice(r[0] + t.length, r[1]), post: i.slice(r[1] + e.length) };
  }
  function El(t, e) {
    var i = e.match(t);
    return i ? i[0] : null;
  }
  Sl.range = kl;
  function kl(t, e, i) {
    var r, n, s, o, c, u = i.indexOf(t), h = i.indexOf(e, u + 1), l = u;
    if (u >= 0 && h > 0) {
      if (t === e) return [u, h];
      for (r = [], s = i.length; l >= 0 && !c; ) l == u ? (r.push(l), u = i.indexOf(t, l + 1)) : r.length == 1 ? c = [r.pop(), h] : (n = r.pop(), n < s && (s = n, o = h), h = i.indexOf(e, l + 1)), l = u < h && u >= 0 ? u : h;
      r.length && (c = [s, o]);
    }
    return c;
  }
});
var Ll = E$1((Ex, Nl) => {
  var $d = wl(), Tl = Cl();
  Nl.exports = Wd;
  var Il = "\0SLASH" + Math.random() + "\0", Al = "\0OPEN" + Math.random() + "\0", cs = "\0CLOSE" + Math.random() + "\0", Bl = "\0COMMA" + Math.random() + "\0", Rl = "\0PERIOD" + Math.random() + "\0";
  function ls(t) {
    return parseInt(t, 10) == t ? parseInt(t, 10) : t.charCodeAt(0);
  }
  function Gd(t) {
    return t.split("\\\\").join(Il).split("\\{").join(Al).split("\\}").join(cs).split("\\,").join(Bl).split("\\.").join(Rl);
  }
  function zd(t) {
    return t.split(Il).join("\\").split(Al).join("{").split(cs).join("}").split(Bl).join(",").split(Rl).join(".");
  }
  function Pl(t) {
    if (!t) return [""];
    var e = [], i = Tl("{", "}", t);
    if (!i) return t.split(",");
    var r = i.pre, n = i.body, s = i.post, o = r.split(",");
    o[o.length - 1] += "{" + n + "}";
    var c = Pl(s);
    return s.length && (o[o.length - 1] += c.shift(), o.push.apply(o, c)), e.push.apply(e, o), e;
  }
  function Wd(t) {
    return t ? (t.substr(0, 2) === "{}" && (t = "\\{\\}" + t.substr(2)), Vi(Gd(t), true).map(zd)) : [];
  }
  function Yd(t) {
    return "{" + t + "}";
  }
  function Kd(t) {
    return /^-?0\d/.test(t);
  }
  function Zd(t, e) {
    return t <= e;
  }
  function Xd(t, e) {
    return t >= e;
  }
  function Vi(t, e) {
    var i = [], r = Tl("{", "}", t);
    if (!r || /\$$/.test(r.pre)) return [t];
    var n = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r.body), s = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r.body), o = n || s, c = r.body.indexOf(",") >= 0;
    if (!o && !c) return r.post.match(/,.*\}/) ? (t = r.pre + "{" + r.body + cs + r.post, Vi(t)) : [t];
    var u;
    if (o) u = r.body.split(/\.\./);
    else if (u = Pl(r.body), u.length === 1 && (u = Vi(u[0], false).map(Yd), u.length === 1)) {
      var l = r.post.length ? Vi(r.post, false) : [""];
      return l.map(function(D) {
        return r.pre + u[0] + D;
      });
    }
    var h = r.pre, l = r.post.length ? Vi(r.post, false) : [""], d;
    if (o) {
      var m = ls(u[0]), v = ls(u[1]), g = Math.max(u[0].length, u[1].length), x = u.length == 3 ? Math.abs(ls(u[2])) : 1, y = Zd, O = v < m;
      O && (x *= -1, y = Xd);
      var B = u.some(Kd);
      d = [];
      for (var C = m; y(C, v); C += x) {
        var P;
        if (s) P = String.fromCharCode(C), P === "\\" && (P = "");
        else if (P = String(C), B) {
          var S = g - P.length;
          if (S > 0) {
            var J = new Array(S + 1).join("0");
            C < 0 ? P = "-" + J + P.slice(1) : P = J + P;
          }
        }
        d.push(P);
      }
    } else d = $d(u, function(L) {
      return Vi(L, false);
    });
    for (var A = 0; A < d.length; A++) for (var z = 0; z < l.length; z++) {
      var k = h + d[A] + l[z];
      (!e || o || k) && i.push(k);
    }
    return i;
  }
});
var ql = E$1((Sx, jl) => {
  jl.exports = pt2;
  pt2.Minimatch = Ye;
  var pr = function() {
    try {
      return require("path");
    } catch {
    }
  }() || { sep: "/" };
  pt2.sep = pr.sep;
  var hs = pt2.GLOBSTAR = Ye.GLOBSTAR = {}, Jd = Ll(), Fl = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } }, us = "[^/]", fs2 = us + "*?", Qd = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?", em = "(?:(?!(?:\\/|^)\\.).)*?", Ml = tm("().*{}+?[]^$\\!");
  function tm(t) {
    return t.split("").reduce(function(e, i) {
      return e[i] = true, e;
    }, {});
  }
  var Dl = /\/+/;
  pt2.filter = im;
  function im(t, e) {
    return e = e || {}, function(i, r, n) {
      return pt2(i, t, e);
    };
  }
  function Zt(t, e) {
    e = e || {};
    var i = {};
    return Object.keys(t).forEach(function(r) {
      i[r] = t[r];
    }), Object.keys(e).forEach(function(r) {
      i[r] = e[r];
    }), i;
  }
  pt2.defaults = function(t) {
    if (!t || typeof t != "object" || !Object.keys(t).length) return pt2;
    var e = pt2, i = function(n, s, o) {
      return e(n, s, Zt(t, o));
    };
    return i.Minimatch = function(n, s) {
      return new e.Minimatch(n, Zt(t, s));
    }, i.Minimatch.defaults = function(n) {
      return e.defaults(Zt(t, n)).Minimatch;
    }, i.filter = function(n, s) {
      return e.filter(n, Zt(t, s));
    }, i.defaults = function(n) {
      return e.defaults(Zt(t, n));
    }, i.makeRe = function(n, s) {
      return e.makeRe(n, Zt(t, s));
    }, i.braceExpand = function(n, s) {
      return e.braceExpand(n, Zt(t, s));
    }, i.match = function(r, n, s) {
      return e.match(r, n, Zt(t, s));
    }, i;
  };
  Ye.defaults = function(t) {
    return pt2.defaults(t).Minimatch;
  };
  function pt2(t, e, i) {
    return en(e), i || (i = {}), !i.nocomment && e.charAt(0) === "#" ? false : new Ye(e, i).match(t);
  }
  function Ye(t, e) {
    if (!(this instanceof Ye)) return new Ye(t, e);
    en(t), e || (e = {}), t = t.trim(), !e.allowWindowsEscape && pr.sep !== "/" && (t = t.split(pr.sep).join("/")), this.options = e, this.set = [], this.pattern = t, this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!e.partial, this.make();
  }
  Ye.prototype.debug = function() {
  };
  Ye.prototype.make = rm;
  function rm() {
    var t = this.pattern, e = this.options;
    if (!e.nocomment && t.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!t) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    var i = this.globSet = this.braceExpand();
    e.debug && (this.debug = function() {
      console.error.apply(console, arguments);
    }), this.debug(this.pattern, i), i = this.globParts = i.map(function(r) {
      return r.split(Dl);
    }), this.debug(this.pattern, i), i = i.map(function(r, n, s) {
      return r.map(this.parse, this);
    }, this), this.debug(this.pattern, i), i = i.filter(function(r) {
      return r.indexOf(false) === -1;
    }), this.debug(this.pattern, i), this.set = i;
  }
  Ye.prototype.parseNegate = nm;
  function nm() {
    var t = this.pattern, e = false, i = this.options, r = 0;
    if (!i.nonegate) {
      for (var n = 0, s = t.length; n < s && t.charAt(n) === "!"; n++) e = !e, r++;
      r && (this.pattern = t.substr(r)), this.negate = e;
    }
  }
  pt2.braceExpand = function(t, e) {
    return Ul(t, e);
  };
  Ye.prototype.braceExpand = Ul;
  function Ul(t, e) {
    return e || (this instanceof Ye ? e = this.options : e = {}), t = typeof t == "undefined" ? this.pattern : t, en(t), e.nobrace || !/\{(?:(?!\{).)*\}/.test(t) ? [t] : Jd(t);
  }
  var sm = 1024 * 64, en = function(t) {
    if (typeof t != "string") throw new TypeError("invalid pattern");
    if (t.length > sm) throw new TypeError("pattern is too long");
  };
  Ye.prototype.parse = om;
  var Qr = {};
  function om(t, e) {
    en(t);
    var i = this.options;
    if (t === "**") if (i.noglobstar) t = "*";
    else return hs;
    if (t === "") return "";
    var r = "", n = !!i.nocase, s = false, o = [], c = [], u, h = false, l = -1, d = -1, m = t.charAt(0) === "." ? "" : i.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", v = this;
    function g() {
      if (u) {
        switch (u) {
          case "*":
            r += fs2, n = true;
            break;
          case "?":
            r += us, n = true;
            break;
          default:
            r += "\\" + u;
            break;
        }
        v.debug("clearStateChar %j %j", u, r), u = false;
      }
    }
    for (var x = 0, y = t.length, O; x < y && (O = t.charAt(x)); x++) {
      if (this.debug("%s	%s %s %j", t, x, r, O), s && Ml[O]) {
        r += "\\" + O, s = false;
        continue;
      }
      switch (O) {
        case "/":
          return false;
        case "\\":
          g(), s = true;
          continue;
        case "?":
        case "*":
        case "+":
        case "@":
        case "!":
          if (this.debug("%s	%s %s %j <-- stateChar", t, x, r, O), h) {
            this.debug("  in class"), O === "!" && x === d + 1 && (O = "^"), r += O;
            continue;
          }
          v.debug("call clearStateChar %j", u), g(), u = O, i.noext && g();
          continue;
        case "(":
          if (h) {
            r += "(";
            continue;
          }
          if (!u) {
            r += "\\(";
            continue;
          }
          o.push({ type: u, start: x - 1, reStart: r.length, open: Fl[u].open, close: Fl[u].close }), r += u === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", u, r), u = false;
          continue;
        case ")":
          if (h || !o.length) {
            r += "\\)";
            continue;
          }
          g(), n = true;
          var B = o.pop();
          r += B.close, B.type === "!" && c.push(B), B.reEnd = r.length;
          continue;
        case "|":
          if (h || !o.length || s) {
            r += "\\|", s = false;
            continue;
          }
          g(), r += "|";
          continue;
        case "[":
          if (g(), h) {
            r += "\\" + O;
            continue;
          }
          h = true, d = x, l = r.length, r += O;
          continue;
        case "]":
          if (x === d + 1 || !h) {
            r += "\\" + O, s = false;
            continue;
          }
          var C = t.substring(d + 1, x);
          try {
            RegExp("[" + C + "]");
          } catch {
            var P = this.parse(C, Qr);
            r = r.substr(0, l) + "\\[" + P[0] + "\\]", n = n || P[1], h = false;
            continue;
          }
          n = true, h = false, r += O;
          continue;
        default:
          g(), s ? s = false : Ml[O] && !(O === "^" && h) && (r += "\\"), r += O;
      }
    }
    for (h && (C = t.substr(d + 1), P = this.parse(C, Qr), r = r.substr(0, l) + "\\[" + P[0], n = n || P[1]), B = o.pop(); B; B = o.pop()) {
      var S = r.slice(B.reStart + B.open.length);
      this.debug("setting tail", r, B), S = S.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(we, de, le) {
        return le || (le = "\\"), de + de + le + "|";
      }), this.debug(`tail=%j
   %s`, S, S, B, r);
      var J = B.type === "*" ? fs2 : B.type === "?" ? us : "\\" + B.type;
      n = true, r = r.slice(0, B.reStart) + J + "\\(" + S;
    }
    g(), s && (r += "\\\\");
    var A = false;
    switch (r.charAt(0)) {
      case "[":
      case ".":
      case "(":
        A = true;
    }
    for (var z = c.length - 1; z > -1; z--) {
      var k = c[z], L = r.slice(0, k.reStart), D = r.slice(k.reStart, k.reEnd - 8), X = r.slice(k.reEnd - 8, k.reEnd), j = r.slice(k.reEnd);
      X += j;
      var se = L.split("(").length - 1, M = j;
      for (x = 0; x < se; x++) M = M.replace(/\)[+*?]?/, "");
      j = M;
      var $ = "";
      j === "" && e !== Qr && ($ = "$");
      var Y = L + D + j + $ + X;
      r = Y;
    }
    if (r !== "" && n && (r = "(?=.)" + r), A && (r = m + r), e === Qr) return [r, n];
    if (!n) return lm(t);
    var Q = i.nocase ? "i" : "";
    try {
      var V = new RegExp("^" + r + "$", Q);
    } catch {
      return new RegExp("$.");
    }
    return V._glob = t, V._src = r, V;
  }
  pt2.makeRe = function(t, e) {
    return new Ye(t, e || {}).makeRe();
  };
  Ye.prototype.makeRe = am;
  function am() {
    if (this.regexp || this.regexp === false) return this.regexp;
    var t = this.set;
    if (!t.length) return this.regexp = false, this.regexp;
    var e = this.options, i = e.noglobstar ? fs2 : e.dot ? Qd : em, r = e.nocase ? "i" : "", n = t.map(function(s) {
      return s.map(function(o) {
        return o === hs ? i : typeof o == "string" ? cm(o) : o._src;
      }).join("\\/");
    }).join("|");
    n = "^(?:" + n + ")$", this.negate && (n = "^(?!" + n + ").*$");
    try {
      this.regexp = new RegExp(n, r);
    } catch {
      this.regexp = false;
    }
    return this.regexp;
  }
  pt2.match = function(t, e, i) {
    i = i || {};
    var r = new Ye(e, i);
    return t = t.filter(function(n) {
      return r.match(n);
    }), r.options.nonull && !t.length && t.push(e), t;
  };
  Ye.prototype.match = function(e, i) {
    if (typeof i == "undefined" && (i = this.partial), this.debug("match", e, this.pattern), this.comment) return false;
    if (this.empty) return e === "";
    if (e === "/" && i) return true;
    var r = this.options;
    pr.sep !== "/" && (e = e.split(pr.sep).join("/")), e = e.split(Dl), this.debug(this.pattern, "split", e);
    var n = this.set;
    this.debug(this.pattern, "set", n);
    var s, o;
    for (o = e.length - 1; o >= 0 && (s = e[o], !s); o--) ;
    for (o = 0; o < n.length; o++) {
      var c = n[o], u = e;
      r.matchBase && c.length === 1 && (u = [s]);
      var h = this.matchOne(u, c, i);
      if (h) return r.flipNegate ? true : !this.negate;
    }
    return r.flipNegate ? false : this.negate;
  };
  Ye.prototype.matchOne = function(t, e, i) {
    var r = this.options;
    this.debug("matchOne", { this: this, file: t, pattern: e }), this.debug("matchOne", t.length, e.length);
    for (var n = 0, s = 0, o = t.length, c = e.length; n < o && s < c; n++, s++) {
      this.debug("matchOne loop");
      var u = e[s], h = t[n];
      if (this.debug(e, u, h), u === false) return false;
      if (u === hs) {
        this.debug("GLOBSTAR", [e, u, h]);
        var l = n, d = s + 1;
        if (d === c) {
          for (this.debug("** at the end"); n < o; n++) if (t[n] === "." || t[n] === ".." || !r.dot && t[n].charAt(0) === ".") return false;
          return true;
        }
        for (; l < o; ) {
          var m = t[l];
          if (this.debug(`
globstar while`, t, l, e, d, m), this.matchOne(t.slice(l), e.slice(d), i)) return this.debug("globstar found match!", l, o, m), true;
          if (m === "." || m === ".." || !r.dot && m.charAt(0) === ".") {
            this.debug("dot detected!", t, l, e, d);
            break;
          }
          this.debug("globstar swallow a segment, and continue"), l++;
        }
        return !!(i && (this.debug(`
>>> no match, partial?`, t, l, e, d), l === o));
      }
      var v;
      if (typeof u == "string" ? (v = h === u, this.debug("string match", u, h, v)) : (v = h.match(u), this.debug("pattern match", u, h, v)), !v) return false;
    }
    if (n === o && s === c) return true;
    if (n === o) return i;
    if (s === c) return n === o - 1 && t[n] === "";
    throw new Error("wtf?");
  };
  function lm(t) {
    return t.replace(/\\(.)/g, "$1");
  }
  function cm(t) {
    return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
});
var ds = E$1((kx, Hl) => {
  var Vl = require$$0$2, ps;
  function um() {
    try {
      return Vl.statSync("/.dockerenv"), true;
    } catch {
      return false;
    }
  }
  function fm() {
    try {
      return Vl.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
    } catch {
      return false;
    }
  }
  Hl.exports = () => (ps === void 0 && (ps = um() || fm()), ps);
});
var zl = E$1((Ox, ms2) => {
  var hm = require$$0$3, pm = require$$0$2, $l = ds(), Gl = () => {
    if (process.platform !== "linux") return false;
    if (hm.release().toLowerCase().includes("microsoft")) return !$l();
    try {
      return pm.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !$l() : false;
    } catch {
      return false;
    }
  };
  process.env.__IS_WSL_TEST__ ? ms2.exports = Gl : ms2.exports = Gl();
});
var Yl = E$1((Cx, Wl) => {
  Wl.exports = (t, e, i) => {
    let r = (n) => Object.defineProperty(t, e, { value: n, enumerable: true, writable: true });
    return Object.defineProperty(t, e, { configurable: true, enumerable: true, get() {
      let n = i();
      return r(n), n;
    }, set(n) {
      r(n);
    } }), t;
  };
});
var tc = E$1((Tx, ec) => {
  var dm = require$$1, mm = require$$11, { promises: gs, constants: Ql } = require$$0$2, tn = zl(), gm = ds(), vs = Yl(), Kl = dm.join(__dirname, "xdg-open"), { platform: Hi, arch: Zl } = process, vm = /* @__PURE__ */ (() => {
    let t = "/mnt/", e;
    return async function() {
      if (e) return e;
      let i = "/etc/wsl.conf", r = false;
      try {
        await gs.access(i, Ql.F_OK), r = true;
      } catch {
      }
      if (!r) return t;
      let n = await gs.readFile(i, { encoding: "utf8" }), s = new RegExp("(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)", "g").exec(n);
      return s ? (e = s.groups.mountPoint.trim(), e = e.endsWith("/") ? e : `${e}/`, e) : t;
    };
  })(), Xl = async (t, e) => {
    let i;
    for (let r of t) try {
      return await e(r);
    } catch (n) {
      i = n;
    }
    throw i;
  }, rn = async (t) => {
    if (t = { wait: false, background: false, newInstance: false, allowNonzeroExitCode: false, ...t }, Array.isArray(t.app)) return Xl(t.app, (c) => rn({ ...t, app: c }));
    let { name: e, arguments: i = [] } = t.app || {};
    if (i = [...i], Array.isArray(e)) return Xl(e, (c) => rn({ ...t, app: { name: c, arguments: i } }));
    let r, n = [], s = {};
    if (Hi === "darwin") r = "open", t.wait && n.push("--wait-apps"), t.background && n.push("--background"), t.newInstance && n.push("--new"), e && n.push("-a", e);
    else if (Hi === "win32" || tn && !gm()) {
      let c = await vm();
      r = tn ? `${c}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`, n.push("-NoProfile", "-NonInteractive", "–ExecutionPolicy", "Bypass", "-EncodedCommand"), tn || (s.windowsVerbatimArguments = true);
      let u = ["Start"];
      t.wait && u.push("-Wait"), e ? (u.push(`"\`"${e}\`""`, "-ArgumentList"), t.target && i.unshift(t.target)) : t.target && u.push(`"${t.target}"`), i.length > 0 && (i = i.map((h) => `"\`"${h}\`""`), u.push(i.join(","))), t.target = Buffer.from(u.join(" "), "utf16le").toString("base64");
    } else {
      if (e) r = e;
      else {
        let c = !__dirname || __dirname === "/", u = false;
        try {
          await gs.access(Kl, Ql.X_OK), u = true;
        } catch {
        }
        r = process.versions.electron || Hi === "android" || c || !u ? "xdg-open" : Kl;
      }
      i.length > 0 && n.push(...i), t.wait || (s.stdio = "ignore", s.detached = true);
    }
    t.target && n.push(t.target), Hi === "darwin" && i.length > 0 && n.push("--args", ...i);
    let o = mm.spawn(r, n, s);
    return t.wait ? new Promise((c, u) => {
      o.once("error", u), o.once("close", (h) => {
        if (t.allowNonzeroExitCode && h > 0) {
          u(new Error(`Exited with code ${h}`));
          return;
        }
        c(o);
      });
    }) : (o.unref(), o);
  }, _s = (t, e) => {
    if (typeof t != "string") throw new TypeError("Expected a `target`");
    return rn({ ...e, target: t });
  }, _m = (t, e) => {
    if (typeof t != "string") throw new TypeError("Expected a `name`");
    let { arguments: i = [] } = e || {};
    if (i != null && !Array.isArray(i)) throw new TypeError("Expected `appArguments` as Array type");
    return rn({ ...e, app: { name: t, arguments: i } });
  };
  function Jl(t) {
    if (typeof t == "string" || Array.isArray(t)) return t;
    let { [Zl]: e } = t;
    if (!e) throw new Error(`${Zl} is not supported`);
    return e;
  }
  function xs({ [Hi]: t }, { wsl: e }) {
    if (e && tn) return Jl(e);
    if (!t) throw new Error(`${Hi} is not supported`);
    return Jl(t);
  }
  var nn = {};
  vs(nn, "chrome", () => xs({ darwin: "google chrome", win32: "chrome", linux: ["google-chrome", "google-chrome-stable", "chromium"] }, { wsl: { ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe", x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"] } }));
  vs(nn, "firefox", () => xs({ darwin: "firefox", win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe", linux: "firefox" }, { wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe" }));
  vs(nn, "edge", () => xs({ darwin: "microsoft edge", win32: "msedge", linux: ["microsoft-edge", "microsoft-edge-dev"] }, { wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" }));
  _s.apps = nn;
  _s.openApp = _m;
  ec.exports = _s;
});
var ys = E$1((Ix, rc) => {
  var xm = require$$1$1, ic = require$$12, Ct = rc.exports = function() {
    ic.call(this), this._buffers = [], this._buffered = 0, this._reads = [], this._paused = false, this._encoding = "utf8", this.writable = true;
  };
  xm.inherits(Ct, ic);
  Ct.prototype.read = function(t, e) {
    this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e }), process.nextTick((function() {
      this._process(), this._paused && this._reads && this._reads.length > 0 && (this._paused = false, this.emit("drain"));
    }).bind(this));
  };
  Ct.prototype.write = function(t, e) {
    if (!this.writable) return this.emit("error", new Error("Stream not writable")), false;
    let i;
    return Buffer.isBuffer(t) ? i = t : i = Buffer.from(t, e || this._encoding), this._buffers.push(i), this._buffered += i.length, this._process(), this._reads && this._reads.length === 0 && (this._paused = true), this.writable && !this._paused;
  };
  Ct.prototype.end = function(t, e) {
    t && this.write(t, e), this.writable = false, this._buffers && (this._buffers.length === 0 ? this._end() : (this._buffers.push(null), this._process()));
  };
  Ct.prototype.destroySoon = Ct.prototype.end;
  Ct.prototype._end = function() {
    this._reads.length > 0 && this.emit("error", new Error("Unexpected end of input")), this.destroy();
  };
  Ct.prototype.destroy = function() {
    this._buffers && (this.writable = false, this._reads = null, this._buffers = null, this.emit("close"));
  };
  Ct.prototype._processReadAllowingLess = function(t) {
    this._reads.shift();
    let e = this._buffers[0];
    e.length > t.length ? (this._buffered -= t.length, this._buffers[0] = e.slice(t.length), t.func.call(this, e.slice(0, t.length))) : (this._buffered -= e.length, this._buffers.shift(), t.func.call(this, e));
  };
  Ct.prototype._processRead = function(t) {
    this._reads.shift();
    let e = 0, i = 0, r = Buffer.alloc(t.length);
    for (; e < t.length; ) {
      let n = this._buffers[i++], s = Math.min(n.length, t.length - e);
      n.copy(r, e, 0, s), e += s, s !== n.length && (this._buffers[--i] = n.slice(s));
    }
    i > 0 && this._buffers.splice(0, i), this._buffered -= t.length, t.func.call(this, r);
  };
  Ct.prototype._process = function() {
    try {
      for (; this._buffered > 0 && this._reads && this._reads.length > 0; ) {
        let t = this._reads[0];
        if (t.allowLess) this._processReadAllowingLess(t);
        else if (this._buffered >= t.length) this._processRead(t);
        else break;
      }
      this._buffers && !this.writable && this._end();
    } catch (t) {
      this.emit("error", t);
    }
  };
});
var ws = E$1((bs) => {
  var Xt = [{ x: [0], y: [0] }, { x: [4], y: [0] }, { x: [0, 4], y: [4] }, { x: [2, 6], y: [0, 4] }, { x: [0, 2, 4, 6], y: [2, 6] }, { x: [1, 3, 5, 7], y: [0, 2, 4, 6] }, { x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] }];
  bs.getImagePasses = function(t, e) {
    let i = [], r = t % 8, n = e % 8, s = (t - r) / 8, o = (e - n) / 8;
    for (let c = 0; c < Xt.length; c++) {
      let u = Xt[c], h = s * u.x.length, l = o * u.y.length;
      for (let d = 0; d < u.x.length && u.x[d] < r; d++) h++;
      for (let d = 0; d < u.y.length && u.y[d] < n; d++) l++;
      h > 0 && l > 0 && i.push({ width: h, height: l, index: c });
    }
    return i;
  };
  bs.getInterlaceIterator = function(t) {
    return function(e, i, r) {
      let n = e % Xt[r].x.length, s = (e - n) / Xt[r].x.length * 8 + Xt[r].x[n], o = i % Xt[r].y.length, c = (i - o) / Xt[r].y.length * 8 + Xt[r].y[o];
      return s * 4 + c * t * 4;
    };
  };
});
var Es = E$1((Bx, nc) => {
  nc.exports = function(e, i, r) {
    let n = e + i - r, s = Math.abs(n - e), o = Math.abs(n - i), c = Math.abs(n - r);
    return s <= o && s <= c ? e : o <= c ? i : r;
  };
});
var Ss = E$1((Rx, oc) => {
  var ym = ws(), bm = Es();
  function sc(t, e, i) {
    let r = t * e;
    return i !== 8 && (r = Math.ceil(r / (8 / i))), r;
  }
  var $i = oc.exports = function(t, e) {
    let i = t.width, r = t.height, n = t.interlace, s = t.bpp, o = t.depth;
    if (this.read = e.read, this.write = e.write, this.complete = e.complete, this._imageIndex = 0, this._images = [], n) {
      let c = ym.getImagePasses(i, r);
      for (let u = 0; u < c.length; u++) this._images.push({ byteWidth: sc(c[u].width, s, o), height: c[u].height, lineIndex: 0 });
    } else this._images.push({ byteWidth: sc(i, s, o), height: r, lineIndex: 0 });
    o === 8 ? this._xComparison = s : o === 16 ? this._xComparison = s * 2 : this._xComparison = 1;
  };
  $i.prototype.start = function() {
    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
  };
  $i.prototype._unFilterType1 = function(t, e, i) {
    let r = this._xComparison, n = r - 1;
    for (let s = 0; s < i; s++) {
      let o = t[1 + s], c = s > n ? e[s - r] : 0;
      e[s] = o + c;
    }
  };
  $i.prototype._unFilterType2 = function(t, e, i) {
    let r = this._lastLine;
    for (let n = 0; n < i; n++) {
      let s = t[1 + n], o = r ? r[n] : 0;
      e[n] = s + o;
    }
  };
  $i.prototype._unFilterType3 = function(t, e, i) {
    let r = this._xComparison, n = r - 1, s = this._lastLine;
    for (let o = 0; o < i; o++) {
      let c = t[1 + o], u = s ? s[o] : 0, h = o > n ? e[o - r] : 0, l = Math.floor((h + u) / 2);
      e[o] = c + l;
    }
  };
  $i.prototype._unFilterType4 = function(t, e, i) {
    let r = this._xComparison, n = r - 1, s = this._lastLine;
    for (let o = 0; o < i; o++) {
      let c = t[1 + o], u = s ? s[o] : 0, h = o > n ? e[o - r] : 0, l = o > n && s ? s[o - r] : 0, d = bm(h, u, l);
      e[o] = c + d;
    }
  };
  $i.prototype._reverseFilterLine = function(t) {
    let e = t[0], i, r = this._images[this._imageIndex], n = r.byteWidth;
    if (e === 0) i = t.slice(1, n + 1);
    else switch (i = Buffer.alloc(n), e) {
      case 1:
        this._unFilterType1(t, i, n);
        break;
      case 2:
        this._unFilterType2(t, i, n);
        break;
      case 3:
        this._unFilterType3(t, i, n);
        break;
      case 4:
        this._unFilterType4(t, i, n);
        break;
      default:
        throw new Error("Unrecognised filter type - " + e);
    }
    this.write(i), r.lineIndex++, r.lineIndex >= r.height ? (this._lastLine = null, this._imageIndex++, r = this._images[this._imageIndex]) : this._lastLine = i, r ? this.read(r.byteWidth + 1, this._reverseFilterLine.bind(this)) : (this._lastLine = null, this.complete());
  };
});
var cc = E$1((Px, lc) => {
  var wm = require$$1$1, ac = ys(), Em = Ss(), Sm = lc.exports = function(t) {
    ac.call(this);
    let e = [], i = this;
    this._filter = new Em(t, { read: this.read.bind(this), write: function(r) {
      e.push(r);
    }, complete: function() {
      i.emit("complete", Buffer.concat(e));
    } }), this._filter.start();
  };
  wm.inherits(Sm, ac);
});
var Gi = E$1((Nx, uc) => {
  uc.exports = { PNG_SIGNATURE: [137, 80, 78, 71, 13, 10, 26, 10], TYPE_IHDR: 1229472850, TYPE_IEND: 1229278788, TYPE_IDAT: 1229209940, TYPE_PLTE: 1347179589, TYPE_tRNS: 1951551059, TYPE_gAMA: 1732332865, COLORTYPE_GRAYSCALE: 0, COLORTYPE_PALETTE: 1, COLORTYPE_COLOR: 2, COLORTYPE_ALPHA: 4, COLORTYPE_PALETTE_COLOR: 3, COLORTYPE_COLOR_ALPHA: 6, COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 }, GAMMA_DIVISION: 1e5 };
});
var Cs = E$1((Lx, fc) => {
  var ks = [];
  (function() {
    for (let t = 0; t < 256; t++) {
      let e = t;
      for (let i = 0; i < 8; i++) e & 1 ? e = 3988292384 ^ e >>> 1 : e = e >>> 1;
      ks[t] = e;
    }
  })();
  var Os = fc.exports = function() {
    this._crc = -1;
  };
  Os.prototype.write = function(t) {
    for (let e = 0; e < t.length; e++) this._crc = ks[(this._crc ^ t[e]) & 255] ^ this._crc >>> 8;
    return true;
  };
  Os.prototype.crc32 = function() {
    return this._crc ^ -1;
  };
  Os.crc32 = function(t) {
    let e = -1;
    for (let i = 0; i < t.length; i++) e = ks[(e ^ t[i]) & 255] ^ e >>> 8;
    return e ^ -1;
  };
});
var Ts = E$1((Fx, hc) => {
  var je = Gi(), km = Cs(), He = hc.exports = function(t, e) {
    this._options = t, t.checkCRC = t.checkCRC !== false, this._hasIHDR = false, this._hasIEND = false, this._emittedHeadersFinished = false, this._palette = [], this._colorType = 0, this._chunks = {}, this._chunks[je.TYPE_IHDR] = this._handleIHDR.bind(this), this._chunks[je.TYPE_IEND] = this._handleIEND.bind(this), this._chunks[je.TYPE_IDAT] = this._handleIDAT.bind(this), this._chunks[je.TYPE_PLTE] = this._handlePLTE.bind(this), this._chunks[je.TYPE_tRNS] = this._handleTRNS.bind(this), this._chunks[je.TYPE_gAMA] = this._handleGAMA.bind(this), this.read = e.read, this.error = e.error, this.metadata = e.metadata, this.gamma = e.gamma, this.transColor = e.transColor, this.palette = e.palette, this.parsed = e.parsed, this.inflateData = e.inflateData, this.finished = e.finished, this.simpleTransparency = e.simpleTransparency, this.headersFinished = e.headersFinished || function() {
    };
  };
  He.prototype.start = function() {
    this.read(je.PNG_SIGNATURE.length, this._parseSignature.bind(this));
  };
  He.prototype._parseSignature = function(t) {
    let e = je.PNG_SIGNATURE;
    for (let i = 0; i < e.length; i++) if (t[i] !== e[i]) {
      this.error(new Error("Invalid file signature"));
      return;
    }
    this.read(8, this._parseChunkBegin.bind(this));
  };
  He.prototype._parseChunkBegin = function(t) {
    let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = "";
    for (let s = 4; s < 8; s++) r += String.fromCharCode(t[s]);
    let n = !!(t[4] & 32);
    if (!this._hasIHDR && i !== je.TYPE_IHDR) {
      this.error(new Error("Expected IHDR on beggining"));
      return;
    }
    if (this._crc = new km(), this._crc.write(Buffer.from(r)), this._chunks[i]) return this._chunks[i](e);
    if (!n) {
      this.error(new Error("Unsupported critical chunk type " + r));
      return;
    }
    this.read(e + 4, this._skipChunk.bind(this));
  };
  He.prototype._skipChunk = function() {
    this.read(8, this._parseChunkBegin.bind(this));
  };
  He.prototype._handleChunkEnd = function() {
    this.read(4, this._parseChunkEnd.bind(this));
  };
  He.prototype._parseChunkEnd = function(t) {
    let e = t.readInt32BE(0), i = this._crc.crc32();
    if (this._options.checkCRC && i !== e) {
      this.error(new Error("Crc error - " + e + " - " + i));
      return;
    }
    this._hasIEND || this.read(8, this._parseChunkBegin.bind(this));
  };
  He.prototype._handleIHDR = function(t) {
    this.read(t, this._parseIHDR.bind(this));
  };
  He.prototype._parseIHDR = function(t) {
    this._crc.write(t);
    let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = t[8], n = t[9], s = t[10], o = t[11], c = t[12];
    if (r !== 8 && r !== 4 && r !== 2 && r !== 1 && r !== 16) {
      this.error(new Error("Unsupported bit depth " + r));
      return;
    }
    if (!(n in je.COLORTYPE_TO_BPP_MAP)) {
      this.error(new Error("Unsupported color type"));
      return;
    }
    if (s !== 0) {
      this.error(new Error("Unsupported compression method"));
      return;
    }
    if (o !== 0) {
      this.error(new Error("Unsupported filter method"));
      return;
    }
    if (c !== 0 && c !== 1) {
      this.error(new Error("Unsupported interlace method"));
      return;
    }
    this._colorType = n;
    let u = je.COLORTYPE_TO_BPP_MAP[this._colorType];
    this._hasIHDR = true, this.metadata({ width: e, height: i, depth: r, interlace: !!c, palette: !!(n & je.COLORTYPE_PALETTE), color: !!(n & je.COLORTYPE_COLOR), alpha: !!(n & je.COLORTYPE_ALPHA), bpp: u, colorType: n }), this._handleChunkEnd();
  };
  He.prototype._handlePLTE = function(t) {
    this.read(t, this._parsePLTE.bind(this));
  };
  He.prototype._parsePLTE = function(t) {
    this._crc.write(t);
    let e = Math.floor(t.length / 3);
    for (let i = 0; i < e; i++) this._palette.push([t[i * 3], t[i * 3 + 1], t[i * 3 + 2], 255]);
    this.palette(this._palette), this._handleChunkEnd();
  };
  He.prototype._handleTRNS = function(t) {
    this.simpleTransparency(), this.read(t, this._parseTRNS.bind(this));
  };
  He.prototype._parseTRNS = function(t) {
    if (this._crc.write(t), this._colorType === je.COLORTYPE_PALETTE_COLOR) {
      if (this._palette.length === 0) {
        this.error(new Error("Transparency chunk must be after palette"));
        return;
      }
      if (t.length > this._palette.length) {
        this.error(new Error("More transparent colors than palette size"));
        return;
      }
      for (let e = 0; e < t.length; e++) this._palette[e][3] = t[e];
      this.palette(this._palette);
    }
    this._colorType === je.COLORTYPE_GRAYSCALE && this.transColor([t.readUInt16BE(0)]), this._colorType === je.COLORTYPE_COLOR && this.transColor([t.readUInt16BE(0), t.readUInt16BE(2), t.readUInt16BE(4)]), this._handleChunkEnd();
  };
  He.prototype._handleGAMA = function(t) {
    this.read(t, this._parseGAMA.bind(this));
  };
  He.prototype._parseGAMA = function(t) {
    this._crc.write(t), this.gamma(t.readUInt32BE(0) / je.GAMMA_DIVISION), this._handleChunkEnd();
  };
  He.prototype._handleIDAT = function(t) {
    this._emittedHeadersFinished || (this._emittedHeadersFinished = true, this.headersFinished()), this.read(-t, this._parseIDAT.bind(this, t));
  };
  He.prototype._parseIDAT = function(t, e) {
    if (this._crc.write(e), this._colorType === je.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) throw new Error("Expected palette not found");
    this.inflateData(e);
    let i = t - e.length;
    i > 0 ? this._handleIDAT(i) : this._handleChunkEnd();
  };
  He.prototype._handleIEND = function(t) {
    this.read(t, this._parseIEND.bind(this));
  };
  He.prototype._parseIEND = function(t) {
    this._crc.write(t), this._hasIEND = true, this._handleChunkEnd(), this.finished && this.finished();
  };
});
var Is = E$1((dc) => {
  var pc = ws(), Om = [function() {
  }, function(t, e, i, r) {
    if (r === e.length) throw new Error("Ran out of data");
    let n = e[r];
    t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = 255;
  }, function(t, e, i, r) {
    if (r + 1 >= e.length) throw new Error("Ran out of data");
    let n = e[r];
    t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = e[r + 1];
  }, function(t, e, i, r) {
    if (r + 2 >= e.length) throw new Error("Ran out of data");
    t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = 255;
  }, function(t, e, i, r) {
    if (r + 3 >= e.length) throw new Error("Ran out of data");
    t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = e[r + 3];
  }], Cm = [function() {
  }, function(t, e, i, r) {
    let n = e[0];
    t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = r;
  }, function(t, e, i) {
    let r = e[0];
    t[i] = r, t[i + 1] = r, t[i + 2] = r, t[i + 3] = e[1];
  }, function(t, e, i, r) {
    t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = r;
  }, function(t, e, i) {
    t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = e[3];
  }];
  function Tm(t, e) {
    let i = [], r = 0;
    function n() {
      if (r === t.length) throw new Error("Ran out of data");
      let s = t[r];
      r++;
      let o, c, u, h, l, d, m, v;
      switch (e) {
        default:
          throw new Error("unrecognised depth");
        case 16:
          m = t[r], r++, i.push((s << 8) + m);
          break;
        case 4:
          m = s & 15, v = s >> 4, i.push(v, m);
          break;
        case 2:
          l = s & 3, d = s >> 2 & 3, m = s >> 4 & 3, v = s >> 6 & 3, i.push(v, m, d, l);
          break;
        case 1:
          o = s & 1, c = s >> 1 & 1, u = s >> 2 & 1, h = s >> 3 & 1, l = s >> 4 & 1, d = s >> 5 & 1, m = s >> 6 & 1, v = s >> 7 & 1, i.push(v, m, d, l, h, u, c, o);
          break;
      }
    }
    return { get: function(s) {
      for (; i.length < s; ) n();
      let o = i.slice(0, s);
      return i = i.slice(s), o;
    }, resetAfterLine: function() {
      i.length = 0;
    }, end: function() {
      if (r !== t.length) throw new Error("extra data found");
    } };
  }
  function Im(t, e, i, r, n, s) {
    let o = t.width, c = t.height, u = t.index;
    for (let h = 0; h < c; h++) for (let l = 0; l < o; l++) {
      let d = i(l, h, u);
      Om[r](e, n, d, s), s += r;
    }
    return s;
  }
  function Am(t, e, i, r, n, s) {
    let o = t.width, c = t.height, u = t.index;
    for (let h = 0; h < c; h++) {
      for (let l = 0; l < o; l++) {
        let d = n.get(r), m = i(l, h, u);
        Cm[r](e, d, m, s);
      }
      n.resetAfterLine();
    }
  }
  dc.dataToBitMap = function(t, e) {
    let i = e.width, r = e.height, n = e.depth, s = e.bpp, o = e.interlace, c;
    n !== 8 && (c = Tm(t, n));
    let u;
    n <= 8 ? u = Buffer.alloc(i * r * 4) : u = new Uint16Array(i * r * 4);
    let h = Math.pow(2, n) - 1, l = 0, d, m;
    if (o) d = pc.getImagePasses(i, r), m = pc.getInterlaceIterator(i, r);
    else {
      let v = 0;
      m = function() {
        let g = v;
        return v += 4, g;
      }, d = [{ width: i, height: r }];
    }
    for (let v = 0; v < d.length; v++) n === 8 ? l = Im(d[v], u, m, s, t, l) : Am(d[v], u, m, s, c, h);
    if (n === 8) {
      if (l !== t.length) throw new Error("extra data found");
    } else c.end();
    return u;
  };
});
var As = E$1((Dx, mc) => {
  function Bm(t, e, i, r, n) {
    let s = 0;
    for (let o = 0; o < r; o++) for (let c = 0; c < i; c++) {
      let u = n[t[s]];
      if (!u) throw new Error("index " + t[s] + " not in palette");
      for (let h = 0; h < 4; h++) e[s + h] = u[h];
      s += 4;
    }
  }
  function Rm(t, e, i, r, n) {
    let s = 0;
    for (let o = 0; o < r; o++) for (let c = 0; c < i; c++) {
      let u = false;
      if (n.length === 1 ? n[0] === t[s] && (u = true) : n[0] === t[s] && n[1] === t[s + 1] && n[2] === t[s + 2] && (u = true), u) for (let h = 0; h < 4; h++) e[s + h] = 0;
      s += 4;
    }
  }
  function Pm(t, e, i, r, n) {
    let s = 255, o = Math.pow(2, n) - 1, c = 0;
    for (let u = 0; u < r; u++) for (let h = 0; h < i; h++) {
      for (let l = 0; l < 4; l++) e[c + l] = Math.floor(t[c + l] * s / o + 0.5);
      c += 4;
    }
  }
  mc.exports = function(t, e, i = false) {
    let r = e.depth, n = e.width, s = e.height, o = e.colorType, c = e.transColor, u = e.palette, h = t;
    return o === 3 ? Bm(t, h, n, s, u) : (c && Rm(t, h, n, s, c), r !== 8 && !i && (r === 16 && (h = Buffer.alloc(n * s * 4)), Pm(t, h, n, s, r))), h;
  };
});
var _c = E$1((Ux, vc) => {
  var Nm = require$$1$1, Bs = require$$13, gc = ys(), Lm = cc(), Fm = Ts(), Mm = Is(), Dm = As(), Rt = vc.exports = function(t) {
    gc.call(this), this._parser = new Fm(t, { read: this.read.bind(this), error: this._handleError.bind(this), metadata: this._handleMetaData.bind(this), gamma: this.emit.bind(this, "gamma"), palette: this._handlePalette.bind(this), transColor: this._handleTransColor.bind(this), finished: this._finished.bind(this), inflateData: this._inflateData.bind(this), simpleTransparency: this._simpleTransparency.bind(this), headersFinished: this._headersFinished.bind(this) }), this._options = t, this.writable = true, this._parser.start();
  };
  Nm.inherits(Rt, gc);
  Rt.prototype._handleError = function(t) {
    this.emit("error", t), this.writable = false, this.destroy(), this._inflate && this._inflate.destroy && this._inflate.destroy(), this._filter && (this._filter.destroy(), this._filter.on("error", function() {
    })), this.errord = true;
  };
  Rt.prototype._inflateData = function(t) {
    if (!this._inflate) if (this._bitmapInfo.interlace) this._inflate = Bs.createInflate(), this._inflate.on("error", this.emit.bind(this, "error")), this._filter.on("complete", this._complete.bind(this)), this._inflate.pipe(this._filter);
    else {
      let i = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1) * this._bitmapInfo.height, r = Math.max(i, Bs.Z_MIN_CHUNK);
      this._inflate = Bs.createInflate({ chunkSize: r });
      let n = i, s = this.emit.bind(this, "error");
      this._inflate.on("error", function(c) {
        n && s(c);
      }), this._filter.on("complete", this._complete.bind(this));
      let o = this._filter.write.bind(this._filter);
      this._inflate.on("data", function(c) {
        n && (c.length > n && (c = c.slice(0, n)), n -= c.length, o(c));
      }), this._inflate.on("end", this._filter.end.bind(this._filter));
    }
    this._inflate.write(t);
  };
  Rt.prototype._handleMetaData = function(t) {
    this._metaData = t, this._bitmapInfo = Object.create(t), this._filter = new Lm(this._bitmapInfo);
  };
  Rt.prototype._handleTransColor = function(t) {
    this._bitmapInfo.transColor = t;
  };
  Rt.prototype._handlePalette = function(t) {
    this._bitmapInfo.palette = t;
  };
  Rt.prototype._simpleTransparency = function() {
    this._metaData.alpha = true;
  };
  Rt.prototype._headersFinished = function() {
    this.emit("metadata", this._metaData);
  };
  Rt.prototype._finished = function() {
    this.errord || (this._inflate ? this._inflate.end() : this.emit("error", "No Inflate block"));
  };
  Rt.prototype._complete = function(t) {
    if (this.errord) return;
    let e;
    try {
      let i = Mm.dataToBitMap(t, this._bitmapInfo);
      e = Dm(i, this._bitmapInfo, this._options.skipRescale), i = null;
    } catch (i) {
      this._handleError(i);
      return;
    }
    this.emit("parsed", e);
  };
});
var yc = E$1((jx, xc) => {
  var _t = Gi();
  xc.exports = function(t, e, i, r) {
    let n = [_t.COLORTYPE_COLOR_ALPHA, _t.COLORTYPE_ALPHA].indexOf(r.colorType) !== -1;
    if (r.colorType === r.inputColorType) {
      let g = function() {
        let x = new ArrayBuffer(2);
        return new DataView(x).setInt16(0, 256, true), new Int16Array(x)[0] !== 256;
      }();
      if (r.bitDepth === 8 || r.bitDepth === 16 && g) return t;
    }
    let s = r.bitDepth !== 16 ? t : new Uint16Array(t.buffer), o = 255, c = _t.COLORTYPE_TO_BPP_MAP[r.inputColorType];
    c === 4 && !r.inputHasAlpha && (c = 3);
    let u = _t.COLORTYPE_TO_BPP_MAP[r.colorType];
    r.bitDepth === 16 && (o = 65535, u *= 2);
    let h = Buffer.alloc(e * i * u), l = 0, d = 0, m = r.bgColor || {};
    m.red === void 0 && (m.red = o), m.green === void 0 && (m.green = o), m.blue === void 0 && (m.blue = o);
    function v() {
      let g, x, y, O = o;
      switch (r.inputColorType) {
        case _t.COLORTYPE_COLOR_ALPHA:
          O = s[l + 3], g = s[l], x = s[l + 1], y = s[l + 2];
          break;
        case _t.COLORTYPE_COLOR:
          g = s[l], x = s[l + 1], y = s[l + 2];
          break;
        case _t.COLORTYPE_ALPHA:
          O = s[l + 1], g = s[l], x = g, y = g;
          break;
        case _t.COLORTYPE_GRAYSCALE:
          g = s[l], x = g, y = g;
          break;
        default:
          throw new Error("input color type:" + r.inputColorType + " is not supported at present");
      }
      return r.inputHasAlpha && (n || (O /= o, g = Math.min(Math.max(Math.round((1 - O) * m.red + O * g), 0), o), x = Math.min(Math.max(Math.round((1 - O) * m.green + O * x), 0), o), y = Math.min(Math.max(Math.round((1 - O) * m.blue + O * y), 0), o))), { red: g, green: x, blue: y, alpha: O };
    }
    for (let g = 0; g < i; g++) for (let x = 0; x < e; x++) {
      let y = v();
      switch (r.colorType) {
        case _t.COLORTYPE_COLOR_ALPHA:
        case _t.COLORTYPE_COLOR:
          r.bitDepth === 8 ? (h[d] = y.red, h[d + 1] = y.green, h[d + 2] = y.blue, n && (h[d + 3] = y.alpha)) : (h.writeUInt16BE(y.red, d), h.writeUInt16BE(y.green, d + 2), h.writeUInt16BE(y.blue, d + 4), n && h.writeUInt16BE(y.alpha, d + 6));
          break;
        case _t.COLORTYPE_ALPHA:
        case _t.COLORTYPE_GRAYSCALE: {
          let O = (y.red + y.green + y.blue) / 3;
          r.bitDepth === 8 ? (h[d] = O, n && (h[d + 1] = y.alpha)) : (h.writeUInt16BE(O, d), n && h.writeUInt16BE(y.alpha, d + 2));
          break;
        }
        default:
          throw new Error("unrecognised color Type " + r.colorType);
      }
      l += c, d += u;
    }
    return h;
  };
});
var Ec = E$1((qx, wc) => {
  var bc = Es();
  function Um(t, e, i, r, n) {
    for (let s = 0; s < i; s++) r[n + s] = t[e + s];
  }
  function jm(t, e, i) {
    let r = 0, n = e + i;
    for (let s = e; s < n; s++) r += Math.abs(t[s]);
    return r;
  }
  function qm(t, e, i, r, n, s) {
    for (let o = 0; o < i; o++) {
      let c = o >= s ? t[e + o - s] : 0, u = t[e + o] - c;
      r[n + o] = u;
    }
  }
  function Vm(t, e, i, r) {
    let n = 0;
    for (let s = 0; s < i; s++) {
      let o = s >= r ? t[e + s - r] : 0, c = t[e + s] - o;
      n += Math.abs(c);
    }
    return n;
  }
  function Hm(t, e, i, r, n) {
    for (let s = 0; s < i; s++) {
      let o = e > 0 ? t[e + s - i] : 0, c = t[e + s] - o;
      r[n + s] = c;
    }
  }
  function $m(t, e, i) {
    let r = 0, n = e + i;
    for (let s = e; s < n; s++) {
      let o = e > 0 ? t[s - i] : 0, c = t[s] - o;
      r += Math.abs(c);
    }
    return r;
  }
  function Gm(t, e, i, r, n, s) {
    for (let o = 0; o < i; o++) {
      let c = o >= s ? t[e + o - s] : 0, u = e > 0 ? t[e + o - i] : 0, h = t[e + o] - (c + u >> 1);
      r[n + o] = h;
    }
  }
  function zm(t, e, i, r) {
    let n = 0;
    for (let s = 0; s < i; s++) {
      let o = s >= r ? t[e + s - r] : 0, c = e > 0 ? t[e + s - i] : 0, u = t[e + s] - (o + c >> 1);
      n += Math.abs(u);
    }
    return n;
  }
  function Wm(t, e, i, r, n, s) {
    for (let o = 0; o < i; o++) {
      let c = o >= s ? t[e + o - s] : 0, u = e > 0 ? t[e + o - i] : 0, h = e > 0 && o >= s ? t[e + o - (i + s)] : 0, l = t[e + o] - bc(c, u, h);
      r[n + o] = l;
    }
  }
  function Ym(t, e, i, r) {
    let n = 0;
    for (let s = 0; s < i; s++) {
      let o = s >= r ? t[e + s - r] : 0, c = e > 0 ? t[e + s - i] : 0, u = e > 0 && s >= r ? t[e + s - (i + r)] : 0, h = t[e + s] - bc(o, c, u);
      n += Math.abs(h);
    }
    return n;
  }
  var Km = { 0: Um, 1: qm, 2: Hm, 3: Gm, 4: Wm }, Zm = { 0: jm, 1: Vm, 2: $m, 3: zm, 4: Ym };
  wc.exports = function(t, e, i, r, n) {
    let s;
    if (!("filterType" in r) || r.filterType === -1) s = [0, 1, 2, 3, 4];
    else if (typeof r.filterType == "number") s = [r.filterType];
    else throw new Error("unrecognised filter types");
    r.bitDepth === 16 && (n *= 2);
    let o = e * n, c = 0, u = 0, h = Buffer.alloc((o + 1) * i), l = s[0];
    for (let d = 0; d < i; d++) {
      if (s.length > 1) {
        let m = 1 / 0;
        for (let v = 0; v < s.length; v++) {
          let g = Zm[s[v]](t, u, o, n);
          g < m && (l = s[v], m = g);
        }
      }
      h[c] = l, c++, Km[l](t, u, o, h, c, n), c += o, u += o;
    }
    return h;
  };
});
var Rs = E$1((Vx, Sc) => {
  var Xe2 = Gi(), Xm = Cs(), Jm = yc(), Qm = Ec(), e0 = require$$13, Jt = Sc.exports = function(t) {
    if (this._options = t, t.deflateChunkSize = t.deflateChunkSize || 32 * 1024, t.deflateLevel = t.deflateLevel != null ? t.deflateLevel : 9, t.deflateStrategy = t.deflateStrategy != null ? t.deflateStrategy : 3, t.inputHasAlpha = t.inputHasAlpha != null ? t.inputHasAlpha : true, t.deflateFactory = t.deflateFactory || e0.createDeflate, t.bitDepth = t.bitDepth || 8, t.colorType = typeof t.colorType == "number" ? t.colorType : Xe2.COLORTYPE_COLOR_ALPHA, t.inputColorType = typeof t.inputColorType == "number" ? t.inputColorType : Xe2.COLORTYPE_COLOR_ALPHA, [Xe2.COLORTYPE_GRAYSCALE, Xe2.COLORTYPE_COLOR, Xe2.COLORTYPE_COLOR_ALPHA, Xe2.COLORTYPE_ALPHA].indexOf(t.colorType) === -1) throw new Error("option color type:" + t.colorType + " is not supported at present");
    if ([Xe2.COLORTYPE_GRAYSCALE, Xe2.COLORTYPE_COLOR, Xe2.COLORTYPE_COLOR_ALPHA, Xe2.COLORTYPE_ALPHA].indexOf(t.inputColorType) === -1) throw new Error("option input color type:" + t.inputColorType + " is not supported at present");
    if (t.bitDepth !== 8 && t.bitDepth !== 16) throw new Error("option bit depth:" + t.bitDepth + " is not supported at present");
  };
  Jt.prototype.getDeflateOptions = function() {
    return { chunkSize: this._options.deflateChunkSize, level: this._options.deflateLevel, strategy: this._options.deflateStrategy };
  };
  Jt.prototype.createDeflate = function() {
    return this._options.deflateFactory(this.getDeflateOptions());
  };
  Jt.prototype.filterData = function(t, e, i) {
    let r = Jm(t, e, i, this._options), n = Xe2.COLORTYPE_TO_BPP_MAP[this._options.colorType];
    return Qm(r, e, i, this._options, n);
  };
  Jt.prototype._packChunk = function(t, e) {
    let i = e ? e.length : 0, r = Buffer.alloc(i + 12);
    return r.writeUInt32BE(i, 0), r.writeUInt32BE(t, 4), e && e.copy(r, 8), r.writeInt32BE(Xm.crc32(r.slice(4, r.length - 4)), r.length - 4), r;
  };
  Jt.prototype.packGAMA = function(t) {
    let e = Buffer.alloc(4);
    return e.writeUInt32BE(Math.floor(t * Xe2.GAMMA_DIVISION), 0), this._packChunk(Xe2.TYPE_gAMA, e);
  };
  Jt.prototype.packIHDR = function(t, e) {
    let i = Buffer.alloc(13);
    return i.writeUInt32BE(t, 0), i.writeUInt32BE(e, 4), i[8] = this._options.bitDepth, i[9] = this._options.colorType, i[10] = 0, i[11] = 0, i[12] = 0, this._packChunk(Xe2.TYPE_IHDR, i);
  };
  Jt.prototype.packIDAT = function(t) {
    return this._packChunk(Xe2.TYPE_IDAT, t);
  };
  Jt.prototype.packIEND = function() {
    return this._packChunk(Xe2.TYPE_IEND, null);
  };
});
var Tc = E$1((Hx, Cc) => {
  var t0 = require$$1$1, kc = require$$12, i0 = Gi(), r0 = Rs(), Oc = Cc.exports = function(t) {
    kc.call(this);
    let e = t || {};
    this._packer = new r0(e), this._deflate = this._packer.createDeflate(), this.readable = true;
  };
  t0.inherits(Oc, kc);
  Oc.prototype.pack = function(t, e, i, r) {
    this.emit("data", Buffer.from(i0.PNG_SIGNATURE)), this.emit("data", this._packer.packIHDR(e, i)), r && this.emit("data", this._packer.packGAMA(r));
    let n = this._packer.filterData(t, e, i);
    this._deflate.on("error", this.emit.bind(this, "error")), this._deflate.on("data", (function(s) {
      this.emit("data", this._packer.packIDAT(s));
    }).bind(this)), this._deflate.on("end", (function() {
      this.emit("data", this._packer.packIEND()), this.emit("end");
    }).bind(this)), this._deflate.end(n);
  };
});
var Nc = E$1((dr, Pc) => {
  var Ic = require$$10$1.ok, zi = require$$13, n0 = require$$1$1, Ac = require$$14$1.kMaxLength;
  function gi(t) {
    if (!(this instanceof gi)) return new gi(t);
    t && t.chunkSize < zi.Z_MIN_CHUNK && (t.chunkSize = zi.Z_MIN_CHUNK), zi.Inflate.call(this, t), this._offset = this._offset === void 0 ? this._outOffset : this._offset, this._buffer = this._buffer || this._outBuffer, t && t.maxLength != null && (this._maxLength = t.maxLength);
  }
  function s0(t) {
    return new gi(t);
  }
  function Bc(t, e) {
    t._handle && (t._handle.close(), t._handle = null);
  }
  gi.prototype._processChunk = function(t, e, i) {
    if (typeof i == "function") return zi.Inflate._processChunk.call(this, t, e, i);
    let r = this, n = t && t.length, s = this._chunkSize - this._offset, o = this._maxLength, c = 0, u = [], h = 0, l;
    this.on("error", function(g) {
      l = g;
    });
    function d(g, x) {
      if (r._hadError) return;
      let y = s - x;
      if (Ic(y >= 0, "have should not go down"), y > 0) {
        let O = r._buffer.slice(r._offset, r._offset + y);
        if (r._offset += y, O.length > o && (O = O.slice(0, o)), u.push(O), h += O.length, o -= O.length, o === 0) return false;
      }
      return (x === 0 || r._offset >= r._chunkSize) && (s = r._chunkSize, r._offset = 0, r._buffer = Buffer.allocUnsafe(r._chunkSize)), x === 0 ? (c += n - g, n = g, true) : false;
    }
    Ic(this._handle, "zlib binding closed");
    let m;
    do
      m = this._handle.writeSync(e, t, c, n, this._buffer, this._offset, s), m = m || this._writeState;
    while (!this._hadError && d(m[0], m[1]));
    if (this._hadError) throw l;
    if (h >= Ac) throw Bc(this), new RangeError("Cannot create final Buffer. It would be larger than 0x" + Ac.toString(16) + " bytes");
    let v = Buffer.concat(u, h);
    return Bc(this), v;
  };
  n0.inherits(gi, zi.Inflate);
  function o0(t, e) {
    if (typeof e == "string" && (e = Buffer.from(e)), !(e instanceof Buffer)) throw new TypeError("Not a string or buffer");
    let i = t._finishFlushFlag;
    return i == null && (i = zi.Z_FINISH), t._processChunk(e, i);
  }
  function Rc(t, e) {
    return o0(new gi(e), t);
  }
  Pc.exports = dr = Rc;
  dr.Inflate = gi;
  dr.createInflate = s0;
  dr.inflateSync = Rc;
});
var Ps = E$1(($x, Fc) => {
  var Lc = Fc.exports = function(t) {
    this._buffer = t, this._reads = [];
  };
  Lc.prototype.read = function(t, e) {
    this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e });
  };
  Lc.prototype.process = function() {
    for (; this._reads.length > 0 && this._buffer.length; ) {
      let t = this._reads[0];
      if (this._buffer.length && (this._buffer.length >= t.length || t.allowLess)) {
        this._reads.shift();
        let e = this._buffer;
        this._buffer = e.slice(t.length), t.func.call(this, e.slice(0, t.length));
      } else break;
    }
    if (this._reads.length > 0) throw new Error("There are some read requests waitng on finished stream");
    if (this._buffer.length > 0) throw new Error("unrecognised content at end of stream");
  };
});
var Dc = E$1((Mc) => {
  var a0 = Ps(), l0 = Ss();
  Mc.process = function(t, e) {
    let i = [], r = new a0(t);
    return new l0(e, { read: r.read.bind(r), write: function(s) {
      i.push(s);
    }, complete: function() {
    } }).start(), r.process(), Buffer.concat(i);
  };
});
var Vc = E$1((zx, qc) => {
  var Uc = true, jc = require$$13, c0 = Nc();
  jc.deflateSync || (Uc = false);
  var u0 = Ps(), f0 = Dc(), h0 = Ts(), p0 = Is(), d0 = As();
  qc.exports = function(t, e) {
    if (!Uc) throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
    let i;
    function r(P) {
      i = P;
    }
    let n;
    function s(P) {
      n = P;
    }
    function o(P) {
      n.transColor = P;
    }
    function c(P) {
      n.palette = P;
    }
    function u() {
      n.alpha = true;
    }
    let h;
    function l(P) {
      h = P;
    }
    let d = [];
    function m(P) {
      d.push(P);
    }
    let v = new u0(t);
    if (new h0(e, { read: v.read.bind(v), error: r, metadata: s, gamma: l, palette: c, transColor: o, inflateData: m, simpleTransparency: u }).start(), v.process(), i) throw i;
    let x = Buffer.concat(d);
    d.length = 0;
    let y;
    if (n.interlace) y = jc.inflateSync(x);
    else {
      let S = ((n.width * n.bpp * n.depth + 7 >> 3) + 1) * n.height;
      y = c0(x, { chunkSize: S, maxLength: S });
    }
    if (x = null, !y || !y.length) throw new Error("bad png - invalid inflate data response");
    let O = f0.process(y, n);
    x = null;
    let B = p0.dataToBitMap(O, n);
    O = null;
    let C = d0(B, n, e.skipRescale);
    return n.data = C, n.gamma = h || 0, n;
  };
});
var zc = E$1((Wx, Gc) => {
  var Hc = true, $c = require$$13;
  $c.deflateSync || (Hc = false);
  var m0 = Gi(), g0 = Rs();
  Gc.exports = function(t, e) {
    if (!Hc) throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
    let i = e || {}, r = new g0(i), n = [];
    n.push(Buffer.from(m0.PNG_SIGNATURE)), n.push(r.packIHDR(t.width, t.height)), t.gamma && n.push(r.packGAMA(t.gamma));
    let s = r.filterData(t.data, t.width, t.height), o = $c.deflateSync(s, r.getDeflateOptions());
    if (s = null, !o || !o.length) throw new Error("bad png - invalid compressed data response");
    return n.push(r.packIDAT(o)), n.push(r.packIEND()), Buffer.concat(n);
  };
});
var Wc = E$1((Ns) => {
  var v0 = Vc(), _0 = zc();
  Ns.read = function(t, e) {
    return v0(t, e || {});
  };
  Ns.write = function(t, e) {
    return _0(t, e);
  };
});
var Zc = E$1((Kc) => {
  var x0 = require$$1$1, Yc = require$$12, y0 = _c(), b0 = Tc(), w0 = Wc(), it = Kc.PNG = function(t) {
    Yc.call(this), t = t || {}, this.width = t.width | 0, this.height = t.height | 0, this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null, t.fill && this.data && this.data.fill(0), this.gamma = 0, this.readable = this.writable = true, this._parser = new y0(t), this._parser.on("error", this.emit.bind(this, "error")), this._parser.on("close", this._handleClose.bind(this)), this._parser.on("metadata", this._metadata.bind(this)), this._parser.on("gamma", this._gamma.bind(this)), this._parser.on("parsed", (function(e) {
      this.data = e, this.emit("parsed", e);
    }).bind(this)), this._packer = new b0(t), this._packer.on("data", this.emit.bind(this, "data")), this._packer.on("end", this.emit.bind(this, "end")), this._parser.on("close", this._handleClose.bind(this)), this._packer.on("error", this.emit.bind(this, "error"));
  };
  x0.inherits(it, Yc);
  it.sync = w0;
  it.prototype.pack = function() {
    return !this.data || !this.data.length ? (this.emit("error", "No data provided"), this) : (process.nextTick((function() {
      this._packer.pack(this.data, this.width, this.height, this.gamma);
    }).bind(this)), this);
  };
  it.prototype.parse = function(t, e) {
    if (e) {
      let i, r;
      i = (function(n) {
        this.removeListener("error", r), this.data = n, e(null, this);
      }).bind(this), r = (function(n) {
        this.removeListener("parsed", i), e(n, null);
      }).bind(this), this.once("parsed", i), this.once("error", r);
    }
    return this.end(t), this;
  };
  it.prototype.write = function(t) {
    return this._parser.write(t), true;
  };
  it.prototype.end = function(t) {
    this._parser.end(t);
  };
  it.prototype._metadata = function(t) {
    this.width = t.width, this.height = t.height, this.emit("metadata", t);
  };
  it.prototype._gamma = function(t) {
    this.gamma = t;
  };
  it.prototype._handleClose = function() {
    !this._parser.writable && !this._packer.readable && this.emit("close");
  };
  it.bitblt = function(t, e, i, r, n, s, o, c) {
    if (i |= 0, r |= 0, n |= 0, s |= 0, o |= 0, c |= 0, i > t.width || r > t.height || i + n > t.width || r + s > t.height) throw new Error("bitblt reading outside image");
    if (o > e.width || c > e.height || o + n > e.width || c + s > e.height) throw new Error("bitblt writing outside image");
    for (let u = 0; u < s; u++) t.data.copy(e.data, (c + u) * e.width + o << 2, (r + u) * t.width + i << 2, (r + u) * t.width + i + n << 2);
  };
  it.prototype.bitblt = function(t, e, i, r, n, s, o) {
    return it.bitblt(this, t, e, i, r, n, s, o), this;
  };
  it.adjustGamma = function(t) {
    if (t.gamma) {
      for (let e = 0; e < t.height; e++) for (let i = 0; i < t.width; i++) {
        let r = t.width * e + i << 2;
        for (let n = 0; n < 3; n++) {
          let s = t.data[r + n] / 255;
          s = Math.pow(s, 1 / 2.2 / t.gamma), t.data[r + n] = Math.round(s * 255);
        }
      }
      t.gamma = 0;
    }
  };
  it.prototype.adjustGamma = function() {
    it.adjustGamma(this);
  };
});
var mr = E$1((Fs) => {
  var sn = class extends Error {
    constructor(e, i, r) {
      super(r), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name, this.code = i, this.exitCode = e, this.nestedError = void 0;
    }
  }, Ls = class extends sn {
    constructor(e) {
      super(1, "commander.invalidArgument", e), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name;
    }
  };
  Fs.CommanderError = sn;
  Fs.InvalidArgumentError = Ls;
});
var on = E$1((Ds) => {
  var { InvalidArgumentError: E0 } = mr(), Ms = class {
    constructor(e, i) {
      switch (this.description = i || "", this.variadic = false, this.parseArg = void 0, this.defaultValue = void 0, this.defaultValueDescription = void 0, this.argChoices = void 0, e[0]) {
        case "<":
          this.required = true, this._name = e.slice(1, -1);
          break;
        case "[":
          this.required = false, this._name = e.slice(1, -1);
          break;
        default:
          this.required = true, this._name = e;
          break;
      }
      this._name.length > 3 && this._name.slice(-3) === "..." && (this.variadic = true, this._name = this._name.slice(0, -3));
    }
    name() {
      return this._name;
    }
    _concatValue(e, i) {
      return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
    }
    default(e, i) {
      return this.defaultValue = e, this.defaultValueDescription = i, this;
    }
    argParser(e) {
      return this.parseArg = e, this;
    }
    choices(e) {
      return this.argChoices = e, this.parseArg = (i, r) => {
        if (!e.includes(i)) throw new E0(`Allowed choices are ${e.join(", ")}.`);
        return this.variadic ? this._concatValue(i, r) : i;
      }, this;
    }
    argRequired() {
      return this.required = true, this;
    }
    argOptional() {
      return this.required = false, this;
    }
  };
  function S0(t) {
    let e = t.name() + (t.variadic === true ? "..." : "");
    return t.required ? "<" + e + ">" : "[" + e + "]";
  }
  Ds.Argument = Ms;
  Ds.humanReadableArgName = S0;
});
var js$5 = E$1((Xc) => {
  var { humanReadableArgName: k0 } = on(), Us = class {
    constructor() {
      this.helpWidth = void 0, this.sortSubcommands = false, this.sortOptions = false;
    }
    visibleCommands(e) {
      let i = e.commands.filter((r) => !r._hidden);
      if (e._hasImplicitHelpCommand()) {
        let [, r, n] = e._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/), s = e.createCommand(r).helpOption(false);
        s.description(e._helpCommandDescription), n && s.arguments(n), i.push(s);
      }
      return this.sortSubcommands && i.sort((r, n) => r.name().localeCompare(n.name())), i;
    }
    visibleOptions(e) {
      let i = e.options.filter((s) => !s.hidden), r = e._hasHelpOption && e._helpShortFlag && !e._findOption(e._helpShortFlag), n = e._hasHelpOption && !e._findOption(e._helpLongFlag);
      if (r || n) {
        let s;
        r ? n ? s = e.createOption(e._helpFlags, e._helpDescription) : s = e.createOption(e._helpShortFlag, e._helpDescription) : s = e.createOption(e._helpLongFlag, e._helpDescription), i.push(s);
      }
      if (this.sortOptions) {
        let s = (o) => o.short ? o.short.replace(/^-/, "") : o.long.replace(/^--/, "");
        i.sort((o, c) => s(o).localeCompare(s(c)));
      }
      return i;
    }
    visibleArguments(e) {
      return e._argsDescription && e._args.forEach((i) => {
        i.description = i.description || e._argsDescription[i.name()] || "";
      }), e._args.find((i) => i.description) ? e._args : [];
    }
    subcommandTerm(e) {
      let i = e._args.map((r) => k0(r)).join(" ");
      return e._name + (e._aliases[0] ? "|" + e._aliases[0] : "") + (e.options.length ? " [options]" : "") + (i ? " " + i : "");
    }
    optionTerm(e) {
      return e.flags;
    }
    argumentTerm(e) {
      return e.name();
    }
    longestSubcommandTermLength(e, i) {
      return i.visibleCommands(e).reduce((r, n) => Math.max(r, i.subcommandTerm(n).length), 0);
    }
    longestOptionTermLength(e, i) {
      return i.visibleOptions(e).reduce((r, n) => Math.max(r, i.optionTerm(n).length), 0);
    }
    longestArgumentTermLength(e, i) {
      return i.visibleArguments(e).reduce((r, n) => Math.max(r, i.argumentTerm(n).length), 0);
    }
    commandUsage(e) {
      let i = e._name;
      e._aliases[0] && (i = i + "|" + e._aliases[0]);
      let r = "";
      for (let n = e.parent; n; n = n.parent) r = n.name() + " " + r;
      return r + i + " " + e.usage();
    }
    commandDescription(e) {
      return e.description();
    }
    subcommandDescription(e) {
      return e.description();
    }
    optionDescription(e) {
      let i = [];
      return e.argChoices && !e.negate && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== void 0 && !e.negate && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), e.envVar !== void 0 && i.push(`env: ${e.envVar}`), i.length > 0 ? `${e.description} (${i.join(", ")})` : e.description;
    }
    argumentDescription(e) {
      let i = [];
      if (e.argChoices && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== void 0 && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), i.length > 0) {
        let r = `(${i.join(", ")})`;
        return e.description ? `${e.description} ${r}` : r;
      }
      return e.description;
    }
    formatHelp(e, i) {
      let r = i.padWidth(e, i), n = i.helpWidth || 80, s = 2, o = 2;
      function c(g, x) {
        if (x) {
          let y = `${g.padEnd(r + o)}${x}`;
          return i.wrap(y, n - s, r + o);
        }
        return g;
      }
      function u(g) {
        return g.join(`
`).replace(/^/gm, " ".repeat(s));
      }
      let h = [`Usage: ${i.commandUsage(e)}`, ""], l = i.commandDescription(e);
      l.length > 0 && (h = h.concat([l, ""]));
      let d = i.visibleArguments(e).map((g) => c(i.argumentTerm(g), i.argumentDescription(g)));
      d.length > 0 && (h = h.concat(["Arguments:", u(d), ""]));
      let m = i.visibleOptions(e).map((g) => c(i.optionTerm(g), i.optionDescription(g)));
      m.length > 0 && (h = h.concat(["Options:", u(m), ""]));
      let v = i.visibleCommands(e).map((g) => c(i.subcommandTerm(g), i.subcommandDescription(g)));
      return v.length > 0 && (h = h.concat(["Commands:", u(v), ""])), h.join(`
`);
    }
    padWidth(e, i) {
      return Math.max(i.longestOptionTermLength(e, i), i.longestSubcommandTermLength(e, i), i.longestArgumentTermLength(e, i));
    }
    wrap(e, i, r, n = 40) {
      if (e.match(/[\n]\s+/)) return e;
      let s = i - r;
      if (s < n) return e;
      let o = e.substr(0, r), c = e.substr(r), u = " ".repeat(r), h = new RegExp(".{1," + (s - 1) + "}([\\s​]|$)|[^\\s​]+?([\\s​]|$)", "g"), l = c.match(h) || [];
      return o + l.map((d, m) => (d.slice(-1) === `
` && (d = d.slice(0, d.length - 1)), (m > 0 ? u : "") + d.trimRight())).join(`
`);
    }
  };
  Xc.Help = Us;
});
var Hs = E$1((Vs) => {
  var { InvalidArgumentError: O0 } = mr(), qs = class {
    constructor(e, i) {
      this.flags = e, this.description = i || "", this.required = e.includes("<"), this.optional = e.includes("["), this.variadic = /\w\.\.\.[>\]]$/.test(e), this.mandatory = false;
      let r = Jc(e);
      this.short = r.shortFlag, this.long = r.longFlag, this.negate = false, this.long && (this.negate = this.long.startsWith("--no-")), this.defaultValue = void 0, this.defaultValueDescription = void 0, this.envVar = void 0, this.parseArg = void 0, this.hidden = false, this.argChoices = void 0;
    }
    default(e, i) {
      return this.defaultValue = e, this.defaultValueDescription = i, this;
    }
    env(e) {
      return this.envVar = e, this;
    }
    argParser(e) {
      return this.parseArg = e, this;
    }
    makeOptionMandatory(e = true) {
      return this.mandatory = !!e, this;
    }
    hideHelp(e = true) {
      return this.hidden = !!e, this;
    }
    _concatValue(e, i) {
      return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
    }
    choices(e) {
      return this.argChoices = e, this.parseArg = (i, r) => {
        if (!e.includes(i)) throw new O0(`Allowed choices are ${e.join(", ")}.`);
        return this.variadic ? this._concatValue(i, r) : i;
      }, this;
    }
    name() {
      return this.long ? this.long.replace(/^--/, "") : this.short.replace(/^-/, "");
    }
    attributeName() {
      return C0(this.name().replace(/^no-/, ""));
    }
    is(e) {
      return this.short === e || this.long === e;
    }
  };
  function C0(t) {
    return t.split("-").reduce((e, i) => e + i[0].toUpperCase() + i.slice(1));
  }
  function Jc(t) {
    let e, i, r = t.split(/[ |,]+/);
    return r.length > 1 && !/^[[<]/.test(r[1]) && (e = r.shift()), i = r.shift(), !e && /^-[^-]$/.test(i) && (e = i, i = void 0), { shortFlag: e, longFlag: i };
  }
  Vs.Option = qs;
  Vs.splitOptionFlags = Jc;
});
var eu = E$1((Qc) => {
  function T0(t, e) {
    if (Math.abs(t.length - e.length) > 3) return Math.max(t.length, e.length);
    let i = [];
    for (let r = 0; r <= t.length; r++) i[r] = [r];
    for (let r = 0; r <= e.length; r++) i[0][r] = r;
    for (let r = 1; r <= e.length; r++) for (let n = 1; n <= t.length; n++) {
      let s = 1;
      t[n - 1] === e[r - 1] ? s = 0 : s = 1, i[n][r] = Math.min(i[n - 1][r] + 1, i[n][r - 1] + 1, i[n - 1][r - 1] + s), n > 1 && r > 1 && t[n - 1] === e[r - 2] && t[n - 2] === e[r - 1] && (i[n][r] = Math.min(i[n][r], i[n - 2][r - 2] + 1));
    }
    return i[t.length][e.length];
  }
  function I0(t, e) {
    if (!e || e.length === 0) return "";
    e = Array.from(new Set(e));
    let i = t.startsWith("--");
    i && (t = t.slice(2), e = e.map((o) => o.slice(2)));
    let r = [], n = 3, s = 0.4;
    return e.forEach((o) => {
      if (o.length <= 1) return;
      let c = T0(t, o), u = Math.max(t.length, o.length);
      (u - c) / u > s && (c < n ? (n = c, r = [o]) : c === n && r.push(o));
    }), r.sort((o, c) => o.localeCompare(c)), i && (r = r.map((o) => `--${o}`)), r.length > 1 ? `
(Did you mean one of ${r.join(", ")}?)` : r.length === 1 ? `
(Did you mean ${r[0]}?)` : "";
  }
  Qc.suggestSimilar = I0;
});
var su = E$1((nu) => {
  var A0 = require$$0$1.EventEmitter, $s = require$$11, vi = require$$1, Gs = require$$0$2, { Argument: B0, humanReadableArgName: R0 } = on(), { CommanderError: zs } = mr(), { Help: P0 } = js$5(), { Option: N0, splitOptionFlags: L0 } = Hs(), { suggestSimilar: tu } = eu(), Ys = class t extends A0 {
    constructor(e) {
      super(), this.commands = [], this.options = [], this.parent = null, this._allowUnknownOption = false, this._allowExcessArguments = true, this._args = [], this.args = [], this.rawArgs = [], this.processedArgs = [], this._scriptPath = null, this._name = e || "", this._optionValues = {}, this._optionValueSources = {}, this._storeOptionsAsProperties = false, this._actionHandler = null, this._executableHandler = false, this._executableFile = null, this._defaultCommandName = null, this._exitCallback = null, this._aliases = [], this._combineFlagAndOptionalValue = true, this._description = "", this._argsDescription = void 0, this._enablePositionalOptions = false, this._passThroughOptions = false, this._lifeCycleHooks = {}, this._showHelpAfterError = false, this._showSuggestionAfterError = false, this._outputConfiguration = { writeOut: (i) => process.stdout.write(i), writeErr: (i) => process.stderr.write(i), getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : void 0, getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : void 0, outputError: (i, r) => r(i) }, this._hidden = false, this._hasHelpOption = true, this._helpFlags = "-h, --help", this._helpDescription = "display help for command", this._helpShortFlag = "-h", this._helpLongFlag = "--help", this._addImplicitHelpCommand = void 0, this._helpCommandName = "help", this._helpCommandnameAndArgs = "help [command]", this._helpCommandDescription = "display help for command", this._helpConfiguration = {};
    }
    copyInheritedSettings(e) {
      return this._outputConfiguration = e._outputConfiguration, this._hasHelpOption = e._hasHelpOption, this._helpFlags = e._helpFlags, this._helpDescription = e._helpDescription, this._helpShortFlag = e._helpShortFlag, this._helpLongFlag = e._helpLongFlag, this._helpCommandName = e._helpCommandName, this._helpCommandnameAndArgs = e._helpCommandnameAndArgs, this._helpCommandDescription = e._helpCommandDescription, this._helpConfiguration = e._helpConfiguration, this._exitCallback = e._exitCallback, this._storeOptionsAsProperties = e._storeOptionsAsProperties, this._combineFlagAndOptionalValue = e._combineFlagAndOptionalValue, this._allowExcessArguments = e._allowExcessArguments, this._enablePositionalOptions = e._enablePositionalOptions, this._showHelpAfterError = e._showHelpAfterError, this._showSuggestionAfterError = e._showSuggestionAfterError, this;
    }
    command(e, i, r) {
      let n = i, s = r;
      typeof n == "object" && n !== null && (s = n, n = null), s = s || {};
      let [, o, c] = e.match(/([^ ]+) *(.*)/), u = this.createCommand(o);
      return n && (u.description(n), u._executableHandler = true), s.isDefault && (this._defaultCommandName = u._name), u._hidden = !!(s.noHelp || s.hidden), u._executableFile = s.executableFile || null, c && u.arguments(c), this.commands.push(u), u.parent = this, u.copyInheritedSettings(this), n ? this : u;
    }
    createCommand(e) {
      return new t(e);
    }
    createHelp() {
      return Object.assign(new P0(), this.configureHelp());
    }
    configureHelp(e) {
      return e === void 0 ? this._helpConfiguration : (this._helpConfiguration = e, this);
    }
    configureOutput(e) {
      return e === void 0 ? this._outputConfiguration : (Object.assign(this._outputConfiguration, e), this);
    }
    showHelpAfterError(e = true) {
      return typeof e != "string" && (e = !!e), this._showHelpAfterError = e, this;
    }
    showSuggestionAfterError(e = true) {
      return this._showSuggestionAfterError = !!e, this;
    }
    addCommand(e, i) {
      if (!e._name) throw new Error("Command passed to .addCommand() must have a name");
      function r(n) {
        n.forEach((s) => {
          if (s._executableHandler && !s._executableFile) throw new Error(`Must specify executableFile for deeply nested executable: ${s.name()}`);
          r(s.commands);
        });
      }
      return r(e.commands), i = i || {}, i.isDefault && (this._defaultCommandName = e._name), (i.noHelp || i.hidden) && (e._hidden = true), this.commands.push(e), e.parent = this, this;
    }
    createArgument(e, i) {
      return new B0(e, i);
    }
    argument(e, i, r, n) {
      let s = this.createArgument(e, i);
      return typeof r == "function" ? s.default(n).argParser(r) : s.default(r), this.addArgument(s), this;
    }
    arguments(e) {
      return e.split(/ +/).forEach((i) => {
        this.argument(i);
      }), this;
    }
    addArgument(e) {
      let i = this._args.slice(-1)[0];
      if (i && i.variadic) throw new Error(`only the last argument can be variadic '${i.name()}'`);
      if (e.required && e.defaultValue !== void 0 && e.parseArg === void 0) throw new Error(`a default value for a required argument is never used: '${e.name()}'`);
      return this._args.push(e), this;
    }
    addHelpCommand(e, i) {
      return e === false ? this._addImplicitHelpCommand = false : (this._addImplicitHelpCommand = true, typeof e == "string" && (this._helpCommandName = e.split(" ")[0], this._helpCommandnameAndArgs = e), this._helpCommandDescription = i || this._helpCommandDescription), this;
    }
    _hasImplicitHelpCommand() {
      return this._addImplicitHelpCommand === void 0 ? this.commands.length && !this._actionHandler && !this._findCommand("help") : this._addImplicitHelpCommand;
    }
    hook(e, i) {
      let r = ["preAction", "postAction"];
      if (!r.includes(e)) throw new Error(`Unexpected value for event passed to hook : '${e}'.
Expecting one of '${r.join("', '")}'`);
      return this._lifeCycleHooks[e] ? this._lifeCycleHooks[e].push(i) : this._lifeCycleHooks[e] = [i], this;
    }
    exitOverride(e) {
      return e ? this._exitCallback = e : this._exitCallback = (i) => {
        if (i.code !== "commander.executeSubCommandAsync") throw i;
      }, this;
    }
    _exit(e, i, r) {
      this._exitCallback && this._exitCallback(new zs(e, i, r)), process.exit(e);
    }
    action(e) {
      let i = (r) => {
        let n = this._args.length, s = r.slice(0, n);
        return this._storeOptionsAsProperties ? s[n] = this : s[n] = this.opts(), s.push(this), e.apply(this, s);
      };
      return this._actionHandler = i, this;
    }
    createOption(e, i) {
      return new N0(e, i);
    }
    addOption(e) {
      let i = e.name(), r = e.attributeName(), n = e.defaultValue;
      if (e.negate || e.optional || e.required || typeof n == "boolean") {
        if (e.negate) {
          let o = e.long.replace(/^--no-/, "--");
          n = this._findOption(o) ? this.getOptionValue(r) : true;
        }
        n !== void 0 && this.setOptionValueWithSource(r, n, "default");
      }
      this.options.push(e);
      let s = (o, c, u) => {
        let h = this.getOptionValue(r);
        if (o !== null && e.parseArg) try {
          o = e.parseArg(o, h === void 0 ? n : h);
        } catch (l) {
          if (l.code === "commander.invalidArgument") {
            let d = `${c} ${l.message}`;
            this._displayError(l.exitCode, l.code, d);
          }
          throw l;
        }
        else o !== null && e.variadic && (o = e._concatValue(o, h));
        typeof h == "boolean" || typeof h == "undefined" ? o == null ? this.setOptionValueWithSource(r, e.negate ? false : n || true, u) : this.setOptionValueWithSource(r, o, u) : o !== null && this.setOptionValueWithSource(r, e.negate ? false : o, u);
      };
      return this.on("option:" + i, (o) => {
        let c = `error: option '${e.flags}' argument '${o}' is invalid.`;
        s(o, c, "cli");
      }), e.envVar && this.on("optionEnv:" + i, (o) => {
        let c = `error: option '${e.flags}' value '${o}' from env '${e.envVar}' is invalid.`;
        s(o, c, "env");
      }), this;
    }
    _optionEx(e, i, r, n, s) {
      let o = this.createOption(i, r);
      if (o.makeOptionMandatory(!!e.mandatory), typeof n == "function") o.default(s).argParser(n);
      else if (n instanceof RegExp) {
        let c = n;
        n = (u, h) => {
          let l = c.exec(u);
          return l ? l[0] : h;
        }, o.default(s).argParser(n);
      } else o.default(n);
      return this.addOption(o);
    }
    option(e, i, r, n) {
      return this._optionEx({}, e, i, r, n);
    }
    requiredOption(e, i, r, n) {
      return this._optionEx({ mandatory: true }, e, i, r, n);
    }
    combineFlagAndOptionalValue(e = true) {
      return this._combineFlagAndOptionalValue = !!e, this;
    }
    allowUnknownOption(e = true) {
      return this._allowUnknownOption = !!e, this;
    }
    allowExcessArguments(e = true) {
      return this._allowExcessArguments = !!e, this;
    }
    enablePositionalOptions(e = true) {
      return this._enablePositionalOptions = !!e, this;
    }
    passThroughOptions(e = true) {
      if (this._passThroughOptions = !!e, this.parent && e && !this.parent._enablePositionalOptions) throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
      return this;
    }
    storeOptionsAsProperties(e = true) {
      if (this._storeOptionsAsProperties = !!e, this.options.length) throw new Error("call .storeOptionsAsProperties() before adding options");
      return this;
    }
    getOptionValue(e) {
      return this._storeOptionsAsProperties ? this[e] : this._optionValues[e];
    }
    setOptionValue(e, i) {
      return this._storeOptionsAsProperties ? this[e] = i : this._optionValues[e] = i, this;
    }
    setOptionValueWithSource(e, i, r) {
      return this.setOptionValue(e, i), this._optionValueSources[e] = r, this;
    }
    getOptionValueSource(e) {
      return this._optionValueSources[e];
    }
    _prepareUserArgs(e, i) {
      if (e !== void 0 && !Array.isArray(e)) throw new Error("first parameter to parse must be array or undefined");
      i = i || {}, e === void 0 && (e = process.argv, process.versions && process.versions.electron && (i.from = "electron")), this.rawArgs = e.slice();
      let r;
      switch (i.from) {
        case void 0:
        case "node":
          this._scriptPath = e[1], r = e.slice(2);
          break;
        case "electron":
          process.defaultApp ? (this._scriptPath = e[1], r = e.slice(2)) : r = e.slice(1);
          break;
        case "user":
          r = e.slice(0);
          break;
        default:
          throw new Error(`unexpected parse option { from: '${i.from}' }`);
      }
      return !this._scriptPath && require.main && (this._scriptPath = require.main.filename), this._name = this._name || this._scriptPath && vi.basename(this._scriptPath, vi.extname(this._scriptPath)), r;
    }
    parse(e, i) {
      let r = this._prepareUserArgs(e, i);
      return this._parseCommand([], r), this;
    }
    async parseAsync(e, i) {
      let r = this._prepareUserArgs(e, i);
      return await this._parseCommand([], r), this;
    }
    _executeSubCommand(e, i) {
      i = i.slice();
      let r = false, n = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
      this._checkForMissingMandatoryOptions();
      let s = this._scriptPath;
      !s && require.main && (s = require.main.filename);
      let o;
      try {
        let m = Gs.realpathSync(s);
        o = vi.dirname(m);
      } catch {
        o = ".";
      }
      let c = vi.basename(s, vi.extname(s)) + "-" + e._name;
      e._executableFile && (c = e._executableFile);
      let u = vi.join(o, c);
      Gs.existsSync(u) ? c = u : n.forEach((m) => {
        Gs.existsSync(`${u}${m}`) && (c = `${u}${m}`);
      }), r = n.includes(vi.extname(c));
      let h;
      process.platform !== "win32" ? r ? (i.unshift(c), i = ru(process.execArgv).concat(i), h = $s.spawn(process.argv[0], i, { stdio: "inherit" })) : h = $s.spawn(c, i, { stdio: "inherit" }) : (i.unshift(c), i = ru(process.execArgv).concat(i), h = $s.spawn(process.execPath, i, { stdio: "inherit" })), ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"].forEach((m) => {
        process.on(m, () => {
          h.killed === false && h.exitCode === null && h.kill(m);
        });
      });
      let d = this._exitCallback;
      d ? h.on("close", () => {
        d(new zs(process.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
      }) : h.on("close", process.exit.bind(process)), h.on("error", (m) => {
        if (m.code === "ENOENT") {
          let v = `'${c}' does not exist
 - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
          throw new Error(v);
        } else if (m.code === "EACCES") throw new Error(`'${c}' not executable`);
        if (!d) process.exit(1);
        else {
          let v = new zs(1, "commander.executeSubCommandAsync", "(error)");
          v.nestedError = m, d(v);
        }
      }), this.runningCommand = h;
    }
    _dispatchSubcommand(e, i, r) {
      let n = this._findCommand(e);
      if (n || this.help({ error: true }), n._executableHandler) this._executeSubCommand(n, i.concat(r));
      else return n._parseCommand(i, r);
    }
    _checkNumberOfArguments() {
      this._args.forEach((e, i) => {
        e.required && this.args[i] == null && this.missingArgument(e.name());
      }), !(this._args.length > 0 && this._args[this._args.length - 1].variadic) && this.args.length > this._args.length && this._excessArguments(this.args);
    }
    _processArguments() {
      let e = (r, n, s) => {
        let o = n;
        if (n !== null && r.parseArg) try {
          o = r.parseArg(n, s);
        } catch (c) {
          if (c.code === "commander.invalidArgument") {
            let u = `error: command-argument value '${n}' is invalid for argument '${r.name()}'. ${c.message}`;
            this._displayError(c.exitCode, c.code, u);
          }
          throw c;
        }
        return o;
      };
      this._checkNumberOfArguments();
      let i = [];
      this._args.forEach((r, n) => {
        let s = r.defaultValue;
        r.variadic ? n < this.args.length ? (s = this.args.slice(n), r.parseArg && (s = s.reduce((o, c) => e(r, c, o), r.defaultValue))) : s === void 0 && (s = []) : n < this.args.length && (s = this.args[n], r.parseArg && (s = e(r, s, r.defaultValue))), i[n] = s;
      }), this.processedArgs = i;
    }
    _chainOrCall(e, i) {
      return e && e.then && typeof e.then == "function" ? e.then(() => i()) : i();
    }
    _chainOrCallHooks(e, i) {
      let r = e, n = [];
      return Ws(this).reverse().filter((s) => s._lifeCycleHooks[i] !== void 0).forEach((s) => {
        s._lifeCycleHooks[i].forEach((o) => {
          n.push({ hookedCommand: s, callback: o });
        });
      }), i === "postAction" && n.reverse(), n.forEach((s) => {
        r = this._chainOrCall(r, () => s.callback(s.hookedCommand, this));
      }), r;
    }
    _parseCommand(e, i) {
      let r = this.parseOptions(i);
      if (this._parseOptionsEnv(), e = e.concat(r.operands), i = r.unknown, this.args = e.concat(i), e && this._findCommand(e[0])) return this._dispatchSubcommand(e[0], e.slice(1), i);
      if (this._hasImplicitHelpCommand() && e[0] === this._helpCommandName) return e.length === 1 && this.help(), this._dispatchSubcommand(e[1], [], [this._helpLongFlag]);
      if (this._defaultCommandName) return iu(this, i), this._dispatchSubcommand(this._defaultCommandName, e, i);
      this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName && this.help({ error: true }), iu(this, r.unknown), this._checkForMissingMandatoryOptions();
      let n = () => {
        r.unknown.length > 0 && this.unknownOption(r.unknown[0]);
      }, s = `command:${this.name()}`;
      if (this._actionHandler) {
        n(), this._processArguments();
        let o;
        return o = this._chainOrCallHooks(o, "preAction"), o = this._chainOrCall(o, () => this._actionHandler(this.processedArgs)), this.parent && this.parent.emit(s, e, i), o = this._chainOrCallHooks(o, "postAction"), o;
      }
      if (this.parent && this.parent.listenerCount(s)) n(), this._processArguments(), this.parent.emit(s, e, i);
      else if (e.length) {
        if (this._findCommand("*")) return this._dispatchSubcommand("*", e, i);
        this.listenerCount("command:*") ? this.emit("command:*", e, i) : this.commands.length ? this.unknownCommand() : (n(), this._processArguments());
      } else this.commands.length ? (n(), this.help({ error: true })) : (n(), this._processArguments());
    }
    _findCommand(e) {
      if (e) return this.commands.find((i) => i._name === e || i._aliases.includes(e));
    }
    _findOption(e) {
      return this.options.find((i) => i.is(e));
    }
    _checkForMissingMandatoryOptions() {
      for (let e = this; e; e = e.parent) e.options.forEach((i) => {
        i.mandatory && e.getOptionValue(i.attributeName()) === void 0 && e.missingMandatoryOptionValue(i);
      });
    }
    parseOptions(e) {
      let i = [], r = [], n = i, s = e.slice();
      function o(u) {
        return u.length > 1 && u[0] === "-";
      }
      let c = null;
      for (; s.length; ) {
        let u = s.shift();
        if (u === "--") {
          n === r && n.push(u), n.push(...s);
          break;
        }
        if (c && !o(u)) {
          this.emit(`option:${c.name()}`, u);
          continue;
        }
        if (c = null, o(u)) {
          let h = this._findOption(u);
          if (h) {
            if (h.required) {
              let l = s.shift();
              l === void 0 && this.optionMissingArgument(h), this.emit(`option:${h.name()}`, l);
            } else if (h.optional) {
              let l = null;
              s.length > 0 && !o(s[0]) && (l = s.shift()), this.emit(`option:${h.name()}`, l);
            } else this.emit(`option:${h.name()}`);
            c = h.variadic ? h : null;
            continue;
          }
        }
        if (u.length > 2 && u[0] === "-" && u[1] !== "-") {
          let h = this._findOption(`-${u[1]}`);
          if (h) {
            h.required || h.optional && this._combineFlagAndOptionalValue ? this.emit(`option:${h.name()}`, u.slice(2)) : (this.emit(`option:${h.name()}`), s.unshift(`-${u.slice(2)}`));
            continue;
          }
        }
        if (/^--[^=]+=/.test(u)) {
          let h = u.indexOf("="), l = this._findOption(u.slice(0, h));
          if (l && (l.required || l.optional)) {
            this.emit(`option:${l.name()}`, u.slice(h + 1));
            continue;
          }
        }
        if (o(u) && (n = r), (this._enablePositionalOptions || this._passThroughOptions) && i.length === 0 && r.length === 0) {
          if (this._findCommand(u)) {
            i.push(u), s.length > 0 && r.push(...s);
            break;
          } else if (u === this._helpCommandName && this._hasImplicitHelpCommand()) {
            i.push(u), s.length > 0 && i.push(...s);
            break;
          } else if (this._defaultCommandName) {
            r.push(u), s.length > 0 && r.push(...s);
            break;
          }
        }
        if (this._passThroughOptions) {
          n.push(u), s.length > 0 && n.push(...s);
          break;
        }
        n.push(u);
      }
      return { operands: i, unknown: r };
    }
    opts() {
      if (this._storeOptionsAsProperties) {
        let e = {}, i = this.options.length;
        for (let r = 0; r < i; r++) {
          let n = this.options[r].attributeName();
          e[n] = n === this._versionOptionName ? this._version : this[n];
        }
        return e;
      }
      return this._optionValues;
    }
    _displayError(e, i, r) {
      this._outputConfiguration.outputError(`${r}
`, this._outputConfiguration.writeErr), typeof this._showHelpAfterError == "string" ? this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`) : this._showHelpAfterError && (this._outputConfiguration.writeErr(`
`), this.outputHelp({ error: true })), this._exit(e, i, r);
    }
    _parseOptionsEnv() {
      this.options.forEach((e) => {
        if (e.envVar && e.envVar in process.env) {
          let i = e.attributeName();
          (this.getOptionValue(i) === void 0 || ["default", "config", "env"].includes(this.getOptionValueSource(i))) && (e.required || e.optional ? this.emit(`optionEnv:${e.name()}`, process.env[e.envVar]) : this.emit(`optionEnv:${e.name()}`));
        }
      });
    }
    missingArgument(e) {
      let i = `error: missing required argument '${e}'`;
      this._displayError(1, "commander.missingArgument", i);
    }
    optionMissingArgument(e) {
      let i = `error: option '${e.flags}' argument missing`;
      this._displayError(1, "commander.optionMissingArgument", i);
    }
    missingMandatoryOptionValue(e) {
      let i = `error: required option '${e.flags}' not specified`;
      this._displayError(1, "commander.missingMandatoryOptionValue", i);
    }
    unknownOption(e) {
      if (this._allowUnknownOption) return;
      let i = "";
      if (e.startsWith("--") && this._showSuggestionAfterError) {
        let n = [], s = this;
        do {
          let o = s.createHelp().visibleOptions(s).filter((c) => c.long).map((c) => c.long);
          n = n.concat(o), s = s.parent;
        } while (s && !s._enablePositionalOptions);
        i = tu(e, n);
      }
      let r = `error: unknown option '${e}'${i}`;
      this._displayError(1, "commander.unknownOption", r);
    }
    _excessArguments(e) {
      if (this._allowExcessArguments) return;
      let i = this._args.length, r = i === 1 ? "" : "s", s = `error: too many arguments${this.parent ? ` for '${this.name()}'` : ""}. Expected ${i} argument${r} but got ${e.length}.`;
      this._displayError(1, "commander.excessArguments", s);
    }
    unknownCommand() {
      let e = this.args[0], i = "";
      if (this._showSuggestionAfterError) {
        let n = [];
        this.createHelp().visibleCommands(this).forEach((s) => {
          n.push(s.name()), s.alias() && n.push(s.alias());
        }), i = tu(e, n);
      }
      let r = `error: unknown command '${e}'${i}`;
      this._displayError(1, "commander.unknownCommand", r);
    }
    version(e, i, r) {
      if (e === void 0) return this._version;
      this._version = e, i = i || "-V, --version", r = r || "output the version number";
      let n = this.createOption(i, r);
      return this._versionOptionName = n.attributeName(), this.options.push(n), this.on("option:" + n.name(), () => {
        this._outputConfiguration.writeOut(`${e}
`), this._exit(0, "commander.version", e);
      }), this;
    }
    description(e, i) {
      return e === void 0 && i === void 0 ? this._description : (this._description = e, i && (this._argsDescription = i), this);
    }
    alias(e) {
      if (e === void 0) return this._aliases[0];
      let i = this;
      if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler && (i = this.commands[this.commands.length - 1]), e === i._name) throw new Error("Command alias can't be the same as its name");
      return i._aliases.push(e), this;
    }
    aliases(e) {
      return e === void 0 ? this._aliases : (e.forEach((i) => this.alias(i)), this);
    }
    usage(e) {
      if (e === void 0) {
        if (this._usage) return this._usage;
        let i = this._args.map((r) => R0(r));
        return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? i : []).join(" ");
      }
      return this._usage = e, this;
    }
    name(e) {
      return e === void 0 ? this._name : (this._name = e, this);
    }
    helpInformation(e) {
      let i = this.createHelp();
      return i.helpWidth === void 0 && (i.helpWidth = e && e.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth()), i.formatHelp(this, i);
    }
    _getHelpContext(e) {
      e = e || {};
      let i = { error: !!e.error }, r;
      return i.error ? r = (n) => this._outputConfiguration.writeErr(n) : r = (n) => this._outputConfiguration.writeOut(n), i.write = e.write || r, i.command = this, i;
    }
    outputHelp(e) {
      let i;
      typeof e == "function" && (i = e, e = void 0);
      let r = this._getHelpContext(e);
      Ws(this).reverse().forEach((s) => s.emit("beforeAllHelp", r)), this.emit("beforeHelp", r);
      let n = this.helpInformation(r);
      if (i && (n = i(n), typeof n != "string" && !Buffer.isBuffer(n))) throw new Error("outputHelp callback must return a string or a Buffer");
      r.write(n), this.emit(this._helpLongFlag), this.emit("afterHelp", r), Ws(this).forEach((s) => s.emit("afterAllHelp", r));
    }
    helpOption(e, i) {
      if (typeof e == "boolean") return this._hasHelpOption = e, this;
      this._helpFlags = e || this._helpFlags, this._helpDescription = i || this._helpDescription;
      let r = L0(this._helpFlags);
      return this._helpShortFlag = r.shortFlag, this._helpLongFlag = r.longFlag, this;
    }
    help(e) {
      this.outputHelp(e);
      let i = process.exitCode || 0;
      i === 0 && e && typeof e != "function" && e.error && (i = 1), this._exit(i, "commander.help", "(outputHelp)");
    }
    addHelpText(e, i) {
      let r = ["beforeAll", "before", "after", "afterAll"];
      if (!r.includes(e)) throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${r.join("', '")}'`);
      let n = `${e}Help`;
      return this.on(n, (s) => {
        let o;
        typeof i == "function" ? o = i({ error: s.error, command: s.command }) : o = i, o && s.write(`${o}
`);
      }), this;
    }
  };
  function iu(t, e) {
    t._hasHelpOption && e.find((r) => r === t._helpLongFlag || r === t._helpShortFlag) && (t.outputHelp(), t._exit(0, "commander.helpDisplayed", "(outputHelp)"));
  }
  function ru(t) {
    return t.map((e) => {
      if (!e.startsWith("--inspect")) return e;
      let i, r = "127.0.0.1", n = "9229", s;
      return (s = e.match(/^(--inspect(-brk)?)$/)) !== null ? i = s[1] : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null ? (i = s[1], /^\d+$/.test(s[3]) ? n = s[3] : r = s[3]) : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null && (i = s[1], r = s[3], n = s[4]), i && n !== "0" ? `${i}=${r}:${parseInt(n) + 1}` : e;
    });
  }
  function Ws(t) {
    let e = [];
    for (let i = t; i; i = i.parent) e.push(i);
    return e;
  }
  nu.Command = Ys;
});
var cu = E$1((Tt, lu) => {
  var { Argument: F0 } = on(), { Command: ou } = su(), { CommanderError: M0, InvalidArgumentError: au } = mr(), { Help: D0 } = js$5(), { Option: U0 } = Hs();
  Tt = lu.exports = new ou();
  Tt.program = Tt;
  Tt.Argument = F0;
  Tt.Command = ou;
  Tt.CommanderError = M0;
  Tt.Help = D0;
  Tt.InvalidArgumentError = au;
  Tt.InvalidOptionArgumentError = au;
  Tt.Option = U0;
});
var hu = E$1((uu, fu) => {
  fu.exports = Wi;
  function Wi(t, e) {
    if (this.stream = e.stream || process.stderr, typeof e == "number") {
      var i = e;
      e = {}, e.total = i;
    } else {
      if (e = e || {}, typeof t != "string") throw new Error("format required");
      if (typeof e.total != "number") throw new Error("total required");
    }
    this.fmt = t, this.curr = e.curr || 0, this.total = e.total, this.width = e.width || this.total, this.clear = e.clear, this.chars = { complete: e.complete || "=", incomplete: e.incomplete || "-", head: e.head || e.complete || "=" }, this.renderThrottle = e.renderThrottle !== 0 ? e.renderThrottle || 16 : 0, this.lastRender = -1 / 0, this.callback = e.callback || function() {
    }, this.tokens = {}, this.lastDraw = "";
  }
  Wi.prototype.tick = function(t, e) {
    if (t !== 0 && (t = t || 1), typeof t == "object" && (e = t, t = 1), e && (this.tokens = e), this.curr == 0 && (this.start = /* @__PURE__ */ new Date()), this.curr += t, this.render(), this.curr >= this.total) {
      this.render(void 0, true), this.complete = true, this.terminate(), this.callback(this);
      return;
    }
  };
  Wi.prototype.render = function(t, e) {
    if (e = e !== void 0 ? e : false, t && (this.tokens = t), !!this.stream.isTTY) {
      var i = Date.now(), r = i - this.lastRender;
      if (!(!e && r < this.renderThrottle)) {
        this.lastRender = i;
        var n = this.curr / this.total;
        n = Math.min(Math.max(n, 0), 1);
        var s = Math.floor(n * 100), o, c, u, h = /* @__PURE__ */ new Date() - this.start, l = s == 100 ? 0 : h * (this.total / this.curr - 1), d = this.curr / (h / 1e3), m = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(h) ? "0.0" : (h / 1e3).toFixed(1)).replace(":eta", isNaN(l) || !isFinite(l) ? "0.0" : (l / 1e3).toFixed(1)).replace(":percent", s.toFixed(0) + "%").replace(":rate", Math.round(d)), v = Math.max(0, this.stream.columns - m.replace(":bar", "").length);
        v && process.platform === "win32" && (v = v - 1);
        var g = Math.min(this.width, v);
        if (u = Math.round(g * n), c = Array(Math.max(0, u + 1)).join(this.chars.complete), o = Array(Math.max(0, g - u + 1)).join(this.chars.incomplete), u > 0 && (c = c.slice(0, -1) + this.chars.head), m = m.replace(":bar", c + o), this.tokens) for (var x in this.tokens) m = m.replace(":" + x, this.tokens[x]);
        this.lastDraw !== m && (this.stream.cursorTo(0), this.stream.write(m), this.stream.clearLine(1), this.lastDraw = m);
      }
    }
  };
  Wi.prototype.update = function(t, e) {
    var i = Math.floor(t * this.total), r = i - this.curr;
    this.tick(r, e);
  };
  Wi.prototype.interrupt = function(t) {
    this.stream.clearLine(), this.stream.cursorTo(0), this.stream.write(t), this.stream.write(`
`), this.stream.write(this.lastDraw);
  };
  Wi.prototype.terminate = function() {
    this.clear ? this.stream.clearLine && (this.stream.clearLine(), this.stream.cursorTo(0)) : this.stream.write(`
`);
  };
});
var du = E$1((iy, pu) => {
  pu.exports = hu();
});
var _u = E$1((Vt) => {
  Object.defineProperty(Vt, "__esModule", { value: true });
  var mu = require$$14$1, _i = { INVALID_ENCODING: "Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.", INVALID_SMARTBUFFER_SIZE: "Invalid size provided. Size must be a valid integer greater than zero.", INVALID_SMARTBUFFER_BUFFER: "Invalid Buffer provided in SmartBufferOptions.", INVALID_SMARTBUFFER_OBJECT: "Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.", INVALID_OFFSET: "An invalid offset value was provided.", INVALID_OFFSET_NON_NUMBER: "An invalid offset value was provided. A numeric value is required.", INVALID_LENGTH: "An invalid length value was provided.", INVALID_LENGTH_NON_NUMBER: "An invalid length value was provived. A numeric value is required.", INVALID_TARGET_OFFSET: "Target offset is beyond the bounds of the internal SmartBuffer data.", INVALID_TARGET_LENGTH: "Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.", INVALID_READ_BEYOND_BOUNDS: "Attempted to read beyond the bounds of the managed data.", INVALID_WRITE_BEYOND_BOUNDS: "Attempted to write beyond the bounds of the managed data." };
  Vt.ERRORS = _i;
  function j0(t) {
    if (!mu.Buffer.isEncoding(t)) throw new Error(_i.INVALID_ENCODING);
  }
  Vt.checkEncoding = j0;
  function gu(t) {
    return typeof t == "number" && isFinite(t) && $0(t);
  }
  Vt.isFiniteInteger = gu;
  function vu(t, e) {
    if (typeof t == "number") {
      if (!gu(t) || t < 0) throw new Error(e ? _i.INVALID_OFFSET : _i.INVALID_LENGTH);
    } else throw new Error(e ? _i.INVALID_OFFSET_NON_NUMBER : _i.INVALID_LENGTH_NON_NUMBER);
  }
  function q0(t) {
    vu(t, false);
  }
  Vt.checkLengthValue = q0;
  function V0(t) {
    vu(t, true);
  }
  Vt.checkOffsetValue = V0;
  function H0(t, e) {
    if (t < 0 || t > e.length) throw new Error(_i.INVALID_TARGET_OFFSET);
  }
  Vt.checkTargetOffset = H0;
  function $0(t) {
    return typeof t == "number" && isFinite(t) && Math.floor(t) === t;
  }
  function G0(t) {
    if (typeof BigInt == "undefined") throw new Error("Platform does not support JS BigInt type.");
    if (typeof mu.Buffer.prototype[t] == "undefined") throw new Error(`Platform does not support Buffer.prototype.${t}.`);
  }
  Vt.bigIntAndBufferInt64Check = G0;
});
var yu = E$1((Zs) => {
  Object.defineProperty(Zs, "__esModule", { value: true });
  var he = _u(), xu = 4096, z0 = "utf8", Ks = class t {
    constructor(e) {
      if (this.length = 0, this._encoding = z0, this._writeOffset = 0, this._readOffset = 0, t.isSmartBufferOptions(e)) if (e.encoding && (he.checkEncoding(e.encoding), this._encoding = e.encoding), e.size) if (he.isFiniteInteger(e.size) && e.size > 0) this._buff = Buffer.allocUnsafe(e.size);
      else throw new Error(he.ERRORS.INVALID_SMARTBUFFER_SIZE);
      else if (e.buff) if (Buffer.isBuffer(e.buff)) this._buff = e.buff, this.length = e.buff.length;
      else throw new Error(he.ERRORS.INVALID_SMARTBUFFER_BUFFER);
      else this._buff = Buffer.allocUnsafe(xu);
      else {
        if (typeof e != "undefined") throw new Error(he.ERRORS.INVALID_SMARTBUFFER_OBJECT);
        this._buff = Buffer.allocUnsafe(xu);
      }
    }
    static fromSize(e, i) {
      return new this({ size: e, encoding: i });
    }
    static fromBuffer(e, i) {
      return new this({ buff: e, encoding: i });
    }
    static fromOptions(e) {
      return new this(e);
    }
    static isSmartBufferOptions(e) {
      let i = e;
      return i && (i.encoding !== void 0 || i.size !== void 0 || i.buff !== void 0);
    }
    readInt8(e) {
      return this._readNumberValue(Buffer.prototype.readInt8, 1, e);
    }
    readInt16BE(e) {
      return this._readNumberValue(Buffer.prototype.readInt16BE, 2, e);
    }
    readInt16LE(e) {
      return this._readNumberValue(Buffer.prototype.readInt16LE, 2, e);
    }
    readInt32BE(e) {
      return this._readNumberValue(Buffer.prototype.readInt32BE, 4, e);
    }
    readInt32LE(e) {
      return this._readNumberValue(Buffer.prototype.readInt32LE, 4, e);
    }
    readBigInt64BE(e) {
      return he.bigIntAndBufferInt64Check("readBigInt64BE"), this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, e);
    }
    readBigInt64LE(e) {
      return he.bigIntAndBufferInt64Check("readBigInt64LE"), this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, e);
    }
    writeInt8(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeInt8, 1, e, i), this;
    }
    insertInt8(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeInt8, 1, e, i);
    }
    writeInt16BE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
    }
    insertInt16BE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
    }
    writeInt16LE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
    }
    insertInt16LE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
    }
    writeInt32BE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
    }
    insertInt32BE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
    }
    writeInt32LE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
    }
    insertInt32LE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
    }
    writeBigInt64BE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
    }
    insertBigInt64BE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
    }
    writeBigInt64LE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
    }
    insertBigInt64LE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
    }
    readUInt8(e) {
      return this._readNumberValue(Buffer.prototype.readUInt8, 1, e);
    }
    readUInt16BE(e) {
      return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, e);
    }
    readUInt16LE(e) {
      return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, e);
    }
    readUInt32BE(e) {
      return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, e);
    }
    readUInt32LE(e) {
      return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, e);
    }
    readBigUInt64BE(e) {
      return he.bigIntAndBufferInt64Check("readBigUInt64BE"), this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, e);
    }
    readBigUInt64LE(e) {
      return he.bigIntAndBufferInt64Check("readBigUInt64LE"), this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, e);
    }
    writeUInt8(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
    }
    insertUInt8(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
    }
    writeUInt16BE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
    }
    insertUInt16BE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
    }
    writeUInt16LE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
    }
    insertUInt16LE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
    }
    writeUInt32BE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
    }
    insertUInt32BE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
    }
    writeUInt32LE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
    }
    insertUInt32LE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
    }
    writeBigUInt64BE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
    }
    insertBigUInt64BE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
    }
    writeBigUInt64LE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
    }
    insertBigUInt64LE(e, i) {
      return he.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
    }
    readFloatBE(e) {
      return this._readNumberValue(Buffer.prototype.readFloatBE, 4, e);
    }
    readFloatLE(e) {
      return this._readNumberValue(Buffer.prototype.readFloatLE, 4, e);
    }
    writeFloatBE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
    }
    insertFloatBE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
    }
    writeFloatLE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
    }
    insertFloatLE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
    }
    readDoubleBE(e) {
      return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, e);
    }
    readDoubleLE(e) {
      return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, e);
    }
    writeDoubleBE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
    }
    insertDoubleBE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
    }
    writeDoubleLE(e, i) {
      return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
    }
    insertDoubleLE(e, i) {
      return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
    }
    readString(e, i) {
      let r;
      typeof e == "number" ? (he.checkLengthValue(e), r = Math.min(e, this.length - this._readOffset)) : (i = e, r = this.length - this._readOffset), typeof i != "undefined" && he.checkEncoding(i);
      let n = this._buff.slice(this._readOffset, this._readOffset + r).toString(i || this._encoding);
      return this._readOffset += r, n;
    }
    insertString(e, i, r) {
      return he.checkOffsetValue(i), this._handleString(e, true, i, r);
    }
    writeString(e, i, r) {
      return this._handleString(e, false, i, r);
    }
    readStringNT(e) {
      typeof e != "undefined" && he.checkEncoding(e);
      let i = this.length;
      for (let n = this._readOffset; n < this.length; n++) if (this._buff[n] === 0) {
        i = n;
        break;
      }
      let r = this._buff.slice(this._readOffset, i);
      return this._readOffset = i + 1, r.toString(e || this._encoding);
    }
    insertStringNT(e, i, r) {
      return he.checkOffsetValue(i), this.insertString(e, i, r), this.insertUInt8(0, i + e.length), this;
    }
    writeStringNT(e, i, r) {
      return this.writeString(e, i, r), this.writeUInt8(0, typeof i == "number" ? i + e.length : this.writeOffset), this;
    }
    readBuffer(e) {
      typeof e != "undefined" && he.checkLengthValue(e);
      let i = typeof e == "number" ? e : this.length, r = Math.min(this.length, this._readOffset + i), n = this._buff.slice(this._readOffset, r);
      return this._readOffset = r, n;
    }
    insertBuffer(e, i) {
      return he.checkOffsetValue(i), this._handleBuffer(e, true, i);
    }
    writeBuffer(e, i) {
      return this._handleBuffer(e, false, i);
    }
    readBufferNT() {
      let e = this.length;
      for (let r = this._readOffset; r < this.length; r++) if (this._buff[r] === 0) {
        e = r;
        break;
      }
      let i = this._buff.slice(this._readOffset, e);
      return this._readOffset = e + 1, i;
    }
    insertBufferNT(e, i) {
      return he.checkOffsetValue(i), this.insertBuffer(e, i), this.insertUInt8(0, i + e.length), this;
    }
    writeBufferNT(e, i) {
      return typeof i != "undefined" && he.checkOffsetValue(i), this.writeBuffer(e, i), this.writeUInt8(0, typeof i == "number" ? i + e.length : this._writeOffset), this;
    }
    clear() {
      return this._writeOffset = 0, this._readOffset = 0, this.length = 0, this;
    }
    remaining() {
      return this.length - this._readOffset;
    }
    get readOffset() {
      return this._readOffset;
    }
    set readOffset(e) {
      he.checkOffsetValue(e), he.checkTargetOffset(e, this), this._readOffset = e;
    }
    get writeOffset() {
      return this._writeOffset;
    }
    set writeOffset(e) {
      he.checkOffsetValue(e), he.checkTargetOffset(e, this), this._writeOffset = e;
    }
    get encoding() {
      return this._encoding;
    }
    set encoding(e) {
      he.checkEncoding(e), this._encoding = e;
    }
    get internalBuffer() {
      return this._buff;
    }
    toBuffer() {
      return this._buff.slice(0, this.length);
    }
    toString(e) {
      let i = typeof e == "string" ? e : this._encoding;
      return he.checkEncoding(i), this._buff.toString(i, 0, this.length);
    }
    destroy() {
      return this.clear(), this;
    }
    _handleString(e, i, r, n) {
      let s = this._writeOffset, o = this._encoding;
      typeof r == "number" ? s = r : typeof r == "string" && (he.checkEncoding(r), o = r), typeof n == "string" && (he.checkEncoding(n), o = n);
      let c = Buffer.byteLength(e, o);
      return i ? this.ensureInsertable(c, s) : this._ensureWriteable(c, s), this._buff.write(e, s, c, o), i ? this._writeOffset += c : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, s + c) : this._writeOffset += c, this;
    }
    _handleBuffer(e, i, r) {
      let n = typeof r == "number" ? r : this._writeOffset;
      return i ? this.ensureInsertable(e.length, n) : this._ensureWriteable(e.length, n), e.copy(this._buff, n), i ? this._writeOffset += e.length : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, n + e.length) : this._writeOffset += e.length, this;
    }
    ensureReadable(e, i) {
      let r = this._readOffset;
      if (typeof i != "undefined" && (he.checkOffsetValue(i), r = i), r < 0 || r + e > this.length) throw new Error(he.ERRORS.INVALID_READ_BEYOND_BOUNDS);
    }
    ensureInsertable(e, i) {
      he.checkOffsetValue(i), this._ensureCapacity(this.length + e), i < this.length && this._buff.copy(this._buff, i + e, i, this._buff.length), i + e > this.length ? this.length = i + e : this.length += e;
    }
    _ensureWriteable(e, i) {
      let r = typeof i == "number" ? i : this._writeOffset;
      this._ensureCapacity(r + e), r + e > this.length && (this.length = r + e);
    }
    _ensureCapacity(e) {
      let i = this._buff.length;
      if (e > i) {
        let r = this._buff, n = i * 3 / 2 + 1;
        n < e && (n = e), this._buff = Buffer.allocUnsafe(n), r.copy(this._buff, 0, 0, i);
      }
    }
    _readNumberValue(e, i, r) {
      this.ensureReadable(i, r);
      let n = e.call(this._buff, typeof r == "number" ? r : this._readOffset);
      return typeof r == "undefined" && (this._readOffset += i), n;
    }
    _insertNumberValue(e, i, r, n) {
      return he.checkOffsetValue(n), this.ensureInsertable(i, n), e.call(this._buff, r, n), this._writeOffset += i, this;
    }
    _writeNumberValue(e, i, r, n) {
      if (typeof n == "number") {
        if (n < 0) throw new Error(he.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);
        he.checkOffsetValue(n);
      }
      let s = typeof n == "number" ? n : this._writeOffset;
      return this._ensureWriteable(i, s), e.call(this._buff, r, s), typeof n == "number" ? this._writeOffset = Math.max(this._writeOffset, s + i) : this._writeOffset += i, this;
    }
  };
  Zs.SmartBuffer = Ks;
});
var Xs = E$1((Ie) => {
  Object.defineProperty(Ie, "__esModule", { value: true });
  Ie.SOCKS5_NO_ACCEPTABLE_AUTH = Ie.SOCKS5_CUSTOM_AUTH_END = Ie.SOCKS5_CUSTOM_AUTH_START = Ie.SOCKS_INCOMING_PACKET_SIZES = Ie.SocksClientState = Ie.Socks5Response = Ie.Socks5HostType = Ie.Socks5Auth = Ie.Socks4Response = Ie.SocksCommand = Ie.ERRORS = Ie.DEFAULT_TIMEOUT = void 0;
  var W0 = 3e4;
  Ie.DEFAULT_TIMEOUT = W0;
  var Y0 = { InvalidSocksCommand: "An invalid SOCKS command was provided. Valid options are connect, bind, and associate.", InvalidSocksCommandForOperation: "An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.", InvalidSocksCommandChain: "An invalid SOCKS command was provided. Chaining currently only supports the connect command.", InvalidSocksClientOptionsDestination: "An invalid destination host was provided.", InvalidSocksClientOptionsExistingSocket: "An invalid existing socket was provided. This should be an instance of stream.Duplex.", InvalidSocksClientOptionsProxy: "Invalid SOCKS proxy details were provided.", InvalidSocksClientOptionsTimeout: "An invalid timeout value was provided. Please enter a value above 0 (in ms).", InvalidSocksClientOptionsProxiesLength: "At least two socks proxies must be provided for chaining.", InvalidSocksClientOptionsCustomAuthRange: "Custom auth must be a value between 0x80 and 0xFE.", InvalidSocksClientOptionsCustomAuthOptions: "When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.", NegotiationError: "Negotiation error", SocketClosed: "Socket closed", ProxyConnectionTimedOut: "Proxy connection timed out", InternalError: "SocksClient internal error (this should not happen)", InvalidSocks4HandshakeResponse: "Received invalid Socks4 handshake response", Socks4ProxyRejectedConnection: "Socks4 Proxy rejected connection", InvalidSocks4IncomingConnectionResponse: "Socks4 invalid incoming connection response", Socks4ProxyRejectedIncomingBoundConnection: "Socks4 Proxy rejected incoming bound connection", InvalidSocks5InitialHandshakeResponse: "Received invalid Socks5 initial handshake response", InvalidSocks5IntiailHandshakeSocksVersion: "Received invalid Socks5 initial handshake (invalid socks version)", InvalidSocks5InitialHandshakeNoAcceptedAuthType: "Received invalid Socks5 initial handshake (no accepted authentication type)", InvalidSocks5InitialHandshakeUnknownAuthType: "Received invalid Socks5 initial handshake (unknown authentication type)", Socks5AuthenticationFailed: "Socks5 Authentication failed", InvalidSocks5FinalHandshake: "Received invalid Socks5 final handshake response", InvalidSocks5FinalHandshakeRejected: "Socks5 proxy rejected connection", InvalidSocks5IncomingConnectionResponse: "Received invalid Socks5 incoming connection response", Socks5ProxyRejectedIncomingBoundConnection: "Socks5 Proxy rejected incoming bound connection" };
  Ie.ERRORS = Y0;
  var K0 = { Socks5InitialHandshakeResponse: 2, Socks5UserPassAuthenticationResponse: 2, Socks5ResponseHeader: 5, Socks5ResponseIPv4: 10, Socks5ResponseIPv6: 22, Socks5ResponseHostname: (t) => t + 7, Socks4Response: 8 };
  Ie.SOCKS_INCOMING_PACKET_SIZES = K0;
  var bu;
  (function(t) {
    t[t.connect = 1] = "connect", t[t.bind = 2] = "bind", t[t.associate = 3] = "associate";
  })(bu || (Ie.SocksCommand = bu = {}));
  var wu;
  (function(t) {
    t[t.Granted = 90] = "Granted", t[t.Failed = 91] = "Failed", t[t.Rejected = 92] = "Rejected", t[t.RejectedIdent = 93] = "RejectedIdent";
  })(wu || (Ie.Socks4Response = wu = {}));
  var Eu;
  (function(t) {
    t[t.NoAuth = 0] = "NoAuth", t[t.GSSApi = 1] = "GSSApi", t[t.UserPass = 2] = "UserPass";
  })(Eu || (Ie.Socks5Auth = Eu = {}));
  var Z0 = 128;
  Ie.SOCKS5_CUSTOM_AUTH_START = Z0;
  var X0 = 254;
  Ie.SOCKS5_CUSTOM_AUTH_END = X0;
  var J0 = 255;
  Ie.SOCKS5_NO_ACCEPTABLE_AUTH = J0;
  var Su;
  (function(t) {
    t[t.Granted = 0] = "Granted", t[t.Failure = 1] = "Failure", t[t.NotAllowed = 2] = "NotAllowed", t[t.NetworkUnreachable = 3] = "NetworkUnreachable", t[t.HostUnreachable = 4] = "HostUnreachable", t[t.ConnectionRefused = 5] = "ConnectionRefused", t[t.TTLExpired = 6] = "TTLExpired", t[t.CommandNotSupported = 7] = "CommandNotSupported", t[t.AddressNotSupported = 8] = "AddressNotSupported";
  })(Su || (Ie.Socks5Response = Su = {}));
  var ku;
  (function(t) {
    t[t.IPv4 = 1] = "IPv4", t[t.Hostname = 3] = "Hostname", t[t.IPv6 = 4] = "IPv6";
  })(ku || (Ie.Socks5HostType = ku = {}));
  var Ou;
  (function(t) {
    t[t.Created = 0] = "Created", t[t.Connecting = 1] = "Connecting", t[t.Connected = 2] = "Connected", t[t.SentInitialHandshake = 3] = "SentInitialHandshake", t[t.ReceivedInitialHandshakeResponse = 4] = "ReceivedInitialHandshakeResponse", t[t.SentAuthentication = 5] = "SentAuthentication", t[t.ReceivedAuthenticationResponse = 6] = "ReceivedAuthenticationResponse", t[t.SentFinalHandshake = 7] = "SentFinalHandshake", t[t.ReceivedFinalResponse = 8] = "ReceivedFinalResponse", t[t.BoundWaitingForConnection = 9] = "BoundWaitingForConnection", t[t.Established = 10] = "Established", t[t.Disconnected = 11] = "Disconnected", t[t.Error = 99] = "Error";
  })(Ou || (Ie.SocksClientState = Ou = {}));
});
var Qs = E$1((Yi) => {
  Object.defineProperty(Yi, "__esModule", { value: true });
  Yi.shuffleArray = Yi.SocksClientError = void 0;
  var Js = class extends Error {
    constructor(e, i) {
      super(e), this.options = i;
    }
  };
  Yi.SocksClientError = Js;
  function Q0(t) {
    for (let e = t.length - 1; e > 0; e--) {
      let i = Math.floor(Math.random() * (e + 1));
      [t[e], t[i]] = [t[i], t[e]];
    }
  }
  Yi.shuffleArray = Q0;
});
var eo = E$1((Ki) => {
  Object.defineProperty(Ki, "__esModule", { value: true });
  Ki.isCorrect = Ki.isInSubnet = void 0;
  function eg(t) {
    return this.subnetMask < t.subnetMask ? false : this.mask(t.subnetMask) === t.mask();
  }
  Ki.isInSubnet = eg;
  function tg(t) {
    return function() {
      return this.addressMinusSuffix !== this.correctForm() ? false : this.subnetMask === t && !this.parsedSubnet ? true : this.parsedSubnet === String(this.subnetMask);
    };
  }
  Ki.isCorrect = tg;
});
var to = E$1((Pt) => {
  Object.defineProperty(Pt, "__esModule", { value: true });
  Pt.RE_SUBNET_STRING = Pt.RE_ADDRESS = Pt.GROUPS = Pt.BITS = void 0;
  Pt.BITS = 32;
  Pt.GROUPS = 4;
  Pt.RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
  Pt.RE_SUBNET_STRING = /\/\d{1,2}$/;
});
var ln = E$1((an) => {
  Object.defineProperty(an, "__esModule", { value: true });
  an.AddressError = void 0;
  var io = class extends Error {
    constructor(e, i) {
      super(e), this.name = "AddressError", i !== null && (this.parseMessage = i);
    }
  };
  an.AddressError = io;
});
var ro = E$1((cn, Cu) => {
  (function() {
    var t, e = 244837814094590, i = (e & 16777215) == 15715070;
    function r(a, f, p) {
      a != null && (typeof a == "number" ? this.fromNumber(a, f, p) : f == null && typeof a != "string" ? this.fromString(a, 256) : this.fromString(a, f));
    }
    function n() {
      return new r(null);
    }
    function s(a, f, p, _, T, I) {
      for (; --I >= 0; ) {
        var U = f * this[a++] + p[_] + T;
        T = Math.floor(U / 67108864), p[_++] = U & 67108863;
      }
      return T;
    }
    function o(a, f, p, _, T, I) {
      for (var U = f & 32767, q = f >> 15; --I >= 0; ) {
        var Re = this[a] & 32767, Ve = this[a++] >> 15, vt2 = q * Re + Ve * U;
        Re = U * Re + ((vt2 & 32767) << 15) + p[_] + (T & 1073741823), T = (Re >>> 30) + (vt2 >>> 15) + q * Ve + (T >>> 30), p[_++] = Re & 1073741823;
      }
      return T;
    }
    function c(a, f, p, _, T, I) {
      for (var U = f & 16383, q = f >> 14; --I >= 0; ) {
        var Re = this[a] & 16383, Ve = this[a++] >> 14, vt2 = q * Re + Ve * U;
        Re = U * Re + ((vt2 & 16383) << 14) + p[_] + T, T = (Re >> 28) + (vt2 >> 14) + q * Ve, p[_++] = Re & 268435455;
      }
      return T;
    }
    var u = typeof navigator != "undefined";
    u && i && navigator.appName == "Microsoft Internet Explorer" ? (r.prototype.am = o, t = 30) : u && i && navigator.appName != "Netscape" ? (r.prototype.am = s, t = 26) : (r.prototype.am = c, t = 28), r.prototype.DB = t, r.prototype.DM = (1 << t) - 1, r.prototype.DV = 1 << t;
    var h = 52;
    r.prototype.FV = Math.pow(2, h), r.prototype.F1 = h - t, r.prototype.F2 = 2 * t - h;
    var l = "0123456789abcdefghijklmnopqrstuvwxyz", d = new Array(), m, v;
    for (m = "0".charCodeAt(0), v = 0; v <= 9; ++v) d[m++] = v;
    for (m = "a".charCodeAt(0), v = 10; v < 36; ++v) d[m++] = v;
    for (m = "A".charCodeAt(0), v = 10; v < 36; ++v) d[m++] = v;
    function g(a) {
      return l.charAt(a);
    }
    function x(a, f) {
      var p = d[a.charCodeAt(f)];
      return p == null ? -1 : p;
    }
    function y(a) {
      for (var f = this.t - 1; f >= 0; --f) a[f] = this[f];
      a.t = this.t, a.s = this.s;
    }
    function O(a) {
      this.t = 1, this.s = a < 0 ? -1 : 0, a > 0 ? this[0] = a : a < -1 ? this[0] = a + this.DV : this.t = 0;
    }
    function B(a) {
      var f = n();
      return f.fromInt(a), f;
    }
    function C(a, f) {
      var p;
      if (f == 16) p = 4;
      else if (f == 8) p = 3;
      else if (f == 256) p = 8;
      else if (f == 2) p = 1;
      else if (f == 32) p = 5;
      else if (f == 4) p = 2;
      else {
        this.fromRadix(a, f);
        return;
      }
      this.t = 0, this.s = 0;
      for (var _ = a.length, T = false, I = 0; --_ >= 0; ) {
        var U = p == 8 ? a[_] & 255 : x(a, _);
        if (U < 0) {
          a.charAt(_) == "-" && (T = true);
          continue;
        }
        T = false, I == 0 ? this[this.t++] = U : I + p > this.DB ? (this[this.t - 1] |= (U & (1 << this.DB - I) - 1) << I, this[this.t++] = U >> this.DB - I) : this[this.t - 1] |= U << I, I += p, I >= this.DB && (I -= this.DB);
      }
      p == 8 && a[0] & 128 && (this.s = -1, I > 0 && (this[this.t - 1] |= (1 << this.DB - I) - 1 << I)), this.clamp(), T && r.ZERO.subTo(this, this);
    }
    function P() {
      for (var a = this.s & this.DM; this.t > 0 && this[this.t - 1] == a; ) --this.t;
    }
    function S(a) {
      if (this.s < 0) return "-" + this.negate().toString(a);
      var f;
      if (a == 16) f = 4;
      else if (a == 8) f = 3;
      else if (a == 2) f = 1;
      else if (a == 32) f = 5;
      else if (a == 4) f = 2;
      else return this.toRadix(a);
      var p = (1 << f) - 1, _, T = false, I = "", U = this.t, q = this.DB - U * this.DB % f;
      if (U-- > 0) for (q < this.DB && (_ = this[U] >> q) > 0 && (T = true, I = g(_)); U >= 0; ) q < f ? (_ = (this[U] & (1 << q) - 1) << f - q, _ |= this[--U] >> (q += this.DB - f)) : (_ = this[U] >> (q -= f) & p, q <= 0 && (q += this.DB, --U)), _ > 0 && (T = true), T && (I += g(_));
      return T ? I : "0";
    }
    function J() {
      var a = n();
      return r.ZERO.subTo(this, a), a;
    }
    function A() {
      return this.s < 0 ? this.negate() : this;
    }
    function z(a) {
      var f = this.s - a.s;
      if (f != 0) return f;
      var p = this.t;
      if (f = p - a.t, f != 0) return this.s < 0 ? -f : f;
      for (; --p >= 0; ) if ((f = this[p] - a[p]) != 0) return f;
      return 0;
    }
    function k(a) {
      var f = 1, p;
      return (p = a >>> 16) != 0 && (a = p, f += 16), (p = a >> 8) != 0 && (a = p, f += 8), (p = a >> 4) != 0 && (a = p, f += 4), (p = a >> 2) != 0 && (a = p, f += 2), (p = a >> 1) != 0 && (a = p, f += 1), f;
    }
    function L() {
      return this.t <= 0 ? 0 : this.DB * (this.t - 1) + k(this[this.t - 1] ^ this.s & this.DM);
    }
    function D(a, f) {
      var p;
      for (p = this.t - 1; p >= 0; --p) f[p + a] = this[p];
      for (p = a - 1; p >= 0; --p) f[p] = 0;
      f.t = this.t + a, f.s = this.s;
    }
    function X(a, f) {
      for (var p = a; p < this.t; ++p) f[p - a] = this[p];
      f.t = Math.max(this.t - a, 0), f.s = this.s;
    }
    function j(a, f) {
      var p = a % this.DB, _ = this.DB - p, T = (1 << _) - 1, I = Math.floor(a / this.DB), U = this.s << p & this.DM, q;
      for (q = this.t - 1; q >= 0; --q) f[q + I + 1] = this[q] >> _ | U, U = (this[q] & T) << p;
      for (q = I - 1; q >= 0; --q) f[q] = 0;
      f[I] = U, f.t = this.t + I + 1, f.s = this.s, f.clamp();
    }
    function se(a, f) {
      f.s = this.s;
      var p = Math.floor(a / this.DB);
      if (p >= this.t) {
        f.t = 0;
        return;
      }
      var _ = a % this.DB, T = this.DB - _, I = (1 << _) - 1;
      f[0] = this[p] >> _;
      for (var U = p + 1; U < this.t; ++U) f[U - p - 1] |= (this[U] & I) << T, f[U - p] = this[U] >> _;
      _ > 0 && (f[this.t - p - 1] |= (this.s & I) << T), f.t = this.t - p, f.clamp();
    }
    function M(a, f) {
      for (var p = 0, _ = 0, T = Math.min(a.t, this.t); p < T; ) _ += this[p] - a[p], f[p++] = _ & this.DM, _ >>= this.DB;
      if (a.t < this.t) {
        for (_ -= a.s; p < this.t; ) _ += this[p], f[p++] = _ & this.DM, _ >>= this.DB;
        _ += this.s;
      } else {
        for (_ += this.s; p < a.t; ) _ -= a[p], f[p++] = _ & this.DM, _ >>= this.DB;
        _ -= a.s;
      }
      f.s = _ < 0 ? -1 : 0, _ < -1 ? f[p++] = this.DV + _ : _ > 0 && (f[p++] = _), f.t = p, f.clamp();
    }
    function $(a, f) {
      var p = this.abs(), _ = a.abs(), T = p.t;
      for (f.t = T + _.t; --T >= 0; ) f[T] = 0;
      for (T = 0; T < _.t; ++T) f[T + p.t] = p.am(0, _[T], f, T, 0, p.t);
      f.s = 0, f.clamp(), this.s != a.s && r.ZERO.subTo(f, f);
    }
    function Y(a) {
      for (var f = this.abs(), p = a.t = 2 * f.t; --p >= 0; ) a[p] = 0;
      for (p = 0; p < f.t - 1; ++p) {
        var _ = f.am(p, f[p], a, 2 * p, 0, 1);
        (a[p + f.t] += f.am(p + 1, 2 * f[p], a, 2 * p + 1, _, f.t - p - 1)) >= f.DV && (a[p + f.t] -= f.DV, a[p + f.t + 1] = 1);
      }
      a.t > 0 && (a[a.t - 1] += f.am(p, f[p], a, 2 * p, 0, 1)), a.s = 0, a.clamp();
    }
    function Q(a, f, p) {
      var _ = a.abs();
      if (!(_.t <= 0)) {
        var T = this.abs();
        if (T.t < _.t) {
          f != null && f.fromInt(0), p != null && this.copyTo(p);
          return;
        }
        p == null && (p = n());
        var I = n(), U = this.s, q = a.s, Re = this.DB - k(_[_.t - 1]);
        Re > 0 ? (_.lShiftTo(Re, I), T.lShiftTo(Re, p)) : (_.copyTo(I), T.copyTo(p));
        var Ve = I.t, vt2 = I[Ve - 1];
        if (vt2 != 0) {
          var ft = vt2 * (1 << this.F1) + (Ve > 1 ? I[Ve - 2] >> this.F2 : 0), jt = this.FV / ft, Vr = (1 << this.F1) / ft, Et2 = 1 << this.F2, St = p.t, Hr2 = St - Ve, Kt = f == null ? n() : f;
          for (I.dlShiftTo(Hr2, Kt), p.compareTo(Kt) >= 0 && (p[p.t++] = 1, p.subTo(Kt, p)), r.ONE.dlShiftTo(Ve, Kt), Kt.subTo(I, I); I.t < Ve; ) I[I.t++] = 0;
          for (; --Hr2 >= 0; ) {
            var $n = p[--St] == vt2 ? this.DM : Math.floor(p[St] * jt + (p[St - 1] + Et2) * Vr);
            if ((p[St] += I.am(0, $n, p, Hr2, 0, Ve)) < $n) for (I.dlShiftTo(Hr2, Kt), p.subTo(Kt, p); p[St] < --$n; ) p.subTo(Kt, p);
          }
          f != null && (p.drShiftTo(Ve, f), U != q && r.ZERO.subTo(f, f)), p.t = Ve, p.clamp(), Re > 0 && p.rShiftTo(Re, p), U < 0 && r.ZERO.subTo(p, p);
        }
      }
    }
    function V(a) {
      var f = n();
      return this.abs().divRemTo(a, null, f), this.s < 0 && f.compareTo(r.ZERO) > 0 && a.subTo(f, f), f;
    }
    function we(a) {
      this.m = a;
    }
    function de(a) {
      return a.s < 0 || a.compareTo(this.m) >= 0 ? a.mod(this.m) : a;
    }
    function le(a) {
      return a;
    }
    function ce(a) {
      a.divRemTo(this.m, null, a);
    }
    function w(a, f, p) {
      a.multiplyTo(f, p), this.reduce(p);
    }
    function K(a, f) {
      a.squareTo(f), this.reduce(f);
    }
    we.prototype.convert = de, we.prototype.revert = le, we.prototype.reduce = ce, we.prototype.mulTo = w, we.prototype.sqrTo = K;
    function Se() {
      if (this.t < 1) return 0;
      var a = this[0];
      if (!(a & 1)) return 0;
      var f = a & 3;
      return f = f * (2 - (a & 15) * f) & 15, f = f * (2 - (a & 255) * f) & 255, f = f * (2 - ((a & 65535) * f & 65535)) & 65535, f = f * (2 - a * f % this.DV) % this.DV, f > 0 ? this.DV - f : -f;
    }
    function _e(a) {
      this.m = a, this.mp = a.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << a.DB - 15) - 1, this.mt2 = 2 * a.t;
    }
    function me(a) {
      var f = n();
      return a.abs().dlShiftTo(this.m.t, f), f.divRemTo(this.m, null, f), a.s < 0 && f.compareTo(r.ZERO) > 0 && this.m.subTo(f, f), f;
    }
    function ge(a) {
      var f = n();
      return a.copyTo(f), this.reduce(f), f;
    }
    function ue(a) {
      for (; a.t <= this.mt2; ) a[a.t++] = 0;
      for (var f = 0; f < this.m.t; ++f) {
        var p = a[f] & 32767, _ = p * this.mpl + ((p * this.mph + (a[f] >> 15) * this.mpl & this.um) << 15) & a.DM;
        for (p = f + this.m.t, a[p] += this.m.am(0, _, a, f, 0, this.m.t); a[p] >= a.DV; ) a[p] -= a.DV, a[++p]++;
      }
      a.clamp(), a.drShiftTo(this.m.t, a), a.compareTo(this.m) >= 0 && a.subTo(this.m, a);
    }
    function H(a, f) {
      a.squareTo(f), this.reduce(f);
    }
    function F(a, f, p) {
      a.multiplyTo(f, p), this.reduce(p);
    }
    _e.prototype.convert = me, _e.prototype.revert = ge, _e.prototype.reduce = ue, _e.prototype.mulTo = F, _e.prototype.sqrTo = H;
    function ke() {
      return (this.t > 0 ? this[0] & 1 : this.s) == 0;
    }
    function ie(a, f) {
      if (a > 4294967295 || a < 1) return r.ONE;
      var p = n(), _ = n(), T = f.convert(this), I = k(a) - 1;
      for (T.copyTo(p); --I >= 0; ) if (f.sqrTo(p, _), (a & 1 << I) > 0) f.mulTo(_, T, p);
      else {
        var U = p;
        p = _, _ = U;
      }
      return f.revert(p);
    }
    function fe(a, f) {
      var p;
      return a < 256 || f.isEven() ? p = new we(f) : p = new _e(f), this.exp(a, p);
    }
    r.prototype.copyTo = y, r.prototype.fromInt = O, r.prototype.fromString = C, r.prototype.clamp = P, r.prototype.dlShiftTo = D, r.prototype.drShiftTo = X, r.prototype.lShiftTo = j, r.prototype.rShiftTo = se, r.prototype.subTo = M, r.prototype.multiplyTo = $, r.prototype.squareTo = Y, r.prototype.divRemTo = Q, r.prototype.invDigit = Se, r.prototype.isEven = ke, r.prototype.exp = ie, r.prototype.toString = S, r.prototype.negate = J, r.prototype.abs = A, r.prototype.compareTo = z, r.prototype.bitLength = L, r.prototype.mod = V, r.prototype.modPowInt = fe, r.ZERO = B(0), r.ONE = B(1);
    function ot2() {
      var a = n();
      return this.copyTo(a), a;
    }
    function ct2() {
      if (this.s < 0) {
        if (this.t == 1) return this[0] - this.DV;
        if (this.t == 0) return -1;
      } else {
        if (this.t == 1) return this[0];
        if (this.t == 0) return 0;
      }
      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
    }
    function b() {
      return this.t == 0 ? this.s : this[0] << 24 >> 24;
    }
    function W() {
      return this.t == 0 ? this.s : this[0] << 16 >> 16;
    }
    function ee(a) {
      return Math.floor(Math.LN2 * this.DB / Math.log(a));
    }
    function Z() {
      return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this[0] <= 0 ? 0 : 1;
    }
    function oe(a) {
      if (a == null && (a = 10), this.signum() == 0 || a < 2 || a > 36) return "0";
      var f = this.chunkSize(a), p = Math.pow(a, f), _ = B(p), T = n(), I = n(), U = "";
      for (this.divRemTo(_, T, I); T.signum() > 0; ) U = (p + I.intValue()).toString(a).substr(1) + U, T.divRemTo(_, T, I);
      return I.intValue().toString(a) + U;
    }
    function ae2(a, f) {
      this.fromInt(0), f == null && (f = 10);
      for (var p = this.chunkSize(f), _ = Math.pow(f, p), T = false, I = 0, U = 0, q = 0; q < a.length; ++q) {
        var Re = x(a, q);
        if (Re < 0) {
          a.charAt(q) == "-" && this.signum() == 0 && (T = true);
          continue;
        }
        U = f * U + Re, ++I >= p && (this.dMultiply(_), this.dAddOffset(U, 0), I = 0, U = 0);
      }
      I > 0 && (this.dMultiply(Math.pow(f, I)), this.dAddOffset(U, 0)), T && r.ZERO.subTo(this, this);
    }
    function xe(a, f, p) {
      if (typeof f == "number") if (a < 2) this.fromInt(1);
      else for (this.fromNumber(a, p), this.testBit(a - 1) || this.bitwiseTo(r.ONE.shiftLeft(a - 1), ne, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(f); ) this.dAddOffset(2, 0), this.bitLength() > a && this.subTo(r.ONE.shiftLeft(a - 1), this);
      else {
        var _ = new Array(), T = a & 7;
        _.length = (a >> 3) + 1, f.nextBytes(_), T > 0 ? _[0] &= (1 << T) - 1 : _[0] = 0, this.fromString(_, 256);
      }
    }
    function ye() {
      var a = this.t, f = new Array();
      f[0] = this.s;
      var p = this.DB - a * this.DB % 8, _, T = 0;
      if (a-- > 0) for (p < this.DB && (_ = this[a] >> p) != (this.s & this.DM) >> p && (f[T++] = _ | this.s << this.DB - p); a >= 0; ) p < 8 ? (_ = (this[a] & (1 << p) - 1) << 8 - p, _ |= this[--a] >> (p += this.DB - 8)) : (_ = this[a] >> (p -= 8) & 255, p <= 0 && (p += this.DB, --a)), _ & 128 && (_ |= -256), T == 0 && (this.s & 128) != (_ & 128) && ++T, (T > 0 || _ != this.s) && (f[T++] = _);
      return f;
    }
    function Be2(a) {
      return this.compareTo(a) == 0;
    }
    function Oe(a) {
      return this.compareTo(a) < 0 ? this : a;
    }
    function N(a) {
      return this.compareTo(a) > 0 ? this : a;
    }
    function G(a, f, p) {
      var _, T, I = Math.min(a.t, this.t);
      for (_ = 0; _ < I; ++_) p[_] = f(this[_], a[_]);
      if (a.t < this.t) {
        for (T = a.s & this.DM, _ = I; _ < this.t; ++_) p[_] = f(this[_], T);
        p.t = this.t;
      } else {
        for (T = this.s & this.DM, _ = I; _ < a.t; ++_) p[_] = f(T, a[_]);
        p.t = a.t;
      }
      p.s = f(this.s, a.s), p.clamp();
    }
    function re(a, f) {
      return a & f;
    }
    function Te(a) {
      var f = n();
      return this.bitwiseTo(a, re, f), f;
    }
    function ne(a, f) {
      return a | f;
    }
    function pe(a) {
      var f = n();
      return this.bitwiseTo(a, ne, f), f;
    }
    function Ee(a, f) {
      return a ^ f;
    }
    function te(a) {
      var f = n();
      return this.bitwiseTo(a, Ee, f), f;
    }
    function be(a, f) {
      return a & ~f;
    }
    function Me(a) {
      var f = n();
      return this.bitwiseTo(a, be, f), f;
    }
    function Ce() {
      for (var a = n(), f = 0; f < this.t; ++f) a[f] = this.DM & ~this[f];
      return a.t = this.t, a.s = ~this.s, a;
    }
    function at2(a) {
      var f = n();
      return a < 0 ? this.rShiftTo(-a, f) : this.lShiftTo(a, f), f;
    }
    function gt(a) {
      var f = n();
      return a < 0 ? this.lShiftTo(-a, f) : this.rShiftTo(a, f), f;
    }
    function Dt(a) {
      if (a == 0) return -1;
      var f = 0;
      return a & 65535 || (a >>= 16, f += 16), a & 255 || (a >>= 8, f += 8), a & 15 || (a >>= 4, f += 4), a & 3 || (a >>= 2, f += 2), a & 1 || ++f, f;
    }
    function Wt() {
      for (var a = 0; a < this.t; ++a) if (this[a] != 0) return a * this.DB + Dt(this[a]);
      return this.s < 0 ? this.t * this.DB : -1;
    }
    function Yt(a) {
      for (var f = 0; a != 0; ) a &= a - 1, ++f;
      return f;
    }
    function si() {
      for (var a = 0, f = this.s & this.DM, p = 0; p < this.t; ++p) a += Yt(this[p] ^ f);
      return a;
    }
    function oi(a) {
      var f = Math.floor(a / this.DB);
      return f >= this.t ? this.s != 0 : (this[f] & 1 << a % this.DB) != 0;
    }
    function Bi(a, f) {
      var p = r.ONE.shiftLeft(a);
      return this.bitwiseTo(p, f, p), p;
    }
    function ai(a) {
      return this.changeBit(a, ne);
    }
    function li(a) {
      return this.changeBit(a, be);
    }
    function ci(a) {
      return this.changeBit(a, Ee);
    }
    function ui(a, f) {
      for (var p = 0, _ = 0, T = Math.min(a.t, this.t); p < T; ) _ += this[p] + a[p], f[p++] = _ & this.DM, _ >>= this.DB;
      if (a.t < this.t) {
        for (_ += a.s; p < this.t; ) _ += this[p], f[p++] = _ & this.DM, _ >>= this.DB;
        _ += this.s;
      } else {
        for (_ += this.s; p < a.t; ) _ += a[p], f[p++] = _ & this.DM, _ >>= this.DB;
        _ += a.s;
      }
      f.s = _ < 0 ? -1 : 0, _ > 0 ? f[p++] = _ : _ < -1 && (f[p++] = this.DV + _), f.t = p, f.clamp();
    }
    function Ir(a) {
      var f = n();
      return this.addTo(a, f), f;
    }
    function lr(a) {
      var f = n();
      return this.subTo(a, f), f;
    }
    function Ar(a) {
      var f = n();
      return this.multiplyTo(a, f), f;
    }
    function Br() {
      var a = n();
      return this.squareTo(a), a;
    }
    function Rr(a) {
      var f = n();
      return this.divRemTo(a, f, null), f;
    }
    function Pr(a) {
      var f = n();
      return this.divRemTo(a, null, f), f;
    }
    function Nr(a) {
      var f = n(), p = n();
      return this.divRemTo(a, f, p), new Array(f, p);
    }
    function jn(a) {
      this[this.t] = this.am(0, a - 1, this, 0, 0, this.t), ++this.t, this.clamp();
    }
    function fi(a, f) {
      if (a != 0) {
        for (; this.t <= f; ) this[this.t++] = 0;
        for (this[f] += a; this[f] >= this.DV; ) this[f] -= this.DV, ++f >= this.t && (this[this.t++] = 0), ++this[f];
      }
    }
    function Ut() {
    }
    function hi(a) {
      return a;
    }
    function Ri(a, f, p) {
      a.multiplyTo(f, p);
    }
    function Lr2(a, f) {
      a.squareTo(f);
    }
    Ut.prototype.convert = hi, Ut.prototype.revert = hi, Ut.prototype.mulTo = Ri, Ut.prototype.sqrTo = Lr2;
    function Fr(a) {
      return this.exp(a, new Ut());
    }
    function Mr2(a, f, p) {
      var _ = Math.min(this.t + a.t, f);
      for (p.s = 0, p.t = _; _ > 0; ) p[--_] = 0;
      var T;
      for (T = p.t - this.t; _ < T; ++_) p[_ + this.t] = this.am(0, a[_], p, _, 0, this.t);
      for (T = Math.min(a.t, f); _ < T; ++_) this.am(0, a[_], p, _, 0, f - _);
      p.clamp();
    }
    function Dr(a, f, p) {
      --f;
      var _ = p.t = this.t + a.t - f;
      for (p.s = 0; --_ >= 0; ) p[_] = 0;
      for (_ = Math.max(f - this.t, 0); _ < a.t; ++_) p[this.t + _ - f] = this.am(f - _, a[_], p, 0, 0, this.t + _ - f);
      p.clamp(), p.drShiftTo(1, p);
    }
    function Bt(a) {
      this.r2 = n(), this.q3 = n(), r.ONE.dlShiftTo(2 * a.t, this.r2), this.mu = this.r2.divide(a), this.m = a;
    }
    function Ur(a) {
      if (a.s < 0 || a.t > 2 * this.m.t) return a.mod(this.m);
      if (a.compareTo(this.m) < 0) return a;
      var f = n();
      return a.copyTo(f), this.reduce(f), f;
    }
    function jr(a) {
      return a;
    }
    function Pi(a) {
      for (a.drShiftTo(this.m.t - 1, this.r2), a.t > this.m.t + 1 && (a.t = this.m.t + 1, a.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); a.compareTo(this.r2) < 0; ) a.dAddOffset(1, this.m.t + 1);
      for (a.subTo(this.r2, a); a.compareTo(this.m) >= 0; ) a.subTo(this.m, a);
    }
    function Xh(a, f) {
      a.squareTo(f), this.reduce(f);
    }
    function Jh(a, f, p) {
      a.multiplyTo(f, p), this.reduce(p);
    }
    Bt.prototype.convert = Ur, Bt.prototype.revert = jr, Bt.prototype.reduce = Pi, Bt.prototype.mulTo = Jh, Bt.prototype.sqrTo = Xh;
    function Qh(a, f) {
      var p = a.bitLength(), _, T = B(1), I;
      if (p <= 0) return T;
      p < 18 ? _ = 1 : p < 48 ? _ = 3 : p < 144 ? _ = 4 : p < 768 ? _ = 5 : _ = 6, p < 8 ? I = new we(f) : f.isEven() ? I = new Bt(f) : I = new _e(f);
      var U = new Array(), q = 3, Re = _ - 1, Ve = (1 << _) - 1;
      if (U[1] = I.convert(this), _ > 1) {
        var vt2 = n();
        for (I.sqrTo(U[1], vt2); q <= Ve; ) U[q] = n(), I.mulTo(vt2, U[q - 2], U[q]), q += 2;
      }
      var ft = a.t - 1, jt, Vr = true, Et2 = n(), St;
      for (p = k(a[ft]) - 1; ft >= 0; ) {
        for (p >= Re ? jt = a[ft] >> p - Re & Ve : (jt = (a[ft] & (1 << p + 1) - 1) << Re - p, ft > 0 && (jt |= a[ft - 1] >> this.DB + p - Re)), q = _; !(jt & 1); ) jt >>= 1, --q;
        if ((p -= q) < 0 && (p += this.DB, --ft), Vr) U[jt].copyTo(T), Vr = false;
        else {
          for (; q > 1; ) I.sqrTo(T, Et2), I.sqrTo(Et2, T), q -= 2;
          q > 0 ? I.sqrTo(T, Et2) : (St = T, T = Et2, Et2 = St), I.mulTo(Et2, U[jt], T);
        }
        for (; ft >= 0 && !(a[ft] & 1 << p); ) I.sqrTo(T, Et2), St = T, T = Et2, Et2 = St, --p < 0 && (p = this.DB - 1, --ft);
      }
      return I.revert(T);
    }
    function ep(a) {
      var f = this.s < 0 ? this.negate() : this.clone(), p = a.s < 0 ? a.negate() : a.clone();
      if (f.compareTo(p) < 0) {
        var _ = f;
        f = p, p = _;
      }
      var T = f.getLowestSetBit(), I = p.getLowestSetBit();
      if (I < 0) return f;
      for (T < I && (I = T), I > 0 && (f.rShiftTo(I, f), p.rShiftTo(I, p)); f.signum() > 0; ) (T = f.getLowestSetBit()) > 0 && f.rShiftTo(T, f), (T = p.getLowestSetBit()) > 0 && p.rShiftTo(T, p), f.compareTo(p) >= 0 ? (f.subTo(p, f), f.rShiftTo(1, f)) : (p.subTo(f, p), p.rShiftTo(1, p));
      return I > 0 && p.lShiftTo(I, p), p;
    }
    function tp(a) {
      if (a <= 0) return 0;
      var f = this.DV % a, p = this.s < 0 ? a - 1 : 0;
      if (this.t > 0) if (f == 0) p = this[0] % a;
      else for (var _ = this.t - 1; _ >= 0; --_) p = (f * p + this[_]) % a;
      return p;
    }
    function ip(a) {
      var f = a.isEven();
      if (this.isEven() && f || a.signum() == 0) return r.ZERO;
      for (var p = a.clone(), _ = this.clone(), T = B(1), I = B(0), U = B(0), q = B(1); p.signum() != 0; ) {
        for (; p.isEven(); ) p.rShiftTo(1, p), f ? ((!T.isEven() || !I.isEven()) && (T.addTo(this, T), I.subTo(a, I)), T.rShiftTo(1, T)) : I.isEven() || I.subTo(a, I), I.rShiftTo(1, I);
        for (; _.isEven(); ) _.rShiftTo(1, _), f ? ((!U.isEven() || !q.isEven()) && (U.addTo(this, U), q.subTo(a, q)), U.rShiftTo(1, U)) : q.isEven() || q.subTo(a, q), q.rShiftTo(1, q);
        p.compareTo(_) >= 0 ? (p.subTo(_, p), f && T.subTo(U, T), I.subTo(q, I)) : (_.subTo(p, _), f && U.subTo(T, U), q.subTo(I, q));
      }
      if (_.compareTo(r.ONE) != 0) return r.ZERO;
      if (q.compareTo(a) >= 0) return q.subtract(a);
      if (q.signum() < 0) q.addTo(a, q);
      else return q;
      return q.signum() < 0 ? q.add(a) : q;
    }
    var et2 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997], rp = (1 << 26) / et2[et2.length - 1];
    function np(a) {
      var f, p = this.abs();
      if (p.t == 1 && p[0] <= et2[et2.length - 1]) {
        for (f = 0; f < et2.length; ++f) if (p[0] == et2[f]) return true;
        return false;
      }
      if (p.isEven()) return false;
      for (f = 1; f < et2.length; ) {
        for (var _ = et2[f], T = f + 1; T < et2.length && _ < rp; ) _ *= et2[T++];
        for (_ = p.modInt(_); f < T; ) if (_ % et2[f++] == 0) return false;
      }
      return p.millerRabin(a);
    }
    function sp(a) {
      var f = this.subtract(r.ONE), p = f.getLowestSetBit();
      if (p <= 0) return false;
      var _ = f.shiftRight(p);
      a = a + 1 >> 1, a > et2.length && (a = et2.length);
      for (var T = n(), I = 0; I < a; ++I) {
        T.fromInt(et2[Math.floor(Math.random() * et2.length)]);
        var U = T.modPow(_, this);
        if (U.compareTo(r.ONE) != 0 && U.compareTo(f) != 0) {
          for (var q = 1; q++ < p && U.compareTo(f) != 0; ) if (U = U.modPowInt(2, this), U.compareTo(r.ONE) == 0) return false;
          if (U.compareTo(f) != 0) return false;
        }
      }
      return true;
    }
    r.prototype.chunkSize = ee, r.prototype.toRadix = oe, r.prototype.fromRadix = ae2, r.prototype.fromNumber = xe, r.prototype.bitwiseTo = G, r.prototype.changeBit = Bi, r.prototype.addTo = ui, r.prototype.dMultiply = jn, r.prototype.dAddOffset = fi, r.prototype.multiplyLowerTo = Mr2, r.prototype.multiplyUpperTo = Dr, r.prototype.modInt = tp, r.prototype.millerRabin = sp, r.prototype.clone = ot2, r.prototype.intValue = ct2, r.prototype.byteValue = b, r.prototype.shortValue = W, r.prototype.signum = Z, r.prototype.toByteArray = ye, r.prototype.equals = Be2, r.prototype.min = Oe, r.prototype.max = N, r.prototype.and = Te, r.prototype.or = pe, r.prototype.xor = te, r.prototype.andNot = Me, r.prototype.not = Ce, r.prototype.shiftLeft = at2, r.prototype.shiftRight = gt, r.prototype.getLowestSetBit = Wt, r.prototype.bitCount = si, r.prototype.testBit = oi, r.prototype.setBit = ai, r.prototype.clearBit = li, r.prototype.flipBit = ci, r.prototype.add = Ir, r.prototype.subtract = lr, r.prototype.multiply = Ar, r.prototype.divide = Rr, r.prototype.remainder = Pr, r.prototype.divideAndRemainder = Nr, r.prototype.modPow = Qh, r.prototype.modInverse = ip, r.prototype.pow = Fr, r.prototype.gcd = ep, r.prototype.isProbablePrime = np, r.prototype.square = Br, r.prototype.Barrett = Bt;
    var qr2, ut2, qe;
    function op(a) {
      ut2[qe++] ^= a & 255, ut2[qe++] ^= a >> 8 & 255, ut2[qe++] ^= a >> 16 & 255, ut2[qe++] ^= a >> 24 & 255, qe >= Hn && (qe -= Hn);
    }
    function ia() {
      op((/* @__PURE__ */ new Date()).getTime());
    }
    if (ut2 == null) {
      ut2 = new Array(), qe = 0;
      var wt2;
      if (typeof window != "undefined" && window.crypto) {
        if (window.crypto.getRandomValues) {
          var ra = new Uint8Array(32);
          for (window.crypto.getRandomValues(ra), wt2 = 0; wt2 < 32; ++wt2) ut2[qe++] = ra[wt2];
        } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
          var na = window.crypto.random(32);
          for (wt2 = 0; wt2 < na.length; ++wt2) ut2[qe++] = na.charCodeAt(wt2) & 255;
        }
      }
      for (; qe < Hn; ) wt2 = Math.floor(65536 * Math.random()), ut2[qe++] = wt2 >>> 8, ut2[qe++] = wt2 & 255;
      qe = 0, ia();
    }
    function ap() {
      if (qr2 == null) {
        for (ia(), qr2 = fp(), qr2.init(ut2), qe = 0; qe < ut2.length; ++qe) ut2[qe] = 0;
        qe = 0;
      }
      return qr2.next();
    }
    function lp(a) {
      var f;
      for (f = 0; f < a.length; ++f) a[f] = ap();
    }
    function qn() {
    }
    qn.prototype.nextBytes = lp;
    function Vn() {
      this.i = 0, this.j = 0, this.S = new Array();
    }
    function cp(a) {
      var f, p, _;
      for (f = 0; f < 256; ++f) this.S[f] = f;
      for (p = 0, f = 0; f < 256; ++f) p = p + this.S[f] + a[f % a.length] & 255, _ = this.S[f], this.S[f] = this.S[p], this.S[p] = _;
      this.i = 0, this.j = 0;
    }
    function up() {
      var a;
      return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, a = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = a, this.S[a + this.S[this.i] & 255];
    }
    Vn.prototype.init = cp, Vn.prototype.next = up;
    function fp() {
      return new Vn();
    }
    var Hn = 256;
    typeof cn != "undefined" ? cn = Cu.exports = { default: r, BigInteger: r, SecureRandom: qn } : this.jsbn = { BigInteger: r, SecureRandom: qn };
  }).call(cn);
});
var gr = E$1((un) => {
  (function() {
    var t = { not_string: /[^s]/, not_bool: /[^t]/, not_type: /[^T]/, not_primitive: /[^v]/, number: /[diefg]/, numeric_arg: /[bcdiefguxX]/, json: /[j]/, not_json: /[^j]/, text: /^[^\x25]+/, modulo: /^\x25{2}/, placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/, key: /^([a-z_][a-z_\d]*)/i, key_access: /^\.([a-z_][a-z_\d]*)/i, index_access: /^\[(\d+)\]/, sign: /^[+-]/ };
    function e(o) {
      return r(s(o), arguments);
    }
    function i(o, c) {
      return e.apply(null, [o].concat(c || []));
    }
    function r(o, c) {
      var u = 1, h = o.length, l, d = "", m, v, g, x, y, O, B, C;
      for (m = 0; m < h; m++) if (typeof o[m] == "string") d += o[m];
      else if (typeof o[m] == "object") {
        if (g = o[m], g.keys) for (l = c[u], v = 0; v < g.keys.length; v++) {
          if (l == null) throw new Error(e('[sprintf] Cannot access property "%s" of undefined value "%s"', g.keys[v], g.keys[v - 1]));
          l = l[g.keys[v]];
        }
        else g.param_no ? l = c[g.param_no] : l = c[u++];
        if (t.not_type.test(g.type) && t.not_primitive.test(g.type) && l instanceof Function && (l = l()), t.numeric_arg.test(g.type) && typeof l != "number" && isNaN(l)) throw new TypeError(e("[sprintf] expecting number but found %T", l));
        switch (t.number.test(g.type) && (B = l >= 0), g.type) {
          case "b":
            l = parseInt(l, 10).toString(2);
            break;
          case "c":
            l = String.fromCharCode(parseInt(l, 10));
            break;
          case "d":
          case "i":
            l = parseInt(l, 10);
            break;
          case "j":
            l = JSON.stringify(l, null, g.width ? parseInt(g.width) : 0);
            break;
          case "e":
            l = g.precision ? parseFloat(l).toExponential(g.precision) : parseFloat(l).toExponential();
            break;
          case "f":
            l = g.precision ? parseFloat(l).toFixed(g.precision) : parseFloat(l);
            break;
          case "g":
            l = g.precision ? String(Number(l.toPrecision(g.precision))) : parseFloat(l);
            break;
          case "o":
            l = (parseInt(l, 10) >>> 0).toString(8);
            break;
          case "s":
            l = String(l), l = g.precision ? l.substring(0, g.precision) : l;
            break;
          case "t":
            l = String(!!l), l = g.precision ? l.substring(0, g.precision) : l;
            break;
          case "T":
            l = Object.prototype.toString.call(l).slice(8, -1).toLowerCase(), l = g.precision ? l.substring(0, g.precision) : l;
            break;
          case "u":
            l = parseInt(l, 10) >>> 0;
            break;
          case "v":
            l = l.valueOf(), l = g.precision ? l.substring(0, g.precision) : l;
            break;
          case "x":
            l = (parseInt(l, 10) >>> 0).toString(16);
            break;
          case "X":
            l = (parseInt(l, 10) >>> 0).toString(16).toUpperCase();
            break;
        }
        t.json.test(g.type) ? d += l : (t.number.test(g.type) && (!B || g.sign) ? (C = B ? "+" : "-", l = l.toString().replace(t.sign, "")) : C = "", y = g.pad_char ? g.pad_char === "0" ? "0" : g.pad_char.charAt(1) : " ", O = g.width - (C + l).length, x = g.width && O > 0 ? y.repeat(O) : "", d += g.align ? C + l + x : y === "0" ? C + x + l : x + C + l);
      }
      return d;
    }
    var n = /* @__PURE__ */ Object.create(null);
    function s(o) {
      if (n[o]) return n[o];
      for (var c = o, u, h = [], l = 0; c; ) {
        if ((u = t.text.exec(c)) !== null) h.push(u[0]);
        else if ((u = t.modulo.exec(c)) !== null) h.push("%");
        else if ((u = t.placeholder.exec(c)) !== null) {
          if (u[2]) {
            l |= 1;
            var d = [], m = u[2], v = [];
            if ((v = t.key.exec(m)) !== null) for (d.push(v[1]); (m = m.substring(v[0].length)) !== ""; ) if ((v = t.key_access.exec(m)) !== null) d.push(v[1]);
            else if ((v = t.index_access.exec(m)) !== null) d.push(v[1]);
            else throw new SyntaxError("[sprintf] failed to parse named argument key");
            else throw new SyntaxError("[sprintf] failed to parse named argument key");
            u[2] = d;
          } else l |= 2;
          if (l === 3) throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
          h.push({ placeholder: u[0], param_no: u[1], keys: u[2], sign: u[3], pad_char: u[4], align: u[5], width: u[6], precision: u[7], type: u[8] });
        } else throw new SyntaxError("[sprintf] unexpected placeholder");
        c = c.substring(u[0].length);
      }
      return n[o] = h;
    }
    typeof un != "undefined" && (un.sprintf = e, un.vsprintf = i), typeof window != "undefined" && (window.sprintf = e, window.vsprintf = i, false);
  })();
});
var so = E$1((Nt) => {
  var ig = Nt && Nt.__createBinding || (Object.create ? function(t, e, i, r) {
    r === void 0 && (r = i);
    var n = Object.getOwnPropertyDescriptor(e, i);
    (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
      return e[i];
    } }), Object.defineProperty(t, r, n);
  } : function(t, e, i, r) {
    r === void 0 && (r = i), t[r] = e[i];
  }), rg = Nt && Nt.__setModuleDefault || (Object.create ? function(t, e) {
    Object.defineProperty(t, "default", { enumerable: true, value: e });
  } : function(t, e) {
    t.default = e;
  }), Au = Nt && Nt.__importStar || function(t) {
    if (t && t.__esModule) return t;
    var e = {};
    if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && ig(e, t, i);
    return rg(e, t), e;
  };
  Object.defineProperty(Nt, "__esModule", { value: true });
  Nt.Address4 = void 0;
  var Tu = Au(eo()), It = Au(to()), Iu = ln(), vr = ro(), Zi = gr(), no = class t {
    constructor(e) {
      this.groups = It.GROUPS, this.parsedAddress = [], this.parsedSubnet = "", this.subnet = "/32", this.subnetMask = 32, this.v4 = true, this.isCorrect = Tu.isCorrect(It.BITS), this.isInSubnet = Tu.isInSubnet, this.address = e;
      let i = It.RE_SUBNET_STRING.exec(e);
      if (i) {
        if (this.parsedSubnet = i[0].replace("/", ""), this.subnetMask = parseInt(this.parsedSubnet, 10), this.subnet = `/${this.subnetMask}`, this.subnetMask < 0 || this.subnetMask > It.BITS) throw new Iu.AddressError("Invalid subnet mask.");
        e = e.replace(It.RE_SUBNET_STRING, "");
      }
      this.addressMinusSuffix = e, this.parsedAddress = this.parse(e);
    }
    static isValid(e) {
      try {
        return new t(e), true;
      } catch {
        return false;
      }
    }
    parse(e) {
      let i = e.split(".");
      if (!e.match(It.RE_ADDRESS)) throw new Iu.AddressError("Invalid IPv4 address.");
      return i;
    }
    correctForm() {
      return this.parsedAddress.map((e) => parseInt(e, 10)).join(".");
    }
    static fromHex(e) {
      let i = e.replace(/:/g, "").padStart(8, "0"), r = [], n;
      for (n = 0; n < 8; n += 2) {
        let s = i.slice(n, n + 2);
        r.push(parseInt(s, 16));
      }
      return new t(r.join("."));
    }
    static fromInteger(e) {
      return t.fromHex(e.toString(16));
    }
    static fromArpa(e) {
      let r = e.replace(/(\.in-addr\.arpa)?\.$/, "").split(".").reverse().join(".");
      return new t(r);
    }
    toHex() {
      return this.parsedAddress.map((e) => (0, Zi.sprintf)("%02x", parseInt(e, 10))).join(":");
    }
    toArray() {
      return this.parsedAddress.map((e) => parseInt(e, 10));
    }
    toGroup6() {
      let e = [], i;
      for (i = 0; i < It.GROUPS; i += 2) {
        let r = (0, Zi.sprintf)("%02x%02x", parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
        e.push((0, Zi.sprintf)("%x", parseInt(r, 16)));
      }
      return e.join(":");
    }
    bigInteger() {
      return new vr.BigInteger(this.parsedAddress.map((e) => (0, Zi.sprintf)("%02x", parseInt(e, 10))).join(""), 16);
    }
    _startAddress() {
      return new vr.BigInteger(this.mask() + "0".repeat(It.BITS - this.subnetMask), 2);
    }
    startAddress() {
      return t.fromBigInteger(this._startAddress());
    }
    startAddressExclusive() {
      let e = new vr.BigInteger("1");
      return t.fromBigInteger(this._startAddress().add(e));
    }
    _endAddress() {
      return new vr.BigInteger(this.mask() + "1".repeat(It.BITS - this.subnetMask), 2);
    }
    endAddress() {
      return t.fromBigInteger(this._endAddress());
    }
    endAddressExclusive() {
      let e = new vr.BigInteger("1");
      return t.fromBigInteger(this._endAddress().subtract(e));
    }
    static fromBigInteger(e) {
      return t.fromInteger(parseInt(e.toString(), 10));
    }
    mask(e) {
      return e === void 0 && (e = this.subnetMask), this.getBitsBase2(0, e);
    }
    getBitsBase2(e, i) {
      return this.binaryZeroPad().slice(e, i);
    }
    reverseForm(e) {
      e || (e = {});
      let i = this.correctForm().split(".").reverse().join(".");
      return e.omitSuffix ? i : (0, Zi.sprintf)("%s.in-addr.arpa.", i);
    }
    isMulticast() {
      return this.isInSubnet(new t("224.0.0.0/4"));
    }
    binaryZeroPad() {
      return this.bigInteger().toString(2).padStart(It.BITS, "0");
    }
    groupForV6() {
      let e = this.parsedAddress;
      return this.address.replace(It.RE_ADDRESS, (0, Zi.sprintf)('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>', e.slice(0, 2).join("."), e.slice(2, 4).join(".")));
    }
  };
  Nt.Address4 = no;
});
var oo = E$1((Le) => {
  Object.defineProperty(Le, "__esModule", { value: true });
  Le.RE_URL_WITH_PORT = Le.RE_URL = Le.RE_ZONE_STRING = Le.RE_SUBNET_STRING = Le.RE_BAD_ADDRESS = Le.RE_BAD_CHARACTERS = Le.TYPES = Le.SCOPES = Le.GROUPS = Le.BITS = void 0;
  Le.BITS = 128;
  Le.GROUPS = 8;
  Le.SCOPES = { 0: "Reserved", 1: "Interface local", 2: "Link local", 4: "Admin local", 5: "Site local", 8: "Organization local", 14: "Global", 15: "Reserved" };
  Le.TYPES = { "ff01::1/128": "Multicast (All nodes on this interface)", "ff01::2/128": "Multicast (All routers on this interface)", "ff02::1/128": "Multicast (All nodes on this link)", "ff02::2/128": "Multicast (All routers on this link)", "ff05::2/128": "Multicast (All routers in this site)", "ff02::5/128": "Multicast (OSPFv3 AllSPF routers)", "ff02::6/128": "Multicast (OSPFv3 AllDR routers)", "ff02::9/128": "Multicast (RIP routers)", "ff02::a/128": "Multicast (EIGRP routers)", "ff02::d/128": "Multicast (PIM routers)", "ff02::16/128": "Multicast (MLDv2 reports)", "ff01::fb/128": "Multicast (mDNSv6)", "ff02::fb/128": "Multicast (mDNSv6)", "ff05::fb/128": "Multicast (mDNSv6)", "ff02::1:2/128": "Multicast (All DHCP servers and relay agents on this link)", "ff05::1:2/128": "Multicast (All DHCP servers and relay agents in this site)", "ff02::1:3/128": "Multicast (All DHCP servers on this link)", "ff05::1:3/128": "Multicast (All DHCP servers in this site)", "::/128": "Unspecified", "::1/128": "Loopback", "ff00::/8": "Multicast", "fe80::/10": "Link-local unicast" };
  Le.RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;
  Le.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;
  Le.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
  Le.RE_ZONE_STRING = /%.*$/;
  Le.RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
  Le.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);
});
var ao = E$1((Lt) => {
  Object.defineProperty(Lt, "__esModule", { value: true });
  Lt.simpleGroup = Lt.spanLeadingZeroes = Lt.spanAll = Lt.spanAllZeroes = void 0;
  var Bu = gr();
  function Ru(t) {
    return t.replace(/(0+)/g, '<span class="zero">$1</span>');
  }
  Lt.spanAllZeroes = Ru;
  function ng(t, e = 0) {
    return t.split("").map((r, n) => (0, Bu.sprintf)('<span class="digit value-%s position-%d">%s</span>', r, n + e, Ru(r))).join("");
  }
  Lt.spanAll = ng;
  function Pu(t) {
    return t.replace(/^(0+)/, '<span class="zero">$1</span>');
  }
  function sg(t) {
    return t.split(":").map((i) => Pu(i)).join(":");
  }
  Lt.spanLeadingZeroes = sg;
  function og(t, e = 0) {
    return t.split(":").map((r, n) => /group-v4/.test(r) ? r : (0, Bu.sprintf)('<span class="hover-group group-%d">%s</span>', n + e, Pu(r)));
  }
  Lt.simpleGroup = og;
});
var Nu = E$1(($e) => {
  var ag = $e && $e.__createBinding || (Object.create ? function(t, e, i, r) {
    r === void 0 && (r = i);
    var n = Object.getOwnPropertyDescriptor(e, i);
    (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
      return e[i];
    } }), Object.defineProperty(t, r, n);
  } : function(t, e, i, r) {
    r === void 0 && (r = i), t[r] = e[i];
  }), lg = $e && $e.__setModuleDefault || (Object.create ? function(t, e) {
    Object.defineProperty(t, "default", { enumerable: true, value: e });
  } : function(t, e) {
    t.default = e;
  }), cg = $e && $e.__importStar || function(t) {
    if (t && t.__esModule) return t;
    var e = {};
    if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && ag(e, t, i);
    return lg(e, t), e;
  };
  Object.defineProperty($e, "__esModule", { value: true });
  $e.possibleElisions = $e.simpleRegularExpression = $e.ADDRESS_BOUNDARY = $e.padGroup = $e.groupPossibilities = void 0;
  var ug = cg(oo()), Xi = gr();
  function hn(t) {
    return (0, Xi.sprintf)("(%s)", t.join("|"));
  }
  $e.groupPossibilities = hn;
  function fn(t) {
    return t.length < 4 ? (0, Xi.sprintf)("0{0,%d}%s", 4 - t.length, t) : t;
  }
  $e.padGroup = fn;
  $e.ADDRESS_BOUNDARY = "[^A-Fa-f0-9:]";
  function fg(t) {
    let e = [];
    t.forEach((r, n) => {
      parseInt(r, 16) === 0 && e.push(n);
    });
    let i = e.map((r) => t.map((n, s) => {
      if (s === r) {
        let o = s === 0 || s === ug.GROUPS - 1 ? ":" : "";
        return hn([fn(n), o]);
      }
      return fn(n);
    }).join(":"));
    return i.push(t.map(fn).join(":")), hn(i);
  }
  $e.simpleRegularExpression = fg;
  function hg(t, e, i) {
    let r = e ? "" : ":", n = i ? "" : ":", s = [];
    !e && !i && s.push("::"), e && i && s.push(""), (i && !e || !i && e) && s.push(":"), s.push((0, Xi.sprintf)("%s(:0{1,4}){1,%d}", r, t - 1)), s.push((0, Xi.sprintf)("(0{1,4}:){1,%d}%s", t - 1, n)), s.push((0, Xi.sprintf)("(0{1,4}:){%d}0{1,4}", t - 1));
    for (let o = 1; o < t - 1; o++) for (let c = 1; c < t - o; c++) s.push((0, Xi.sprintf)("(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}", c, t - c - o - 1));
    return hn(s);
  }
  $e.possibleElisions = hg;
});
var Du = E$1((Ft) => {
  var pg = Ft && Ft.__createBinding || (Object.create ? function(t, e, i, r) {
    r === void 0 && (r = i);
    var n = Object.getOwnPropertyDescriptor(e, i);
    (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
      return e[i];
    } }), Object.defineProperty(t, r, n);
  } : function(t, e, i, r) {
    r === void 0 && (r = i), t[r] = e[i];
  }), dg = Ft && Ft.__setModuleDefault || (Object.create ? function(t, e) {
    Object.defineProperty(t, "default", { enumerable: true, value: e });
  } : function(t, e) {
    t.default = e;
  }), dn = Ft && Ft.__importStar || function(t) {
    if (t && t.__esModule) return t;
    var e = {};
    if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && pg(e, t, i);
    return dg(e, t), e;
  };
  Object.defineProperty(Ft, "__esModule", { value: true });
  Ft.Address6 = void 0;
  var Lu = dn(eo()), lo = dn(to()), Ae = dn(oo()), co = dn(ao()), xi = so(), yi = Nu(), Ht = ln(), rt = ro(), nt2 = gr();
  function pn(t) {
    if (!t) throw new Error("Assertion failed.");
  }
  function mg(t) {
    let e = /(\d+)(\d{3})/;
    for (; e.test(t); ) t = t.replace(e, "$1,$2");
    return t;
  }
  function gg(t) {
    return t = t.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2'), t = t.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2'), t;
  }
  function vg(t, e) {
    let i = [], r = [], n;
    for (n = 0; n < t.length; n++) n < e[0] ? i.push(t[n]) : n > e[1] && r.push(t[n]);
    return i.concat(["compact"]).concat(r);
  }
  function Fu(t) {
    return (0, nt2.sprintf)("%04x", parseInt(t, 16));
  }
  function Mu(t) {
    return t & 255;
  }
  var uo = class t {
    constructor(e, i) {
      this.addressMinusSuffix = "", this.parsedSubnet = "", this.subnet = "/128", this.subnetMask = 128, this.v4 = false, this.zone = "", this.isInSubnet = Lu.isInSubnet, this.isCorrect = Lu.isCorrect(Ae.BITS), i === void 0 ? this.groups = Ae.GROUPS : this.groups = i, this.address = e;
      let r = Ae.RE_SUBNET_STRING.exec(e);
      if (r) {
        if (this.parsedSubnet = r[0].replace("/", ""), this.subnetMask = parseInt(this.parsedSubnet, 10), this.subnet = `/${this.subnetMask}`, Number.isNaN(this.subnetMask) || this.subnetMask < 0 || this.subnetMask > Ae.BITS) throw new Ht.AddressError("Invalid subnet mask.");
        e = e.replace(Ae.RE_SUBNET_STRING, "");
      } else if (/\//.test(e)) throw new Ht.AddressError("Invalid subnet mask.");
      let n = Ae.RE_ZONE_STRING.exec(e);
      n && (this.zone = n[0], e = e.replace(Ae.RE_ZONE_STRING, "")), this.addressMinusSuffix = e, this.parsedAddress = this.parse(this.addressMinusSuffix);
    }
    static isValid(e) {
      try {
        return new t(e), true;
      } catch {
        return false;
      }
    }
    static fromBigInteger(e) {
      let i = e.toString(16).padStart(32, "0"), r = [], n;
      for (n = 0; n < Ae.GROUPS; n++) r.push(i.slice(n * 4, (n + 1) * 4));
      return new t(r.join(":"));
    }
    static fromURL(e) {
      let i, r = null, n;
      if (e.indexOf("[") !== -1 && e.indexOf("]:") !== -1) {
        if (n = Ae.RE_URL_WITH_PORT.exec(e), n === null) return { error: "failed to parse address with port", address: null, port: null };
        i = n[1], r = n[2];
      } else if (e.indexOf("/") !== -1) {
        if (e = e.replace(/^[a-z0-9]+:\/\//, ""), n = Ae.RE_URL.exec(e), n === null) return { error: "failed to parse address from URL", address: null, port: null };
        i = n[1];
      } else i = e;
      return r ? (r = parseInt(r, 10), (r < 0 || r > 65536) && (r = null)) : r = null, { address: new t(i), port: r };
    }
    static fromAddress4(e) {
      let i = new xi.Address4(e), r = Ae.BITS - (lo.BITS - i.subnetMask);
      return new t(`::ffff:${i.correctForm()}/${r}`);
    }
    static fromArpa(e) {
      let i = e.replace(/(\.ip6\.arpa)?\.$/, ""), r = 7;
      if (i.length !== 63) throw new Ht.AddressError("Invalid 'ip6.arpa' form.");
      let n = i.split(".").reverse();
      for (let s = r; s > 0; s--) {
        let o = s * 4;
        n.splice(o, 0, ":");
      }
      return i = n.join(""), new t(i);
    }
    microsoftTranscription() {
      return (0, nt2.sprintf)("%s.ipv6-literal.net", this.correctForm().replace(/:/g, "-"));
    }
    mask(e = this.subnetMask) {
      return this.getBitsBase2(0, e);
    }
    possibleSubnets(e = 128) {
      let i = Ae.BITS - this.subnetMask, r = Math.abs(e - Ae.BITS), n = i - r;
      return n < 0 ? "0" : mg(new rt.BigInteger("2", 10).pow(n).toString(10));
    }
    _startAddress() {
      return new rt.BigInteger(this.mask() + "0".repeat(Ae.BITS - this.subnetMask), 2);
    }
    startAddress() {
      return t.fromBigInteger(this._startAddress());
    }
    startAddressExclusive() {
      let e = new rt.BigInteger("1");
      return t.fromBigInteger(this._startAddress().add(e));
    }
    _endAddress() {
      return new rt.BigInteger(this.mask() + "1".repeat(Ae.BITS - this.subnetMask), 2);
    }
    endAddress() {
      return t.fromBigInteger(this._endAddress());
    }
    endAddressExclusive() {
      let e = new rt.BigInteger("1");
      return t.fromBigInteger(this._endAddress().subtract(e));
    }
    getScope() {
      let e = Ae.SCOPES[this.getBits(12, 16).intValue()];
      return this.getType() === "Global unicast" && e !== "Link local" && (e = "Global"), e || "Unknown";
    }
    getType() {
      for (let e of Object.keys(Ae.TYPES)) if (this.isInSubnet(new t(e))) return Ae.TYPES[e];
      return "Global unicast";
    }
    getBits(e, i) {
      return new rt.BigInteger(this.getBitsBase2(e, i), 2);
    }
    getBitsBase2(e, i) {
      return this.binaryZeroPad().slice(e, i);
    }
    getBitsBase16(e, i) {
      let r = i - e;
      if (r % 4 !== 0) throw new Error("Length of bits to retrieve must be divisible by four");
      return this.getBits(e, i).toString(16).padStart(r / 4, "0");
    }
    getBitsPastSubnet() {
      return this.getBitsBase2(this.subnetMask, Ae.BITS);
    }
    reverseForm(e) {
      e || (e = {});
      let i = Math.floor(this.subnetMask / 4), r = this.canonicalForm().replace(/:/g, "").split("").slice(0, i).reverse().join(".");
      return i > 0 ? e.omitSuffix ? r : (0, nt2.sprintf)("%s.ip6.arpa.", r) : e.omitSuffix ? "" : "ip6.arpa.";
    }
    correctForm() {
      let e, i = [], r = 0, n = [];
      for (e = 0; e < this.parsedAddress.length; e++) {
        let c = parseInt(this.parsedAddress[e], 16);
        c === 0 && r++, c !== 0 && r > 0 && (r > 1 && n.push([e - r, e - 1]), r = 0);
      }
      r > 1 && n.push([this.parsedAddress.length - r, this.parsedAddress.length - 1]);
      let s = n.map((c) => c[1] - c[0] + 1);
      if (n.length > 0) {
        let c = s.indexOf(Math.max(...s));
        i = vg(this.parsedAddress, n[c]);
      } else i = this.parsedAddress;
      for (e = 0; e < i.length; e++) i[e] !== "compact" && (i[e] = parseInt(i[e], 16).toString(16));
      let o = i.join(":");
      return o = o.replace(/^compact$/, "::"), o = o.replace(/^compact|compact$/, ":"), o = o.replace(/compact/, ""), o;
    }
    binaryZeroPad() {
      return this.bigInteger().toString(2).padStart(Ae.BITS, "0");
    }
    parse4in6(e) {
      let i = e.split(":"), n = i.slice(-1)[0].match(lo.RE_ADDRESS);
      if (n) {
        this.parsedAddress4 = n[0], this.address4 = new xi.Address4(this.parsedAddress4);
        for (let s = 0; s < this.address4.groups; s++) if (/^0[0-9]+/.test(this.address4.parsedAddress[s])) throw new Ht.AddressError("IPv4 addresses can't have leading zeroes.", e.replace(lo.RE_ADDRESS, this.address4.parsedAddress.map(gg).join(".")));
        this.v4 = true, i[i.length - 1] = this.address4.toGroup6(), e = i.join(":");
      }
      return e;
    }
    parse(e) {
      e = this.parse4in6(e);
      let i = e.match(Ae.RE_BAD_CHARACTERS);
      if (i) throw new Ht.AddressError((0, nt2.sprintf)("Bad character%s detected in address: %s", i.length > 1 ? "s" : "", i.join("")), e.replace(Ae.RE_BAD_CHARACTERS, '<span class="parse-error">$1</span>'));
      let r = e.match(Ae.RE_BAD_ADDRESS);
      if (r) throw new Ht.AddressError((0, nt2.sprintf)("Address failed regex: %s", r.join("")), e.replace(Ae.RE_BAD_ADDRESS, '<span class="parse-error">$1</span>'));
      let n = [], s = e.split("::");
      if (s.length === 2) {
        let o = s[0].split(":"), c = s[1].split(":");
        o.length === 1 && o[0] === "" && (o = []), c.length === 1 && c[0] === "" && (c = []);
        let u = this.groups - (o.length + c.length);
        if (!u) throw new Ht.AddressError("Error parsing groups");
        this.elidedGroups = u, this.elisionBegin = o.length, this.elisionEnd = o.length + this.elidedGroups, n = n.concat(o);
        for (let h = 0; h < u; h++) n.push("0");
        n = n.concat(c);
      } else if (s.length === 1) n = e.split(":"), this.elidedGroups = 0;
      else throw new Ht.AddressError("Too many :: groups found");
      if (n = n.map((o) => (0, nt2.sprintf)("%x", parseInt(o, 16))), n.length !== this.groups) throw new Ht.AddressError("Incorrect number of groups found");
      return n;
    }
    canonicalForm() {
      return this.parsedAddress.map(Fu).join(":");
    }
    decimal() {
      return this.parsedAddress.map((e) => (0, nt2.sprintf)("%05d", parseInt(e, 16))).join(":");
    }
    bigInteger() {
      return new rt.BigInteger(this.parsedAddress.map(Fu).join(""), 16);
    }
    to4() {
      let e = this.binaryZeroPad().split("");
      return xi.Address4.fromHex(new rt.BigInteger(e.slice(96, 128).join(""), 2).toString(16));
    }
    to4in6() {
      let e = this.to4(), r = new t(this.parsedAddress.slice(0, 6).join(":"), 6).correctForm(), n = "";
      return /:$/.test(r) || (n = ":"), r + n + e.address;
    }
    inspectTeredo() {
      let e = this.getBitsBase16(0, 32), i = this.getBits(80, 96).xor(new rt.BigInteger("ffff", 16)).toString(), r = xi.Address4.fromHex(this.getBitsBase16(32, 64)), n = xi.Address4.fromHex(this.getBits(96, 128).xor(new rt.BigInteger("ffffffff", 16)).toString(16)), s = this.getBits(64, 80), o = this.getBitsBase2(64, 80), c = s.testBit(15), u = s.testBit(14), h = s.testBit(8), l = s.testBit(9), d = new rt.BigInteger(o.slice(2, 6) + o.slice(8, 16), 2).toString(10);
      return { prefix: (0, nt2.sprintf)("%s:%s", e.slice(0, 4), e.slice(4, 8)), server4: r.address, client4: n.address, flags: o, coneNat: c, microsoft: { reserved: u, universalLocal: l, groupIndividual: h, nonce: d }, udpPort: i };
    }
    inspect6to4() {
      let e = this.getBitsBase16(0, 16), i = xi.Address4.fromHex(this.getBitsBase16(16, 48));
      return { prefix: (0, nt2.sprintf)("%s", e.slice(0, 4)), gateway: i.address };
    }
    to6to4() {
      if (!this.is4()) return null;
      let e = ["2002", this.getBitsBase16(96, 112), this.getBitsBase16(112, 128), "", "/16"].join(":");
      return new t(e);
    }
    toByteArray() {
      let e = this.bigInteger().toByteArray();
      return e.length === 17 && e[0] === 0 ? e.slice(1) : e;
    }
    toUnsignedByteArray() {
      return this.toByteArray().map(Mu);
    }
    static fromByteArray(e) {
      return this.fromUnsignedByteArray(e.map(Mu));
    }
    static fromUnsignedByteArray(e) {
      let i = new rt.BigInteger("256", 10), r = new rt.BigInteger("0", 10), n = new rt.BigInteger("1", 10);
      for (let s = e.length - 1; s >= 0; s--) r = r.add(n.multiply(new rt.BigInteger(e[s].toString(10), 10))), n = n.multiply(i);
      return t.fromBigInteger(r);
    }
    isCanonical() {
      return this.addressMinusSuffix === this.canonicalForm();
    }
    isLinkLocal() {
      return this.getBitsBase2(0, 64) === "1111111010000000000000000000000000000000000000000000000000000000";
    }
    isMulticast() {
      return this.getType() === "Multicast";
    }
    is4() {
      return this.v4;
    }
    isTeredo() {
      return this.isInSubnet(new t("2001::/32"));
    }
    is6to4() {
      return this.isInSubnet(new t("2002::/16"));
    }
    isLoopback() {
      return this.getType() === "Loopback";
    }
    href(e) {
      return e === void 0 ? e = "" : e = (0, nt2.sprintf)(":%s", e), (0, nt2.sprintf)("http://[%s]%s/", this.correctForm(), e);
    }
    link(e) {
      e || (e = {}), e.className === void 0 && (e.className = ""), e.prefix === void 0 && (e.prefix = "/#address="), e.v4 === void 0 && (e.v4 = false);
      let i = this.correctForm;
      return e.v4 && (i = this.to4in6), e.className ? (0, nt2.sprintf)('<a href="%1$s%2$s" class="%3$s">%2$s</a>', e.prefix, i.call(this), e.className) : (0, nt2.sprintf)('<a href="%1$s%2$s">%2$s</a>', e.prefix, i.call(this));
    }
    group() {
      if (this.elidedGroups === 0) return co.simpleGroup(this.address).join(":");
      pn(typeof this.elidedGroups == "number"), pn(typeof this.elisionBegin == "number");
      let e = [], [i, r] = this.address.split("::");
      i.length ? e.push(...co.simpleGroup(i)) : e.push("");
      let n = ["hover-group"];
      for (let s = this.elisionBegin; s < this.elisionBegin + this.elidedGroups; s++) n.push((0, nt2.sprintf)("group-%d", s));
      return e.push((0, nt2.sprintf)('<span class="%s"></span>', n.join(" "))), r.length ? e.push(...co.simpleGroup(r, this.elisionEnd)) : e.push(""), this.is4() && (pn(this.address4 instanceof xi.Address4), e.pop(), e.push(this.address4.groupForV6())), e.join(":");
    }
    regularExpressionString(e = false) {
      let i = [], r = new t(this.correctForm());
      if (r.elidedGroups === 0) i.push((0, yi.simpleRegularExpression)(r.parsedAddress));
      else if (r.elidedGroups === Ae.GROUPS) i.push((0, yi.possibleElisions)(Ae.GROUPS));
      else {
        let n = r.address.split("::");
        n[0].length && i.push((0, yi.simpleRegularExpression)(n[0].split(":"))), pn(typeof r.elidedGroups == "number"), i.push((0, yi.possibleElisions)(r.elidedGroups, n[0].length !== 0, n[1].length !== 0)), n[1].length && i.push((0, yi.simpleRegularExpression)(n[1].split(":"))), i = [i.join(":")];
      }
      return e || (i = ["(?=^|", yi.ADDRESS_BOUNDARY, "|[^\\w\\:])(", ...i, ")(?=[^\\w\\:]|", yi.ADDRESS_BOUNDARY, "|$)"]), i.join("");
    }
    regularExpression(e = false) {
      return new RegExp(this.regularExpressionString(e), "i");
    }
  };
  Ft.Address6 = uo;
});
var fo = E$1((Je2) => {
  var _g = Je2 && Je2.__createBinding || (Object.create ? function(t, e, i, r) {
    r === void 0 && (r = i);
    var n = Object.getOwnPropertyDescriptor(e, i);
    (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
      return e[i];
    } }), Object.defineProperty(t, r, n);
  } : function(t, e, i, r) {
    r === void 0 && (r = i), t[r] = e[i];
  }), xg = Je2 && Je2.__setModuleDefault || (Object.create ? function(t, e) {
    Object.defineProperty(t, "default", { enumerable: true, value: e });
  } : function(t, e) {
    t.default = e;
  }), yg = Je2 && Je2.__importStar || function(t) {
    if (t && t.__esModule) return t;
    var e = {};
    if (t != null) for (var i in t) i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && _g(e, t, i);
    return xg(e, t), e;
  };
  Object.defineProperty(Je2, "__esModule", { value: true });
  Je2.v6 = Je2.AddressError = Je2.Address6 = Je2.Address4 = void 0;
  var bg = so();
  Object.defineProperty(Je2, "Address4", { enumerable: true, get: function() {
    return bg.Address4;
  } });
  var wg = Du();
  Object.defineProperty(Je2, "Address6", { enumerable: true, get: function() {
    return wg.Address6;
  } });
  var Eg = ln();
  Object.defineProperty(Je2, "AddressError", { enumerable: true, get: function() {
    return Eg.AddressError;
  } });
  var Sg = yg(ao());
  Je2.v6 = { helpers: Sg };
});
var $u = E$1((xt2) => {
  Object.defineProperty(xt2, "__esModule", { value: true });
  xt2.ipToBuffer = xt2.int32ToIpv4 = xt2.ipv4ToInt32 = xt2.validateSocksClientChainOptions = xt2.validateSocksClientOptions = void 0;
  var st2 = Qs(), Ge = Xs(), kg = require$$12, ho = fo(), Uu = require$$8;
  function Og(t, e = ["connect", "bind", "associate"]) {
    if (!Ge.SocksCommand[t.command]) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksCommand, t);
    if (e.indexOf(t.command) === -1) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksCommandForOperation, t);
    if (!qu(t.destination)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsDestination, t);
    if (!Vu(t.proxy)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsProxy, t);
    if (ju(t.proxy, t), t.timeout && !Hu(t.timeout)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsTimeout, t);
    if (t.existing_socket && !(t.existing_socket instanceof kg.Duplex)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsExistingSocket, t);
  }
  xt2.validateSocksClientOptions = Og;
  function Cg(t) {
    if (t.command !== "connect") throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksCommandChain, t);
    if (!qu(t.destination)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsDestination, t);
    if (!(t.proxies && Array.isArray(t.proxies) && t.proxies.length >= 2)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsProxiesLength, t);
    if (t.proxies.forEach((e) => {
      if (!Vu(e)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsProxy, t);
      ju(e, t);
    }), t.timeout && !Hu(t.timeout)) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsTimeout, t);
  }
  xt2.validateSocksClientChainOptions = Cg;
  function ju(t, e) {
    if (t.custom_auth_method !== void 0) {
      if (t.custom_auth_method < Ge.SOCKS5_CUSTOM_AUTH_START || t.custom_auth_method > Ge.SOCKS5_CUSTOM_AUTH_END) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsCustomAuthRange, e);
      if (t.custom_auth_request_handler === void 0 || typeof t.custom_auth_request_handler != "function") throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
      if (t.custom_auth_response_size === void 0) throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
      if (t.custom_auth_response_handler === void 0 || typeof t.custom_auth_response_handler != "function") throw new st2.SocksClientError(Ge.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
    }
  }
  function qu(t) {
    return t && typeof t.host == "string" && typeof t.port == "number" && t.port >= 0 && t.port <= 65535;
  }
  function Vu(t) {
    return t && (typeof t.host == "string" || typeof t.ipaddress == "string") && typeof t.port == "number" && t.port >= 0 && t.port <= 65535 && (t.type === 4 || t.type === 5);
  }
  function Hu(t) {
    return typeof t == "number" && t > 0;
  }
  function Tg(t) {
    return new ho.Address4(t).toArray().reduce((i, r) => (i << 8) + r, 0);
  }
  xt2.ipv4ToInt32 = Tg;
  function Ig(t) {
    let e = t >>> 24 & 255, i = t >>> 16 & 255, r = t >>> 8 & 255, n = t & 255;
    return [e, i, r, n].join(".");
  }
  xt2.int32ToIpv4 = Ig;
  function Ag(t) {
    if (Uu.isIPv4(t)) {
      let e = new ho.Address4(t);
      return Buffer.from(e.toArray());
    } else if (Uu.isIPv6(t)) {
      let e = new ho.Address6(t);
      return Buffer.from(e.canonicalForm().split(":").map((i) => i.padStart(4, "0")).join(""), "hex");
    } else throw new Error("Invalid IP address format");
  }
  xt2.ipToBuffer = Ag;
});
var Gu = E$1((mn) => {
  Object.defineProperty(mn, "__esModule", { value: true });
  mn.ReceiveBuffer = void 0;
  var po = class {
    constructor(e = 4096) {
      this.buffer = Buffer.allocUnsafe(e), this.offset = 0, this.originalSize = e;
    }
    get length() {
      return this.offset;
    }
    append(e) {
      if (!Buffer.isBuffer(e)) throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");
      if (this.offset + e.length >= this.buffer.length) {
        let i = this.buffer;
        this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + e.length)), i.copy(this.buffer);
      }
      return e.copy(this.buffer, this.offset), this.offset += e.length;
    }
    peek(e) {
      if (e > this.offset) throw new Error("Attempted to read beyond the bounds of the managed internal data.");
      return this.buffer.slice(0, e);
    }
    get(e) {
      if (e > this.offset) throw new Error("Attempted to read beyond the bounds of the managed internal data.");
      let i = Buffer.allocUnsafe(e);
      return this.buffer.slice(0, e).copy(i), this.buffer.copyWithin(0, e, e + this.offset - e), this.offset -= e, i;
    }
  };
  mn.ReceiveBuffer = po;
});
var zu = E$1((Qt) => {
  var Ji = Qt && Qt.__awaiter || function(t, e, i, r) {
    function n(s) {
      return s instanceof i ? s : new i(function(o) {
        o(s);
      });
    }
    return new (i || (i = Promise))(function(s, o) {
      function c(l) {
        try {
          h(r.next(l));
        } catch (d) {
          o(d);
        }
      }
      function u(l) {
        try {
          h(r.throw(l));
        } catch (d) {
          o(d);
        }
      }
      function h(l) {
        l.done ? s(l.value) : n(l.value).then(c, u);
      }
      h((r = r.apply(t, e || [])).next());
    });
  };
  Object.defineProperty(Qt, "__esModule", { value: true });
  Qt.SocksClientError = Qt.SocksClient = void 0;
  var Bg = require$$0$1, Qi = require$$8, lt = yu(), R = Xs(), dt2 = $u(), Rg = Gu(), go = Qs();
  Object.defineProperty(Qt, "SocksClientError", { enumerable: true, get: function() {
    return go.SocksClientError;
  } });
  var mo = fo(), vo = class t extends Bg.EventEmitter {
    constructor(e) {
      super(), this.options = Object.assign({}, e), (0, dt2.validateSocksClientOptions)(e), this.setState(R.SocksClientState.Created);
    }
    static createConnection(e, i) {
      return new Promise((r, n) => {
        try {
          (0, dt2.validateSocksClientOptions)(e, ["connect"]);
        } catch (o) {
          return typeof i == "function" ? (i(o), r(o)) : n(o);
        }
        let s = new t(e);
        s.connect(e.existing_socket), s.once("established", (o) => {
          s.removeAllListeners(), typeof i == "function" && i(null, o), r(o);
        }), s.once("error", (o) => {
          s.removeAllListeners(), typeof i == "function" ? (i(o), r(o)) : n(o);
        });
      });
    }
    static createConnectionChain(e, i) {
      return new Promise((r, n) => Ji(this, void 0, void 0, function* () {
        try {
          (0, dt2.validateSocksClientChainOptions)(e);
        } catch (s) {
          return typeof i == "function" ? (i(s), r(s)) : n(s);
        }
        e.randomizeChain && (0, go.shuffleArray)(e.proxies);
        try {
          let s;
          for (let o = 0; o < e.proxies.length; o++) {
            let c = e.proxies[o], u = o === e.proxies.length - 1 ? e.destination : { host: e.proxies[o + 1].host || e.proxies[o + 1].ipaddress, port: e.proxies[o + 1].port }, h = yield t.createConnection({ command: "connect", proxy: c, destination: u, existing_socket: s });
            s = s || h.socket;
          }
          typeof i == "function" ? (i(null, { socket: s }), r({ socket: s })) : r({ socket: s });
        } catch (s) {
          typeof i == "function" ? (i(s), r(s)) : n(s);
        }
      }));
    }
    static createUDPFrame(e) {
      let i = new lt.SmartBuffer();
      return i.writeUInt16BE(0), i.writeUInt8(e.frameNumber || 0), Qi.isIPv4(e.remoteHost.host) ? (i.writeUInt8(R.Socks5HostType.IPv4), i.writeUInt32BE((0, dt2.ipv4ToInt32)(e.remoteHost.host))) : Qi.isIPv6(e.remoteHost.host) ? (i.writeUInt8(R.Socks5HostType.IPv6), i.writeBuffer((0, dt2.ipToBuffer)(e.remoteHost.host))) : (i.writeUInt8(R.Socks5HostType.Hostname), i.writeUInt8(Buffer.byteLength(e.remoteHost.host)), i.writeString(e.remoteHost.host)), i.writeUInt16BE(e.remoteHost.port), i.writeBuffer(e.data), i.toBuffer();
    }
    static parseUDPFrame(e) {
      let i = lt.SmartBuffer.fromBuffer(e);
      i.readOffset = 2;
      let r = i.readUInt8(), n = i.readUInt8(), s;
      n === R.Socks5HostType.IPv4 ? s = (0, dt2.int32ToIpv4)(i.readUInt32BE()) : n === R.Socks5HostType.IPv6 ? s = mo.Address6.fromByteArray(Array.from(i.readBuffer(16))).canonicalForm() : s = i.readString(i.readUInt8());
      let o = i.readUInt16BE();
      return { frameNumber: r, remoteHost: { host: s, port: o }, data: i.readBuffer() };
    }
    setState(e) {
      this.state !== R.SocksClientState.Error && (this.state = e);
    }
    connect(e) {
      this.onDataReceived = (r) => this.onDataReceivedHandler(r), this.onClose = () => this.onCloseHandler(), this.onError = (r) => this.onErrorHandler(r), this.onConnect = () => this.onConnectHandler();
      let i = setTimeout(() => this.onEstablishedTimeout(), this.options.timeout || R.DEFAULT_TIMEOUT);
      i.unref && typeof i.unref == "function" && i.unref(), e ? this.socket = e : this.socket = new Qi.Socket(), this.socket.once("close", this.onClose), this.socket.once("error", this.onError), this.socket.once("connect", this.onConnect), this.socket.on("data", this.onDataReceived), this.setState(R.SocksClientState.Connecting), this.receiveBuffer = new Rg.ReceiveBuffer(), e ? this.socket.emit("connect") : (this.socket.connect(this.getSocketOptions()), this.options.set_tcp_nodelay !== void 0 && this.options.set_tcp_nodelay !== null && this.socket.setNoDelay(!!this.options.set_tcp_nodelay)), this.prependOnceListener("established", (r) => {
        setImmediate(() => {
          if (this.receiveBuffer.length > 0) {
            let n = this.receiveBuffer.get(this.receiveBuffer.length);
            r.socket.emit("data", n);
          }
          r.socket.resume();
        });
      });
    }
    getSocketOptions() {
      return Object.assign(Object.assign({}, this.options.socket_options), { host: this.options.proxy.host || this.options.proxy.ipaddress, port: this.options.proxy.port });
    }
    onEstablishedTimeout() {
      this.state !== R.SocksClientState.Established && this.state !== R.SocksClientState.BoundWaitingForConnection && this.closeSocket(R.ERRORS.ProxyConnectionTimedOut);
    }
    onConnectHandler() {
      this.setState(R.SocksClientState.Connected), this.options.proxy.type === 4 ? this.sendSocks4InitialHandshake() : this.sendSocks5InitialHandshake(), this.setState(R.SocksClientState.SentInitialHandshake);
    }
    onDataReceivedHandler(e) {
      this.receiveBuffer.append(e), this.processData();
    }
    processData() {
      for (; this.state !== R.SocksClientState.Established && this.state !== R.SocksClientState.Error && this.receiveBuffer.length >= this.nextRequiredPacketBufferSize; ) if (this.state === R.SocksClientState.SentInitialHandshake) this.options.proxy.type === 4 ? this.handleSocks4FinalHandshakeResponse() : this.handleInitialSocks5HandshakeResponse();
      else if (this.state === R.SocksClientState.SentAuthentication) this.handleInitialSocks5AuthenticationHandshakeResponse();
      else if (this.state === R.SocksClientState.SentFinalHandshake) this.handleSocks5FinalHandshakeResponse();
      else if (this.state === R.SocksClientState.BoundWaitingForConnection) this.options.proxy.type === 4 ? this.handleSocks4IncomingConnectionResponse() : this.handleSocks5IncomingConnectionResponse();
      else {
        this.closeSocket(R.ERRORS.InternalError);
        break;
      }
    }
    onCloseHandler() {
      this.closeSocket(R.ERRORS.SocketClosed);
    }
    onErrorHandler(e) {
      this.closeSocket(e.message);
    }
    removeInternalSocketHandlers() {
      this.socket.pause(), this.socket.removeListener("data", this.onDataReceived), this.socket.removeListener("close", this.onClose), this.socket.removeListener("error", this.onError), this.socket.removeListener("connect", this.onConnect);
    }
    closeSocket(e) {
      this.state !== R.SocksClientState.Error && (this.setState(R.SocksClientState.Error), this.socket.destroy(), this.removeInternalSocketHandlers(), this.emit("error", new go.SocksClientError(e, this.options)));
    }
    sendSocks4InitialHandshake() {
      let e = this.options.proxy.userId || "", i = new lt.SmartBuffer();
      i.writeUInt8(4), i.writeUInt8(R.SocksCommand[this.options.command]), i.writeUInt16BE(this.options.destination.port), Qi.isIPv4(this.options.destination.host) ? (i.writeBuffer((0, dt2.ipToBuffer)(this.options.destination.host)), i.writeStringNT(e)) : (i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(1), i.writeStringNT(e), i.writeStringNT(this.options.destination.host)), this.nextRequiredPacketBufferSize = R.SOCKS_INCOMING_PACKET_SIZES.Socks4Response, this.socket.write(i.toBuffer());
    }
    handleSocks4FinalHandshakeResponse() {
      let e = this.receiveBuffer.get(8);
      if (e[1] !== R.Socks4Response.Granted) this.closeSocket(`${R.ERRORS.Socks4ProxyRejectedConnection} - (${R.Socks4Response[e[1]]})`);
      else if (R.SocksCommand[this.options.command] === R.SocksCommand.bind) {
        let i = lt.SmartBuffer.fromBuffer(e);
        i.readOffset = 2;
        let r = { port: i.readUInt16BE(), host: (0, dt2.int32ToIpv4)(i.readUInt32BE()) };
        r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress), this.setState(R.SocksClientState.BoundWaitingForConnection), this.emit("bound", { remoteHost: r, socket: this.socket });
      } else this.setState(R.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { socket: this.socket });
    }
    handleSocks4IncomingConnectionResponse() {
      let e = this.receiveBuffer.get(8);
      if (e[1] !== R.Socks4Response.Granted) this.closeSocket(`${R.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${R.Socks4Response[e[1]]})`);
      else {
        let i = lt.SmartBuffer.fromBuffer(e);
        i.readOffset = 2;
        let r = { port: i.readUInt16BE(), host: (0, dt2.int32ToIpv4)(i.readUInt32BE()) };
        this.setState(R.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
      }
    }
    sendSocks5InitialHandshake() {
      let e = new lt.SmartBuffer(), i = [R.Socks5Auth.NoAuth];
      (this.options.proxy.userId || this.options.proxy.password) && i.push(R.Socks5Auth.UserPass), this.options.proxy.custom_auth_method !== void 0 && i.push(this.options.proxy.custom_auth_method), e.writeUInt8(5), e.writeUInt8(i.length);
      for (let r of i) e.writeUInt8(r);
      this.nextRequiredPacketBufferSize = R.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse, this.socket.write(e.toBuffer()), this.setState(R.SocksClientState.SentInitialHandshake);
    }
    handleInitialSocks5HandshakeResponse() {
      let e = this.receiveBuffer.get(2);
      e[0] !== 5 ? this.closeSocket(R.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion) : e[1] === R.SOCKS5_NO_ACCEPTABLE_AUTH ? this.closeSocket(R.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType) : e[1] === R.Socks5Auth.NoAuth ? (this.socks5ChosenAuthType = R.Socks5Auth.NoAuth, this.sendSocks5CommandRequest()) : e[1] === R.Socks5Auth.UserPass ? (this.socks5ChosenAuthType = R.Socks5Auth.UserPass, this.sendSocks5UserPassAuthentication()) : e[1] === this.options.proxy.custom_auth_method ? (this.socks5ChosenAuthType = this.options.proxy.custom_auth_method, this.sendSocks5CustomAuthentication()) : this.closeSocket(R.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);
    }
    sendSocks5UserPassAuthentication() {
      let e = this.options.proxy.userId || "", i = this.options.proxy.password || "", r = new lt.SmartBuffer();
      r.writeUInt8(1), r.writeUInt8(Buffer.byteLength(e)), r.writeString(e), r.writeUInt8(Buffer.byteLength(i)), r.writeString(i), this.nextRequiredPacketBufferSize = R.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse, this.socket.write(r.toBuffer()), this.setState(R.SocksClientState.SentAuthentication);
    }
    sendSocks5CustomAuthentication() {
      return Ji(this, void 0, void 0, function* () {
        this.nextRequiredPacketBufferSize = this.options.proxy.custom_auth_response_size, this.socket.write(yield this.options.proxy.custom_auth_request_handler()), this.setState(R.SocksClientState.SentAuthentication);
      });
    }
    handleSocks5CustomAuthHandshakeResponse(e) {
      return Ji(this, void 0, void 0, function* () {
        return yield this.options.proxy.custom_auth_response_handler(e);
      });
    }
    handleSocks5AuthenticationNoAuthHandshakeResponse(e) {
      return Ji(this, void 0, void 0, function* () {
        return e[1] === 0;
      });
    }
    handleSocks5AuthenticationUserPassHandshakeResponse(e) {
      return Ji(this, void 0, void 0, function* () {
        return e[1] === 0;
      });
    }
    handleInitialSocks5AuthenticationHandshakeResponse() {
      return Ji(this, void 0, void 0, function* () {
        this.setState(R.SocksClientState.ReceivedAuthenticationResponse);
        let e = false;
        this.socks5ChosenAuthType === R.Socks5Auth.NoAuth ? e = yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === R.Socks5Auth.UserPass ? e = yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === this.options.proxy.custom_auth_method && (e = yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))), e ? this.sendSocks5CommandRequest() : this.closeSocket(R.ERRORS.Socks5AuthenticationFailed);
      });
    }
    sendSocks5CommandRequest() {
      let e = new lt.SmartBuffer();
      e.writeUInt8(5), e.writeUInt8(R.SocksCommand[this.options.command]), e.writeUInt8(0), Qi.isIPv4(this.options.destination.host) ? (e.writeUInt8(R.Socks5HostType.IPv4), e.writeBuffer((0, dt2.ipToBuffer)(this.options.destination.host))) : Qi.isIPv6(this.options.destination.host) ? (e.writeUInt8(R.Socks5HostType.IPv6), e.writeBuffer((0, dt2.ipToBuffer)(this.options.destination.host))) : (e.writeUInt8(R.Socks5HostType.Hostname), e.writeUInt8(this.options.destination.host.length), e.writeString(this.options.destination.host)), e.writeUInt16BE(this.options.destination.port), this.nextRequiredPacketBufferSize = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.socket.write(e.toBuffer()), this.setState(R.SocksClientState.SentFinalHandshake);
    }
    handleSocks5FinalHandshakeResponse() {
      let e = this.receiveBuffer.peek(5);
      if (e[0] !== 5 || e[1] !== R.Socks5Response.Granted) this.closeSocket(`${R.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${R.Socks5Response[e[1]]}`);
      else {
        let i = e[3], r, n;
        if (i === R.Socks5HostType.IPv4) {
          let s = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
          if (this.receiveBuffer.length < s) {
            this.nextRequiredPacketBufferSize = s;
            return;
          }
          n = lt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: (0, dt2.int32ToIpv4)(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
        } else if (i === R.Socks5HostType.Hostname) {
          let s = e[4], o = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
          if (this.receiveBuffer.length < o) {
            this.nextRequiredPacketBufferSize = o;
            return;
          }
          n = lt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
        } else if (i === R.Socks5HostType.IPv6) {
          let s = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
          if (this.receiveBuffer.length < s) {
            this.nextRequiredPacketBufferSize = s;
            return;
          }
          n = lt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: mo.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(), port: n.readUInt16BE() };
        }
        this.setState(R.SocksClientState.ReceivedFinalResponse), R.SocksCommand[this.options.command] === R.SocksCommand.connect ? (this.setState(R.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket })) : R.SocksCommand[this.options.command] === R.SocksCommand.bind ? (this.setState(R.SocksClientState.BoundWaitingForConnection), this.nextRequiredPacketBufferSize = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.emit("bound", { remoteHost: r, socket: this.socket })) : R.SocksCommand[this.options.command] === R.SocksCommand.associate && (this.setState(R.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket }));
      }
    }
    handleSocks5IncomingConnectionResponse() {
      let e = this.receiveBuffer.peek(5);
      if (e[0] !== 5 || e[1] !== R.Socks5Response.Granted) this.closeSocket(`${R.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${R.Socks5Response[e[1]]}`);
      else {
        let i = e[3], r, n;
        if (i === R.Socks5HostType.IPv4) {
          let s = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
          if (this.receiveBuffer.length < s) {
            this.nextRequiredPacketBufferSize = s;
            return;
          }
          n = lt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: (0, dt2.int32ToIpv4)(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
        } else if (i === R.Socks5HostType.Hostname) {
          let s = e[4], o = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
          if (this.receiveBuffer.length < o) {
            this.nextRequiredPacketBufferSize = o;
            return;
          }
          n = lt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
        } else if (i === R.Socks5HostType.IPv6) {
          let s = R.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
          if (this.receiveBuffer.length < s) {
            this.nextRequiredPacketBufferSize = s;
            return;
          }
          n = lt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: mo.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(), port: n.readUInt16BE() };
        }
        this.setState(R.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
      }
    }
    get socksClientOptions() {
      return Object.assign({}, this.options);
    }
  };
  Qt.SocksClient = vo;
});
var Wu = E$1((bi) => {
  var Pg = bi && bi.__createBinding || (Object.create ? function(t, e, i, r) {
    r === void 0 && (r = i);
    var n = Object.getOwnPropertyDescriptor(e, i);
    (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
      return e[i];
    } }), Object.defineProperty(t, r, n);
  } : function(t, e, i, r) {
    r === void 0 && (r = i), t[r] = e[i];
  }), Ng = bi && bi.__exportStar || function(t, e) {
    for (var i in t) i !== "default" && !Object.prototype.hasOwnProperty.call(e, i) && Pg(e, t, i);
  };
  Object.defineProperty(bi, "__esModule", { value: true });
  Ng(zu(), bi);
});
var Yu = E$1((wi) => {
  var Lg = wi && wi.__awaiter || function(t, e, i, r) {
    function n(s) {
      return s instanceof i ? s : new i(function(o) {
        o(s);
      });
    }
    return new (i || (i = Promise))(function(s, o) {
      function c(l) {
        try {
          h(r.next(l));
        } catch (d) {
          o(d);
        }
      }
      function u(l) {
        try {
          h(r.throw(l));
        } catch (d) {
          o(d);
        }
      }
      function h(l) {
        l.done ? s(l.value) : n(l.value).then(c, u);
      }
      h((r = r.apply(t, e || [])).next());
    });
  }, gn = wi && wi.__importDefault || function(t) {
    return t && t.__esModule ? t : { default: t };
  };
  Object.defineProperty(wi, "__esModule", { value: true });
  var Fg = gn(require$$15), Mg = gn(require$$9), Dg = gn(require$$6), Ug = gn(Ui()), jg = ts(), qg = Wu(), _o = Ug.default("socks-proxy-agent");
  function Vg(t) {
    return new Promise((e, i) => {
      Fg.default.lookup(t, (r, n) => {
        r ? i(r) : e(n);
      });
    });
  }
  function Hg(t) {
    let e = 0, i = false, r = 5, n = t.hostname || t.host;
    if (!n) throw new TypeError('No "host"');
    if (typeof t.port == "number" ? e = t.port : typeof t.port == "string" && (e = parseInt(t.port, 10)), e || (e = 1080), t.protocol) switch (t.protocol.replace(":", "")) {
      case "socks4":
        i = true;
      case "socks4a":
        r = 4;
        break;
      case "socks5":
        i = true;
      case "socks":
      case "socks5h":
        r = 5;
        break;
      default:
        throw new TypeError(`A "socks" protocol must be specified! Got: ${t.protocol}`);
    }
    if (typeof t.type != "undefined") if (t.type === 4 || t.type === 5) r = t.type;
    else throw new TypeError(`"type" must be 4 or 5, got: ${t.type}`);
    let s = { host: n, port: e, type: r }, o = t.userId || t.username, c = t.password;
    if (t.auth) {
      let u = t.auth.split(":");
      o = u[0], c = u[1];
    }
    return o && Object.defineProperty(s, "userId", { value: o, enumerable: false }), c && Object.defineProperty(s, "password", { value: c, enumerable: false }), { lookup: i, proxy: s };
  }
  var xo = class extends jg.Agent {
    constructor(e) {
      let i;
      if (typeof e == "string" ? i = Dg.default.parse(e) : i = e, !i) throw new TypeError("a SOCKS proxy server `host` and `port` must be specified!");
      super(i);
      let r = Hg(i);
      this.lookup = r.lookup, this.proxy = r.proxy, this.tlsConnectionOptions = i.tls || {};
    }
    callback(e, i) {
      return Lg(this, void 0, void 0, function* () {
        let { lookup: r, proxy: n } = this, { host: s, port: o, timeout: c } = i;
        if (!s) throw new Error("No `host` defined!");
        r && (s = yield Vg(s));
        let u = { proxy: n, destination: { host: s, port: o }, command: "connect", timeout: c };
        _o("Creating socks proxy connection: %o", u);
        let { socket: h } = yield qg.SocksClient.createConnection(u);
        if (_o("Successfully created socks proxy connection"), i.secureEndpoint) {
          _o("Upgrading socket connection to TLS");
          let l = i.servername || i.host;
          return Mg.default.connect(Object.assign(Object.assign(Object.assign({}, $g(i, "host", "hostname", "path", "port")), { socket: h, servername: l }), this.tlsConnectionOptions));
        }
        return h;
      });
    }
  };
  wi.default = xo;
  function $g(t, ...e) {
    let i = {}, r;
    for (r in t) e.includes(r) || (i[r] = t[r]);
    return i;
  }
});
var Zu = E$1((wo, Ku) => {
  var Gg = wo && wo.__importDefault || function(t) {
    return t && t.__esModule ? t : { default: t };
  }, yo = Gg(Yu());
  function bo(t) {
    return new yo.default(t);
  }
  (function(t) {
    t.SocksProxyAgent = yo.default, t.prototype = yo.default.prototype;
  })(bo || (bo = {}));
  Ku.exports = bo;
});
var Ju = E$1((wy, Xu) => {
  var zg = /[|\\{}()[\]^$+*?.-]/g;
  Xu.exports = (t) => {
    if (typeof t != "string") throw new TypeError("Expected a string");
    return t.replace(zg, "\\$&");
  };
});
var rf = E$1((Ey, tf) => {
  var Wg = Ju(), Yg = typeof process == "object" && process && typeof process.cwd == "function" ? process.cwd() : ".", ef = [].concat(require$$16.builtinModules, "bootstrap_node", "node").map((t) => new RegExp(`(?:\\((?:node:)?${t}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${t}(?:\\.js)?:\\d+:\\d+$)`));
  ef.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
  var Eo = class t {
    constructor(e) {
      e = { ignoredPackages: [], ...e }, "internals" in e || (e.internals = t.nodeInternals()), "cwd" in e || (e.cwd = Yg), this._cwd = e.cwd.replace(/\\/g, "/"), this._internals = [].concat(e.internals, Kg(e.ignoredPackages)), this._wrapCallSite = e.wrapCallSite || false;
    }
    static nodeInternals() {
      return [...ef];
    }
    clean(e, i = 0) {
      i = " ".repeat(i), Array.isArray(e) || (e = e.split(`
`)), !/^\s*at /.test(e[0]) && /^\s*at /.test(e[1]) && (e = e.slice(1));
      let r = false, n = null, s = [];
      return e.forEach((o) => {
        if (o = o.replace(/\\/g, "/"), this._internals.some((u) => u.test(o))) return;
        let c = /^\s*at /.test(o);
        r ? o = o.trimEnd().replace(/^(\s+)at /, "$1") : (o = o.trim(), c && (o = o.slice(3))), o = o.replace(`${this._cwd}/`, ""), o && (c ? (n && (s.push(n), n = null), s.push(o)) : (r = true, n = o));
      }), s.map((o) => `${i}${o}
`).join("");
    }
    captureString(e, i = this.captureString) {
      typeof e == "function" && (i = e, e = 1 / 0);
      let { stackTraceLimit: r } = Error;
      e && (Error.stackTraceLimit = e);
      let n = {};
      Error.captureStackTrace(n, i);
      let { stack: s } = n;
      return Error.stackTraceLimit = r, this.clean(s);
    }
    capture(e, i = this.capture) {
      typeof e == "function" && (i = e, e = 1 / 0);
      let { prepareStackTrace: r, stackTraceLimit: n } = Error;
      Error.prepareStackTrace = (c, u) => this._wrapCallSite ? u.map(this._wrapCallSite) : u, e && (Error.stackTraceLimit = e);
      let s = {};
      Error.captureStackTrace(s, i);
      let { stack: o } = s;
      return Object.assign(Error, { prepareStackTrace: r, stackTraceLimit: n }), o;
    }
    at(e = this.at) {
      let [i] = this.capture(1, e);
      if (!i) return {};
      let r = { line: i.getLineNumber(), column: i.getColumnNumber() };
      Qu(r, i.getFileName(), this._cwd), i.isConstructor() && (r.constructor = true), i.isEval() && (r.evalOrigin = i.getEvalOrigin()), i.isNative() && (r.native = true);
      let n;
      try {
        n = i.getTypeName();
      } catch {
      }
      n && n !== "Object" && n !== "[object Object]" && (r.type = n);
      let s = i.getFunctionName();
      s && (r.function = s);
      let o = i.getMethodName();
      return o && s !== o && (r.method = o), r;
    }
    parseLine(e) {
      let i = e && e.match(Zg);
      if (!i) return null;
      let r = i[1] === "new", n = i[2], s = i[3], o = i[4], c = Number(i[5]), u = Number(i[6]), h = i[7], l = i[8], d = i[9], m = i[10] === "native", v = i[11] === ")", g, x = {};
      if (l && (x.line = Number(l)), d && (x.column = Number(d)), v && h) {
        let y = 0;
        for (let O = h.length - 1; O > 0; O--) if (h.charAt(O) === ")") y++;
        else if (h.charAt(O) === "(" && h.charAt(O - 1) === " " && (y--, y === -1 && h.charAt(O - 1) === " ")) {
          let B = h.slice(0, O - 1);
          h = h.slice(O + 1), n += ` (${B}`;
          break;
        }
      }
      if (n) {
        let y = n.match(Xg);
        y && (n = y[1], g = y[2]);
      }
      return Qu(x, h, this._cwd), r && (x.constructor = true), s && (x.evalOrigin = s, x.evalLine = c, x.evalColumn = u, x.evalFile = o && o.replace(/\\/g, "/")), m && (x.native = true), n && (x.function = n), g && n !== g && (x.method = g), x;
    }
  };
  function Qu(t, e, i) {
    e && (e = e.replace(/\\/g, "/"), e.startsWith(`${i}/`) && (e = e.slice(i.length + 1)), t.file = e);
  }
  function Kg(t) {
    if (t.length === 0) return [];
    let e = t.map((i) => Wg(i));
    return new RegExp(`[/\\\\]node_modules[/\\\\](?:${e.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
  }
  var Zg = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"), Xg = /^(.*?) \[as (.*?)\]$/;
  tf.exports = Eo;
});
var af = E$1((Sy, of) => {
  var { Duplex: Jg } = require$$12;
  function nf(t) {
    t.emit("close");
  }
  function Qg() {
    !this.destroyed && this._writableState.finished && this.destroy();
  }
  function sf(t) {
    this.removeListener("error", sf), this.destroy(), this.listenerCount("error") === 0 && this.emit("error", t);
  }
  function ev(t, e) {
    let i = true, r = new Jg({ ...e, autoDestroy: false, emitClose: false, objectMode: false, writableObjectMode: false });
    return t.on("message", function(s, o) {
      let c = !o && r._readableState.objectMode ? s.toString() : s;
      r.push(c) || t.pause();
    }), t.once("error", function(s) {
      r.destroyed || (i = false, r.destroy(s));
    }), t.once("close", function() {
      r.destroyed || r.push(null);
    }), r._destroy = function(n, s) {
      if (t.readyState === t.CLOSED) {
        s(n), process.nextTick(nf, r);
        return;
      }
      let o = false;
      t.once("error", function(u) {
        o = true, s(u);
      }), t.once("close", function() {
        o || s(n), process.nextTick(nf, r);
      }), i && t.terminate();
    }, r._final = function(n) {
      if (t.readyState === t.CONNECTING) {
        t.once("open", function() {
          r._final(n);
        });
        return;
      }
      t._socket !== null && (t._socket._writableState.finished ? (n(), r._readableState.endEmitted && r.destroy()) : (t._socket.once("finish", function() {
        n();
      }), t.close()));
    }, r._read = function() {
      t.isPaused && t.resume();
    }, r._write = function(n, s, o) {
      if (t.readyState === t.CONNECTING) {
        t.once("open", function() {
          r._write(n, s, o);
        });
        return;
      }
      t.send(n, o);
    }, r.on("end", Qg), r.on("error", sf), r;
  }
  of.exports = ev;
});
var ei = E$1((ky, lf) => {
  lf.exports = { BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"], EMPTY_BUFFER: Buffer.alloc(0), GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", kForOnEventAttribute: Symbol("kIsForOnEventAttribute"), kListener: Symbol("kListener"), kStatusCode: Symbol("status-code"), kWebSocket: Symbol("websocket"), NOOP: () => {
  } };
});
var _r = E$1((Oy, vn) => {
  var { EMPTY_BUFFER: tv } = ei(), So = Buffer[Symbol.species];
  function iv(t, e) {
    if (t.length === 0) return tv;
    if (t.length === 1) return t[0];
    let i = Buffer.allocUnsafe(e), r = 0;
    for (let n = 0; n < t.length; n++) {
      let s = t[n];
      i.set(s, r), r += s.length;
    }
    return r < e ? new So(i.buffer, i.byteOffset, r) : i;
  }
  function cf(t, e, i, r, n) {
    for (let s = 0; s < n; s++) i[r + s] = t[s] ^ e[s & 3];
  }
  function uf(t, e) {
    for (let i = 0; i < t.length; i++) t[i] ^= e[i & 3];
  }
  function rv(t) {
    return t.length === t.buffer.byteLength ? t.buffer : t.buffer.slice(t.byteOffset, t.byteOffset + t.length);
  }
  function ko(t) {
    if (ko.readOnly = true, Buffer.isBuffer(t)) return t;
    let e;
    return t instanceof ArrayBuffer ? e = new So(t) : ArrayBuffer.isView(t) ? e = new So(t.buffer, t.byteOffset, t.byteLength) : (e = Buffer.from(t), ko.readOnly = false), e;
  }
  vn.exports = { concat: iv, mask: cf, toArrayBuffer: rv, toBuffer: ko, unmask: uf };
  if (!process.env.WS_NO_BUFFER_UTIL) try {
    let t = require("bufferutil");
    vn.exports.mask = function(e, i, r, n, s) {
      s < 48 ? cf(e, i, r, n, s) : t.mask(e, i, r, n, s);
    }, vn.exports.unmask = function(e, i) {
      e.length < 32 ? uf(e, i) : t.unmask(e, i);
    };
  } catch {
  }
});
var pf = E$1((Cy, hf) => {
  var ff = Symbol("kDone"), Oo = Symbol("kRun"), Co = class {
    constructor(e) {
      this[ff] = () => {
        this.pending--, this[Oo]();
      }, this.concurrency = e || 1 / 0, this.jobs = [], this.pending = 0;
    }
    add(e) {
      this.jobs.push(e), this[Oo]();
    }
    [Oo]() {
      if (this.pending !== this.concurrency && this.jobs.length) {
        let e = this.jobs.shift();
        this.pending++, e(this[ff]);
      }
    }
  };
  hf.exports = Co;
});
var br$1 = E$1((Ty, vf) => {
  var xr = require$$13, df = _r(), nv = pf(), { kStatusCode: mf } = ei(), sv = Buffer[Symbol.species], ov = Buffer.from([0, 0, 255, 255]), yn = Symbol("permessage-deflate"), $t = Symbol("total-length"), yr = Symbol("callback"), ti = Symbol("buffers"), xn = Symbol("error"), _n, To = class {
    constructor(e, i, r) {
      if (this._maxPayload = r | 0, this._options = e || {}, this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024, this._isServer = !!i, this._deflate = null, this._inflate = null, this.params = null, !_n) {
        let n = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
        _n = new nv(n);
      }
    }
    static get extensionName() {
      return "permessage-deflate";
    }
    offer() {
      let e = {};
      return this._options.serverNoContextTakeover && (e.server_no_context_takeover = true), this._options.clientNoContextTakeover && (e.client_no_context_takeover = true), this._options.serverMaxWindowBits && (e.server_max_window_bits = this._options.serverMaxWindowBits), this._options.clientMaxWindowBits ? e.client_max_window_bits = this._options.clientMaxWindowBits : this._options.clientMaxWindowBits == null && (e.client_max_window_bits = true), e;
    }
    accept(e) {
      return e = this.normalizeParams(e), this.params = this._isServer ? this.acceptAsServer(e) : this.acceptAsClient(e), this.params;
    }
    cleanup() {
      if (this._inflate && (this._inflate.close(), this._inflate = null), this._deflate) {
        let e = this._deflate[yr];
        this._deflate.close(), this._deflate = null, e && e(new Error("The deflate stream was closed while data was being processed"));
      }
    }
    acceptAsServer(e) {
      let i = this._options, r = e.find((n) => !(i.serverNoContextTakeover === false && n.server_no_context_takeover || n.server_max_window_bits && (i.serverMaxWindowBits === false || typeof i.serverMaxWindowBits == "number" && i.serverMaxWindowBits > n.server_max_window_bits) || typeof i.clientMaxWindowBits == "number" && !n.client_max_window_bits));
      if (!r) throw new Error("None of the extension offers can be accepted");
      return i.serverNoContextTakeover && (r.server_no_context_takeover = true), i.clientNoContextTakeover && (r.client_no_context_takeover = true), typeof i.serverMaxWindowBits == "number" && (r.server_max_window_bits = i.serverMaxWindowBits), typeof i.clientMaxWindowBits == "number" ? r.client_max_window_bits = i.clientMaxWindowBits : (r.client_max_window_bits === true || i.clientMaxWindowBits === false) && delete r.client_max_window_bits, r;
    }
    acceptAsClient(e) {
      let i = e[0];
      if (this._options.clientNoContextTakeover === false && i.client_no_context_takeover) throw new Error('Unexpected parameter "client_no_context_takeover"');
      if (!i.client_max_window_bits) typeof this._options.clientMaxWindowBits == "number" && (i.client_max_window_bits = this._options.clientMaxWindowBits);
      else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits == "number" && i.client_max_window_bits > this._options.clientMaxWindowBits) throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
      return i;
    }
    normalizeParams(e) {
      return e.forEach((i) => {
        Object.keys(i).forEach((r) => {
          let n = i[r];
          if (n.length > 1) throw new Error(`Parameter "${r}" must have only a single value`);
          if (n = n[0], r === "client_max_window_bits") {
            if (n !== true) {
              let s = +n;
              if (!Number.isInteger(s) || s < 8 || s > 15) throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
              n = s;
            } else if (!this._isServer) throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
          } else if (r === "server_max_window_bits") {
            let s = +n;
            if (!Number.isInteger(s) || s < 8 || s > 15) throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            n = s;
          } else if (r === "client_no_context_takeover" || r === "server_no_context_takeover") {
            if (n !== true) throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
          } else throw new Error(`Unknown parameter "${r}"`);
          i[r] = n;
        });
      }), e;
    }
    decompress(e, i, r) {
      _n.add((n) => {
        this._decompress(e, i, (s, o) => {
          n(), r(s, o);
        });
      });
    }
    compress(e, i, r) {
      _n.add((n) => {
        this._compress(e, i, (s, o) => {
          n(), r(s, o);
        });
      });
    }
    _decompress(e, i, r) {
      let n = this._isServer ? "client" : "server";
      if (!this._inflate) {
        let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? xr.Z_DEFAULT_WINDOWBITS : this.params[s];
        this._inflate = xr.createInflateRaw({ ...this._options.zlibInflateOptions, windowBits: o }), this._inflate[yn] = this, this._inflate[$t] = 0, this._inflate[ti] = [], this._inflate.on("error", lv), this._inflate.on("data", gf);
      }
      this._inflate[yr] = r, this._inflate.write(e), i && this._inflate.write(ov), this._inflate.flush(() => {
        let s = this._inflate[xn];
        if (s) {
          this._inflate.close(), this._inflate = null, r(s);
          return;
        }
        let o = df.concat(this._inflate[ti], this._inflate[$t]);
        this._inflate._readableState.endEmitted ? (this._inflate.close(), this._inflate = null) : (this._inflate[$t] = 0, this._inflate[ti] = [], i && this.params[`${n}_no_context_takeover`] && this._inflate.reset()), r(null, o);
      });
    }
    _compress(e, i, r) {
      let n = this._isServer ? "server" : "client";
      if (!this._deflate) {
        let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? xr.Z_DEFAULT_WINDOWBITS : this.params[s];
        this._deflate = xr.createDeflateRaw({ ...this._options.zlibDeflateOptions, windowBits: o }), this._deflate[$t] = 0, this._deflate[ti] = [], this._deflate.on("data", av);
      }
      this._deflate[yr] = r, this._deflate.write(e), this._deflate.flush(xr.Z_SYNC_FLUSH, () => {
        if (!this._deflate) return;
        let s = df.concat(this._deflate[ti], this._deflate[$t]);
        i && (s = new sv(s.buffer, s.byteOffset, s.length - 4)), this._deflate[yr] = null, this._deflate[$t] = 0, this._deflate[ti] = [], i && this.params[`${n}_no_context_takeover`] && this._deflate.reset(), r(null, s);
      });
    }
  };
  vf.exports = To;
  function av(t) {
    this[ti].push(t), this[$t] += t.length;
  }
  function gf(t) {
    if (this[$t] += t.length, this[yn]._maxPayload < 1 || this[$t] <= this[yn]._maxPayload) {
      this[ti].push(t);
      return;
    }
    this[xn] = new RangeError("Max payload size exceeded"), this[xn].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH", this[xn][mf] = 1009, this.removeListener("data", gf), this.reset();
  }
  function lv(t) {
    this[yn]._inflate = null, t[mf] = 1007, this[yr](t);
  }
});
var wr = E$1((Iy, bn) => {
  var { isUtf8: _f } = require$$14$1, cv = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];
  function uv(t) {
    return t >= 1e3 && t <= 1014 && t !== 1004 && t !== 1005 && t !== 1006 || t >= 3e3 && t <= 4999;
  }
  function Io(t) {
    let e = t.length, i = 0;
    for (; i < e; ) if (!(t[i] & 128)) i++;
    else if ((t[i] & 224) === 192) {
      if (i + 1 === e || (t[i + 1] & 192) !== 128 || (t[i] & 254) === 192) return false;
      i += 2;
    } else if ((t[i] & 240) === 224) {
      if (i + 2 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || t[i] === 224 && (t[i + 1] & 224) === 128 || t[i] === 237 && (t[i + 1] & 224) === 160) return false;
      i += 3;
    } else if ((t[i] & 248) === 240) {
      if (i + 3 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || (t[i + 3] & 192) !== 128 || t[i] === 240 && (t[i + 1] & 240) === 128 || t[i] === 244 && t[i + 1] > 143 || t[i] > 244) return false;
      i += 4;
    } else return false;
    return true;
  }
  bn.exports = { isValidStatusCode: uv, isValidUTF8: Io, tokenChars: cv };
  if (_f) bn.exports.isValidUTF8 = function(t) {
    return t.length < 24 ? Io(t) : _f(t);
  };
  else if (!process.env.WS_NO_UTF_8_VALIDATE) try {
    let t = require("utf-8-validate");
    bn.exports.isValidUTF8 = function(e) {
      return e.length < 32 ? Io(e) : t(e);
    };
  } catch {
  }
});
var No = E$1((Ay, kf) => {
  var { Writable: fv } = require$$12, xf = br$1(), { BINARY_TYPES: hv, EMPTY_BUFFER: yf, kStatusCode: pv, kWebSocket: dv } = ei(), { concat: Ao, toArrayBuffer: mv, unmask: gv } = _r(), { isValidStatusCode: vv, isValidUTF8: bf } = wr(), wn = Buffer[Symbol.species], yt = 0, wf = 1, Ef = 2, Sf = 3, Bo = 4, Ro = 5, En = 6, Po = class extends fv {
    constructor(e = {}) {
      super(), this._allowSynchronousEvents = e.allowSynchronousEvents !== void 0 ? e.allowSynchronousEvents : true, this._binaryType = e.binaryType || hv[0], this._extensions = e.extensions || {}, this._isServer = !!e.isServer, this._maxPayload = e.maxPayload | 0, this._skipUTF8Validation = !!e.skipUTF8Validation, this[dv] = void 0, this._bufferedBytes = 0, this._buffers = [], this._compressed = false, this._payloadLength = 0, this._mask = void 0, this._fragmented = 0, this._masked = false, this._fin = false, this._opcode = 0, this._totalPayloadLength = 0, this._messageLength = 0, this._fragments = [], this._errored = false, this._loop = false, this._state = yt;
    }
    _write(e, i, r) {
      if (this._opcode === 8 && this._state == yt) return r();
      this._bufferedBytes += e.length, this._buffers.push(e), this.startLoop(r);
    }
    consume(e) {
      if (this._bufferedBytes -= e, e === this._buffers[0].length) return this._buffers.shift();
      if (e < this._buffers[0].length) {
        let r = this._buffers[0];
        return this._buffers[0] = new wn(r.buffer, r.byteOffset + e, r.length - e), new wn(r.buffer, r.byteOffset, e);
      }
      let i = Buffer.allocUnsafe(e);
      do {
        let r = this._buffers[0], n = i.length - e;
        e >= r.length ? i.set(this._buffers.shift(), n) : (i.set(new Uint8Array(r.buffer, r.byteOffset, e), n), this._buffers[0] = new wn(r.buffer, r.byteOffset + e, r.length - e)), e -= r.length;
      } while (e > 0);
      return i;
    }
    startLoop(e) {
      this._loop = true;
      do
        switch (this._state) {
          case yt:
            this.getInfo(e);
            break;
          case wf:
            this.getPayloadLength16(e);
            break;
          case Ef:
            this.getPayloadLength64(e);
            break;
          case Sf:
            this.getMask();
            break;
          case Bo:
            this.getData(e);
            break;
          case Ro:
          case En:
            this._loop = false;
            return;
        }
      while (this._loop);
      this._errored || e();
    }
    getInfo(e) {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }
      let i = this.consume(2);
      if (i[0] & 48) {
        let n = this.createError(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
        e(n);
        return;
      }
      let r = (i[0] & 64) === 64;
      if (r && !this._extensions[xf.extensionName]) {
        let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
        e(n);
        return;
      }
      if (this._fin = (i[0] & 128) === 128, this._opcode = i[0] & 15, this._payloadLength = i[1] & 127, this._opcode === 0) {
        if (r) {
          let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          e(n);
          return;
        }
        if (!this._fragmented) {
          let n = this.createError(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
          e(n);
          return;
        }
        this._opcode = this._fragmented;
      } else if (this._opcode === 1 || this._opcode === 2) {
        if (this._fragmented) {
          let n = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          e(n);
          return;
        }
        this._compressed = r;
      } else if (this._opcode > 7 && this._opcode < 11) {
        if (!this._fin) {
          let n = this.createError(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
          e(n);
          return;
        }
        if (r) {
          let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          e(n);
          return;
        }
        if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
          let n = this.createError(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
          e(n);
          return;
        }
      } else {
        let n = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
        e(n);
        return;
      }
      if (!this._fin && !this._fragmented && (this._fragmented = this._opcode), this._masked = (i[1] & 128) === 128, this._isServer) {
        if (!this._masked) {
          let n = this.createError(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
          e(n);
          return;
        }
      } else if (this._masked) {
        let n = this.createError(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
        e(n);
        return;
      }
      this._payloadLength === 126 ? this._state = wf : this._payloadLength === 127 ? this._state = Ef : this.haveLength(e);
    }
    getPayloadLength16(e) {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }
      this._payloadLength = this.consume(2).readUInt16BE(0), this.haveLength(e);
    }
    getPayloadLength64(e) {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }
      let i = this.consume(8), r = i.readUInt32BE(0);
      if (r > Math.pow(2, 53 - 32) - 1) {
        let n = this.createError(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH");
        e(n);
        return;
      }
      this._payloadLength = r * Math.pow(2, 32) + i.readUInt32BE(4), this.haveLength(e);
    }
    haveLength(e) {
      if (this._payloadLength && this._opcode < 8 && (this._totalPayloadLength += this._payloadLength, this._totalPayloadLength > this._maxPayload && this._maxPayload > 0)) {
        let i = this.createError(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
        e(i);
        return;
      }
      this._masked ? this._state = Sf : this._state = Bo;
    }
    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }
      this._mask = this.consume(4), this._state = Bo;
    }
    getData(e) {
      let i = yf;
      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }
        i = this.consume(this._payloadLength), this._masked && this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3] && gv(i, this._mask);
      }
      if (this._opcode > 7) {
        this.controlMessage(i, e);
        return;
      }
      if (this._compressed) {
        this._state = Ro, this.decompress(i, e);
        return;
      }
      i.length && (this._messageLength = this._totalPayloadLength, this._fragments.push(i)), this.dataMessage(e);
    }
    decompress(e, i) {
      this._extensions[xf.extensionName].decompress(e, this._fin, (n, s) => {
        if (n) return i(n);
        if (s.length) {
          if (this._messageLength += s.length, this._messageLength > this._maxPayload && this._maxPayload > 0) {
            let o = this.createError(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
            i(o);
            return;
          }
          this._fragments.push(s);
        }
        this.dataMessage(i), this._state === yt && this.startLoop(i);
      });
    }
    dataMessage(e) {
      if (!this._fin) {
        this._state = yt;
        return;
      }
      let i = this._messageLength, r = this._fragments;
      if (this._totalPayloadLength = 0, this._messageLength = 0, this._fragmented = 0, this._fragments = [], this._opcode === 2) {
        let n;
        this._binaryType === "nodebuffer" ? n = Ao(r, i) : this._binaryType === "arraybuffer" ? n = mv(Ao(r, i)) : n = r, this._allowSynchronousEvents ? (this.emit("message", n, true), this._state = yt) : (this._state = En, setImmediate(() => {
          this.emit("message", n, true), this._state = yt, this.startLoop(e);
        }));
      } else {
        let n = Ao(r, i);
        if (!this._skipUTF8Validation && !bf(n)) {
          let s = this.createError(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
          e(s);
          return;
        }
        this._state === Ro || this._allowSynchronousEvents ? (this.emit("message", n, false), this._state = yt) : (this._state = En, setImmediate(() => {
          this.emit("message", n, false), this._state = yt, this.startLoop(e);
        }));
      }
    }
    controlMessage(e, i) {
      if (this._opcode === 8) {
        if (e.length === 0) this._loop = false, this.emit("conclude", 1005, yf), this.end();
        else {
          let r = e.readUInt16BE(0);
          if (!vv(r)) {
            let s = this.createError(RangeError, `invalid status code ${r}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
            i(s);
            return;
          }
          let n = new wn(e.buffer, e.byteOffset + 2, e.length - 2);
          if (!this._skipUTF8Validation && !bf(n)) {
            let s = this.createError(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            i(s);
            return;
          }
          this._loop = false, this.emit("conclude", r, n), this.end();
        }
        this._state = yt;
        return;
      }
      this._allowSynchronousEvents ? (this.emit(this._opcode === 9 ? "ping" : "pong", e), this._state = yt) : (this._state = En, setImmediate(() => {
        this.emit(this._opcode === 9 ? "ping" : "pong", e), this._state = yt, this.startLoop(i);
      }));
    }
    createError(e, i, r, n, s) {
      this._loop = false, this._errored = true;
      let o = new e(r ? `Invalid WebSocket frame: ${i}` : i);
      return Error.captureStackTrace(o, this.createError), o.code = s, o[pv] = n, o;
    }
  };
  kf.exports = Po;
});
var Fo = E$1((Ry, Tf) => {
  var { randomFillSync: _v } = require$$5, Of = br$1(), { EMPTY_BUFFER: xv } = ei(), { isValidStatusCode: yv } = wr(), { mask: Cf, toBuffer: er } = _r(), At = Symbol("kByteLength"), bv = Buffer.alloc(4), Sn = 8 * 1024, Ei, tr = Sn, Lo = class t {
    constructor(e, i, r) {
      this._extensions = i || {}, r && (this._generateMask = r, this._maskBuffer = Buffer.alloc(4)), this._socket = e, this._firstFragment = true, this._compress = false, this._bufferedBytes = 0, this._deflating = false, this._queue = [];
    }
    static frame(e, i) {
      let r, n = false, s = 2, o = false;
      i.mask && (r = i.maskBuffer || bv, i.generateMask ? i.generateMask(r) : (tr === Sn && (Ei === void 0 && (Ei = Buffer.alloc(Sn)), _v(Ei, 0, Sn), tr = 0), r[0] = Ei[tr++], r[1] = Ei[tr++], r[2] = Ei[tr++], r[3] = Ei[tr++]), o = (r[0] | r[1] | r[2] | r[3]) === 0, s = 6);
      let c;
      typeof e == "string" ? (!i.mask || o) && i[At] !== void 0 ? c = i[At] : (e = Buffer.from(e), c = e.length) : (c = e.length, n = i.mask && i.readOnly && !o);
      let u = c;
      c >= 65536 ? (s += 8, u = 127) : c > 125 && (s += 2, u = 126);
      let h = Buffer.allocUnsafe(n ? c + s : s);
      return h[0] = i.fin ? i.opcode | 128 : i.opcode, i.rsv1 && (h[0] |= 64), h[1] = u, u === 126 ? h.writeUInt16BE(c, 2) : u === 127 && (h[2] = h[3] = 0, h.writeUIntBE(c, 4, 6)), i.mask ? (h[1] |= 128, h[s - 4] = r[0], h[s - 3] = r[1], h[s - 2] = r[2], h[s - 1] = r[3], o ? [h, e] : n ? (Cf(e, r, h, s, c), [h]) : (Cf(e, r, e, 0, c), [h, e])) : [h, e];
    }
    close(e, i, r, n) {
      let s;
      if (e === void 0) s = xv;
      else {
        if (typeof e != "number" || !yv(e)) throw new TypeError("First argument must be a valid error code number");
        if (i === void 0 || !i.length) s = Buffer.allocUnsafe(2), s.writeUInt16BE(e, 0);
        else {
          let c = Buffer.byteLength(i);
          if (c > 123) throw new RangeError("The message must not be greater than 123 bytes");
          s = Buffer.allocUnsafe(2 + c), s.writeUInt16BE(e, 0), typeof i == "string" ? s.write(i, 2) : s.set(i, 2);
        }
      }
      let o = { [At]: s.length, fin: true, generateMask: this._generateMask, mask: r, maskBuffer: this._maskBuffer, opcode: 8, readOnly: false, rsv1: false };
      this._deflating ? this.enqueue([this.dispatch, s, false, o, n]) : this.sendFrame(t.frame(s, o), n);
    }
    ping(e, i, r) {
      let n, s;
      if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = er(e), n = e.length, s = er.readOnly), n > 125) throw new RangeError("The data size must not be greater than 125 bytes");
      let o = { [At]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 9, readOnly: s, rsv1: false };
      this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
    }
    pong(e, i, r) {
      let n, s;
      if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = er(e), n = e.length, s = er.readOnly), n > 125) throw new RangeError("The data size must not be greater than 125 bytes");
      let o = { [At]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 10, readOnly: s, rsv1: false };
      this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
    }
    send(e, i, r) {
      let n = this._extensions[Of.extensionName], s = i.binary ? 2 : 1, o = i.compress, c, u;
      if (typeof e == "string" ? (c = Buffer.byteLength(e), u = false) : (e = er(e), c = e.length, u = er.readOnly), this._firstFragment ? (this._firstFragment = false, o && n && n.params[n._isServer ? "server_no_context_takeover" : "client_no_context_takeover"] && (o = c >= n._threshold), this._compress = o) : (o = false, s = 0), i.fin && (this._firstFragment = true), n) {
        let h = { [At]: c, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: u, rsv1: o };
        this._deflating ? this.enqueue([this.dispatch, e, this._compress, h, r]) : this.dispatch(e, this._compress, h, r);
      } else this.sendFrame(t.frame(e, { [At]: c, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: u, rsv1: false }), r);
    }
    dispatch(e, i, r, n) {
      if (!i) {
        this.sendFrame(t.frame(e, r), n);
        return;
      }
      let s = this._extensions[Of.extensionName];
      this._bufferedBytes += r[At], this._deflating = true, s.compress(e, r.fin, (o, c) => {
        if (this._socket.destroyed) {
          let u = new Error("The socket was closed while data was being compressed");
          typeof n == "function" && n(u);
          for (let h = 0; h < this._queue.length; h++) {
            let l = this._queue[h], d = l[l.length - 1];
            typeof d == "function" && d(u);
          }
          return;
        }
        this._bufferedBytes -= r[At], this._deflating = false, r.readOnly = false, this.sendFrame(t.frame(c, r), n), this.dequeue();
      });
    }
    dequeue() {
      for (; !this._deflating && this._queue.length; ) {
        let e = this._queue.shift();
        this._bufferedBytes -= e[3][At], Reflect.apply(e[0], this, e.slice(1));
      }
    }
    enqueue(e) {
      this._bufferedBytes += e[3][At], this._queue.push(e);
    }
    sendFrame(e, i) {
      e.length === 2 ? (this._socket.cork(), this._socket.write(e[0]), this._socket.write(e[1], i), this._socket.uncork()) : this._socket.write(e[0], i);
    }
  };
  Tf.exports = Lo;
});
var Mf = E$1((Py, Ff) => {
  var { kForOnEventAttribute: Er, kListener: Mo } = ei(), If = Symbol("kCode"), Af = Symbol("kData"), Bf = Symbol("kError"), Rf = Symbol("kMessage"), Pf = Symbol("kReason"), ir = Symbol("kTarget"), Nf = Symbol("kType"), Lf = Symbol("kWasClean"), Gt = class {
    constructor(e) {
      this[ir] = null, this[Nf] = e;
    }
    get target() {
      return this[ir];
    }
    get type() {
      return this[Nf];
    }
  };
  Object.defineProperty(Gt.prototype, "target", { enumerable: true });
  Object.defineProperty(Gt.prototype, "type", { enumerable: true });
  var Si = class extends Gt {
    constructor(e, i = {}) {
      super(e), this[If] = i.code === void 0 ? 0 : i.code, this[Pf] = i.reason === void 0 ? "" : i.reason, this[Lf] = i.wasClean === void 0 ? false : i.wasClean;
    }
    get code() {
      return this[If];
    }
    get reason() {
      return this[Pf];
    }
    get wasClean() {
      return this[Lf];
    }
  };
  Object.defineProperty(Si.prototype, "code", { enumerable: true });
  Object.defineProperty(Si.prototype, "reason", { enumerable: true });
  Object.defineProperty(Si.prototype, "wasClean", { enumerable: true });
  var rr2 = class extends Gt {
    constructor(e, i = {}) {
      super(e), this[Bf] = i.error === void 0 ? null : i.error, this[Rf] = i.message === void 0 ? "" : i.message;
    }
    get error() {
      return this[Bf];
    }
    get message() {
      return this[Rf];
    }
  };
  Object.defineProperty(rr2.prototype, "error", { enumerable: true });
  Object.defineProperty(rr2.prototype, "message", { enumerable: true });
  var Sr = class extends Gt {
    constructor(e, i = {}) {
      super(e), this[Af] = i.data === void 0 ? null : i.data;
    }
    get data() {
      return this[Af];
    }
  };
  Object.defineProperty(Sr.prototype, "data", { enumerable: true });
  var wv = { addEventListener(t, e, i = {}) {
    for (let n of this.listeners(t)) if (!i[Er] && n[Mo] === e && !n[Er]) return;
    let r;
    if (t === "message") r = function(s, o) {
      let c = new Sr("message", { data: o ? s : s.toString() });
      c[ir] = this, kn(e, this, c);
    };
    else if (t === "close") r = function(s, o) {
      let c = new Si("close", { code: s, reason: o.toString(), wasClean: this._closeFrameReceived && this._closeFrameSent });
      c[ir] = this, kn(e, this, c);
    };
    else if (t === "error") r = function(s) {
      let o = new rr2("error", { error: s, message: s.message });
      o[ir] = this, kn(e, this, o);
    };
    else if (t === "open") r = function() {
      let s = new Gt("open");
      s[ir] = this, kn(e, this, s);
    };
    else return;
    r[Er] = !!i[Er], r[Mo] = e, i.once ? this.once(t, r) : this.on(t, r);
  }, removeEventListener(t, e) {
    for (let i of this.listeners(t)) if (i[Mo] === e && !i[Er]) {
      this.removeListener(t, i);
      break;
    }
  } };
  Ff.exports = { CloseEvent: Si, ErrorEvent: rr2, Event: Gt, EventTarget: wv, MessageEvent: Sr };
  function kn(t, e, i) {
    typeof t == "object" && t.handleEvent ? t.handleEvent.call(t, i) : t.call(e, i);
  }
});
var Do = E$1((Ny, Df) => {
  var { tokenChars: kr } = wr();
  function Mt(t, e, i) {
    t[e] === void 0 ? t[e] = [i] : t[e].push(i);
  }
  function Ev(t) {
    let e = /* @__PURE__ */ Object.create(null), i = /* @__PURE__ */ Object.create(null), r = false, n = false, s = false, o, c, u = -1, h = -1, l = -1, d = 0;
    for (; d < t.length; d++) if (h = t.charCodeAt(d), o === void 0) if (l === -1 && kr[h] === 1) u === -1 && (u = d);
    else if (d !== 0 && (h === 32 || h === 9)) l === -1 && u !== -1 && (l = d);
    else if (h === 59 || h === 44) {
      if (u === -1) throw new SyntaxError(`Unexpected character at index ${d}`);
      l === -1 && (l = d);
      let v = t.slice(u, l);
      h === 44 ? (Mt(e, v, i), i = /* @__PURE__ */ Object.create(null)) : o = v, u = l = -1;
    } else throw new SyntaxError(`Unexpected character at index ${d}`);
    else if (c === void 0) if (l === -1 && kr[h] === 1) u === -1 && (u = d);
    else if (h === 32 || h === 9) l === -1 && u !== -1 && (l = d);
    else if (h === 59 || h === 44) {
      if (u === -1) throw new SyntaxError(`Unexpected character at index ${d}`);
      l === -1 && (l = d), Mt(i, t.slice(u, l), true), h === 44 && (Mt(e, o, i), i = /* @__PURE__ */ Object.create(null), o = void 0), u = l = -1;
    } else if (h === 61 && u !== -1 && l === -1) c = t.slice(u, d), u = l = -1;
    else throw new SyntaxError(`Unexpected character at index ${d}`);
    else if (n) {
      if (kr[h] !== 1) throw new SyntaxError(`Unexpected character at index ${d}`);
      u === -1 ? u = d : r || (r = true), n = false;
    } else if (s) if (kr[h] === 1) u === -1 && (u = d);
    else if (h === 34 && u !== -1) s = false, l = d;
    else if (h === 92) n = true;
    else throw new SyntaxError(`Unexpected character at index ${d}`);
    else if (h === 34 && t.charCodeAt(d - 1) === 61) s = true;
    else if (l === -1 && kr[h] === 1) u === -1 && (u = d);
    else if (u !== -1 && (h === 32 || h === 9)) l === -1 && (l = d);
    else if (h === 59 || h === 44) {
      if (u === -1) throw new SyntaxError(`Unexpected character at index ${d}`);
      l === -1 && (l = d);
      let v = t.slice(u, l);
      r && (v = v.replace(/\\/g, ""), r = false), Mt(i, c, v), h === 44 && (Mt(e, o, i), i = /* @__PURE__ */ Object.create(null), o = void 0), c = void 0, u = l = -1;
    } else throw new SyntaxError(`Unexpected character at index ${d}`);
    if (u === -1 || s || h === 32 || h === 9) throw new SyntaxError("Unexpected end of input");
    l === -1 && (l = d);
    let m = t.slice(u, l);
    return o === void 0 ? Mt(e, m, i) : (c === void 0 ? Mt(i, m, true) : r ? Mt(i, c, m.replace(/\\/g, "")) : Mt(i, c, m), Mt(e, o, i)), e;
  }
  function Sv(t) {
    return Object.keys(t).map((e) => {
      let i = t[e];
      return Array.isArray(i) || (i = [i]), i.map((r) => [e].concat(Object.keys(r).map((n) => {
        let s = r[n];
        return Array.isArray(s) || (s = [s]), s.map((o) => o === true ? n : `${n}=${o}`).join("; ");
      })).join("; ")).join(", ");
    }).join(", ");
  }
  Df.exports = { format: Sv, parse: Ev };
});
var Ho = E$1((My, Kf) => {
  var kv = require$$0$1, Ov = require$$1$2, Cv = require$$20, qf = require$$8, Tv = require$$9, { randomBytes: Iv, createHash: Av } = require$$5, { URL: Uo } = require$$6, ii = br$1(), Bv = No(), Rv = Fo(), { BINARY_TYPES: Uf, EMPTY_BUFFER: On2, GUID: Pv, kForOnEventAttribute: jo, kListener: Nv, kStatusCode: Lv, kWebSocket: Qe, NOOP: Vf } = ei(), { EventTarget: { addEventListener: Fv, removeEventListener: Mv } } = Mf(), { format: Dv, parse: Uv } = Do(), { toBuffer: jv } = _r(), qv = 30 * 1e3, Hf = Symbol("kAborted"), qo = [8, 13], zt = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"], Vv = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/, Fe = class t extends kv {
    constructor(e, i, r) {
      super(), this._binaryType = Uf[0], this._closeCode = 1006, this._closeFrameReceived = false, this._closeFrameSent = false, this._closeMessage = On2, this._closeTimer = null, this._extensions = {}, this._paused = false, this._protocol = "", this._readyState = t.CONNECTING, this._receiver = null, this._sender = null, this._socket = null, e !== null ? (this._bufferedAmount = 0, this._isServer = false, this._redirects = 0, i === void 0 ? i = [] : Array.isArray(i) || (typeof i == "object" && i !== null ? (r = i, i = []) : i = [i]), $f(this, e, i, r)) : (this._autoPong = r.autoPong, this._isServer = true);
    }
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(e) {
      Uf.includes(e) && (this._binaryType = e, this._receiver && (this._receiver._binaryType = e));
    }
    get bufferedAmount() {
      return this._socket ? this._socket._writableState.length + this._sender._bufferedBytes : this._bufferedAmount;
    }
    get extensions() {
      return Object.keys(this._extensions).join();
    }
    get isPaused() {
      return this._paused;
    }
    get onclose() {
      return null;
    }
    get onerror() {
      return null;
    }
    get onopen() {
      return null;
    }
    get onmessage() {
      return null;
    }
    get protocol() {
      return this._protocol;
    }
    get readyState() {
      return this._readyState;
    }
    get url() {
      return this._url;
    }
    setSocket(e, i, r) {
      let n = new Bv({ allowSynchronousEvents: r.allowSynchronousEvents, binaryType: this.binaryType, extensions: this._extensions, isServer: this._isServer, maxPayload: r.maxPayload, skipUTF8Validation: r.skipUTF8Validation });
      this._sender = new Rv(e, this._extensions, r.generateMask), this._receiver = n, this._socket = e, n[Qe] = this, e[Qe] = this, n.on("conclude", Gv), n.on("drain", zv), n.on("error", Wv), n.on("message", Yv), n.on("ping", Kv), n.on("pong", Zv), e.setTimeout && e.setTimeout(0), e.setNoDelay && e.setNoDelay(), i.length > 0 && e.unshift(i), e.on("close", zf), e.on("data", Tn), e.on("end", Wf), e.on("error", Yf), this._readyState = t.OPEN, this.emit("open");
    }
    emitClose() {
      if (!this._socket) {
        this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
        return;
      }
      this._extensions[ii.extensionName] && this._extensions[ii.extensionName].cleanup(), this._receiver.removeAllListeners(), this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
    }
    close(e, i) {
      if (this.readyState !== t.CLOSED) {
        if (this.readyState === t.CONNECTING) {
          let r = "WebSocket was closed before the connection was established";
          mt2(this, this._req, r);
          return;
        }
        if (this.readyState === t.CLOSING) {
          this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end();
          return;
        }
        this._readyState = t.CLOSING, this._sender.close(e, i, !this._isServer, (r) => {
          r || (this._closeFrameSent = true, (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end());
        }), this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), qv);
      }
    }
    pause() {
      this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = true, this._socket.pause());
    }
    ping(e, i, r) {
      if (this.readyState === t.CONNECTING) throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      if (typeof e == "function" ? (r = e, e = i = void 0) : typeof i == "function" && (r = i, i = void 0), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
        Vo(this, e, r);
        return;
      }
      i === void 0 && (i = !this._isServer), this._sender.ping(e || On2, i, r);
    }
    pong(e, i, r) {
      if (this.readyState === t.CONNECTING) throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      if (typeof e == "function" ? (r = e, e = i = void 0) : typeof i == "function" && (r = i, i = void 0), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
        Vo(this, e, r);
        return;
      }
      i === void 0 && (i = !this._isServer), this._sender.pong(e || On2, i, r);
    }
    resume() {
      this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = false, this._receiver._writableState.needDrain || this._socket.resume());
    }
    send(e, i, r) {
      if (this.readyState === t.CONNECTING) throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      if (typeof i == "function" && (r = i, i = {}), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
        Vo(this, e, r);
        return;
      }
      let n = { binary: typeof e != "string", mask: !this._isServer, compress: true, fin: true, ...i };
      this._extensions[ii.extensionName] || (n.compress = false), this._sender.send(e || On2, n, r);
    }
    terminate() {
      if (this.readyState !== t.CLOSED) {
        if (this.readyState === t.CONNECTING) {
          let e = "WebSocket was closed before the connection was established";
          mt2(this, this._req, e);
          return;
        }
        this._socket && (this._readyState = t.CLOSING, this._socket.destroy());
      }
    }
  };
  Object.defineProperty(Fe, "CONNECTING", { enumerable: true, value: zt.indexOf("CONNECTING") });
  Object.defineProperty(Fe.prototype, "CONNECTING", { enumerable: true, value: zt.indexOf("CONNECTING") });
  Object.defineProperty(Fe, "OPEN", { enumerable: true, value: zt.indexOf("OPEN") });
  Object.defineProperty(Fe.prototype, "OPEN", { enumerable: true, value: zt.indexOf("OPEN") });
  Object.defineProperty(Fe, "CLOSING", { enumerable: true, value: zt.indexOf("CLOSING") });
  Object.defineProperty(Fe.prototype, "CLOSING", { enumerable: true, value: zt.indexOf("CLOSING") });
  Object.defineProperty(Fe, "CLOSED", { enumerable: true, value: zt.indexOf("CLOSED") });
  Object.defineProperty(Fe.prototype, "CLOSED", { enumerable: true, value: zt.indexOf("CLOSED") });
  ["binaryType", "bufferedAmount", "extensions", "isPaused", "protocol", "readyState", "url"].forEach((t) => {
    Object.defineProperty(Fe.prototype, t, { enumerable: true });
  });
  ["open", "error", "close", "message"].forEach((t) => {
    Object.defineProperty(Fe.prototype, `on${t}`, { enumerable: true, get() {
      for (let e of this.listeners(t)) if (e[jo]) return e[Nv];
      return null;
    }, set(e) {
      for (let i of this.listeners(t)) if (i[jo]) {
        this.removeListener(t, i);
        break;
      }
      typeof e == "function" && this.addEventListener(t, e, { [jo]: true });
    } });
  });
  Fe.prototype.addEventListener = Fv;
  Fe.prototype.removeEventListener = Mv;
  Kf.exports = Fe;
  function $f(t, e, i, r) {
    let n = { allowSynchronousEvents: true, autoPong: true, protocolVersion: qo[1], maxPayload: 104857600, skipUTF8Validation: false, perMessageDeflate: true, followRedirects: false, maxRedirects: 10, ...r, socketPath: void 0, hostname: void 0, protocol: void 0, timeout: void 0, method: "GET", host: void 0, path: void 0, port: void 0 };
    if (t._autoPong = n.autoPong, !qo.includes(n.protocolVersion)) throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${qo.join(", ")})`);
    let s;
    if (e instanceof Uo) s = e;
    else try {
      s = new Uo(e);
    } catch {
      throw new SyntaxError(`Invalid URL: ${e}`);
    }
    s.protocol === "http:" ? s.protocol = "ws:" : s.protocol === "https:" && (s.protocol = "wss:"), t._url = s.href;
    let o = s.protocol === "wss:", c = s.protocol === "ws+unix:", u;
    if (s.protocol !== "ws:" && !o && !c ? u = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"` : c && !s.pathname ? u = "The URL's pathname is empty" : s.hash && (u = "The URL contains a fragment identifier"), u) {
      let x = new SyntaxError(u);
      if (t._redirects === 0) throw x;
      Cn(t, x);
      return;
    }
    let h = o ? 443 : 80, l = Iv(16).toString("base64"), d = o ? Ov.request : Cv.request, m = /* @__PURE__ */ new Set(), v;
    if (n.createConnection = n.createConnection || (o ? $v : Hv), n.defaultPort = n.defaultPort || h, n.port = s.port || h, n.host = s.hostname.startsWith("[") ? s.hostname.slice(1, -1) : s.hostname, n.headers = { ...n.headers, "Sec-WebSocket-Version": n.protocolVersion, "Sec-WebSocket-Key": l, Connection: "Upgrade", Upgrade: "websocket" }, n.path = s.pathname + s.search, n.timeout = n.handshakeTimeout, n.perMessageDeflate && (v = new ii(n.perMessageDeflate !== true ? n.perMessageDeflate : {}, false, n.maxPayload), n.headers["Sec-WebSocket-Extensions"] = Dv({ [ii.extensionName]: v.offer() })), i.length) {
      for (let x of i) {
        if (typeof x != "string" || !Vv.test(x) || m.has(x)) throw new SyntaxError("An invalid or duplicated subprotocol was specified");
        m.add(x);
      }
      n.headers["Sec-WebSocket-Protocol"] = i.join(",");
    }
    if (n.origin && (n.protocolVersion < 13 ? n.headers["Sec-WebSocket-Origin"] = n.origin : n.headers.Origin = n.origin), (s.username || s.password) && (n.auth = `${s.username}:${s.password}`), c) {
      let x = n.path.split(":");
      n.socketPath = x[0], n.path = x[1];
    }
    let g;
    if (n.followRedirects) {
      if (t._redirects === 0) {
        t._originalIpc = c, t._originalSecure = o, t._originalHostOrSocketPath = c ? n.socketPath : s.host;
        let x = r && r.headers;
        if (r = { ...r, headers: {} }, x) for (let [y, O] of Object.entries(x)) r.headers[y.toLowerCase()] = O;
      } else if (t.listenerCount("redirect") === 0) {
        let x = c ? t._originalIpc ? n.socketPath === t._originalHostOrSocketPath : false : t._originalIpc ? false : s.host === t._originalHostOrSocketPath;
        (!x || t._originalSecure && !o) && (delete n.headers.authorization, delete n.headers.cookie, x || delete n.headers.host, n.auth = void 0);
      }
      n.auth && !r.headers.authorization && (r.headers.authorization = "Basic " + Buffer.from(n.auth).toString("base64")), g = t._req = d(n), t._redirects && t.emit("redirect", t.url, g);
    } else g = t._req = d(n);
    n.timeout && g.on("timeout", () => {
      mt2(t, g, "Opening handshake has timed out");
    }), g.on("error", (x) => {
      g === null || g[Hf] || (g = t._req = null, Cn(t, x));
    }), g.on("response", (x) => {
      let y = x.headers.location, O = x.statusCode;
      if (y && n.followRedirects && O >= 300 && O < 400) {
        if (++t._redirects > n.maxRedirects) {
          mt2(t, g, "Maximum redirects exceeded");
          return;
        }
        g.abort();
        let B;
        try {
          B = new Uo(y, e);
        } catch {
          let P = new SyntaxError(`Invalid URL: ${y}`);
          Cn(t, P);
          return;
        }
        $f(t, B, i, r);
      } else t.emit("unexpected-response", g, x) || mt2(t, g, `Unexpected server response: ${x.statusCode}`);
    }), g.on("upgrade", (x, y, O) => {
      if (t.emit("upgrade", x), t.readyState !== Fe.CONNECTING) return;
      g = t._req = null;
      let B = x.headers.upgrade;
      if (B === void 0 || B.toLowerCase() !== "websocket") {
        mt2(t, y, "Invalid Upgrade header");
        return;
      }
      let C = Av("sha1").update(l + Pv).digest("base64");
      if (x.headers["sec-websocket-accept"] !== C) {
        mt2(t, y, "Invalid Sec-WebSocket-Accept header");
        return;
      }
      let P = x.headers["sec-websocket-protocol"], S;
      if (P !== void 0 ? m.size ? m.has(P) || (S = "Server sent an invalid subprotocol") : S = "Server sent a subprotocol but none was requested" : m.size && (S = "Server sent no subprotocol"), S) {
        mt2(t, y, S);
        return;
      }
      P && (t._protocol = P);
      let J = x.headers["sec-websocket-extensions"];
      if (J !== void 0) {
        if (!v) {
          mt2(t, y, "Server sent a Sec-WebSocket-Extensions header but no extension was requested");
          return;
        }
        let A;
        try {
          A = Uv(J);
        } catch {
          mt2(t, y, "Invalid Sec-WebSocket-Extensions header");
          return;
        }
        let z = Object.keys(A);
        if (z.length !== 1 || z[0] !== ii.extensionName) {
          mt2(t, y, "Server indicated an extension that was not requested");
          return;
        }
        try {
          v.accept(A[ii.extensionName]);
        } catch {
          mt2(t, y, "Invalid Sec-WebSocket-Extensions header");
          return;
        }
        t._extensions[ii.extensionName] = v;
      }
      t.setSocket(y, O, { allowSynchronousEvents: n.allowSynchronousEvents, generateMask: n.generateMask, maxPayload: n.maxPayload, skipUTF8Validation: n.skipUTF8Validation });
    }), n.finishRequest ? n.finishRequest(g, t) : g.end();
  }
  function Cn(t, e) {
    t._readyState = Fe.CLOSING, t.emit("error", e), t.emitClose();
  }
  function Hv(t) {
    return t.path = t.socketPath, qf.connect(t);
  }
  function $v(t) {
    return t.path = void 0, !t.servername && t.servername !== "" && (t.servername = qf.isIP(t.host) ? "" : t.host), Tv.connect(t);
  }
  function mt2(t, e, i) {
    t._readyState = Fe.CLOSING;
    let r = new Error(i);
    Error.captureStackTrace(r, mt2), e.setHeader ? (e[Hf] = true, e.abort(), e.socket && !e.socket.destroyed && e.socket.destroy(), process.nextTick(Cn, t, r)) : (e.destroy(r), e.once("error", t.emit.bind(t, "error")), e.once("close", t.emitClose.bind(t)));
  }
  function Vo(t, e, i) {
    if (e) {
      let r = jv(e).length;
      t._socket ? t._sender._bufferedBytes += r : t._bufferedAmount += r;
    }
    if (i) {
      let r = new Error(`WebSocket is not open: readyState ${t.readyState} (${zt[t.readyState]})`);
      process.nextTick(i, r);
    }
  }
  function Gv(t, e) {
    let i = this[Qe];
    i._closeFrameReceived = true, i._closeMessage = e, i._closeCode = t, i._socket[Qe] !== void 0 && (i._socket.removeListener("data", Tn), process.nextTick(Gf, i._socket), t === 1005 ? i.close() : i.close(t, e));
  }
  function zv() {
    let t = this[Qe];
    t.isPaused || t._socket.resume();
  }
  function Wv(t) {
    let e = this[Qe];
    e._socket[Qe] !== void 0 && (e._socket.removeListener("data", Tn), process.nextTick(Gf, e._socket), e.close(t[Lv])), e.emit("error", t);
  }
  function jf() {
    this[Qe].emitClose();
  }
  function Yv(t, e) {
    this[Qe].emit("message", t, e);
  }
  function Kv(t) {
    let e = this[Qe];
    e._autoPong && e.pong(t, !this._isServer, Vf), e.emit("ping", t);
  }
  function Zv(t) {
    this[Qe].emit("pong", t);
  }
  function Gf(t) {
    t.resume();
  }
  function zf() {
    let t = this[Qe];
    this.removeListener("close", zf), this.removeListener("data", Tn), this.removeListener("end", Wf), t._readyState = Fe.CLOSING;
    let e;
    !this._readableState.endEmitted && !t._closeFrameReceived && !t._receiver._writableState.errorEmitted && (e = t._socket.read()) !== null && t._receiver.write(e), t._receiver.end(), this[Qe] = void 0, clearTimeout(t._closeTimer), t._receiver._writableState.finished || t._receiver._writableState.errorEmitted ? t.emitClose() : (t._receiver.on("error", jf), t._receiver.on("finish", jf));
  }
  function Tn(t) {
    this[Qe]._receiver.write(t) || this.pause();
  }
  function Wf() {
    let t = this[Qe];
    t._readyState = Fe.CLOSING, t._receiver.end(), this.end();
  }
  function Yf() {
    let t = this[Qe];
    this.removeListener("error", Yf), this.on("error", Vf), t && (t._readyState = Fe.CLOSING, this.destroy());
  }
});
var Xf = E$1((Dy, Zf) => {
  var { tokenChars: Xv } = wr();
  function Jv(t) {
    let e = /* @__PURE__ */ new Set(), i = -1, r = -1, n = 0;
    for (n; n < t.length; n++) {
      let o = t.charCodeAt(n);
      if (r === -1 && Xv[o] === 1) i === -1 && (i = n);
      else if (n !== 0 && (o === 32 || o === 9)) r === -1 && i !== -1 && (r = n);
      else if (o === 44) {
        if (i === -1) throw new SyntaxError(`Unexpected character at index ${n}`);
        r === -1 && (r = n);
        let c = t.slice(i, r);
        if (e.has(c)) throw new SyntaxError(`The "${c}" subprotocol is duplicated`);
        e.add(c), i = r = -1;
      } else throw new SyntaxError(`Unexpected character at index ${n}`);
    }
    if (i === -1 || r !== -1) throw new SyntaxError("Unexpected end of input");
    let s = t.slice(i, n);
    if (e.has(s)) throw new SyntaxError(`The "${s}" subprotocol is duplicated`);
    return e.add(s), e;
  }
  Zf.exports = { parse: Jv };
});
var nh = E$1((jy, rh) => {
  var Qv = require$$0$1, In = require$$20, { createHash: e_ } = require$$5, Jf = Do(), ki = br$1(), t_ = Xf(), i_ = Ho(), { GUID: r_, kWebSocket: n_ } = ei(), s_ = /^[+/0-9A-Za-z]{22}==$/, Qf = 0, eh = 1, ih = 2, $o = class extends Qv {
    constructor(e, i) {
      if (super(), e = { allowSynchronousEvents: true, autoPong: true, maxPayload: 100 * 1024 * 1024, skipUTF8Validation: false, perMessageDeflate: false, handleProtocols: null, clientTracking: true, verifyClient: null, noServer: false, backlog: null, server: null, host: null, path: null, port: null, WebSocket: i_, ...e }, e.port == null && !e.server && !e.noServer || e.port != null && (e.server || e.noServer) || e.server && e.noServer) throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
      if (e.port != null ? (this._server = In.createServer((r, n) => {
        let s = In.STATUS_CODES[426];
        n.writeHead(426, { "Content-Length": s.length, "Content-Type": "text/plain" }), n.end(s);
      }), this._server.listen(e.port, e.host, e.backlog, i)) : e.server && (this._server = e.server), this._server) {
        let r = this.emit.bind(this, "connection");
        this._removeListeners = o_(this._server, { listening: this.emit.bind(this, "listening"), error: this.emit.bind(this, "error"), upgrade: (n, s, o) => {
          this.handleUpgrade(n, s, o, r);
        } });
      }
      e.perMessageDeflate === true && (e.perMessageDeflate = {}), e.clientTracking && (this.clients = /* @__PURE__ */ new Set(), this._shouldEmitClose = false), this.options = e, this._state = Qf;
    }
    address() {
      if (this.options.noServer) throw new Error('The server is operating in "noServer" mode');
      return this._server ? this._server.address() : null;
    }
    close(e) {
      if (this._state === ih) {
        e && this.once("close", () => {
          e(new Error("The server is not running"));
        }), process.nextTick(Or, this);
        return;
      }
      if (e && this.once("close", e), this._state !== eh) if (this._state = eh, this.options.noServer || this.options.server) this._server && (this._removeListeners(), this._removeListeners = this._server = null), this.clients ? this.clients.size ? this._shouldEmitClose = true : process.nextTick(Or, this) : process.nextTick(Or, this);
      else {
        let i = this._server;
        this._removeListeners(), this._removeListeners = this._server = null, i.close(() => {
          Or(this);
        });
      }
    }
    shouldHandle(e) {
      if (this.options.path) {
        let i = e.url.indexOf("?");
        if ((i !== -1 ? e.url.slice(0, i) : e.url) !== this.options.path) return false;
      }
      return true;
    }
    handleUpgrade(e, i, r, n) {
      i.on("error", th);
      let s = e.headers["sec-websocket-key"], o = e.headers.upgrade, c = +e.headers["sec-websocket-version"];
      if (e.method !== "GET") {
        Oi(this, e, i, 405, "Invalid HTTP method");
        return;
      }
      if (o === void 0 || o.toLowerCase() !== "websocket") {
        Oi(this, e, i, 400, "Invalid Upgrade header");
        return;
      }
      if (s === void 0 || !s_.test(s)) {
        Oi(this, e, i, 400, "Missing or invalid Sec-WebSocket-Key header");
        return;
      }
      if (c !== 8 && c !== 13) {
        Oi(this, e, i, 400, "Missing or invalid Sec-WebSocket-Version header");
        return;
      }
      if (!this.shouldHandle(e)) {
        Cr(i, 400);
        return;
      }
      let u = e.headers["sec-websocket-protocol"], h = /* @__PURE__ */ new Set();
      if (u !== void 0) try {
        h = t_.parse(u);
      } catch {
        Oi(this, e, i, 400, "Invalid Sec-WebSocket-Protocol header");
        return;
      }
      let l = e.headers["sec-websocket-extensions"], d = {};
      if (this.options.perMessageDeflate && l !== void 0) {
        let m = new ki(this.options.perMessageDeflate, true, this.options.maxPayload);
        try {
          let v = Jf.parse(l);
          v[ki.extensionName] && (m.accept(v[ki.extensionName]), d[ki.extensionName] = m);
        } catch {
          Oi(this, e, i, 400, "Invalid or unacceptable Sec-WebSocket-Extensions header");
          return;
        }
      }
      if (this.options.verifyClient) {
        let m = { origin: e.headers[`${c === 8 ? "sec-websocket-origin" : "origin"}`], secure: !!(e.socket.authorized || e.socket.encrypted), req: e };
        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(m, (v, g, x, y) => {
            if (!v) return Cr(i, g || 401, x, y);
            this.completeUpgrade(d, s, h, e, i, r, n);
          });
          return;
        }
        if (!this.options.verifyClient(m)) return Cr(i, 401);
      }
      this.completeUpgrade(d, s, h, e, i, r, n);
    }
    completeUpgrade(e, i, r, n, s, o, c) {
      if (!s.readable || !s.writable) return s.destroy();
      if (s[n_]) throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
      if (this._state > Qf) return Cr(s, 503);
      let h = ["HTTP/1.1 101 Switching Protocols", "Upgrade: websocket", "Connection: Upgrade", `Sec-WebSocket-Accept: ${e_("sha1").update(i + r_).digest("base64")}`], l = new this.options.WebSocket(null, void 0, this.options);
      if (r.size) {
        let d = this.options.handleProtocols ? this.options.handleProtocols(r, n) : r.values().next().value;
        d && (h.push(`Sec-WebSocket-Protocol: ${d}`), l._protocol = d);
      }
      if (e[ki.extensionName]) {
        let d = e[ki.extensionName].params, m = Jf.format({ [ki.extensionName]: [d] });
        h.push(`Sec-WebSocket-Extensions: ${m}`), l._extensions = e;
      }
      this.emit("headers", h, n), s.write(h.concat(`\r
`).join(`\r
`)), s.removeListener("error", th), l.setSocket(s, o, { allowSynchronousEvents: this.options.allowSynchronousEvents, maxPayload: this.options.maxPayload, skipUTF8Validation: this.options.skipUTF8Validation }), this.clients && (this.clients.add(l), l.on("close", () => {
        this.clients.delete(l), this._shouldEmitClose && !this.clients.size && process.nextTick(Or, this);
      })), c(l, n);
    }
  };
  rh.exports = $o;
  function o_(t, e) {
    for (let i of Object.keys(e)) t.on(i, e[i]);
    return function() {
      for (let r of Object.keys(e)) t.removeListener(r, e[r]);
    };
  }
  function Or(t) {
    t._state = ih, t.emit("close");
  }
  function th() {
    this.destroy();
  }
  function Cr(t, e, i, r) {
    i = i || In.STATUS_CODES[e], r = { Connection: "close", "Content-Type": "text/html", "Content-Length": Buffer.byteLength(i), ...r }, t.once("finish", t.destroy), t.end(`HTTP/1.1 ${e} ${In.STATUS_CODES[e]}\r
` + Object.keys(r).map((n) => `${n}: ${r[n]}`).join(`\r
`) + `\r
\r
` + i);
  }
  function Oi(t, e, i, r, n) {
    if (t.listenerCount("wsClientError")) {
      let s = new Error(n);
      Error.captureStackTrace(s, Oi), t.emit("wsClientError", s, i, e);
    } else Cr(i, r, n);
  }
});
var lh = E$1((Vy, ah) => {
  var ri = require$$21, l_ = process.cwd, An = null, c_ = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    return An || (An = l_.call(process)), An;
  };
  try {
    process.cwd();
  } catch {
  }
  typeof process.chdir == "function" && (Yo = process.chdir, process.chdir = function(t) {
    An = null, Yo.call(process, t);
  }, Object.setPrototypeOf && Object.setPrototypeOf(process.chdir, Yo));
  var Yo;
  ah.exports = u_;
  function u_(t) {
    ri.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./) && e(t), t.lutimes || i(t), t.chown = s(t.chown), t.fchown = s(t.fchown), t.lchown = s(t.lchown), t.chmod = r(t.chmod), t.fchmod = r(t.fchmod), t.lchmod = r(t.lchmod), t.chownSync = o(t.chownSync), t.fchownSync = o(t.fchownSync), t.lchownSync = o(t.lchownSync), t.chmodSync = n(t.chmodSync), t.fchmodSync = n(t.fchmodSync), t.lchmodSync = n(t.lchmodSync), t.stat = c(t.stat), t.fstat = c(t.fstat), t.lstat = c(t.lstat), t.statSync = u(t.statSync), t.fstatSync = u(t.fstatSync), t.lstatSync = u(t.lstatSync), t.chmod && !t.lchmod && (t.lchmod = function(l, d, m) {
      m && process.nextTick(m);
    }, t.lchmodSync = function() {
    }), t.chown && !t.lchown && (t.lchown = function(l, d, m, v) {
      v && process.nextTick(v);
    }, t.lchownSync = function() {
    }), c_ === "win32" && (t.rename = typeof t.rename != "function" ? t.rename : function(l) {
      function d(m, v, g) {
        var x = Date.now(), y = 0;
        l(m, v, function O(B) {
          if (B && (B.code === "EACCES" || B.code === "EPERM") && Date.now() - x < 6e4) {
            setTimeout(function() {
              t.stat(v, function(C, P) {
                C && C.code === "ENOENT" ? l(m, v, O) : g(B);
              });
            }, y), y < 100 && (y += 10);
            return;
          }
          g && g(B);
        });
      }
      return Object.setPrototypeOf && Object.setPrototypeOf(d, l), d;
    }(t.rename)), t.read = typeof t.read != "function" ? t.read : function(l) {
      function d(m, v, g, x, y, O) {
        var B;
        if (O && typeof O == "function") {
          var C = 0;
          B = function(P, S, J) {
            if (P && P.code === "EAGAIN" && C < 10) return C++, l.call(t, m, v, g, x, y, B);
            O.apply(this, arguments);
          };
        }
        return l.call(t, m, v, g, x, y, B);
      }
      return Object.setPrototypeOf && Object.setPrototypeOf(d, l), d;
    }(t.read), t.readSync = typeof t.readSync != "function" ? t.readSync : /* @__PURE__ */ function(l) {
      return function(d, m, v, g, x) {
        for (var y = 0; ; ) try {
          return l.call(t, d, m, v, g, x);
        } catch (O) {
          if (O.code === "EAGAIN" && y < 10) {
            y++;
            continue;
          }
          throw O;
        }
      };
    }(t.readSync);
    function e(l) {
      l.lchmod = function(d, m, v) {
        l.open(d, ri.O_WRONLY | ri.O_SYMLINK, m, function(g, x) {
          if (g) {
            v && v(g);
            return;
          }
          l.fchmod(x, m, function(y) {
            l.close(x, function(O) {
              v && v(y || O);
            });
          });
        });
      }, l.lchmodSync = function(d, m) {
        var v = l.openSync(d, ri.O_WRONLY | ri.O_SYMLINK, m), g = true, x;
        try {
          x = l.fchmodSync(v, m), g = false;
        } finally {
          if (g) try {
            l.closeSync(v);
          } catch {
          }
          else l.closeSync(v);
        }
        return x;
      };
    }
    function i(l) {
      ri.hasOwnProperty("O_SYMLINK") && l.futimes ? (l.lutimes = function(d, m, v, g) {
        l.open(d, ri.O_SYMLINK, function(x, y) {
          if (x) {
            g && g(x);
            return;
          }
          l.futimes(y, m, v, function(O) {
            l.close(y, function(B) {
              g && g(O || B);
            });
          });
        });
      }, l.lutimesSync = function(d, m, v) {
        var g = l.openSync(d, ri.O_SYMLINK), x, y = true;
        try {
          x = l.futimesSync(g, m, v), y = false;
        } finally {
          if (y) try {
            l.closeSync(g);
          } catch {
          }
          else l.closeSync(g);
        }
        return x;
      }) : l.futimes && (l.lutimes = function(d, m, v, g) {
        g && process.nextTick(g);
      }, l.lutimesSync = function() {
      });
    }
    function r(l) {
      return l && function(d, m, v) {
        return l.call(t, d, m, function(g) {
          h(g) && (g = null), v && v.apply(this, arguments);
        });
      };
    }
    function n(l) {
      return l && function(d, m) {
        try {
          return l.call(t, d, m);
        } catch (v) {
          if (!h(v)) throw v;
        }
      };
    }
    function s(l) {
      return l && function(d, m, v, g) {
        return l.call(t, d, m, v, function(x) {
          h(x) && (x = null), g && g.apply(this, arguments);
        });
      };
    }
    function o(l) {
      return l && function(d, m, v) {
        try {
          return l.call(t, d, m, v);
        } catch (g) {
          if (!h(g)) throw g;
        }
      };
    }
    function c(l) {
      return l && function(d, m, v) {
        typeof m == "function" && (v = m, m = null);
        function g(x, y) {
          y && (y.uid < 0 && (y.uid += 4294967296), y.gid < 0 && (y.gid += 4294967296)), v && v.apply(this, arguments);
        }
        return m ? l.call(t, d, m, g) : l.call(t, d, g);
      };
    }
    function u(l) {
      return l && function(d, m) {
        var v = m ? l.call(t, d, m) : l.call(t, d);
        return v && (v.uid < 0 && (v.uid += 4294967296), v.gid < 0 && (v.gid += 4294967296)), v;
      };
    }
    function h(l) {
      if (!l || l.code === "ENOSYS") return true;
      var d = !process.getuid || process.getuid() !== 0;
      return !!(d && (l.code === "EINVAL" || l.code === "EPERM"));
    }
  }
});
var fh = E$1((Hy, uh) => {
  var ch = require$$12.Stream;
  uh.exports = f_;
  function f_(t) {
    return { ReadStream: e, WriteStream: i };
    function e(r, n) {
      if (!(this instanceof e)) return new e(r, n);
      ch.call(this);
      var s = this;
      this.path = r, this.fd = null, this.readable = true, this.paused = false, this.flags = "r", this.mode = 438, this.bufferSize = 64 * 1024, n = n || {};
      for (var o = Object.keys(n), c = 0, u = o.length; c < u; c++) {
        var h = o[c];
        this[h] = n[h];
      }
      if (this.encoding && this.setEncoding(this.encoding), this.start !== void 0) {
        if (typeof this.start != "number") throw TypeError("start must be a Number");
        if (this.end === void 0) this.end = 1 / 0;
        else if (typeof this.end != "number") throw TypeError("end must be a Number");
        if (this.start > this.end) throw new Error("start must be <= end");
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          s._read();
        });
        return;
      }
      t.open(this.path, this.flags, this.mode, function(l, d) {
        if (l) {
          s.emit("error", l), s.readable = false;
          return;
        }
        s.fd = d, s.emit("open", d), s._read();
      });
    }
    function i(r, n) {
      if (!(this instanceof i)) return new i(r, n);
      ch.call(this), this.path = r, this.fd = null, this.writable = true, this.flags = "w", this.encoding = "binary", this.mode = 438, this.bytesWritten = 0, n = n || {};
      for (var s = Object.keys(n), o = 0, c = s.length; o < c; o++) {
        var u = s[o];
        this[u] = n[u];
      }
      if (this.start !== void 0) {
        if (typeof this.start != "number") throw TypeError("start must be a Number");
        if (this.start < 0) throw new Error("start must be >= zero");
        this.pos = this.start;
      }
      this.busy = false, this._queue = [], this.fd === null && (this._open = t.open, this._queue.push([this._open, this.path, this.flags, this.mode, void 0]), this.flush());
    }
  }
});
var ph = E$1(($y, hh) => {
  hh.exports = p_;
  var h_ = Object.getPrototypeOf || function(t) {
    return t.__proto__;
  };
  function p_(t) {
    if (t === null || typeof t != "object") return t;
    if (t instanceof Object) var e = { __proto__: h_(t) };
    else var e = /* @__PURE__ */ Object.create(null);
    return Object.getOwnPropertyNames(t).forEach(function(i) {
      Object.defineProperty(e, i, Object.getOwnPropertyDescriptor(t, i));
    }), e;
  }
});
var vh = E$1((Gy, Xo) => {
  var Ne = require$$0$2, d_ = lh(), m_ = fh(), g_ = ph(), Bn = require$$1$1, Ke, Pn;
  typeof Symbol == "function" && typeof Symbol.for == "function" ? (Ke = Symbol.for("graceful-fs.queue"), Pn = Symbol.for("graceful-fs.previous")) : (Ke = "___graceful-fs.queue", Pn = "___graceful-fs.previous");
  function v_() {
  }
  function gh(t, e) {
    Object.defineProperty(t, Ke, { get: function() {
      return e;
    } });
  }
  var Ci = v_;
  Bn.debuglog ? Ci = Bn.debuglog("gfs4") : /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && (Ci = function() {
    var t = Bn.format.apply(Bn, arguments);
    t = "GFS4: " + t.split(/\n/).join(`
GFS4: `), console.error(t);
  });
  Ne[Ke] || (dh = commonjsGlobal[Ke] || [], gh(Ne, dh), Ne.close = function(t) {
    function e(i, r) {
      return t.call(Ne, i, function(n) {
        n || mh(), typeof r == "function" && r.apply(this, arguments);
      });
    }
    return Object.defineProperty(e, Pn, { value: t }), e;
  }(Ne.close), Ne.closeSync = function(t) {
    function e(i) {
      t.apply(Ne, arguments), mh();
    }
    return Object.defineProperty(e, Pn, { value: t }), e;
  }(Ne.closeSync), /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && process.on("exit", function() {
    Ci(Ne[Ke]), require$$10$1.equal(Ne[Ke].length, 0);
  }));
  var dh;
  commonjsGlobal[Ke] || gh(commonjsGlobal, Ne[Ke]);
  Xo.exports = Ko(g_(Ne));
  process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !Ne.__patched && (Xo.exports = Ko(Ne), Ne.__patched = true);
  function Ko(t) {
    d_(t), t.gracefulify = Ko, t.createReadStream = S, t.createWriteStream = J;
    var e = t.readFile;
    t.readFile = i;
    function i(k, L, D) {
      return typeof L == "function" && (D = L, L = null), X(k, L, D);
      function X(j, se, M, $) {
        return e(j, se, function(Y) {
          Y && (Y.code === "EMFILE" || Y.code === "ENFILE") ? nr([X, [j, se, M], Y, $ || Date.now(), Date.now()]) : typeof M == "function" && M.apply(this, arguments);
        });
      }
    }
    var r = t.writeFile;
    t.writeFile = n;
    function n(k, L, D, X) {
      return typeof D == "function" && (X = D, D = null), j(k, L, D, X);
      function j(se, M, $, Y, Q) {
        return r(se, M, $, function(V) {
          V && (V.code === "EMFILE" || V.code === "ENFILE") ? nr([j, [se, M, $, Y], V, Q || Date.now(), Date.now()]) : typeof Y == "function" && Y.apply(this, arguments);
        });
      }
    }
    var s = t.appendFile;
    s && (t.appendFile = o);
    function o(k, L, D, X) {
      return typeof D == "function" && (X = D, D = null), j(k, L, D, X);
      function j(se, M, $, Y, Q) {
        return s(se, M, $, function(V) {
          V && (V.code === "EMFILE" || V.code === "ENFILE") ? nr([j, [se, M, $, Y], V, Q || Date.now(), Date.now()]) : typeof Y == "function" && Y.apply(this, arguments);
        });
      }
    }
    var c = t.copyFile;
    c && (t.copyFile = u);
    function u(k, L, D, X) {
      return typeof D == "function" && (X = D, D = 0), j(k, L, D, X);
      function j(se, M, $, Y, Q) {
        return c(se, M, $, function(V) {
          V && (V.code === "EMFILE" || V.code === "ENFILE") ? nr([j, [se, M, $, Y], V, Q || Date.now(), Date.now()]) : typeof Y == "function" && Y.apply(this, arguments);
        });
      }
    }
    var h = t.readdir;
    t.readdir = d;
    var l = /^v[0-5]\./;
    function d(k, L, D) {
      typeof L == "function" && (D = L, L = null);
      var X = l.test(process.version) ? function(M, $, Y, Q) {
        return h(M, j(M, $, Y, Q));
      } : function(M, $, Y, Q) {
        return h(M, $, j(M, $, Y, Q));
      };
      return X(k, L, D);
      function j(se, M, $, Y) {
        return function(Q, V) {
          Q && (Q.code === "EMFILE" || Q.code === "ENFILE") ? nr([X, [se, M, $], Q, Y || Date.now(), Date.now()]) : (V && V.sort && V.sort(), typeof $ == "function" && $.call(this, Q, V));
        };
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var m = m_(t);
      O = m.ReadStream, C = m.WriteStream;
    }
    var v = t.ReadStream;
    v && (O.prototype = Object.create(v.prototype), O.prototype.open = B);
    var g = t.WriteStream;
    g && (C.prototype = Object.create(g.prototype), C.prototype.open = P), Object.defineProperty(t, "ReadStream", { get: function() {
      return O;
    }, set: function(k) {
      O = k;
    }, enumerable: true, configurable: true }), Object.defineProperty(t, "WriteStream", { get: function() {
      return C;
    }, set: function(k) {
      C = k;
    }, enumerable: true, configurable: true });
    var x = O;
    Object.defineProperty(t, "FileReadStream", { get: function() {
      return x;
    }, set: function(k) {
      x = k;
    }, enumerable: true, configurable: true });
    var y = C;
    Object.defineProperty(t, "FileWriteStream", { get: function() {
      return y;
    }, set: function(k) {
      y = k;
    }, enumerable: true, configurable: true });
    function O(k, L) {
      return this instanceof O ? (v.apply(this, arguments), this) : O.apply(Object.create(O.prototype), arguments);
    }
    function B() {
      var k = this;
      z(k.path, k.flags, k.mode, function(L, D) {
        L ? (k.autoClose && k.destroy(), k.emit("error", L)) : (k.fd = D, k.emit("open", D), k.read());
      });
    }
    function C(k, L) {
      return this instanceof C ? (g.apply(this, arguments), this) : C.apply(Object.create(C.prototype), arguments);
    }
    function P() {
      var k = this;
      z(k.path, k.flags, k.mode, function(L, D) {
        L ? (k.destroy(), k.emit("error", L)) : (k.fd = D, k.emit("open", D));
      });
    }
    function S(k, L) {
      return new t.ReadStream(k, L);
    }
    function J(k, L) {
      return new t.WriteStream(k, L);
    }
    var A = t.open;
    t.open = z;
    function z(k, L, D, X) {
      return typeof D == "function" && (X = D, D = null), j(k, L, D, X);
      function j(se, M, $, Y, Q) {
        return A(se, M, $, function(V, we) {
          V && (V.code === "EMFILE" || V.code === "ENFILE") ? nr([j, [se, M, $, Y], V, Q || Date.now(), Date.now()]) : typeof Y == "function" && Y.apply(this, arguments);
        });
      }
    }
    return t;
  }
  function nr(t) {
    Ci("ENQUEUE", t[0].name, t[1]), Ne[Ke].push(t), Zo();
  }
  var Rn;
  function mh() {
    for (var t = Date.now(), e = 0; e < Ne[Ke].length; ++e) Ne[Ke][e].length > 2 && (Ne[Ke][e][3] = t, Ne[Ke][e][4] = t);
    Zo();
  }
  function Zo() {
    if (clearTimeout(Rn), Rn = void 0, Ne[Ke].length !== 0) {
      var t = Ne[Ke].shift(), e = t[0], i = t[1], r = t[2], n = t[3], s = t[4];
      if (n === void 0) Ci("RETRY", e.name, i), e.apply(null, i);
      else if (Date.now() - n >= 6e4) {
        Ci("TIMEOUT", e.name, i);
        var o = i.pop();
        typeof o == "function" && o.call(null, r);
      } else {
        var c = Date.now() - s, u = Math.max(s - n, 1), h = Math.min(u * 1.2, 100);
        c >= h ? (Ci("RETRY", e.name, i), e.apply(null, i.concat([n]))) : Ne[Ke].push(t);
      }
      Rn === void 0 && (Rn = setTimeout(Zo, 0));
    }
  }
});
var xh = E$1((zy, _h) => {
  function bt(t, e) {
    typeof e == "boolean" && (e = { forever: e }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e || {}, this._maxRetryTime = e && e.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
  }
  _h.exports = bt;
  bt.prototype.reset = function() {
    this._attempts = 1, this._timeouts = this._originalTimeouts;
  };
  bt.prototype.stop = function() {
    this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
  };
  bt.prototype.retry = function(t) {
    if (this._timeout && clearTimeout(this._timeout), !t) return false;
    var e = (/* @__PURE__ */ new Date()).getTime();
    if (t && e - this._operationStart >= this._maxRetryTime) return this._errors.unshift(new Error("RetryOperation timeout occurred")), false;
    this._errors.push(t);
    var i = this._timeouts.shift();
    if (i === void 0) if (this._cachedTimeouts) this._errors.splice(this._errors.length - 1, this._errors.length), this._timeouts = this._cachedTimeouts.slice(0), i = this._timeouts.shift();
    else return false;
    var r = this, n = setTimeout(function() {
      r._attempts++, r._operationTimeoutCb && (r._timeout = setTimeout(function() {
        r._operationTimeoutCb(r._attempts);
      }, r._operationTimeout), r._options.unref && r._timeout.unref()), r._fn(r._attempts);
    }, i);
    return this._options.unref && n.unref(), true;
  };
  bt.prototype.attempt = function(t, e) {
    this._fn = t, e && (e.timeout && (this._operationTimeout = e.timeout), e.cb && (this._operationTimeoutCb = e.cb));
    var i = this;
    this._operationTimeoutCb && (this._timeout = setTimeout(function() {
      i._operationTimeoutCb();
    }, i._operationTimeout)), this._operationStart = (/* @__PURE__ */ new Date()).getTime(), this._fn(this._attempts);
  };
  bt.prototype.try = function(t) {
    console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
  };
  bt.prototype.start = function(t) {
    console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
  };
  bt.prototype.start = bt.prototype.try;
  bt.prototype.errors = function() {
    return this._errors;
  };
  bt.prototype.attempts = function() {
    return this._attempts;
  };
  bt.prototype.mainError = function() {
    if (this._errors.length === 0) return null;
    for (var t = {}, e = null, i = 0, r = 0; r < this._errors.length; r++) {
      var n = this._errors[r], s = n.message, o = (t[s] || 0) + 1;
      t[s] = o, o >= i && (e = n, i = o);
    }
    return e;
  };
});
var yh = E$1((Ti) => {
  var __ = xh();
  Ti.operation = function(t) {
    var e = Ti.timeouts(t);
    return new __(e, { forever: t && t.forever, unref: t && t.unref, maxRetryTime: t && t.maxRetryTime });
  };
  Ti.timeouts = function(t) {
    if (t instanceof Array) return [].concat(t);
    var e = { retries: 10, factor: 2, minTimeout: 1 * 1e3, maxTimeout: 1 / 0, randomize: false };
    for (var i in t) e[i] = t[i];
    if (e.minTimeout > e.maxTimeout) throw new Error("minTimeout is greater than maxTimeout");
    for (var r = [], n = 0; n < e.retries; n++) r.push(this.createTimeout(n, e));
    return t && t.forever && !r.length && r.push(this.createTimeout(n, e)), r.sort(function(s, o) {
      return s - o;
    }), r;
  };
  Ti.createTimeout = function(t, e) {
    var i = e.randomize ? Math.random() + 1 : 1, r = Math.round(i * e.minTimeout * Math.pow(e.factor, t));
    return r = Math.min(r, e.maxTimeout), r;
  };
  Ti.wrap = function(t, e, i) {
    if (e instanceof Array && (i = e, e = null), !i) {
      i = [];
      for (var r in t) typeof t[r] == "function" && i.push(r);
    }
    for (var n = 0; n < i.length; n++) {
      var s = i[n], o = t[s];
      t[s] = (function(u) {
        var h = Ti.operation(e), l = Array.prototype.slice.call(arguments, 1), d = l.pop();
        l.push(function(m) {
          h.retry(m) || (m && (arguments[0] = h.mainError()), d.apply(this, arguments));
        }), h.attempt(function() {
          u.apply(t, l);
        });
      }).bind(t, o), t[s].options = e;
    }
  };
});
var wh = E$1((Yy, bh) => {
  bh.exports = yh();
});
var Eh = E$1((Ky, Nn) => {
  Nn.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
  process.platform !== "win32" && Nn.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
  process.platform === "linux" && Nn.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
});
var Th = E$1((Zy, ar) => {
  var Pe = commonjsGlobal.process, Ii = function(t) {
    return t && typeof t == "object" && typeof t.removeListener == "function" && typeof t.emit == "function" && typeof t.reallyExit == "function" && typeof t.listeners == "function" && typeof t.kill == "function" && typeof t.pid == "number" && typeof t.on == "function";
  };
  Ii(Pe) ? (Sh = require$$10$1, sr = Eh(), kh = /^win/i.test(Pe.platform), Tr = require$$0$1, typeof Tr != "function" && (Tr = Tr.EventEmitter), Pe.__signal_exit_emitter__ ? ze = Pe.__signal_exit_emitter__ : (ze = Pe.__signal_exit_emitter__ = new Tr(), ze.count = 0, ze.emitted = {}), ze.infinite || (ze.setMaxListeners(1 / 0), ze.infinite = true), ar.exports = function(t, e) {
    if (!Ii(commonjsGlobal.process)) return function() {
    };
    Sh.equal(typeof t, "function", "a callback must be provided for exit handler"), or2 === false && Jo();
    var i = "exit";
    e && e.alwaysLast && (i = "afterexit");
    var r = function() {
      ze.removeListener(i, t), ze.listeners("exit").length === 0 && ze.listeners("afterexit").length === 0 && Ln();
    };
    return ze.on(i, t), r;
  }, Ln = function() {
    !or2 || !Ii(commonjsGlobal.process) || (or2 = false, sr.forEach(function(e) {
      try {
        Pe.removeListener(e, Fn[e]);
      } catch {
      }
    }), Pe.emit = Mn, Pe.reallyExit = Qo, ze.count -= 1);
  }, ar.exports.unload = Ln, Ai = function(e, i, r) {
    ze.emitted[e] || (ze.emitted[e] = true, ze.emit(e, i, r));
  }, Fn = {}, sr.forEach(function(t) {
    Fn[t] = function() {
      if (Ii(commonjsGlobal.process)) {
        var i = Pe.listeners(t);
        i.length === ze.count && (Ln(), Ai("exit", null, t), Ai("afterexit", null, t), kh && t === "SIGHUP" && (t = "SIGINT"), Pe.kill(Pe.pid, t));
      }
    };
  }), ar.exports.signals = function() {
    return sr;
  }, or2 = false, Jo = function() {
    or2 || !Ii(commonjsGlobal.process) || (or2 = true, ze.count += 1, sr = sr.filter(function(e) {
      try {
        return Pe.on(e, Fn[e]), true;
      } catch {
        return false;
      }
    }), Pe.emit = Ch, Pe.reallyExit = Oh);
  }, ar.exports.load = Jo, Qo = Pe.reallyExit, Oh = function(e) {
    Ii(commonjsGlobal.process) && (Pe.exitCode = e || 0, Ai("exit", Pe.exitCode, null), Ai("afterexit", Pe.exitCode, null), Qo.call(Pe, Pe.exitCode));
  }, Mn = Pe.emit, Ch = function(e, i) {
    if (e === "exit" && Ii(commonjsGlobal.process)) {
      i !== void 0 && (Pe.exitCode = i);
      var r = Mn.apply(this, arguments);
      return Ai("exit", Pe.exitCode, null), Ai("afterexit", Pe.exitCode, null), r;
    } else return Mn.apply(this, arguments);
  }) : ar.exports = function() {
    return function() {
    };
  };
  var Sh, sr, kh, Tr, ze, Ln, Ai, Fn, or2, Jo, Qo, Oh, Mn, Ch;
});
var Fh = E$1((Xy, Lh) => {
  var x_ = require$$1, Rh = vh(), y_ = wh(), b_ = Th(), ni = {}, Ih = Symbol();
  function w_(t, e, i) {
    let r = e[Ih];
    if (r) return e.stat(t, (s, o) => {
      if (s) return i(s);
      i(null, o.mtime, r);
    });
    let n = new Date(Math.ceil(Date.now() / 1e3) * 1e3 + 5);
    e.utimes(t, n, n, (s) => {
      if (s) return i(s);
      e.stat(t, (o, c) => {
        if (o) return i(o);
        let u = c.mtime.getTime() % 1e3 === 0 ? "s" : "ms";
        Object.defineProperty(e, Ih, { value: u }), i(null, c.mtime, u);
      });
    });
  }
  function E_(t) {
    let e = Date.now();
    return t === "s" && (e = Math.ceil(e / 1e3) * 1e3), new Date(e);
  }
  function Un(t, e) {
    return e.lockfilePath || `${t}.lock`;
  }
  function Ph(t, e, i) {
    if (!e.realpath) return i(null, x_.resolve(t));
    e.fs.realpath(t, i);
  }
  function ta(t, e, i) {
    let r = Un(t, e);
    e.fs.mkdir(r, (n) => {
      if (!n) return w_(r, e.fs, (s, o, c) => {
        if (s) return e.fs.rmdir(r, () => {
        }), i(s);
        i(null, o, c);
      });
      if (n.code !== "EEXIST") return i(n);
      if (e.stale <= 0) return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
      e.fs.stat(r, (s, o) => {
        if (s) return s.code === "ENOENT" ? ta(t, { ...e, stale: 0 }, i) : i(s);
        if (!S_(o, e)) return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
        Nh(t, e, (c) => {
          if (c) return i(c);
          ta(t, { ...e, stale: 0 }, i);
        });
      });
    });
  }
  function S_(t, e) {
    return t.mtime.getTime() < Date.now() - e.stale;
  }
  function Nh(t, e, i) {
    e.fs.rmdir(Un(t, e), (r) => {
      if (r && r.code !== "ENOENT") return i(r);
      i();
    });
  }
  function Dn(t, e) {
    let i = ni[t];
    i.updateTimeout || (i.updateDelay = i.updateDelay || e.update, i.updateTimeout = setTimeout(() => {
      i.updateTimeout = null, e.fs.stat(i.lockfilePath, (r, n) => {
        let s = i.lastUpdate + e.stale < Date.now();
        if (r) return r.code === "ENOENT" || s ? ea(t, i, Object.assign(r, { code: "ECOMPROMISED" })) : (i.updateDelay = 1e3, Dn(t, e));
        if (!(i.mtime.getTime() === n.mtime.getTime())) return ea(t, i, Object.assign(new Error("Unable to update lock within the stale threshold"), { code: "ECOMPROMISED" }));
        let c = E_(i.mtimePrecision);
        e.fs.utimes(i.lockfilePath, c, c, (u) => {
          let h = i.lastUpdate + e.stale < Date.now();
          if (!i.released) {
            if (u) return u.code === "ENOENT" || h ? ea(t, i, Object.assign(u, { code: "ECOMPROMISED" })) : (i.updateDelay = 1e3, Dn(t, e));
            i.mtime = c, i.lastUpdate = Date.now(), i.updateDelay = null, Dn(t, e);
          }
        });
      });
    }, i.updateDelay), i.updateTimeout.unref && i.updateTimeout.unref());
  }
  function ea(t, e, i) {
    e.released = true, e.updateTimeout && clearTimeout(e.updateTimeout), ni[t] === e && delete ni[t], e.options.onCompromised(i);
  }
  function k_(t, e, i) {
    e = { stale: 1e4, update: null, realpath: true, retries: 0, fs: Rh, onCompromised: (r) => {
      throw r;
    }, ...e }, e.retries = e.retries || 0, e.retries = typeof e.retries == "number" ? { retries: e.retries } : e.retries, e.stale = Math.max(e.stale || 0, 2e3), e.update = e.update == null ? e.stale / 2 : e.update || 0, e.update = Math.max(Math.min(e.update, e.stale / 2), 1e3), Ph(t, e, (r, n) => {
      if (r) return i(r);
      let s = y_.operation(e.retries);
      s.attempt(() => {
        ta(n, e, (o, c, u) => {
          if (s.retry(o)) return;
          if (o) return i(s.mainError());
          let h = ni[n] = { lockfilePath: Un(n, e), mtime: c, mtimePrecision: u, options: e, lastUpdate: Date.now() };
          Dn(n, e), i(null, (l) => {
            if (h.released) return l && l(Object.assign(new Error("Lock is already released"), { code: "ERELEASED" }));
            O_(n, { ...e, realpath: false }, l);
          });
        });
      });
    });
  }
  function O_(t, e, i) {
    e = { fs: Rh, realpath: true, ...e }, Ph(t, e, (r, n) => {
      if (r) return i(r);
      let s = ni[n];
      if (!s) return i(Object.assign(new Error("Lock is not acquired/owned by you"), { code: "ENOTACQUIRED" }));
      s.updateTimeout && clearTimeout(s.updateTimeout), s.released = true, delete ni[n], Nh(n, e, i);
    });
  }
  function Ah(t) {
    return (...e) => new Promise((i, r) => {
      e.push((n, s) => {
        n ? r(n) : i(s);
      }), t(...e);
    });
  }
  var Bh = false;
  function C_() {
    Bh || (Bh = true, b_(() => {
      for (let t in ni) {
        let e = ni[t].options;
        try {
          e.fs.rmdirSync(Un(t, e));
        } catch {
        }
      }
    }));
  }
  Lh.exports.lock = async (t, e) => {
    C_();
    let i = await Ah(k_)(t, e);
    return Ah(i);
  };
});
var H_ = {};
vp(H_, { HttpsProxyAgent: () => Wh.HttpsProxyAgent, PNG: () => Yh.PNG, SocksProxyAgent: () => Zh.SocksProxyAgent, StackUtils: () => D_, colors: () => T_, debug: () => I_, dotenv: () => A_, getProxyForUrl: () => zh.getProxyForUrl, jpegjs: () => B_, lockfile: () => P_, mime: () => N_, minimatch: () => L_, open: () => F_, program: () => Kh.program, progress: () => M_, ws: () => U_, wsReceiver: () => q_, wsSender: () => V_, wsServer: () => j_ });
var utilsBundleImpl = _p(H_);
var Mh = De(Pa()), Dh = De(Ui()), Uh = De(Ya()), zh = De(Za()), Wh = De(sl()), jh = De(hl()), qh = De(yl()), Vh = De(ql()), Hh = De(tc()), Yh = De(Zc()), Kh = De(cu()), $h = De(du()), Zh = De(Zu()), Gh = De(rf());
De(af(), 1);
var Go = De(No(), 1), zo = De(Fo(), 1), sh = De(Ho(), 1), Wo = De(nh(), 1);
var oh = sh.default;
var T_ = Mh.default, I_ = Dh.default, A_ = Uh.default, B_ = jh.default, R_ = Fh(), P_ = R_, N_ = qh.default, L_ = Vh.default, F_ = Hh.default, M_ = $h.default, D_ = Gh.default, U_ = oh, j_ = Wo.default, q_ = Go.default, V_ = zo.default;
Object.defineProperty(utilsBundle, "__esModule", {
  value: true
});
utilsBundle.minimatch = utilsBundle.mime = utilsBundle.lockfile = utilsBundle.jpegjs = utilsBundle.getProxyForUrl = utilsBundle.dotenv = utilsBundle.debug = utilsBundle.colors = utilsBundle.SocksProxyAgent = utilsBundle.PNG = utilsBundle.HttpsProxyAgent = void 0;
utilsBundle.ms = ms;
utilsBundle.open = void 0;
utilsBundle.parseStackTraceLine = parseStackTraceLine;
utilsBundle.wsServer = utilsBundle.wsSender = utilsBundle.wsReceiver = utilsBundle.ws = utilsBundle.progress = utilsBundle.program = void 0;
var _url = _interopRequireDefault$k(require$$6);
var _path$6 = _interopRequireDefault$k(require$$1);
function _interopRequireDefault$k(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
utilsBundle.colors = utilsBundleImpl.colors;
utilsBundle.debug = utilsBundleImpl.debug;
utilsBundle.dotenv = utilsBundleImpl.dotenv;
utilsBundle.getProxyForUrl = utilsBundleImpl.getProxyForUrl;
utilsBundle.HttpsProxyAgent = utilsBundleImpl.HttpsProxyAgent;
utilsBundle.jpegjs = utilsBundleImpl.jpegjs;
utilsBundle.lockfile = utilsBundleImpl.lockfile;
utilsBundle.mime = utilsBundleImpl.mime;
utilsBundle.minimatch = utilsBundleImpl.minimatch;
utilsBundle.open = utilsBundleImpl.open;
utilsBundle.PNG = utilsBundleImpl.PNG;
utilsBundle.program = utilsBundleImpl.program;
utilsBundle.progress = utilsBundleImpl.progress;
utilsBundle.SocksProxyAgent = utilsBundleImpl.SocksProxyAgent;
utilsBundle.ws = utilsBundleImpl.ws;
utilsBundle.wsServer = utilsBundleImpl.wsServer;
utilsBundle.wsReceiver = utilsBundleImpl.wsReceiver;
utilsBundle.wsSender = utilsBundleImpl.wsSender;
const StackUtils = utilsBundleImpl.StackUtils;
const stackUtils = new StackUtils({
  internals: StackUtils.nodeInternals()
});
const nodeInternals = StackUtils.nodeInternals();
const nodeMajorVersion = +process.versions.node.split(".")[0];
function parseStackTraceLine(line) {
  var _frame$file, _frame$file2;
  if (!process.env.PWDEBUGIMPL && nodeMajorVersion < 16 && nodeInternals.some((internal) => internal.test(line))) return null;
  const frame2 = stackUtils.parseLine(line);
  if (!frame2) return null;
  if (!process.env.PWDEBUGIMPL && ((_frame$file = frame2.file) !== null && _frame$file !== void 0 && _frame$file.startsWith("internal") || (_frame$file2 = frame2.file) !== null && _frame$file2 !== void 0 && _frame$file2.startsWith("node:"))) return null;
  if (!frame2.file) return null;
  const file = frame2.file.startsWith("file://") ? _url.default.fileURLToPath(frame2.file) : _path$6.default.resolve(process.cwd(), frame2.file);
  return {
    file,
    line: frame2.line || 0,
    column: frame2.column || 0,
    function: frame2.function
  };
}
function ms(ms2) {
  if (!isFinite(ms2)) return "-";
  if (ms2 === 0) return "0ms";
  if (ms2 < 1e3) return ms2.toFixed(0) + "ms";
  const seconds = ms2 / 1e3;
  if (seconds < 60) return seconds.toFixed(1) + "s";
  const minutes = seconds / 60;
  if (minutes < 60) return minutes.toFixed(1) + "m";
  const hours = minutes / 60;
  if (hours < 24) return hours.toFixed(1) + "h";
  const days = hours / 24;
  return days.toFixed(1) + "d";
}
var network$2 = {};
var happyEyeballs = {};
var manualPromise = {};
var stackTrace = {};
var utils = {};
var ascii = {};
Object.defineProperty(ascii, "__esModule", {
  value: true
});
ascii.jsonStringifyForceASCII = jsonStringifyForceASCII;
ascii.wrapInASCIIBox = wrapInASCIIBox;
function wrapInASCIIBox(text, padding = 0) {
  const lines = text.split("\n");
  const maxLength = Math.max(...lines.map((line) => line.length));
  return ["╔" + "═".repeat(maxLength + padding * 2) + "╗", ...lines.map((line) => "║" + " ".repeat(padding) + line + " ".repeat(maxLength - line.length + padding) + "║"), "╚" + "═".repeat(maxLength + padding * 2) + "╝"].join("\n");
}
function jsonStringifyForceASCII(object) {
  return JSON.stringify(object).replace(/[\u007f-\uffff]/g, (c) => "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4));
}
var comparators = {};
var compare$1 = {};
var colorUtils = {};
Object.defineProperty(colorUtils, "__esModule", {
  value: true
});
colorUtils.blendWithWhite = blendWithWhite;
colorUtils.colorDeltaE94 = colorDeltaE94;
colorUtils.rgb2gray = rgb2gray;
colorUtils.srgb2xyz = srgb2xyz;
colorUtils.xyz2lab = xyz2lab;
function blendWithWhite(c, a) {
  return 255 + (c - 255) * a;
}
function rgb2gray(r, g, b) {
  return 77 * r + 150 * g + 29 * b + 128 >> 8;
}
function colorDeltaE94(rgb1, rgb2) {
  const [l1, a1, b1] = xyz2lab(srgb2xyz(rgb1));
  const [l2, a2, b2] = xyz2lab(srgb2xyz(rgb2));
  const deltaL = l1 - l2;
  const deltaA = a1 - a2;
  const deltaB = b1 - b2;
  const c1 = Math.sqrt(a1 ** 2 + b1 ** 2);
  const c2 = Math.sqrt(a2 ** 2 + b2 ** 2);
  const deltaC = c1 - c2;
  let deltaH = deltaA ** 2 + deltaB ** 2 - deltaC ** 2;
  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
  const k1 = 0.045;
  const k2 = 0.015;
  const kL = 1;
  const kC = 1;
  const kH = 1;
  const sC = 1 + k1 * c1;
  const sH = 1 + k2 * c1;
  const sL = 1;
  return Math.sqrt((deltaL / sL / kL) ** 2 + (deltaC / sC / kC) ** 2 + (deltaH / sH / kH) ** 2);
}
function srgb2xyz(rgb) {
  let r = rgb[0] / 255;
  let g = rgb[1] / 255;
  let b = rgb[2] / 255;
  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
  return [r * 0.4124 + g * 0.3576 + b * 0.1805, r * 0.2126 + g * 0.7152 + b * 0.0722, r * 0.0193 + g * 0.1192 + b * 0.9505];
}
const sigma_pow2 = 6 * 6 / 29 / 29;
const sigma_pow3 = 6 * 6 * 6 / 29 / 29 / 29;
function xyz2lab(xyz) {
  const x = xyz[0] / 0.950489;
  const y = xyz[1];
  const z = xyz[2] / 1.08884;
  const fx = x > sigma_pow3 ? x ** (1 / 3) : x / 3 / sigma_pow2 + 4 / 29;
  const fy = y > sigma_pow3 ? y ** (1 / 3) : y / 3 / sigma_pow2 + 4 / 29;
  const fz = z > sigma_pow3 ? z ** (1 / 3) : z / 3 / sigma_pow2 + 4 / 29;
  const l = 116 * fy - 16;
  const a = 500 * (fx - fy);
  const b = 200 * (fy - fz);
  return [l, a, b];
}
var imageChannel = {};
Object.defineProperty(imageChannel, "__esModule", {
  value: true
});
imageChannel.ImageChannel = void 0;
var _colorUtils$1 = colorUtils;
class ImageChannel {
  static intoRGB(width, height, data, options = {}) {
    const {
      paddingSize = 0,
      paddingColorOdd = [255, 0, 255],
      paddingColorEven = [0, 255, 0]
    } = options;
    const newWidth = width + 2 * paddingSize;
    const newHeight = height + 2 * paddingSize;
    const r = new Uint8Array(newWidth * newHeight);
    const g = new Uint8Array(newWidth * newHeight);
    const b = new Uint8Array(newWidth * newHeight);
    for (let y = 0; y < newHeight; ++y) {
      for (let x = 0; x < newWidth; ++x) {
        const index = y * newWidth + x;
        if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {
          const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;
          const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;
          r[index] = (0, _colorUtils$1.blendWithWhite)(data[offset], alpha);
          g[index] = (0, _colorUtils$1.blendWithWhite)(data[offset + 1], alpha);
          b[index] = (0, _colorUtils$1.blendWithWhite)(data[offset + 2], alpha);
        } else {
          const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;
          r[index] = color[0];
          g[index] = color[1];
          b[index] = color[2];
        }
      }
    }
    return [new ImageChannel(newWidth, newHeight, r), new ImageChannel(newWidth, newHeight, g), new ImageChannel(newWidth, newHeight, b)];
  }
  constructor(width, height, data) {
    this.data = void 0;
    this.width = void 0;
    this.height = void 0;
    this.data = data;
    this.width = width;
    this.height = height;
  }
  get(x, y) {
    return this.data[y * this.width + x];
  }
  boundXY(x, y) {
    return [Math.min(Math.max(x, 0), this.width - 1), Math.min(Math.max(y, 0), this.height - 1)];
  }
}
imageChannel.ImageChannel = ImageChannel;
var stats = {};
Object.defineProperty(stats, "__esModule", {
  value: true
});
stats.FastStats = void 0;
stats.ssim = ssim;
const DYNAMIC_RANGE = 2 ** 8 - 1;
function ssim(stats2, x1, y1, x2, y2) {
  const mean1 = stats2.meanC1(x1, y1, x2, y2);
  const mean2 = stats2.meanC2(x1, y1, x2, y2);
  const var1 = stats2.varianceC1(x1, y1, x2, y2);
  const var2 = stats2.varianceC2(x1, y1, x2, y2);
  const cov = stats2.covariance(x1, y1, x2, y2);
  const c1 = (0.01 * DYNAMIC_RANGE) ** 2;
  const c2 = (0.03 * DYNAMIC_RANGE) ** 2;
  return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);
}
class FastStats {
  constructor(c1, c2) {
    this.c1 = void 0;
    this.c2 = void 0;
    this._partialSumC1 = void 0;
    this._partialSumC2 = void 0;
    this._partialSumMult = void 0;
    this._partialSumSq1 = void 0;
    this._partialSumSq2 = void 0;
    this.c1 = c1;
    this.c2 = c2;
    const {
      width,
      height
    } = c1;
    this._partialSumC1 = new Array(width * height);
    this._partialSumC2 = new Array(width * height);
    this._partialSumSq1 = new Array(width * height);
    this._partialSumSq2 = new Array(width * height);
    this._partialSumMult = new Array(width * height);
    const recalc = (mx, idx, initial, x, y) => {
      mx[idx] = initial;
      if (y > 0) mx[idx] += mx[(y - 1) * width + x];
      if (x > 0) mx[idx] += mx[y * width + x - 1];
      if (x > 0 && y > 0) mx[idx] -= mx[(y - 1) * width + x - 1];
    };
    for (let y = 0; y < height; ++y) {
      for (let x = 0; x < width; ++x) {
        const idx = y * width + x;
        recalc(this._partialSumC1, idx, this.c1.data[idx], x, y);
        recalc(this._partialSumC2, idx, this.c2.data[idx], x, y);
        recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x, y);
        recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x, y);
        recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x, y);
      }
    }
  }
  _sum(partialSum, x1, y1, x2, y2) {
    const width = this.c1.width;
    let result2 = partialSum[y2 * width + x2];
    if (y1 > 0) result2 -= partialSum[(y1 - 1) * width + x2];
    if (x1 > 0) result2 -= partialSum[y2 * width + x1 - 1];
    if (x1 > 0 && y1 > 0) result2 += partialSum[(y1 - 1) * width + x1 - 1];
    return result2;
  }
  meanC1(x1, y1, x2, y2) {
    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
    return this._sum(this._partialSumC1, x1, y1, x2, y2) / N;
  }
  meanC2(x1, y1, x2, y2) {
    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
    return this._sum(this._partialSumC2, x1, y1, x2, y2) / N;
  }
  varianceC1(x1, y1, x2, y2) {
    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
    return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2 / N) / N;
  }
  varianceC2(x1, y1, x2, y2) {
    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
    return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2 / N) / N;
  }
  covariance(x1, y1, x2, y2) {
    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
    return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N) / N;
  }
}
stats.FastStats = FastStats;
Object.defineProperty(compare$1, "__esModule", {
  value: true
});
compare$1.compare = compare;
var _colorUtils = colorUtils;
var _imageChannel = imageChannel;
var _stats = stats;
const SSIM_WINDOW_RADIUS = 15;
const VARIANCE_WINDOW_RADIUS = 1;
function drawPixel$1(width, data, x, y, r, g, b) {
  const idx = (y * width + x) * 4;
  data[idx + 0] = r;
  data[idx + 1] = g;
  data[idx + 2] = b;
  data[idx + 3] = 255;
}
function compare(actual, expected, diff, width, height, options = {}) {
  const {
    maxColorDeltaE94 = 1
  } = options;
  const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);
  const paddingColorEven = [255, 0, 255];
  const paddingColorOdd = [0, 255, 0];
  const [r1, g1, b1] = _imageChannel.ImageChannel.intoRGB(width, height, expected, {
    paddingSize,
    paddingColorEven,
    paddingColorOdd
  });
  const [r2, g2, b2] = _imageChannel.ImageChannel.intoRGB(width, height, actual, {
    paddingSize,
    paddingColorEven,
    paddingColorOdd
  });
  const noop = (x, y) => {
  };
  const drawRedPixel = diff ? (x, y) => drawPixel$1(width, diff, x - paddingSize, y - paddingSize, 255, 0, 0) : noop;
  const drawYellowPixel = diff ? (x, y) => drawPixel$1(width, diff, x - paddingSize, y - paddingSize, 255, 255, 0) : noop;
  const drawGrayPixel2 = diff ? (x, y) => {
    const gray = (0, _colorUtils.rgb2gray)(r1.get(x, y), g1.get(x, y), b1.get(x, y));
    const value = (0, _colorUtils.blendWithWhite)(gray, 0.1);
    drawPixel$1(width, diff, x - paddingSize, y - paddingSize, value, value, value);
  } : noop;
  let fastR, fastG, fastB;
  let diffCount = 0;
  for (let y = paddingSize; y < r1.height - paddingSize; ++y) {
    for (let x = paddingSize; x < r1.width - paddingSize; ++x) {
      if (r1.get(x, y) === r2.get(x, y) && g1.get(x, y) === g2.get(x, y) && b1.get(x, y) === b2.get(x, y)) {
        drawGrayPixel2(x, y);
        continue;
      }
      const delta = (0, _colorUtils.colorDeltaE94)([r1.get(x, y), g1.get(x, y), b1.get(x, y)], [r2.get(x, y), g2.get(x, y), b2.get(x, y)]);
      if (delta <= maxColorDeltaE94) {
        drawGrayPixel2(x, y);
        continue;
      }
      if (!fastR || !fastG || !fastB) {
        fastR = new _stats.FastStats(r1, r2);
        fastG = new _stats.FastStats(g1, g2);
        fastB = new _stats.FastStats(b1, b2);
      }
      const [varX1, varY1] = r1.boundXY(x - VARIANCE_WINDOW_RADIUS, y - VARIANCE_WINDOW_RADIUS);
      const [varX2, varY2] = r1.boundXY(x + VARIANCE_WINDOW_RADIUS, y + VARIANCE_WINDOW_RADIUS);
      const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);
      const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);
      if (var1 === 0 || var2 === 0) {
        drawRedPixel(x, y);
        ++diffCount;
        continue;
      }
      const [ssimX1, ssimY1] = r1.boundXY(x - SSIM_WINDOW_RADIUS, y - SSIM_WINDOW_RADIUS);
      const [ssimX2, ssimY2] = r1.boundXY(x + SSIM_WINDOW_RADIUS, y + SSIM_WINDOW_RADIUS);
      const ssimRGB = ((0, _stats.ssim)(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3;
      const isAntialiased = ssimRGB >= 0.99;
      if (isAntialiased) {
        drawYellowPixel(x, y);
      } else {
        drawRedPixel(x, y);
        ++diffCount;
      }
    }
  }
  return diffCount;
}
var pixelmatch_1 = pixelmatch$1;
const defaultOptions = {
  threshold: 0.1,
  // matching threshold (0 to 1); smaller is more sensitive
  includeAA: false,
  // whether to skip anti-aliasing detection
  alpha: 0.1,
  // opacity of original image in diff output
  aaColor: [255, 255, 0],
  // color of anti-aliased pixels in diff output
  diffColor: [255, 0, 0],
  // color of different pixels in diff output
  diffColorAlt: null,
  // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two
  diffMask: false
  // draw the diff over a transparent background (a mask)
};
function pixelmatch$1(img1, img2, output, width, height, options) {
  if (!isPixelData(img1) || !isPixelData(img2) || output && !isPixelData(output))
    throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");
  if (img1.length !== img2.length || output && output.length !== img1.length)
    throw new Error("Image sizes do not match.");
  if (img1.length !== width * height * 4) throw new Error("Image data size does not match width/height.");
  options = Object.assign({}, defaultOptions, options);
  const len = width * height;
  const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);
  const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);
  let identical = true;
  for (let i = 0; i < len; i++) {
    if (a32[i] !== b32[i]) {
      identical = false;
      break;
    }
  }
  if (identical) {
    if (output && !options.diffMask) {
      for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);
    }
    return 0;
  }
  const maxDelta = 35215 * options.threshold * options.threshold;
  let diff = 0;
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const pos = (y * width + x) * 4;
      const delta = colorDelta(img1, img2, pos, pos);
      if (Math.abs(delta) > maxDelta) {
        if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1))) {
          if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);
        } else {
          if (output) {
            drawPixel(output, pos, ...delta < 0 && options.diffColorAlt || options.diffColor);
          }
          diff++;
        }
      } else if (output) {
        if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);
      }
    }
  }
  return diff;
}
function isPixelData(arr) {
  return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;
}
function antialiased(img, x1, y1, width, height, img2) {
  const x0 = Math.max(x1 - 1, 0);
  const y0 = Math.max(y1 - 1, 0);
  const x2 = Math.min(x1 + 1, width - 1);
  const y2 = Math.min(y1 + 1, height - 1);
  const pos = (y1 * width + x1) * 4;
  let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
  let min = 0;
  let max = 0;
  let minX, minY, maxX, maxY;
  for (let x = x0; x <= x2; x++) {
    for (let y = y0; y <= y2; y++) {
      if (x === x1 && y === y1) continue;
      const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);
      if (delta === 0) {
        zeroes++;
        if (zeroes > 2) return false;
      } else if (delta < min) {
        min = delta;
        minX = x;
        minY = y;
      } else if (delta > max) {
        max = delta;
        maxX = x;
        maxY = y;
      }
    }
  }
  if (min === 0 || max === 0) return false;
  return hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height) || hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height);
}
function hasManySiblings(img, x1, y1, width, height) {
  const x0 = Math.max(x1 - 1, 0);
  const y0 = Math.max(y1 - 1, 0);
  const x2 = Math.min(x1 + 1, width - 1);
  const y2 = Math.min(y1 + 1, height - 1);
  const pos = (y1 * width + x1) * 4;
  let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
  for (let x = x0; x <= x2; x++) {
    for (let y = y0; y <= y2; y++) {
      if (x === x1 && y === y1) continue;
      const pos2 = (y * width + x) * 4;
      if (img[pos] === img[pos2] && img[pos + 1] === img[pos2 + 1] && img[pos + 2] === img[pos2 + 2] && img[pos + 3] === img[pos2 + 3]) zeroes++;
      if (zeroes > 2) return true;
    }
  }
  return false;
}
function colorDelta(img1, img2, k, m, yOnly) {
  let r1 = img1[k + 0];
  let g1 = img1[k + 1];
  let b1 = img1[k + 2];
  let a1 = img1[k + 3];
  let r2 = img2[m + 0];
  let g2 = img2[m + 1];
  let b2 = img2[m + 2];
  let a2 = img2[m + 3];
  if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;
  if (a1 < 255) {
    a1 /= 255;
    r1 = blend(r1, a1);
    g1 = blend(g1, a1);
    b1 = blend(b1, a1);
  }
  if (a2 < 255) {
    a2 /= 255;
    r2 = blend(r2, a2);
    g2 = blend(g2, a2);
    b2 = blend(b2, a2);
  }
  const y1 = rgb2y(r1, g1, b1);
  const y2 = rgb2y(r2, g2, b2);
  const y = y1 - y2;
  if (yOnly) return y;
  const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);
  const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);
  const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;
  return y1 > y2 ? -delta : delta;
}
function rgb2y(r, g, b) {
  return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;
}
function rgb2i(r, g, b) {
  return r * 0.59597799 - g * 0.2741761 - b * 0.32180189;
}
function rgb2q(r, g, b) {
  return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;
}
function blend(c, a) {
  return 255 + (c - 255) * a;
}
function drawPixel(output, pos, r, g, b) {
  output[pos + 0] = r;
  output[pos + 1] = g;
  output[pos + 2] = b;
  output[pos + 3] = 255;
}
function drawGrayPixel(img, i, alpha, output) {
  const r = img[i + 0];
  const g = img[i + 1];
  const b = img[i + 2];
  const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);
  drawPixel(output, i, val, val, val);
}
var diff_match_patch$1 = function() {
  this.Diff_Timeout = 1;
  this.Diff_EditCost = 4;
  this.Match_Threshold = 0.5;
  this.Match_Distance = 1e3;
  this.Patch_DeleteThreshold = 0.5;
  this.Patch_Margin = 4;
  this.Match_MaxBits = 32;
};
var DIFF_DELETE$1 = -1;
var DIFF_INSERT$1 = 1;
var DIFF_EQUAL$1 = 0;
diff_match_patch$1.Diff = function(op, text) {
  this[0] = op;
  this[1] = text;
};
diff_match_patch$1.Diff.prototype.length = 2;
diff_match_patch$1.Diff.prototype.toString = function() {
  return this[0] + "," + this[1];
};
diff_match_patch$1.prototype.diff_main = function(text1, text2, opt_checklines, opt_deadline) {
  if (typeof opt_deadline == "undefined") {
    if (this.Diff_Timeout <= 0) {
      opt_deadline = Number.MAX_VALUE;
    } else {
      opt_deadline = (/* @__PURE__ */ new Date()).getTime() + this.Diff_Timeout * 1e3;
    }
  }
  var deadline = opt_deadline;
  if (text1 == null || text2 == null) {
    throw new Error("Null input. (diff_main)");
  }
  if (text1 == text2) {
    if (text1) {
      return [new diff_match_patch$1.Diff(DIFF_EQUAL$1, text1)];
    }
    return [];
  }
  if (typeof opt_checklines == "undefined") {
    opt_checklines = true;
  }
  var checklines = opt_checklines;
  var commonlength = this.diff_commonPrefix(text1, text2);
  var commonprefix = text1.substring(0, commonlength);
  text1 = text1.substring(commonlength);
  text2 = text2.substring(commonlength);
  commonlength = this.diff_commonSuffix(text1, text2);
  var commonsuffix = text1.substring(text1.length - commonlength);
  text1 = text1.substring(0, text1.length - commonlength);
  text2 = text2.substring(0, text2.length - commonlength);
  var diffs = this.diff_compute_(text1, text2, checklines, deadline);
  if (commonprefix) {
    diffs.unshift(new diff_match_patch$1.Diff(DIFF_EQUAL$1, commonprefix));
  }
  if (commonsuffix) {
    diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, commonsuffix));
  }
  this.diff_cleanupMerge(diffs);
  return diffs;
};
diff_match_patch$1.prototype.diff_compute_ = function(text1, text2, checklines, deadline) {
  var diffs;
  if (!text1) {
    return [new diff_match_patch$1.Diff(DIFF_INSERT$1, text2)];
  }
  if (!text2) {
    return [new diff_match_patch$1.Diff(DIFF_DELETE$1, text1)];
  }
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  var i = longtext.indexOf(shorttext);
  if (i != -1) {
    diffs = [
      new diff_match_patch$1.Diff(DIFF_INSERT$1, longtext.substring(0, i)),
      new diff_match_patch$1.Diff(DIFF_EQUAL$1, shorttext),
      new diff_match_patch$1.Diff(
        DIFF_INSERT$1,
        longtext.substring(i + shorttext.length)
      )
    ];
    if (text1.length > text2.length) {
      diffs[0][0] = diffs[2][0] = DIFF_DELETE$1;
    }
    return diffs;
  }
  if (shorttext.length == 1) {
    return [
      new diff_match_patch$1.Diff(DIFF_DELETE$1, text1),
      new diff_match_patch$1.Diff(DIFF_INSERT$1, text2)
    ];
  }
  var hm = this.diff_halfMatch_(text1, text2);
  if (hm) {
    var text1_a = hm[0];
    var text1_b = hm[1];
    var text2_a = hm[2];
    var text2_b = hm[3];
    var mid_common = hm[4];
    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
    return diffs_a.concat(
      [new diff_match_patch$1.Diff(DIFF_EQUAL$1, mid_common)],
      diffs_b
    );
  }
  if (checklines && text1.length > 100 && text2.length > 100) {
    return this.diff_lineMode_(text1, text2, deadline);
  }
  return this.diff_bisect_(text1, text2, deadline);
};
diff_match_patch$1.prototype.diff_lineMode_ = function(text1, text2, deadline) {
  var a = this.diff_linesToChars_(text1, text2);
  text1 = a.chars1;
  text2 = a.chars2;
  var linearray = a.lineArray;
  var diffs = this.diff_main(text1, text2, false, deadline);
  this.diff_charsToLines_(diffs, linearray);
  this.diff_cleanupSemantic(diffs);
  diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, ""));
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = "";
  var text_insert = "";
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT$1:
        count_insert++;
        text_insert += diffs[pointer][1];
        break;
      case DIFF_DELETE$1:
        count_delete++;
        text_delete += diffs[pointer][1];
        break;
      case DIFF_EQUAL$1:
        if (count_delete >= 1 && count_insert >= 1) {
          diffs.splice(
            pointer - count_delete - count_insert,
            count_delete + count_insert
          );
          pointer = pointer - count_delete - count_insert;
          var subDiff = this.diff_main(text_delete, text_insert, false, deadline);
          for (var j = subDiff.length - 1; j >= 0; j--) {
            diffs.splice(pointer, 0, subDiff[j]);
          }
          pointer = pointer + subDiff.length;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = "";
        text_insert = "";
        break;
    }
    pointer++;
  }
  diffs.pop();
  return diffs;
};
diff_match_patch$1.prototype.diff_bisect_ = function(text1, text2, deadline) {
  var text1_length = text1.length;
  var text2_length = text2.length;
  var max_d = Math.ceil((text1_length + text2_length) / 2);
  var v_offset = max_d;
  var v_length = 2 * max_d;
  var v1 = new Array(v_length);
  var v2 = new Array(v_length);
  for (var x = 0; x < v_length; x++) {
    v1[x] = -1;
    v2[x] = -1;
  }
  v1[v_offset + 1] = 0;
  v2[v_offset + 1] = 0;
  var delta = text1_length - text2_length;
  var front = delta % 2 != 0;
  var k1start = 0;
  var k1end = 0;
  var k2start = 0;
  var k2end = 0;
  for (var d = 0; d < max_d; d++) {
    if ((/* @__PURE__ */ new Date()).getTime() > deadline) {
      break;
    }
    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
      var k1_offset = v_offset + k1;
      var x1;
      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
        x1 = v1[k1_offset + 1];
      } else {
        x1 = v1[k1_offset - 1] + 1;
      }
      var y1 = x1 - k1;
      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
        x1++;
        y1++;
      }
      v1[k1_offset] = x1;
      if (x1 > text1_length) {
        k1end += 2;
      } else if (y1 > text2_length) {
        k1start += 2;
      } else if (front) {
        var k2_offset = v_offset + delta - k1;
        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
          var x2 = text1_length - v2[k2_offset];
          if (x1 >= x2) {
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }
    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
      var k2_offset = v_offset + k2;
      var x2;
      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
        x2 = v2[k2_offset + 1];
      } else {
        x2 = v2[k2_offset - 1] + 1;
      }
      var y2 = x2 - k2;
      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
        x2++;
        y2++;
      }
      v2[k2_offset] = x2;
      if (x2 > text1_length) {
        k2end += 2;
      } else if (y2 > text2_length) {
        k2start += 2;
      } else if (!front) {
        var k1_offset = v_offset + delta - k2;
        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
          var x1 = v1[k1_offset];
          var y1 = v_offset + x1 - k1_offset;
          x2 = text1_length - x2;
          if (x1 >= x2) {
            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
          }
        }
      }
    }
  }
  return [
    new diff_match_patch$1.Diff(DIFF_DELETE$1, text1),
    new diff_match_patch$1.Diff(DIFF_INSERT$1, text2)
  ];
};
diff_match_patch$1.prototype.diff_bisectSplit_ = function(text1, text2, x, y, deadline) {
  var text1a = text1.substring(0, x);
  var text2a = text2.substring(0, y);
  var text1b = text1.substring(x);
  var text2b = text2.substring(y);
  var diffs = this.diff_main(text1a, text2a, false, deadline);
  var diffsb = this.diff_main(text1b, text2b, false, deadline);
  return diffs.concat(diffsb);
};
diff_match_patch$1.prototype.diff_linesToChars_ = function(text1, text2) {
  var lineArray = [];
  var lineHash = {};
  lineArray[0] = "";
  function diff_linesToCharsMunge_(text) {
    var chars = "";
    var lineStart = 0;
    var lineEnd = -1;
    var lineArrayLength = lineArray.length;
    while (lineEnd < text.length - 1) {
      lineEnd = text.indexOf("\n", lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length - 1;
      }
      var line = text.substring(lineStart, lineEnd + 1);
      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {
        chars += String.fromCharCode(lineHash[line]);
      } else {
        if (lineArrayLength == maxLines) {
          line = text.substring(lineStart);
          lineEnd = text.length;
        }
        chars += String.fromCharCode(lineArrayLength);
        lineHash[line] = lineArrayLength;
        lineArray[lineArrayLength++] = line;
      }
      lineStart = lineEnd + 1;
    }
    return chars;
  }
  var maxLines = 4e4;
  var chars1 = diff_linesToCharsMunge_(text1);
  maxLines = 65535;
  var chars2 = diff_linesToCharsMunge_(text2);
  return { chars1, chars2, lineArray };
};
diff_match_patch$1.prototype.diff_charsToLines_ = function(diffs, lineArray) {
  for (var i = 0; i < diffs.length; i++) {
    var chars = diffs[i][1];
    var text = [];
    for (var j = 0; j < chars.length; j++) {
      text[j] = lineArray[chars.charCodeAt(j)];
    }
    diffs[i][1] = text.join("");
  }
};
diff_match_patch$1.prototype.diff_commonPrefix = function(text1, text2) {
  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
    return 0;
  }
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerstart = 0;
  while (pointermin < pointermid) {
    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
      pointermin = pointermid;
      pointerstart = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};
diff_match_patch$1.prototype.diff_commonSuffix = function(text1, text2) {
  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
    return 0;
  }
  var pointermin = 0;
  var pointermax = Math.min(text1.length, text2.length);
  var pointermid = pointermax;
  var pointerend = 0;
  while (pointermin < pointermid) {
    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
      pointermin = pointermid;
      pointerend = pointermin;
    } else {
      pointermax = pointermid;
    }
    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
  }
  return pointermid;
};
diff_match_patch$1.prototype.diff_commonOverlap_ = function(text1, text2) {
  var text1_length = text1.length;
  var text2_length = text2.length;
  if (text1_length == 0 || text2_length == 0) {
    return 0;
  }
  if (text1_length > text2_length) {
    text1 = text1.substring(text1_length - text2_length);
  } else if (text1_length < text2_length) {
    text2 = text2.substring(0, text1_length);
  }
  var text_length = Math.min(text1_length, text2_length);
  if (text1 == text2) {
    return text_length;
  }
  var best = 0;
  var length = 1;
  while (true) {
    var pattern = text1.substring(text_length - length);
    var found = text2.indexOf(pattern);
    if (found == -1) {
      return best;
    }
    length += found;
    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {
      best = length;
      length++;
    }
  }
};
diff_match_patch$1.prototype.diff_halfMatch_ = function(text1, text2) {
  if (this.Diff_Timeout <= 0) {
    return null;
  }
  var longtext = text1.length > text2.length ? text1 : text2;
  var shorttext = text1.length > text2.length ? text2 : text1;
  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
    return null;
  }
  var dmp = this;
  function diff_halfMatchI_(longtext2, shorttext2, i) {
    var seed = longtext2.substring(i, i + Math.floor(longtext2.length / 4));
    var j = -1;
    var best_common = "";
    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
    while ((j = shorttext2.indexOf(seed, j + 1)) != -1) {
      var prefixLength = dmp.diff_commonPrefix(
        longtext2.substring(i),
        shorttext2.substring(j)
      );
      var suffixLength = dmp.diff_commonSuffix(
        longtext2.substring(0, i),
        shorttext2.substring(0, j)
      );
      if (best_common.length < suffixLength + prefixLength) {
        best_common = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
        best_longtext_a = longtext2.substring(0, i - suffixLength);
        best_longtext_b = longtext2.substring(i + prefixLength);
        best_shorttext_a = shorttext2.substring(0, j - suffixLength);
        best_shorttext_b = shorttext2.substring(j + prefixLength);
      }
    }
    if (best_common.length * 2 >= longtext2.length) {
      return [
        best_longtext_a,
        best_longtext_b,
        best_shorttext_a,
        best_shorttext_b,
        best_common
      ];
    } else {
      return null;
    }
  }
  var hm1 = diff_halfMatchI_(
    longtext,
    shorttext,
    Math.ceil(longtext.length / 4)
  );
  var hm2 = diff_halfMatchI_(
    longtext,
    shorttext,
    Math.ceil(longtext.length / 2)
  );
  var hm;
  if (!hm1 && !hm2) {
    return null;
  } else if (!hm2) {
    hm = hm1;
  } else if (!hm1) {
    hm = hm2;
  } else {
    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
  }
  var text1_a, text1_b, text2_a, text2_b;
  if (text1.length > text2.length) {
    text1_a = hm[0];
    text1_b = hm[1];
    text2_a = hm[2];
    text2_b = hm[3];
  } else {
    text2_a = hm[0];
    text2_b = hm[1];
    text1_a = hm[2];
    text1_b = hm[3];
  }
  var mid_common = hm[4];
  return [text1_a, text1_b, text2_a, text2_b, mid_common];
};
diff_match_patch$1.prototype.diff_cleanupSemantic = function(diffs) {
  var changes = false;
  var equalities = [];
  var equalitiesLength = 0;
  var lastEquality = null;
  var pointer = 0;
  var length_insertions1 = 0;
  var length_deletions1 = 0;
  var length_insertions2 = 0;
  var length_deletions2 = 0;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL$1) {
      equalities[equalitiesLength++] = pointer;
      length_insertions1 = length_insertions2;
      length_deletions1 = length_deletions2;
      length_insertions2 = 0;
      length_deletions2 = 0;
      lastEquality = diffs[pointer][1];
    } else {
      if (diffs[pointer][0] == DIFF_INSERT$1) {
        length_insertions2 += diffs[pointer][1].length;
      } else {
        length_deletions2 += diffs[pointer][1].length;
      }
      if (lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(
        length_insertions2,
        length_deletions2
      )) {
        diffs.splice(
          equalities[equalitiesLength - 1],
          0,
          new diff_match_patch$1.Diff(DIFF_DELETE$1, lastEquality)
        );
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT$1;
        equalitiesLength--;
        equalitiesLength--;
        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
        length_insertions1 = 0;
        length_deletions1 = 0;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastEquality = null;
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
  this.diff_cleanupSemanticLossless(diffs);
  pointer = 1;
  while (pointer < diffs.length) {
    if (diffs[pointer - 1][0] == DIFF_DELETE$1 && diffs[pointer][0] == DIFF_INSERT$1) {
      var deletion = diffs[pointer - 1][1];
      var insertion = diffs[pointer][1];
      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
      if (overlap_length1 >= overlap_length2) {
        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {
          diffs.splice(pointer, 0, new diff_match_patch$1.Diff(
            DIFF_EQUAL$1,
            insertion.substring(0, overlap_length1)
          ));
          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);
          diffs[pointer + 1][1] = insertion.substring(overlap_length1);
          pointer++;
        }
      } else {
        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {
          diffs.splice(pointer, 0, new diff_match_patch$1.Diff(
            DIFF_EQUAL$1,
            deletion.substring(0, overlap_length2)
          ));
          diffs[pointer - 1][0] = DIFF_INSERT$1;
          diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);
          diffs[pointer + 1][0] = DIFF_DELETE$1;
          diffs[pointer + 1][1] = deletion.substring(overlap_length2);
          pointer++;
        }
      }
      pointer++;
    }
    pointer++;
  }
};
diff_match_patch$1.prototype.diff_cleanupSemanticLossless = function(diffs) {
  function diff_cleanupSemanticScore_(one, two) {
    if (!one || !two) {
      return 6;
    }
    var char1 = one.charAt(one.length - 1);
    var char2 = two.charAt(0);
    var nonAlphaNumeric1 = char1.match(diff_match_patch$1.nonAlphaNumericRegex_);
    var nonAlphaNumeric2 = char2.match(diff_match_patch$1.nonAlphaNumericRegex_);
    var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch$1.whitespaceRegex_);
    var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch$1.whitespaceRegex_);
    var lineBreak1 = whitespace1 && char1.match(diff_match_patch$1.linebreakRegex_);
    var lineBreak2 = whitespace2 && char2.match(diff_match_patch$1.linebreakRegex_);
    var blankLine1 = lineBreak1 && one.match(diff_match_patch$1.blanklineEndRegex_);
    var blankLine2 = lineBreak2 && two.match(diff_match_patch$1.blanklineStartRegex_);
    if (blankLine1 || blankLine2) {
      return 5;
    } else if (lineBreak1 || lineBreak2) {
      return 4;
    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
      return 3;
    } else if (whitespace1 || whitespace2) {
      return 2;
    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
      return 1;
    }
    return 0;
  }
  var pointer = 1;
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL$1 && diffs[pointer + 1][0] == DIFF_EQUAL$1) {
      var equality1 = diffs[pointer - 1][1];
      var edit = diffs[pointer][1];
      var equality2 = diffs[pointer + 1][1];
      var commonOffset = this.diff_commonSuffix(equality1, edit);
      if (commonOffset) {
        var commonString = edit.substring(edit.length - commonOffset);
        equality1 = equality1.substring(0, equality1.length - commonOffset);
        edit = commonString + edit.substring(0, edit.length - commonOffset);
        equality2 = commonString + equality2;
      }
      var bestEquality1 = equality1;
      var bestEdit = edit;
      var bestEquality2 = equality2;
      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
      while (edit.charAt(0) === equality2.charAt(0)) {
        equality1 += edit.charAt(0);
        edit = edit.substring(1) + equality2.charAt(0);
        equality2 = equality2.substring(1);
        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
        if (score >= bestScore) {
          bestScore = score;
          bestEquality1 = equality1;
          bestEdit = edit;
          bestEquality2 = equality2;
        }
      }
      if (diffs[pointer - 1][1] != bestEquality1) {
        if (bestEquality1) {
          diffs[pointer - 1][1] = bestEquality1;
        } else {
          diffs.splice(pointer - 1, 1);
          pointer--;
        }
        diffs[pointer][1] = bestEdit;
        if (bestEquality2) {
          diffs[pointer + 1][1] = bestEquality2;
        } else {
          diffs.splice(pointer + 1, 1);
          pointer--;
        }
      }
    }
    pointer++;
  }
};
diff_match_patch$1.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
diff_match_patch$1.whitespaceRegex_ = /\s/;
diff_match_patch$1.linebreakRegex_ = /[\r\n]/;
diff_match_patch$1.blanklineEndRegex_ = /\n\r?\n$/;
diff_match_patch$1.blanklineStartRegex_ = /^\r?\n\r?\n/;
diff_match_patch$1.prototype.diff_cleanupEfficiency = function(diffs) {
  var changes = false;
  var equalities = [];
  var equalitiesLength = 0;
  var lastEquality = null;
  var pointer = 0;
  var pre_ins = false;
  var pre_del = false;
  var post_ins = false;
  var post_del = false;
  while (pointer < diffs.length) {
    if (diffs[pointer][0] == DIFF_EQUAL$1) {
      if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {
        equalities[equalitiesLength++] = pointer;
        pre_ins = post_ins;
        pre_del = post_del;
        lastEquality = diffs[pointer][1];
      } else {
        equalitiesLength = 0;
        lastEquality = null;
      }
      post_ins = post_del = false;
    } else {
      if (diffs[pointer][0] == DIFF_DELETE$1) {
        post_del = true;
      } else {
        post_ins = true;
      }
      if (lastEquality && (pre_ins && pre_del && post_ins && post_del || lastEquality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {
        diffs.splice(
          equalities[equalitiesLength - 1],
          0,
          new diff_match_patch$1.Diff(DIFF_DELETE$1, lastEquality)
        );
        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT$1;
        equalitiesLength--;
        lastEquality = null;
        if (pre_ins && pre_del) {
          post_ins = post_del = true;
          equalitiesLength = 0;
        } else {
          equalitiesLength--;
          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
          post_ins = post_del = false;
        }
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};
diff_match_patch$1.prototype.diff_cleanupMerge = function(diffs) {
  diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, ""));
  var pointer = 0;
  var count_delete = 0;
  var count_insert = 0;
  var text_delete = "";
  var text_insert = "";
  var commonlength;
  while (pointer < diffs.length) {
    switch (diffs[pointer][0]) {
      case DIFF_INSERT$1:
        count_insert++;
        text_insert += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_DELETE$1:
        count_delete++;
        text_delete += diffs[pointer][1];
        pointer++;
        break;
      case DIFF_EQUAL$1:
        if (count_delete + count_insert > 1) {
          if (count_delete !== 0 && count_insert !== 0) {
            commonlength = this.diff_commonPrefix(text_insert, text_delete);
            if (commonlength !== 0) {
              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL$1) {
                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
              } else {
                diffs.splice(0, 0, new diff_match_patch$1.Diff(
                  DIFF_EQUAL$1,
                  text_insert.substring(0, commonlength)
                ));
                pointer++;
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            commonlength = this.diff_commonSuffix(text_insert, text_delete);
            if (commonlength !== 0) {
              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
              text_insert = text_insert.substring(0, text_insert.length - commonlength);
              text_delete = text_delete.substring(0, text_delete.length - commonlength);
            }
          }
          pointer -= count_delete + count_insert;
          diffs.splice(pointer, count_delete + count_insert);
          if (text_delete.length) {
            diffs.splice(
              pointer,
              0,
              new diff_match_patch$1.Diff(DIFF_DELETE$1, text_delete)
            );
            pointer++;
          }
          if (text_insert.length) {
            diffs.splice(
              pointer,
              0,
              new diff_match_patch$1.Diff(DIFF_INSERT$1, text_insert)
            );
            pointer++;
          }
          pointer++;
        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL$1) {
          diffs[pointer - 1][1] += diffs[pointer][1];
          diffs.splice(pointer, 1);
        } else {
          pointer++;
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = "";
        text_insert = "";
        break;
    }
  }
  if (diffs[diffs.length - 1][1] === "") {
    diffs.pop();
  }
  var changes = false;
  pointer = 1;
  while (pointer < diffs.length - 1) {
    if (diffs[pointer - 1][0] == DIFF_EQUAL$1 && diffs[pointer + 1][0] == DIFF_EQUAL$1) {
      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
        diffs.splice(pointer - 1, 1);
        changes = true;
      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
        diffs[pointer - 1][1] += diffs[pointer + 1][1];
        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
        diffs.splice(pointer + 1, 1);
        changes = true;
      }
    }
    pointer++;
  }
  if (changes) {
    this.diff_cleanupMerge(diffs);
  }
};
diff_match_patch$1.prototype.diff_xIndex = function(diffs, loc) {
  var chars1 = 0;
  var chars2 = 0;
  var last_chars1 = 0;
  var last_chars2 = 0;
  var x;
  for (x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT$1) {
      chars1 += diffs[x][1].length;
    }
    if (diffs[x][0] !== DIFF_DELETE$1) {
      chars2 += diffs[x][1].length;
    }
    if (chars1 > loc) {
      break;
    }
    last_chars1 = chars1;
    last_chars2 = chars2;
  }
  if (diffs.length != x && diffs[x][0] === DIFF_DELETE$1) {
    return last_chars2;
  }
  return last_chars2 + (loc - last_chars1);
};
diff_match_patch$1.prototype.diff_prettyHtml = function(diffs) {
  var html = [];
  var pattern_amp = /&/g;
  var pattern_lt = /</g;
  var pattern_gt = />/g;
  var pattern_para = /\n/g;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    var text = data.replace(pattern_amp, "&amp;").replace(pattern_lt, "&lt;").replace(pattern_gt, "&gt;").replace(pattern_para, "&para;<br>");
    switch (op) {
      case DIFF_INSERT$1:
        html[x] = '<ins style="background:#e6ffe6;">' + text + "</ins>";
        break;
      case DIFF_DELETE$1:
        html[x] = '<del style="background:#ffe6e6;">' + text + "</del>";
        break;
      case DIFF_EQUAL$1:
        html[x] = "<span>" + text + "</span>";
        break;
    }
  }
  return html.join("");
};
diff_match_patch$1.prototype.diff_text1 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_INSERT$1) {
      text[x] = diffs[x][1];
    }
  }
  return text.join("");
};
diff_match_patch$1.prototype.diff_text2 = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    if (diffs[x][0] !== DIFF_DELETE$1) {
      text[x] = diffs[x][1];
    }
  }
  return text.join("");
};
diff_match_patch$1.prototype.diff_levenshtein = function(diffs) {
  var levenshtein = 0;
  var insertions = 0;
  var deletions = 0;
  for (var x = 0; x < diffs.length; x++) {
    var op = diffs[x][0];
    var data = diffs[x][1];
    switch (op) {
      case DIFF_INSERT$1:
        insertions += data.length;
        break;
      case DIFF_DELETE$1:
        deletions += data.length;
        break;
      case DIFF_EQUAL$1:
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
    }
  }
  levenshtein += Math.max(insertions, deletions);
  return levenshtein;
};
diff_match_patch$1.prototype.diff_toDelta = function(diffs) {
  var text = [];
  for (var x = 0; x < diffs.length; x++) {
    switch (diffs[x][0]) {
      case DIFF_INSERT$1:
        text[x] = "+" + encodeURI(diffs[x][1]);
        break;
      case DIFF_DELETE$1:
        text[x] = "-" + diffs[x][1].length;
        break;
      case DIFF_EQUAL$1:
        text[x] = "=" + diffs[x][1].length;
        break;
    }
  }
  return text.join("	").replace(/%20/g, " ");
};
diff_match_patch$1.prototype.diff_fromDelta = function(text1, delta) {
  var diffs = [];
  var diffsLength = 0;
  var pointer = 0;
  var tokens = delta.split(/\t/g);
  for (var x = 0; x < tokens.length; x++) {
    var param = tokens[x].substring(1);
    switch (tokens[x].charAt(0)) {
      case "+":
        try {
          diffs[diffsLength++] = new diff_match_patch$1.Diff(DIFF_INSERT$1, decodeURI(param));
        } catch (ex) {
          throw new Error("Illegal escape in diff_fromDelta: " + param);
        }
        break;
      case "-":
      case "=":
        var n = parseInt(param, 10);
        if (isNaN(n) || n < 0) {
          throw new Error("Invalid number in diff_fromDelta: " + param);
        }
        var text = text1.substring(pointer, pointer += n);
        if (tokens[x].charAt(0) == "=") {
          diffs[diffsLength++] = new diff_match_patch$1.Diff(DIFF_EQUAL$1, text);
        } else {
          diffs[diffsLength++] = new diff_match_patch$1.Diff(DIFF_DELETE$1, text);
        }
        break;
      default:
        if (tokens[x]) {
          throw new Error("Invalid diff operation in diff_fromDelta: " + tokens[x]);
        }
    }
  }
  if (pointer != text1.length) {
    throw new Error("Delta length (" + pointer + ") does not equal source text length (" + text1.length + ").");
  }
  return diffs;
};
diff_match_patch$1.prototype.match_main = function(text, pattern, loc) {
  if (text == null || pattern == null || loc == null) {
    throw new Error("Null input. (match_main)");
  }
  loc = Math.max(0, Math.min(loc, text.length));
  if (text == pattern) {
    return 0;
  } else if (!text.length) {
    return -1;
  } else if (text.substring(loc, loc + pattern.length) == pattern) {
    return loc;
  } else {
    return this.match_bitap_(text, pattern, loc);
  }
};
diff_match_patch$1.prototype.match_bitap_ = function(text, pattern, loc) {
  if (pattern.length > this.Match_MaxBits) {
    throw new Error("Pattern too long for this browser.");
  }
  var s = this.match_alphabet_(pattern);
  var dmp = this;
  function match_bitapScore_(e, x) {
    var accuracy = e / pattern.length;
    var proximity = Math.abs(loc - x);
    if (!dmp.Match_Distance) {
      return proximity ? 1 : accuracy;
    }
    return accuracy + proximity / dmp.Match_Distance;
  }
  var score_threshold = this.Match_Threshold;
  var best_loc = text.indexOf(pattern, loc);
  if (best_loc != -1) {
    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
    best_loc = text.lastIndexOf(pattern, loc + pattern.length);
    if (best_loc != -1) {
      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
    }
  }
  var matchmask = 1 << pattern.length - 1;
  best_loc = -1;
  var bin_min, bin_mid;
  var bin_max = pattern.length + text.length;
  var last_rd;
  for (var d = 0; d < pattern.length; d++) {
    bin_min = 0;
    bin_mid = bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
        bin_min = bin_mid;
      } else {
        bin_max = bin_mid;
      }
      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
    }
    bin_max = bin_mid;
    var start = Math.max(1, loc - bin_mid + 1);
    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;
    var rd = Array(finish + 2);
    rd[finish + 1] = (1 << d) - 1;
    for (var j = finish; j >= start; j--) {
      var charMatch = s[text.charAt(j - 1)];
      if (d === 0) {
        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
      } else {
        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];
      }
      if (rd[j] & matchmask) {
        var score = match_bitapScore_(d, j - 1);
        if (score <= score_threshold) {
          score_threshold = score;
          best_loc = j - 1;
          if (best_loc > loc) {
            start = Math.max(1, 2 * loc - best_loc);
          } else {
            break;
          }
        }
      }
    }
    if (match_bitapScore_(d + 1, loc) > score_threshold) {
      break;
    }
    last_rd = rd;
  }
  return best_loc;
};
diff_match_patch$1.prototype.match_alphabet_ = function(pattern) {
  var s = {};
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] = 0;
  }
  for (var i = 0; i < pattern.length; i++) {
    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
  }
  return s;
};
diff_match_patch$1.prototype.patch_addContext_ = function(patch, text) {
  if (text.length == 0) {
    return;
  }
  if (patch.start2 === null) {
    throw Error("patch not initialized");
  }
  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
  var padding = 0;
  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {
    padding += this.Patch_Margin;
    pattern = text.substring(
      patch.start2 - padding,
      patch.start2 + patch.length1 + padding
    );
  }
  padding += this.Patch_Margin;
  var prefix = text.substring(patch.start2 - padding, patch.start2);
  if (prefix) {
    patch.diffs.unshift(new diff_match_patch$1.Diff(DIFF_EQUAL$1, prefix));
  }
  var suffix = text.substring(
    patch.start2 + patch.length1,
    patch.start2 + patch.length1 + padding
  );
  if (suffix) {
    patch.diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, suffix));
  }
  patch.start1 -= prefix.length;
  patch.start2 -= prefix.length;
  patch.length1 += prefix.length + suffix.length;
  patch.length2 += prefix.length + suffix.length;
};
diff_match_patch$1.prototype.patch_make = function(a, opt_b, opt_c) {
  var text1, diffs;
  if (typeof a == "string" && typeof opt_b == "string" && typeof opt_c == "undefined") {
    text1 = /** @type {string} */
    a;
    diffs = this.diff_main(
      text1,
      /** @type {string} */
      opt_b,
      true
    );
    if (diffs.length > 2) {
      this.diff_cleanupSemantic(diffs);
      this.diff_cleanupEfficiency(diffs);
    }
  } else if (a && typeof a == "object" && typeof opt_b == "undefined" && typeof opt_c == "undefined") {
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */
    a;
    text1 = this.diff_text1(diffs);
  } else if (typeof a == "string" && opt_b && typeof opt_b == "object" && typeof opt_c == "undefined") {
    text1 = /** @type {string} */
    a;
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */
    opt_b;
  } else if (typeof a == "string" && typeof opt_b == "string" && opt_c && typeof opt_c == "object") {
    text1 = /** @type {string} */
    a;
    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */
    opt_c;
  } else {
    throw new Error("Unknown call format to patch_make.");
  }
  if (diffs.length === 0) {
    return [];
  }
  var patches = [];
  var patch = new diff_match_patch$1.patch_obj();
  var patchDiffLength = 0;
  var char_count1 = 0;
  var char_count2 = 0;
  var prepatch_text = text1;
  var postpatch_text = text1;
  for (var x = 0; x < diffs.length; x++) {
    var diff_type = diffs[x][0];
    var diff_text = diffs[x][1];
    if (!patchDiffLength && diff_type !== DIFF_EQUAL$1) {
      patch.start1 = char_count1;
      patch.start2 = char_count2;
    }
    switch (diff_type) {
      case DIFF_INSERT$1:
        patch.diffs[patchDiffLength++] = diffs[x];
        patch.length2 += diff_text.length;
        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);
        break;
      case DIFF_DELETE$1:
        patch.length1 += diff_text.length;
        patch.diffs[patchDiffLength++] = diffs[x];
        postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);
        break;
      case DIFF_EQUAL$1:
        if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {
          patch.diffs[patchDiffLength++] = diffs[x];
          patch.length1 += diff_text.length;
          patch.length2 += diff_text.length;
        } else if (diff_text.length >= 2 * this.Patch_Margin) {
          if (patchDiffLength) {
            this.patch_addContext_(patch, prepatch_text);
            patches.push(patch);
            patch = new diff_match_patch$1.patch_obj();
            patchDiffLength = 0;
            prepatch_text = postpatch_text;
            char_count1 = char_count2;
          }
        }
        break;
    }
    if (diff_type !== DIFF_INSERT$1) {
      char_count1 += diff_text.length;
    }
    if (diff_type !== DIFF_DELETE$1) {
      char_count2 += diff_text.length;
    }
  }
  if (patchDiffLength) {
    this.patch_addContext_(patch, prepatch_text);
    patches.push(patch);
  }
  return patches;
};
diff_match_patch$1.prototype.patch_deepCopy = function(patches) {
  var patchesCopy = [];
  for (var x = 0; x < patches.length; x++) {
    var patch = patches[x];
    var patchCopy = new diff_match_patch$1.patch_obj();
    patchCopy.diffs = [];
    for (var y = 0; y < patch.diffs.length; y++) {
      patchCopy.diffs[y] = new diff_match_patch$1.Diff(patch.diffs[y][0], patch.diffs[y][1]);
    }
    patchCopy.start1 = patch.start1;
    patchCopy.start2 = patch.start2;
    patchCopy.length1 = patch.length1;
    patchCopy.length2 = patch.length2;
    patchesCopy[x] = patchCopy;
  }
  return patchesCopy;
};
diff_match_patch$1.prototype.patch_apply = function(patches, text) {
  if (patches.length == 0) {
    return [text, []];
  }
  patches = this.patch_deepCopy(patches);
  var nullPadding = this.patch_addPadding(patches);
  text = nullPadding + text + nullPadding;
  this.patch_splitMax(patches);
  var delta = 0;
  var results = [];
  for (var x = 0; x < patches.length; x++) {
    var expected_loc = patches[x].start2 + delta;
    var text1 = this.diff_text1(patches[x].diffs);
    var start_loc;
    var end_loc = -1;
    if (text1.length > this.Match_MaxBits) {
      start_loc = this.match_main(
        text,
        text1.substring(0, this.Match_MaxBits),
        expected_loc
      );
      if (start_loc != -1) {
        end_loc = this.match_main(
          text,
          text1.substring(text1.length - this.Match_MaxBits),
          expected_loc + text1.length - this.Match_MaxBits
        );
        if (end_loc == -1 || start_loc >= end_loc) {
          start_loc = -1;
        }
      }
    } else {
      start_loc = this.match_main(text, text1, expected_loc);
    }
    if (start_loc == -1) {
      results[x] = false;
      delta -= patches[x].length2 - patches[x].length1;
    } else {
      results[x] = true;
      delta = start_loc - expected_loc;
      var text2;
      if (end_loc == -1) {
        text2 = text.substring(start_loc, start_loc + text1.length);
      } else {
        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
      }
      if (text1 == text2) {
        text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);
      } else {
        var diffs = this.diff_main(text1, text2, false);
        if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {
          results[x] = false;
        } else {
          this.diff_cleanupSemanticLossless(diffs);
          var index1 = 0;
          var index2;
          for (var y = 0; y < patches[x].diffs.length; y++) {
            var mod = patches[x].diffs[y];
            if (mod[0] !== DIFF_EQUAL$1) {
              index2 = this.diff_xIndex(diffs, index1);
            }
            if (mod[0] === DIFF_INSERT$1) {
              text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);
            } else if (mod[0] === DIFF_DELETE$1) {
              text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(
                diffs,
                index1 + mod[1].length
              ));
            }
            if (mod[0] !== DIFF_DELETE$1) {
              index1 += mod[1].length;
            }
          }
        }
      }
    }
  }
  text = text.substring(nullPadding.length, text.length - nullPadding.length);
  return [text, results];
};
diff_match_patch$1.prototype.patch_addPadding = function(patches) {
  var paddingLength = this.Patch_Margin;
  var nullPadding = "";
  for (var x = 1; x <= paddingLength; x++) {
    nullPadding += String.fromCharCode(x);
  }
  for (var x = 0; x < patches.length; x++) {
    patches[x].start1 += paddingLength;
    patches[x].start2 += paddingLength;
  }
  var patch = patches[0];
  var diffs = patch.diffs;
  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL$1) {
    diffs.unshift(new diff_match_patch$1.Diff(DIFF_EQUAL$1, nullPadding));
    patch.start1 -= paddingLength;
    patch.start2 -= paddingLength;
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[0][1].length) {
    var extraLength = paddingLength - diffs[0][1].length;
    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
    patch.start1 -= extraLength;
    patch.start2 -= extraLength;
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }
  patch = patches[patches.length - 1];
  diffs = patch.diffs;
  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL$1) {
    diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, nullPadding));
    patch.length1 += paddingLength;
    patch.length2 += paddingLength;
  } else if (paddingLength > diffs[diffs.length - 1][1].length) {
    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
    patch.length1 += extraLength;
    patch.length2 += extraLength;
  }
  return nullPadding;
};
diff_match_patch$1.prototype.patch_splitMax = function(patches) {
  var patch_size = this.Match_MaxBits;
  for (var x = 0; x < patches.length; x++) {
    if (patches[x].length1 <= patch_size) {
      continue;
    }
    var bigpatch = patches[x];
    patches.splice(x--, 1);
    var start1 = bigpatch.start1;
    var start2 = bigpatch.start2;
    var precontext = "";
    while (bigpatch.diffs.length !== 0) {
      var patch = new diff_match_patch$1.patch_obj();
      var empty = true;
      patch.start1 = start1 - precontext.length;
      patch.start2 = start2 - precontext.length;
      if (precontext !== "") {
        patch.length1 = patch.length2 = precontext.length;
        patch.diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, precontext));
      }
      while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {
        var diff_type = bigpatch.diffs[0][0];
        var diff_text = bigpatch.diffs[0][1];
        if (diff_type === DIFF_INSERT$1) {
          patch.length2 += diff_text.length;
          start2 += diff_text.length;
          patch.diffs.push(bigpatch.diffs.shift());
          empty = false;
        } else if (diff_type === DIFF_DELETE$1 && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL$1 && diff_text.length > 2 * patch_size) {
          patch.length1 += diff_text.length;
          start1 += diff_text.length;
          empty = false;
          patch.diffs.push(new diff_match_patch$1.Diff(diff_type, diff_text));
          bigpatch.diffs.shift();
        } else {
          diff_text = diff_text.substring(
            0,
            patch_size - patch.length1 - this.Patch_Margin
          );
          patch.length1 += diff_text.length;
          start1 += diff_text.length;
          if (diff_type === DIFF_EQUAL$1) {
            patch.length2 += diff_text.length;
            start2 += diff_text.length;
          } else {
            empty = false;
          }
          patch.diffs.push(new diff_match_patch$1.Diff(diff_type, diff_text));
          if (diff_text == bigpatch.diffs[0][1]) {
            bigpatch.diffs.shift();
          } else {
            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);
          }
        }
      }
      precontext = this.diff_text2(patch.diffs);
      precontext = precontext.substring(precontext.length - this.Patch_Margin);
      var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);
      if (postcontext !== "") {
        patch.length1 += postcontext.length;
        patch.length2 += postcontext.length;
        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL$1) {
          patch.diffs[patch.diffs.length - 1][1] += postcontext;
        } else {
          patch.diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, postcontext));
        }
      }
      if (!empty) {
        patches.splice(++x, 0, patch);
      }
    }
  }
};
diff_match_patch$1.prototype.patch_toText = function(patches) {
  var text = [];
  for (var x = 0; x < patches.length; x++) {
    text[x] = patches[x];
  }
  return text.join("");
};
diff_match_patch$1.prototype.patch_fromText = function(textline) {
  var patches = [];
  if (!textline) {
    return patches;
  }
  var text = textline.split("\n");
  var textPointer = 0;
  var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
  while (textPointer < text.length) {
    var m = text[textPointer].match(patchHeader);
    if (!m) {
      throw new Error("Invalid patch string: " + text[textPointer]);
    }
    var patch = new diff_match_patch$1.patch_obj();
    patches.push(patch);
    patch.start1 = parseInt(m[1], 10);
    if (m[2] === "") {
      patch.start1--;
      patch.length1 = 1;
    } else if (m[2] == "0") {
      patch.length1 = 0;
    } else {
      patch.start1--;
      patch.length1 = parseInt(m[2], 10);
    }
    patch.start2 = parseInt(m[3], 10);
    if (m[4] === "") {
      patch.start2--;
      patch.length2 = 1;
    } else if (m[4] == "0") {
      patch.length2 = 0;
    } else {
      patch.start2--;
      patch.length2 = parseInt(m[4], 10);
    }
    textPointer++;
    while (textPointer < text.length) {
      var sign = text[textPointer].charAt(0);
      try {
        var line = decodeURI(text[textPointer].substring(1));
      } catch (ex) {
        throw new Error("Illegal escape in patch_fromText: " + line);
      }
      if (sign == "-") {
        patch.diffs.push(new diff_match_patch$1.Diff(DIFF_DELETE$1, line));
      } else if (sign == "+") {
        patch.diffs.push(new diff_match_patch$1.Diff(DIFF_INSERT$1, line));
      } else if (sign == " ") {
        patch.diffs.push(new diff_match_patch$1.Diff(DIFF_EQUAL$1, line));
      } else if (sign == "@") {
        break;
      } else if (sign === "") ;
      else {
        throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
      }
      textPointer++;
    }
  }
  return patches;
};
diff_match_patch$1.patch_obj = function() {
  this.diffs = [];
  this.start1 = null;
  this.start2 = null;
  this.length1 = 0;
  this.length2 = 0;
};
diff_match_patch$1.patch_obj.prototype.toString = function() {
  var coords1, coords2;
  if (this.length1 === 0) {
    coords1 = this.start1 + ",0";
  } else if (this.length1 == 1) {
    coords1 = this.start1 + 1;
  } else {
    coords1 = this.start1 + 1 + "," + this.length1;
  }
  if (this.length2 === 0) {
    coords2 = this.start2 + ",0";
  } else if (this.length2 == 1) {
    coords2 = this.start2 + 1;
  } else {
    coords2 = this.start2 + 1 + "," + this.length2;
  }
  var text = ["@@ -" + coords1 + " +" + coords2 + " @@\n"];
  var op;
  for (var x = 0; x < this.diffs.length; x++) {
    switch (this.diffs[x][0]) {
      case DIFF_INSERT$1:
        op = "+";
        break;
      case DIFF_DELETE$1:
        op = "-";
        break;
      case DIFF_EQUAL$1:
        op = " ";
        break;
    }
    text[x + 1] = op + encodeURI(this.diffs[x][1]) + "\n";
  }
  return text.join("").replace(/%20/g, " ");
};
var diff_match_patch_1 = { diff_match_patch: diff_match_patch$1, DIFF_INSERT: DIFF_INSERT$1, DIFF_DELETE: DIFF_DELETE$1, DIFF_EQUAL: DIFF_EQUAL$1 };
Object.defineProperty(comparators, "__esModule", {
  value: true
});
comparators.getComparator = getComparator;
var _utilsBundle$8 = utilsBundle;
var _compare = compare$1;
const pixelmatch = pixelmatch_1;
const {
  diff_match_patch,
  DIFF_INSERT,
  DIFF_DELETE,
  DIFF_EQUAL
} = diff_match_patch_1;
function getComparator(mimeType2) {
  if (mimeType2 === "image/png") return compareImages.bind(null, "image/png");
  if (mimeType2 === "image/jpeg") return compareImages.bind(null, "image/jpeg");
  if (mimeType2 === "text/plain") return compareText;
  return compareBuffersOrStrings;
}
const JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024;
function compareBuffersOrStrings(actualBuffer, expectedBuffer) {
  if (typeof actualBuffer === "string") return compareText(actualBuffer, expectedBuffer);
  if (!actualBuffer || !(actualBuffer instanceof Buffer)) return {
    errorMessage: "Actual result should be a Buffer or a string."
  };
  if (Buffer.compare(actualBuffer, expectedBuffer)) return {
    errorMessage: "Buffers differ"
  };
  return null;
}
function compareImages(mimeType2, actualBuffer, expectedBuffer, options = {}) {
  var _options$comparator, _ref;
  if (!actualBuffer || !(actualBuffer instanceof Buffer)) return {
    errorMessage: "Actual result should be a Buffer."
  };
  validateBuffer(expectedBuffer, mimeType2);
  let actual = mimeType2 === "image/png" ? _utilsBundle$8.PNG.sync.read(actualBuffer) : _utilsBundle$8.jpegjs.decode(actualBuffer, {
    maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
  });
  let expected = mimeType2 === "image/png" ? _utilsBundle$8.PNG.sync.read(expectedBuffer) : _utilsBundle$8.jpegjs.decode(expectedBuffer, {
    maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
  });
  const size = {
    width: Math.max(expected.width, actual.width),
    height: Math.max(expected.height, actual.height)
  };
  let sizesMismatchError = "";
  if (expected.width !== actual.width || expected.height !== actual.height) {
    sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;
    actual = resizeImage(actual, size);
    expected = resizeImage(expected, size);
  }
  const diff = new _utilsBundle$8.PNG({
    width: size.width,
    height: size.height
  });
  let count;
  if (options.comparator === "ssim-cie94") {
    count = (0, _compare.compare)(expected.data, actual.data, diff.data, size.width, size.height, {
      // All ΔE* formulae are originally designed to have the difference of 1.0 stand for a "just noticeable difference" (JND).
      // See https://en.wikipedia.org/wiki/Color_difference#CIELAB_%CE%94E*
      maxColorDeltaE94: 1
    });
  } else if (((_options$comparator = options.comparator) !== null && _options$comparator !== void 0 ? _options$comparator : "pixelmatch") === "pixelmatch") {
    var _options$threshold;
    count = pixelmatch(expected.data, actual.data, diff.data, size.width, size.height, {
      threshold: (_options$threshold = options.threshold) !== null && _options$threshold !== void 0 ? _options$threshold : 0.2
    });
  } else {
    throw new Error(`Configuration specifies unknown comparator "${options.comparator}"`);
  }
  const maxDiffPixels1 = options.maxDiffPixels;
  const maxDiffPixels2 = options.maxDiffPixelRatio !== void 0 ? expected.width * expected.height * options.maxDiffPixelRatio : void 0;
  let maxDiffPixels;
  if (maxDiffPixels1 !== void 0 && maxDiffPixels2 !== void 0) maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);
  else maxDiffPixels = (_ref = maxDiffPixels1 !== null && maxDiffPixels1 !== void 0 ? maxDiffPixels1 : maxDiffPixels2) !== null && _ref !== void 0 ? _ref : 0;
  const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;
  const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : "";
  if (pixelsMismatchError || sizesMismatchError) return {
    errorMessage: sizesMismatchError + pixelsMismatchError,
    diff: _utilsBundle$8.PNG.sync.write(diff)
  };
  return null;
}
function validateBuffer(buffer, mimeType2) {
  if (mimeType2 === "image/png") {
    const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];
    if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte)) throw new Error("could not decode image as PNG.");
  } else if (mimeType2 === "image/jpeg") {
    const jpegMagicNumber = [255, 216];
    if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte)) throw new Error("could not decode image as JPEG.");
  }
}
function compareText(actual, expectedBuffer) {
  if (typeof actual !== "string") return {
    errorMessage: "Actual result should be a string"
  };
  const expected = expectedBuffer.toString("utf-8");
  if (expected === actual) return null;
  const dmp = new diff_match_patch();
  const d = dmp.diff_main(expected, actual);
  dmp.diff_cleanupSemantic(d);
  return {
    errorMessage: diff_prettyTerminal(d)
  };
}
function diff_prettyTerminal(diffs) {
  const html = [];
  for (let x = 0; x < diffs.length; x++) {
    const op = diffs[x][0];
    const data = diffs[x][1];
    const text = data;
    switch (op) {
      case DIFF_INSERT:
        html[x] = _utilsBundle$8.colors.green(text);
        break;
      case DIFF_DELETE:
        html[x] = _utilsBundle$8.colors.reset(_utilsBundle$8.colors.strikethrough(_utilsBundle$8.colors.red(text)));
        break;
      case DIFF_EQUAL:
        html[x] = text;
        break;
    }
  }
  return html.join("");
}
function resizeImage(image, size) {
  if (image.width === size.width && image.height === size.height) return image;
  const buffer = new Uint8Array(size.width * size.height * 4);
  for (let y = 0; y < size.height; y++) {
    for (let x = 0; x < size.width; x++) {
      const to2 = (y * size.width + x) * 4;
      if (y < image.height && x < image.width) {
        const from = (y * image.width + x) * 4;
        buffer[to2] = image.data[from];
        buffer[to2 + 1] = image.data[from + 1];
        buffer[to2 + 2] = image.data[from + 2];
        buffer[to2 + 3] = image.data[from + 3];
      } else {
        buffer[to2] = 0;
        buffer[to2 + 1] = 0;
        buffer[to2 + 2] = 0;
        buffer[to2 + 3] = 0;
      }
    }
  }
  return {
    data: Buffer.from(buffer),
    width: size.width,
    height: size.height
  };
}
var crypto = {};
var debug$1 = {};
var env = {};
Object.defineProperty(env, "__esModule", {
  value: true
});
env.getAsBooleanFromENV = getAsBooleanFromENV;
env.getFromENV = getFromENV;
env.getPackageManager = getPackageManager;
env.getPackageManagerExecCommand = getPackageManagerExecCommand;
function getFromENV(name2) {
  let value = process.env[name2];
  value = value === void 0 ? process.env[`npm_config_${name2.toLowerCase()}`] : value;
  value = value === void 0 ? process.env[`npm_package_config_${name2.toLowerCase()}`] : value;
  return value;
}
function getAsBooleanFromENV(name2, defaultValue) {
  const value = getFromENV(name2);
  if (value === "false" || value === "0") return false;
  if (value) return true;
  return !!defaultValue;
}
function getPackageManager() {
  const env2 = process.env.npm_config_user_agent || "";
  if (env2.includes("yarn")) return "yarn";
  if (env2.includes("pnpm")) return "pnpm";
  return "npm";
}
function getPackageManagerExecCommand() {
  const packageManager = getPackageManager();
  if (packageManager === "yarn") return "yarn";
  if (packageManager === "pnpm") return "pnpm exec";
  return "npx";
}
Object.defineProperty(debug$1, "__esModule", {
  value: true
});
debug$1.assert = assert;
debug$1.debugAssert = debugAssert;
debug$1.debugMode = debugMode;
debug$1.isUnderTest = isUnderTest;
debug$1.setUnderTest = setUnderTest;
var _env = env;
function assert(value, message) {
  if (!value) throw new Error(message || "Assertion error");
}
function debugAssert(value, message) {
  if (isUnderTest() && !value) throw new Error(message);
}
const debugEnv = (0, _env.getFromENV)("PWDEBUG") || "";
function debugMode() {
  if (debugEnv === "console") return "console";
  if (debugEnv === "0" || debugEnv === "false") return "";
  return debugEnv ? "inspector" : "";
}
let _isUnderTest = !!process.env.PWTEST_UNDER_TEST;
function setUnderTest() {
  _isUnderTest = true;
}
function isUnderTest() {
  return _isUnderTest;
}
Object.defineProperty(crypto, "__esModule", {
  value: true
});
crypto.calculateSha1 = calculateSha1;
crypto.createGuid = createGuid;
crypto.generateSelfSignedCertificate = generateSelfSignedCertificate;
var _crypto = _interopRequireDefault$j(require$$5);
var _debug$1 = debug$1;
function _interopRequireDefault$j(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function createGuid() {
  return _crypto.default.randomBytes(16).toString("hex");
}
function calculateSha1(buffer) {
  const hash = _crypto.default.createHash("sha1");
  hash.update(buffer);
  return hash.digest("hex");
}
function encodeBase128(value) {
  const bytes = [];
  do {
    let byte = value & 127;
    value >>>= 7;
    if (bytes.length > 0) byte |= 128;
    bytes.push(byte);
  } while (value > 0);
  return Buffer.from(bytes.reverse());
}
class DER {
  static encodeSequence(data) {
    return this._encode(48, Buffer.concat(data));
  }
  static encodeInteger(data) {
    (0, _debug$1.assert)(data >= -128 && data <= 127);
    return this._encode(2, Buffer.from([data]));
  }
  static encodeObjectIdentifier(oid) {
    const parts = oid.split(".").map((v) => Number(v));
    const output = [encodeBase128(40 * parts[0] + parts[1])];
    for (let i = 2; i < parts.length; i++) {
      output.push(encodeBase128(parts[i]));
    }
    return this._encode(6, Buffer.concat(output));
  }
  static encodeNull() {
    return Buffer.from([5, 0]);
  }
  static encodeSet(data) {
    (0, _debug$1.assert)(data.length === 1, "Only one item in the set is supported. We'd need to sort the data to support more.");
    return this._encode(49, Buffer.concat(data));
  }
  static encodeExplicitContextDependent(tag, data) {
    return this._encode(160 + tag, data);
  }
  static encodePrintableString(data) {
    return this._encode(19, Buffer.from(data));
  }
  static encodeBitString(data) {
    const unusedBits = 0;
    const content = Buffer.concat([Buffer.from([unusedBits]), data]);
    return this._encode(3, content);
  }
  static encodeDate(date) {
    const year = date.getUTCFullYear();
    const isGeneralizedTime = year >= 2050;
    const parts = [isGeneralizedTime ? year.toString() : year.toString().slice(-2), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
    const encodedDate = parts.join("") + "Z";
    const tag = isGeneralizedTime ? 24 : 23;
    return this._encode(tag, Buffer.from(encodedDate));
  }
  static _encode(tag, data) {
    const lengthBytes = this._encodeLength(data.length);
    return Buffer.concat([Buffer.from([tag]), lengthBytes, data]);
  }
  static _encodeLength(length) {
    if (length < 128) {
      return Buffer.from([length]);
    } else {
      const lengthBytes = [];
      while (length > 0) {
        lengthBytes.unshift(length & 255);
        length >>= 8;
      }
      return Buffer.from([128 | lengthBytes.length, ...lengthBytes]);
    }
  }
}
function generateSelfSignedCertificate() {
  const {
    privateKey,
    publicKey
  } = _crypto.default.generateKeyPairSync("rsa", {
    modulusLength: 2048
  });
  const publicKeyDer = publicKey.export({
    type: "pkcs1",
    format: "der"
  });
  const oneYearInMilliseconds = 365 * 24 * 60 * 60 * 1e3;
  const notBefore = new Date((/* @__PURE__ */ new Date()).getTime() - oneYearInMilliseconds);
  const notAfter = new Date((/* @__PURE__ */ new Date()).getTime() + oneYearInMilliseconds);
  const tbsCertificate = DER.encodeSequence([
    DER.encodeExplicitContextDependent(0, DER.encodeInteger(1)),
    // version
    DER.encodeInteger(1),
    // serialNumber
    DER.encodeSequence([
      DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
      // sha256WithRSAEncryption PKCS #1
      DER.encodeNull()
    ]),
    // signature
    DER.encodeSequence([DER.encodeSet([DER.encodeSequence([
      DER.encodeObjectIdentifier("2.5.4.3"),
      // commonName X.520 DN component
      DER.encodePrintableString("localhost")
    ])]), DER.encodeSet([DER.encodeSequence([
      DER.encodeObjectIdentifier("2.5.4.10"),
      // organizationName X.520 DN component
      DER.encodePrintableString("Playwright Client Certificate Support")
    ])])]),
    // issuer
    DER.encodeSequence([
      DER.encodeDate(notBefore),
      // notBefore
      DER.encodeDate(notAfter)
      // notAfter
    ]),
    // validity
    DER.encodeSequence([DER.encodeSet([DER.encodeSequence([
      DER.encodeObjectIdentifier("2.5.4.3"),
      // commonName X.520 DN component
      DER.encodePrintableString("localhost")
    ])]), DER.encodeSet([DER.encodeSequence([
      DER.encodeObjectIdentifier("2.5.4.10"),
      // organizationName X.520 DN component
      DER.encodePrintableString("Playwright Client Certificate Support")
    ])])]),
    // subject
    DER.encodeSequence([DER.encodeSequence([
      DER.encodeObjectIdentifier("1.2.840.113549.1.1.1"),
      // rsaEncryption PKCS #1
      DER.encodeNull()
    ]), DER.encodeBitString(publicKeyDer)])
    // SubjectPublicKeyInfo
  ]);
  const signature = _crypto.default.sign("sha256", tbsCertificate, privateKey);
  const certificate = DER.encodeSequence([tbsCertificate, DER.encodeSequence([
    DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
    // sha256WithRSAEncryption PKCS #1
    DER.encodeNull()
  ]), DER.encodeBitString(signature)]);
  const certPem = [
    "-----BEGIN CERTIFICATE-----",
    // Split the base64 string into lines of 64 characters
    certificate.toString("base64").match(/.{1,64}/g).join("\n"),
    "-----END CERTIFICATE-----"
  ].join("\n");
  return {
    cert: certPem,
    key: privateKey.export({
      type: "pkcs1",
      format: "pem"
    })
  };
}
var debugLogger = {};
Object.defineProperty(debugLogger, "__esModule", {
  value: true
});
debugLogger.debugLogger = debugLogger.RecentLogsCollector = void 0;
var _utilsBundle$7 = utilsBundle;
var _fs$c = _interopRequireDefault$i(require$$0$2);
function _interopRequireDefault$i(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const debugLoggerColorMap = {
  "api": 45,
  // cyan
  "protocol": 34,
  // green
  "install": 34,
  // green
  "download": 34,
  // green
  "browser": 0,
  // reset
  "socks": 92,
  // purple
  "client-certificates": 92,
  // purple
  "error": 160,
  // red,
  "channel": 33,
  // blue
  "server": 45,
  // cyan
  "server:channel": 34,
  // green
  "server:metadata": 33
  // blue
};
class DebugLogger {
  constructor() {
    this._debuggers = /* @__PURE__ */ new Map();
    if (process.env.DEBUG_FILE) {
      const ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|"), "g");
      const stream2 = _fs$c.default.createWriteStream(process.env.DEBUG_FILE);
      _utilsBundle$7.debug.log = (data) => {
        stream2.write(data.replace(ansiRegex, ""));
        stream2.write("\n");
      };
    }
  }
  log(name2, message) {
    let cachedDebugger = this._debuggers.get(name2);
    if (!cachedDebugger) {
      cachedDebugger = (0, _utilsBundle$7.debug)(`pw:${name2}`);
      this._debuggers.set(name2, cachedDebugger);
      cachedDebugger.color = debugLoggerColorMap[name2] || 0;
    }
    cachedDebugger(message);
  }
  isEnabled(name2) {
    return _utilsBundle$7.debug.enabled(`pw:${name2}`);
  }
}
debugLogger.debugLogger = new DebugLogger();
const kLogCount = 150;
class RecentLogsCollector {
  constructor() {
    this._logs = [];
  }
  log(message) {
    this._logs.push(message);
    if (this._logs.length === kLogCount * 2) this._logs.splice(0, kLogCount);
  }
  recentLogs() {
    if (this._logs.length > kLogCount) return this._logs.slice(-kLogCount);
    return this._logs;
  }
}
debugLogger.RecentLogsCollector = RecentLogsCollector;
var eventsHelper = {};
Object.defineProperty(eventsHelper, "__esModule", {
  value: true
});
eventsHelper.eventsHelper = void 0;
class EventsHelper {
  static addEventListener(emitter, eventName, handler) {
    emitter.on(eventName, handler);
    return {
      emitter,
      eventName,
      handler
    };
  }
  static removeEventListeners(listeners) {
    for (const listener of listeners) listener.emitter.removeListener(listener.eventName, listener.handler);
    listeners.splice(0, listeners.length);
  }
}
eventsHelper.eventsHelper = EventsHelper;
var expectUtils = {};
var rtti = {};
var stringUtils = {};
Object.defineProperty(stringUtils, "__esModule", {
  value: true
});
stringUtils.cacheNormalizedWhitespaces = cacheNormalizedWhitespaces;
stringUtils.cssEscape = cssEscape;
stringUtils.escapeForAttributeSelector = escapeForAttributeSelector;
stringUtils.escapeForTextSelector = escapeForTextSelector;
stringUtils.escapeHTML = escapeHTML;
stringUtils.escapeHTMLAttribute = escapeHTMLAttribute;
stringUtils.escapeRegExp = escapeRegExp;
stringUtils.escapeWithQuotes = escapeWithQuotes;
stringUtils.isString = isString;
stringUtils.normalizeEscapedRegexQuotes = normalizeEscapedRegexQuotes;
stringUtils.normalizeWhiteSpace = normalizeWhiteSpace;
stringUtils.quoteCSSAttributeValue = quoteCSSAttributeValue;
stringUtils.toSnakeCase = toSnakeCase;
stringUtils.toTitleCase = toTitleCase;
stringUtils.trimString = trimString;
stringUtils.trimStringWithEllipsis = trimStringWithEllipsis;
function escapeWithQuotes(text, char = "'") {
  const stringified = JSON.stringify(text);
  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
  if (char === "'") return char + escapedText.replace(/[']/g, "\\'") + char;
  if (char === '"') return char + escapedText.replace(/["]/g, '\\"') + char;
  if (char === "`") return char + escapedText.replace(/[`]/g, "`") + char;
  throw new Error("Invalid escape char");
}
function isString(obj) {
  return typeof obj === "string" || obj instanceof String;
}
function toTitleCase(name2) {
  return name2.charAt(0).toUpperCase() + name2.substring(1);
}
function toSnakeCase(name2) {
  return name2.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
}
function cssEscape(s) {
  let result2 = "";
  for (let i = 0; i < s.length; i++) result2 += cssEscapeOne(s, i);
  return result2;
}
function quoteCSSAttributeValue(text) {
  return `"${cssEscape(text).replace(/\\ /g, " ")}"`;
}
function cssEscapeOne(s, i) {
  const c = s.charCodeAt(i);
  if (c === 0) return "�";
  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45)) return "\\" + c.toString(16) + " ";
  if (i === 0 && c === 45 && s.length === 1) return "\\" + s.charAt(i);
  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122) return s.charAt(i);
  return "\\" + s.charAt(i);
}
let normalizedWhitespaceCache;
function cacheNormalizedWhitespaces() {
  normalizedWhitespaceCache = /* @__PURE__ */ new Map();
}
function normalizeWhiteSpace(text) {
  var _normalizedWhitespace;
  let result2 = (_normalizedWhitespace = normalizedWhitespaceCache) === null || _normalizedWhitespace === void 0 ? void 0 : _normalizedWhitespace.get(text);
  if (result2 === void 0) {
    var _normalizedWhitespace2;
    result2 = text.replace(/\u200b/g, "").trim().replace(/\s+/g, " ");
    (_normalizedWhitespace2 = normalizedWhitespaceCache) === null || _normalizedWhitespace2 === void 0 || _normalizedWhitespace2.set(text, result2);
  }
  return result2;
}
function normalizeEscapedRegexQuotes(source2) {
  return source2.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
}
function escapeRegexForSelector(re) {
  if (re.unicode || re.unicodeSets) return String(re);
  return String(re).replace(/(^|[^\\])(\\\\)*(["'`])/g, "$1$2\\$3").replace(/>>/g, "\\>\\>");
}
function escapeForTextSelector(text, exact) {
  if (typeof text !== "string") return escapeRegexForSelector(text);
  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;
}
function escapeForAttributeSelector(value, exact) {
  if (typeof value !== "string") return escapeRegexForSelector(value);
  return `"${value.replace(/\\/g, "\\\\").replace(/["]/g, '\\"')}"${exact ? "s" : "i"}`;
}
function trimString(input2, cap, suffix = "") {
  if (input2.length <= cap) return input2;
  const chars = [...input2];
  if (chars.length > cap) return chars.slice(0, cap - suffix.length).join("") + suffix;
  return chars.join("");
}
function trimStringWithEllipsis(input2, cap) {
  return trimString(input2, cap, "…");
}
function escapeRegExp(s) {
  return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
const escaped = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function escapeHTMLAttribute(s) {
  return s.replace(/[&<>"']/ug, (char) => escaped[char]);
}
function escapeHTML(s) {
  return s.replace(/[&<]/ug, (char) => escaped[char]);
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.isError = isError2;
  exports2.isLikelyNpxGlobal = void 0;
  exports2.isObject = isObject;
  exports2.isRegExp = isRegExp2;
  Object.defineProperty(exports2, "isString", {
    enumerable: true,
    get: function() {
      return _stringUtils2.isString;
    }
  });
  var _stringUtils2 = stringUtils;
  function isRegExp2(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function isObject(obj) {
    return typeof obj === "object" && obj !== null;
  }
  function isError2(obj) {
    var _Object$getPrototypeO;
    return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.name) === "Error";
  }
  const isLikelyNpxGlobal = () => process.argv.length >= 2 && process.argv[1].includes("_npx");
  exports2.isLikelyNpxGlobal = isLikelyNpxGlobal;
})(rtti);
Object.defineProperty(expectUtils, "__esModule", {
  value: true
});
expectUtils.serializeExpectedTextValues = serializeExpectedTextValues;
var _rtti = rtti;
function serializeExpectedTextValues(items, options = {}) {
  return items.map((i) => ({
    string: (0, _rtti.isString)(i) ? i : void 0,
    regexSource: (0, _rtti.isRegExp)(i) ? i.source : void 0,
    regexFlags: (0, _rtti.isRegExp)(i) ? i.flags : void 0,
    matchSubstring: options.matchSubstring,
    ignoreCase: options.ignoreCase,
    normalizeWhiteSpace: options.normalizeWhiteSpace
  }));
}
var fileUtils = {};
var zipBundle = {};
var ht = Object.create;
var ae = Object.defineProperty;
var pt = Object.getOwnPropertyDescriptor;
var mt = Object.getOwnPropertyNames;
var xt = Object.getPrototypeOf, vt = Object.prototype.hasOwnProperty;
var E = (e, r) => () => (r || e((r = { exports: {} }).exports, r), r.exports), Et = (e, r) => {
  for (var t in r) ae(e, t, { get: r[t], enumerable: true });
}, or = (e, r, t, n) => {
  if (r && typeof r == "object" || typeof r == "function") for (let i of mt(r)) !vt.call(e, i) && i !== t && ae(e, i, { get: () => r[i], enumerable: !(n = pt(r, i)) || n.enumerable });
  return e;
};
var Ue = (e, r, t) => (t = e != null ? ht(xt(e)) : {}, or(!e || !e.__esModule ? ae(t, "default", { value: e, enumerable: true }) : t, e)), wt = (e) => or(ae({}, "__esModule", { value: true }), e);
var Be = E((An, fr) => {
  var T = require$$14$1.Buffer, Te = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
  typeof Int32Array != "undefined" && (Te = new Int32Array(Te));
  function sr(e) {
    if (T.isBuffer(e)) return e;
    var r = typeof T.alloc == "function" && typeof T.from == "function";
    if (typeof e == "number") return r ? T.alloc(e) : new T(e);
    if (typeof e == "string") return r ? T.from(e) : new T(e);
    throw new Error("input must be buffer, number, or string, received " + typeof e);
  }
  function gt(e) {
    var r = sr(4);
    return r.writeInt32BE(e, 0), r;
  }
  function Ne(e, r) {
    e = sr(e), T.isBuffer(r) && (r = r.readUInt32BE(0));
    for (var t = ~~r ^ -1, n = 0; n < e.length; n++) t = Te[(t ^ e[n]) & 255] ^ t >>> 8;
    return t ^ -1;
  }
  function Me() {
    return gt(Ne.apply(null, arguments));
  }
  Me.signed = function() {
    return Ne.apply(null, arguments);
  };
  Me.unsigned = function() {
    return Ne.apply(null, arguments) >>> 0;
  };
  fr.exports = Me;
});
var br = E((Ge) => {
  var ar = require$$0$2, he = require$$12.Transform, ur = require$$12.PassThrough, cr = require$$13, We = require$$1$1, yt = require$$0$1.EventEmitter, dr = Be();
  Ge.ZipFile = W;
  Ge.dateToDosDateTime = Cr;
  We.inherits(W, yt);
  function W() {
    this.outputStream = new ur(), this.entries = [], this.outputStreamCursor = 0, this.ended = false, this.allDone = false, this.forceZip64Eocd = false;
  }
  W.prototype.addFile = function(e, r, t) {
    var n = this;
    r = pe(r, false), t == null && (t = {});
    var i = new m(r, false, t);
    n.entries.push(i), ar.stat(e, function(o, s) {
      if (o) return n.emit("error", o);
      if (!s.isFile()) return n.emit("error", new Error("not a file: " + e));
      i.uncompressedSize = s.size, t.mtime == null && i.setLastModDate(s.mtime), t.mode == null && i.setFileAttributesMode(s.mode), i.setFileDataPumpFunction(function() {
        var f = ar.createReadStream(e);
        i.state = m.FILE_DATA_IN_PROGRESS, f.on("error", function(u) {
          n.emit("error", u);
        }), lr(n, i, f);
      }), M(n);
    });
  };
  W.prototype.addReadStream = function(e, r, t) {
    var n = this;
    r = pe(r, false), t == null && (t = {});
    var i = new m(r, false, t);
    n.entries.push(i), i.setFileDataPumpFunction(function() {
      i.state = m.FILE_DATA_IN_PROGRESS, lr(n, i, e);
    }), M(n);
  };
  W.prototype.addBuffer = function(e, r, t) {
    var n = this;
    if (r = pe(r, false), e.length > 1073741823) throw new Error("buffer too large: " + e.length + " > 1073741823");
    if (t == null && (t = {}), t.size != null) throw new Error("options.size not allowed");
    var i = new m(r, false, t);
    i.uncompressedSize = e.length, i.crc32 = dr.unsigned(e), i.crcAndFileSizeKnown = true, n.entries.push(i), i.compress ? cr.deflateRaw(e, function(s, f) {
      o(f);
    }) : o(e);
    function o(s) {
      i.compressedSize = s.length, i.setFileDataPumpFunction(function() {
        Z(n, s), Z(n, i.getDataDescriptor()), i.state = m.FILE_DATA_DONE, setImmediate(function() {
          M(n);
        });
      }), M(n);
    }
  };
  W.prototype.addEmptyDirectory = function(e, r) {
    var t = this;
    if (e = pe(e, true), r == null && (r = {}), r.size != null) throw new Error("options.size not allowed");
    if (r.compress != null) throw new Error("options.compress not allowed");
    var n = new m(e, true, r);
    t.entries.push(n), n.setFileDataPumpFunction(function() {
      Z(t, n.getDataDescriptor()), n.state = m.FILE_DATA_DONE, M(t);
    }), M(t);
  };
  var Ct = N([80, 75, 5, 6]);
  W.prototype.end = function(e, r) {
    if (typeof e == "function" && (r = e, e = null), e == null && (e = {}), !this.ended) {
      if (this.ended = true, this.finalSizeCallback = r, this.forceZip64Eocd = !!e.forceZip64Format, e.comment) {
        if (typeof e.comment == "string" ? this.comment = St(e.comment) : this.comment = e.comment, this.comment.length > 65535) throw new Error("comment is too large");
        if (te(this.comment, Ct)) throw new Error("comment contains end of central directory record signature");
      } else this.comment = me;
      M(this);
    }
  };
  function Z(e, r) {
    e.outputStream.write(r), e.outputStreamCursor += r.length;
  }
  function lr(e, r, t) {
    var n = new He(), i = new le(), o = r.compress ? new cr.DeflateRaw() : new ur(), s = new le();
    t.pipe(n).pipe(i).pipe(o).pipe(s).pipe(e.outputStream, { end: false }), s.on("end", function() {
      if (r.crc32 = n.crc32, r.uncompressedSize == null) r.uncompressedSize = i.byteCount;
      else if (r.uncompressedSize !== i.byteCount) return e.emit("error", new Error("file data stream has unexpected number of bytes"));
      r.compressedSize = s.byteCount, e.outputStreamCursor += r.compressedSize, Z(e, r.getDataDescriptor()), r.state = m.FILE_DATA_DONE, M(e);
    });
  }
  function M(e) {
    if (e.allDone) return;
    if (e.ended && e.finalSizeCallback != null) {
      var r = bt(e);
      r != null && (e.finalSizeCallback(r), e.finalSizeCallback = null);
    }
    var t = n();
    function n() {
      for (var o = 0; o < e.entries.length; o++) {
        var s = e.entries[o];
        if (s.state < m.FILE_DATA_DONE) return s;
      }
      return null;
    }
    if (t != null) {
      if (t.state < m.READY_TO_PUMP_FILE_DATA || t.state === m.FILE_DATA_IN_PROGRESS) return;
      t.relativeOffsetOfLocalHeader = e.outputStreamCursor;
      var i = t.getLocalFileHeader();
      Z(e, i), t.doFileDataPump();
    } else e.ended && (e.offsetOfStartOfCentralDirectory = e.outputStreamCursor, e.entries.forEach(function(o) {
      var s = o.getCentralDirectoryRecord();
      Z(e, s);
    }), Z(e, Ft(e)), e.outputStream.end(), e.allDone = true);
  }
  function bt(e) {
    for (var r = 0, t = 0, n = 0; n < e.entries.length; n++) {
      var i = e.entries[n];
      if (i.compress) return -1;
      if (i.state >= m.READY_TO_PUMP_FILE_DATA) {
        if (i.uncompressedSize == null) return -1;
      } else if (i.uncompressedSize == null) return null;
      i.relativeOffsetOfLocalHeader = r;
      var o = i.useZip64Format();
      r += hr + i.utf8FileName.length, r += i.uncompressedSize, i.crcAndFileSizeKnown || (o ? r += gr2 : r += wr2), t += yr + i.utf8FileName.length + i.fileComment.length, o && (t += Pe);
    }
    var s = 0;
    return (e.forceZip64Eocd || e.entries.length >= 65535 || t >= 65535 || r >= 4294967295) && (s += ce + qe), s += de + e.comment.length, r + t + s;
  }
  var ce = 56, qe = 20, de = 22;
  function Ft(e, r) {
    var t = false, n = e.entries.length;
    (e.forceZip64Eocd || e.entries.length >= 65535) && (n = 65535, t = true);
    var i = e.outputStreamCursor - e.offsetOfStartOfCentralDirectory, o = i;
    (e.forceZip64Eocd || i >= 4294967295) && (o = 4294967295, t = true);
    var s = e.offsetOfStartOfCentralDirectory;
    if ((e.forceZip64Eocd || e.offsetOfStartOfCentralDirectory >= 4294967295) && (s = 4294967295, t = true), r) ;
    var f = F(de + e.comment.length);
    if (f.writeUInt32LE(101010256, 0), f.writeUInt16LE(0, 4), f.writeUInt16LE(0, 6), f.writeUInt16LE(n, 8), f.writeUInt16LE(n, 10), f.writeUInt32LE(o, 12), f.writeUInt32LE(s, 16), f.writeUInt16LE(e.comment.length, 20), e.comment.copy(f, 22), !t) return f;
    var u = F(ce);
    u.writeUInt32LE(101075792, 0), I(u, ce - 12, 4), u.writeUInt16LE(xr, 12), u.writeUInt16LE(mr2, 14), u.writeUInt32LE(0, 16), u.writeUInt32LE(0, 20), I(u, e.entries.length, 24), I(u, e.entries.length, 32), I(u, i, 40), I(u, e.offsetOfStartOfCentralDirectory, 48);
    var d = F(qe);
    return d.writeUInt32LE(117853008, 0), d.writeUInt32LE(0, 4), I(d, e.outputStreamCursor, 8), d.writeUInt32LE(1, 16), Buffer.concat([u, d, f]);
  }
  function pe(e, r) {
    if (e === "") throw new Error("empty metadataPath");
    if (e = e.replace(/\\/g, "/"), /^[a-zA-Z]:/.test(e) || /^\//.test(e)) throw new Error("absolute path: " + e);
    if (e.split("/").indexOf("..") !== -1) throw new Error("invalid relative path: " + e);
    var t = /\/$/.test(e);
    if (r) t || (e += "/");
    else if (t) throw new Error("file path cannot end with '/': " + e);
    return e;
  }
  var me = F(0);
  function m(e, r, t) {
    if (this.utf8FileName = N(e), this.utf8FileName.length > 65535) throw new Error("utf8 file name too long. " + utf8FileName.length + " > 65535");
    if (this.isDirectory = r, this.state = m.WAITING_FOR_METADATA, this.setLastModDate(t.mtime != null ? t.mtime : /* @__PURE__ */ new Date()), t.mode != null ? this.setFileAttributesMode(t.mode) : this.setFileAttributesMode(r ? 16893 : 33204), r ? (this.crcAndFileSizeKnown = true, this.crc32 = 0, this.uncompressedSize = 0, this.compressedSize = 0) : (this.crcAndFileSizeKnown = false, this.crc32 = null, this.uncompressedSize = null, this.compressedSize = null, t.size != null && (this.uncompressedSize = t.size)), r ? this.compress = false : (this.compress = true, t.compress != null && (this.compress = !!t.compress)), this.forceZip64Format = !!t.forceZip64Format, t.fileComment) {
      if (typeof t.fileComment == "string" ? this.fileComment = N(t.fileComment, "utf-8") : this.fileComment = t.fileComment, this.fileComment.length > 65535) throw new Error("fileComment is too large");
    } else this.fileComment = me;
  }
  m.WAITING_FOR_METADATA = 0;
  m.READY_TO_PUMP_FILE_DATA = 1;
  m.FILE_DATA_IN_PROGRESS = 2;
  m.FILE_DATA_DONE = 3;
  m.prototype.setLastModDate = function(e) {
    var r = Cr(e);
    this.lastModFileTime = r.time, this.lastModFileDate = r.date;
  };
  m.prototype.setFileAttributesMode = function(e) {
    if ((e & 65535) !== e) throw new Error("invalid mode. expected: 0 <= " + e + " <= 65535");
    this.externalFileAttributes = e << 16 >>> 0;
  };
  m.prototype.setFileDataPumpFunction = function(e) {
    this.doFileDataPump = e, this.state = m.READY_TO_PUMP_FILE_DATA;
  };
  m.prototype.useZip64Format = function() {
    return this.forceZip64Format || this.uncompressedSize != null && this.uncompressedSize > 4294967294 || this.compressedSize != null && this.compressedSize > 4294967294 || this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 4294967294;
  };
  var hr = 30, pr = 20, mr2 = 45, xr = 831, vr = 2048, Er = 8;
  m.prototype.getLocalFileHeader = function() {
    var e = 0, r = 0, t = 0;
    this.crcAndFileSizeKnown && (e = this.crc32, r = this.compressedSize, t = this.uncompressedSize);
    var n = F(hr), i = vr;
    return this.crcAndFileSizeKnown || (i |= Er), n.writeUInt32LE(67324752, 0), n.writeUInt16LE(pr, 4), n.writeUInt16LE(i, 6), n.writeUInt16LE(this.getCompressionMethod(), 8), n.writeUInt16LE(this.lastModFileTime, 10), n.writeUInt16LE(this.lastModFileDate, 12), n.writeUInt32LE(e, 14), n.writeUInt32LE(r, 18), n.writeUInt32LE(t, 22), n.writeUInt16LE(this.utf8FileName.length, 26), n.writeUInt16LE(0, 28), Buffer.concat([n, this.utf8FileName]);
  };
  var wr2 = 16, gr2 = 24;
  m.prototype.getDataDescriptor = function() {
    if (this.crcAndFileSizeKnown) return me;
    if (this.useZip64Format()) {
      var e = F(gr2);
      return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), I(e, this.compressedSize, 8), I(e, this.uncompressedSize, 16), e;
    } else {
      var e = F(wr2);
      return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), e.writeUInt32LE(this.compressedSize, 8), e.writeUInt32LE(this.uncompressedSize, 12), e;
    }
  };
  var yr = 46, Pe = 28;
  m.prototype.getCentralDirectoryRecord = function() {
    var e = F(yr), r = vr;
    this.crcAndFileSizeKnown || (r |= Er);
    var t = this.compressedSize, n = this.uncompressedSize, i = this.relativeOffsetOfLocalHeader, o, s;
    return this.useZip64Format() ? (t = 4294967295, n = 4294967295, i = 4294967295, o = mr2, s = F(Pe), s.writeUInt16LE(1, 0), s.writeUInt16LE(Pe - 4, 2), I(s, this.uncompressedSize, 4), I(s, this.compressedSize, 12), I(s, this.relativeOffsetOfLocalHeader, 20)) : (o = pr, s = me), e.writeUInt32LE(33639248, 0), e.writeUInt16LE(xr, 4), e.writeUInt16LE(o, 6), e.writeUInt16LE(r, 8), e.writeUInt16LE(this.getCompressionMethod(), 10), e.writeUInt16LE(this.lastModFileTime, 12), e.writeUInt16LE(this.lastModFileDate, 14), e.writeUInt32LE(this.crc32, 16), e.writeUInt32LE(t, 20), e.writeUInt32LE(n, 24), e.writeUInt16LE(this.utf8FileName.length, 28), e.writeUInt16LE(s.length, 30), e.writeUInt16LE(this.fileComment.length, 32), e.writeUInt16LE(0, 34), e.writeUInt16LE(0, 36), e.writeUInt32LE(this.externalFileAttributes, 38), e.writeUInt32LE(i, 42), Buffer.concat([e, this.utf8FileName, s, this.fileComment]);
  };
  m.prototype.getCompressionMethod = function() {
    var e = 0, r = 8;
    return this.compress ? r : e;
  };
  function Cr(e) {
    var r = 0;
    r |= e.getDate() & 31, r |= (e.getMonth() + 1 & 15) << 5, r |= (e.getFullYear() - 1980 & 127) << 9;
    var t = 0;
    return t |= Math.floor(e.getSeconds() / 2), t |= (e.getMinutes() & 63) << 5, t |= (e.getHours() & 31) << 11, { date: r, time: t };
  }
  function I(e, r, t) {
    var n = Math.floor(r / 4294967296), i = r % 4294967296;
    e.writeUInt32LE(i, t), e.writeUInt32LE(n, t + 4);
  }
  We.inherits(le, he);
  function le(e) {
    he.call(this, e), this.byteCount = 0;
  }
  le.prototype._transform = function(e, r, t) {
    this.byteCount += e.length, t(null, e);
  };
  We.inherits(He, he);
  function He(e) {
    he.call(this, e), this.crc32 = 0;
  }
  He.prototype._transform = function(e, r, t) {
    this.crc32 = dr.unsigned(e, this.crc32), t(null, e);
  };
  var Ze = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
  if (Ze.length !== 256) throw new Error("assertion failure");
  var ue = null;
  function St(e) {
    if (/^[\x20-\x7e]*$/.test(e)) return N(e, "utf-8");
    if (ue == null) {
      ue = {};
      for (var r = 0; r < Ze.length; r++) ue[Ze[r]] = r;
    }
    for (var t = F(e.length), r = 0; r < e.length; r++) {
      var n = ue[e[r]];
      if (n == null) throw new Error("character not encodable in CP437: " + JSON.stringify(e[r]));
      t[r] = n;
    }
    return t;
  }
  function F(e) {
    F = r;
    try {
      return F(e);
    } catch {
      return F = t, F(e);
    }
    function r(n) {
      return Buffer.allocUnsafe(n);
    }
    function t(n) {
      return new Buffer(n);
    }
  }
  function N(e, r) {
    N = t;
    try {
      return N(e, r);
    } catch {
      return N = n, N(e, r);
    }
    function t(i, o) {
      return Buffer.from(i, o);
    }
    function n(i, o) {
      return new Buffer(i, o);
    }
  }
  function te(e, r) {
    te = t;
    try {
      return te(e, r);
    } catch {
      return te = n, te(e, r);
    }
    function t(i, o) {
      return i.includes(o);
    }
    function n(i, o) {
      for (var s = 0; s <= i.length - o.length; s++) for (var f = 0; ; f++) {
        if (f === o.length) return true;
        if (i[s + f] !== o[f]) break;
      }
      return false;
    }
  }
});
var Lr = E((Dn, Ir) => {
  Ir.exports = xe;
  function xe() {
    this.pending = 0, this.max = 1 / 0, this.listeners = [], this.waiting = [], this.error = null;
  }
  xe.prototype.go = function(e) {
    this.pending < this.max ? Sr(this, e) : this.waiting.push(e);
  };
  xe.prototype.wait = function(e) {
    this.pending === 0 ? e(this.error) : this.listeners.push(e);
  };
  xe.prototype.hold = function() {
    return Fr(this);
  };
  function Fr(e) {
    e.pending += 1;
    var r = false;
    return t;
    function t(i) {
      if (r) throw new Error("callback called twice");
      if (r = true, e.error = e.error || i, e.pending -= 1, e.waiting.length > 0 && e.pending < e.max) Sr(e, e.waiting.shift());
      else if (e.pending === 0) {
        var o = e.listeners;
        e.listeners = [], o.forEach(n);
      }
    }
    function n(i) {
      i(e.error);
    }
  }
  function Sr(e, r) {
    r(Fr(e));
  }
});
var zr = E((ie) => {
  var ne = require$$0$2, ve = require$$1$1, Ye = require$$12, Or = Ye.Readable, $e = Ye.Writable, It = Ye.PassThrough, Lt = Lr(), Ee = require$$0$1.EventEmitter;
  ie.createFromBuffer = Ot;
  ie.createFromFd = zt;
  ie.BufferSlicer = D;
  ie.FdSlicer = R;
  ve.inherits(R, Ee);
  function R(e, r) {
    r = r || {}, Ee.call(this), this.fd = e, this.pend = new Lt(), this.pend.max = 1, this.refCount = 0, this.autoClose = !!r.autoClose;
  }
  R.prototype.read = function(e, r, t, n, i) {
    var o = this;
    o.pend.go(function(s) {
      ne.read(o.fd, e, r, t, n, function(f, u, d) {
        s(), i(f, u, d);
      });
    });
  };
  R.prototype.write = function(e, r, t, n, i) {
    var o = this;
    o.pend.go(function(s) {
      ne.write(o.fd, e, r, t, n, function(f, u, d) {
        s(), i(f, u, d);
      });
    });
  };
  R.prototype.createReadStream = function(e) {
    return new we(this, e);
  };
  R.prototype.createWriteStream = function(e) {
    return new ge(this, e);
  };
  R.prototype.ref = function() {
    this.refCount += 1;
  };
  R.prototype.unref = function() {
    var e = this;
    if (e.refCount -= 1, e.refCount > 0) return;
    if (e.refCount < 0) throw new Error("invalid unref");
    e.autoClose && ne.close(e.fd, r);
    function r(t) {
      t ? e.emit("error", t) : e.emit("close");
    }
  };
  ve.inherits(we, Or);
  function we(e, r) {
    r = r || {}, Or.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end, this.pos = this.start, this.destroyed = false;
  }
  we.prototype._read = function(e) {
    var r = this;
    if (!r.destroyed) {
      var t = Math.min(r._readableState.highWaterMark, e);
      if (r.endOffset != null && (t = Math.min(t, r.endOffset - r.pos)), t <= 0) {
        r.destroyed = true, r.push(null), r.context.unref();
        return;
      }
      r.context.pend.go(function(n) {
        if (r.destroyed) return n();
        var i = Buffer.alloc(t);
        ne.read(r.context.fd, i, 0, t, r.pos, function(o, s) {
          o ? r.destroy(o) : s === 0 ? (r.destroyed = true, r.push(null), r.context.unref()) : (r.pos += s, r.push(i.slice(0, s))), n();
        });
      });
    }
  };
  we.prototype.destroy = function(e) {
    this.destroyed || (e = e || new Error("stream destroyed"), this.destroyed = true, this.emit("error", e), this.context.unref());
  };
  ve.inherits(ge, $e);
  function ge(e, r) {
    r = r || {}, $e.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end == null ? 1 / 0 : +r.end, this.bytesWritten = 0, this.pos = this.start, this.destroyed = false, this.on("finish", this.destroy.bind(this));
  }
  ge.prototype._write = function(e, r, t) {
    var n = this;
    if (!n.destroyed) {
      if (n.pos + e.length > n.endOffset) {
        var i = new Error("maximum file length exceeded");
        i.code = "ETOOBIG", n.destroy(), t(i);
        return;
      }
      n.context.pend.go(function(o) {
        if (n.destroyed) return o();
        ne.write(n.context.fd, e, 0, e.length, n.pos, function(s, f) {
          s ? (n.destroy(), o(), t(s)) : (n.bytesWritten += f, n.pos += f, n.emit("progress"), o(), t());
        });
      });
    }
  };
  ge.prototype.destroy = function() {
    this.destroyed || (this.destroyed = true, this.context.unref());
  };
  ve.inherits(D, Ee);
  function D(e, r) {
    Ee.call(this), r = r || {}, this.refCount = 0, this.buffer = e, this.maxChunkSize = r.maxChunkSize || Number.MAX_SAFE_INTEGER;
  }
  D.prototype.read = function(e, r, t, n, i) {
    var o = n + t, s = o - this.buffer.length, f = s > 0 ? s : t;
    this.buffer.copy(e, r, n, o), setImmediate(function() {
      i(null, f);
    });
  };
  D.prototype.write = function(e, r, t, n, i) {
    e.copy(this.buffer, n, r, r + t), setImmediate(function() {
      i(null, t, e);
    });
  };
  D.prototype.createReadStream = function(e) {
    e = e || {};
    var r = new It(e);
    r.destroyed = false, r.start = e.start || 0, r.endOffset = e.end, r.pos = r.endOffset || this.buffer.length;
    for (var t = this.buffer.slice(r.start, r.pos), n = 0; ; ) {
      var i = n + this.maxChunkSize;
      if (i >= t.length) {
        n < t.length && r.write(t.slice(n, t.length));
        break;
      }
      r.write(t.slice(n, i)), n = i;
    }
    return r.end(), r.destroy = function() {
      r.destroyed = true;
    }, r;
  };
  D.prototype.createWriteStream = function(e) {
    var r = this;
    e = e || {};
    var t = new $e(e);
    return t.start = e.start || 0, t.endOffset = e.end == null ? this.buffer.length : +e.end, t.bytesWritten = 0, t.pos = t.start, t.destroyed = false, t._write = function(n, i, o) {
      if (!t.destroyed) {
        var s = t.pos + n.length;
        if (s > t.endOffset) {
          var f = new Error("maximum file length exceeded");
          f.code = "ETOOBIG", t.destroyed = true, o(f);
          return;
        }
        n.copy(r.buffer, t.pos, 0, n.length), t.bytesWritten += n.length, t.pos = s, t.emit("progress"), o();
      }
    }, t.destroy = function() {
      t.destroyed = true;
    }, t;
  };
  D.prototype.ref = function() {
    this.refCount += 1;
  };
  D.prototype.unref = function() {
    if (this.refCount -= 1, this.refCount < 0) throw new Error("invalid unref");
  };
  function Ot(e, r) {
    return new D(e, r);
  }
  function zt(e, r) {
    return new R(e, r);
  }
});
var Xe = E((A) => {
  var je = require$$0$2, _t = require$$13, _r2 = zr(), At = Be(), be = require$$1$1, Fe = require$$0$1.EventEmitter, Ar = require$$12.Transform, Ve = require$$12.PassThrough, Rt = require$$12.Writable;
  A.open = Dt;
  A.fromFd = Rr;
  A.fromBuffer = Ut;
  A.fromRandomAccessReader = Ke;
  A.dosDateTimeToDate = Ur;
  A.validateFileName = Tr;
  A.ZipFile = B;
  A.Entry = oe;
  A.RandomAccessReader = q;
  function Dt(e, r, t) {
    typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = true), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.open(e, "r", function(n, i) {
      if (n) return t(n);
      Rr(i, r, function(o, s) {
        o && je.close(i, Ce), t(o, s);
      });
    });
  }
  function Rr(e, r, t) {
    typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = false), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.fstat(e, function(n, i) {
      if (n) return t(n);
      var o = _r2.createFromFd(e, { autoClose: true });
      Ke(o, i.size, r, t);
    });
  }
  function Ut(e, r, t) {
    typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose = false, r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false);
    var n = _r2.createFromBuffer(e, { maxChunkSize: 65536 });
    Ke(n, e.length, r, t);
  }
  function Ke(e, r, t, n) {
    typeof t == "function" && (n = t, t = null), t == null && (t = {}), t.autoClose == null && (t.autoClose = true), t.lazyEntries == null && (t.lazyEntries = false), t.decodeStrings == null && (t.decodeStrings = true);
    var i = !!t.decodeStrings;
    if (t.validateEntrySizes == null && (t.validateEntrySizes = true), t.strictFileNames == null && (t.strictFileNames = false), n == null && (n = Ce), typeof r != "number") throw new Error("expected totalSize parameter to be a number");
    if (r > Number.MAX_SAFE_INTEGER) throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");
    e.ref();
    var o = 22, s = 65535, f = Math.min(o + s, r), u = _(f), d = r - u.length;
    $(e, u, 0, f, d, function(a) {
      if (a) return n(a);
      for (var c = f - o; c >= 0; c -= 1) if (u.readUInt32LE(c) === 101010256) {
        var l = u.slice(c), x = l.readUInt16LE(4);
        if (x !== 0) return n(new Error("multi-disk zip files are not supported: found disk number: " + x));
        var g = l.readUInt16LE(10), p = l.readUInt32LE(16), h = l.readUInt16LE(20), v = l.length - o;
        if (h !== v) return n(new Error("invalid comment length. expected: " + v + ". found: " + h));
        var w = i ? ye(l, 22, l.length, false) : l.slice(22);
        if (!(g === 65535 || p === 4294967295)) return n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames));
        var b = _(20), U = d + c - b.length;
        $(e, b, 0, b.length, U, function(Y) {
          if (Y) return n(Y);
          if (b.readUInt32LE(0) !== 117853008) return n(new Error("invalid zip64 end of central directory locator signature"));
          var ee = j(b, 8), P = _(56);
          $(e, P, 0, P.length, ee, function(re) {
            return re ? n(re) : P.readUInt32LE(0) !== 101075792 ? n(new Error("invalid zip64 end of central directory record signature")) : (g = j(P, 32), p = j(P, 48), n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames)));
          });
        });
        return;
      }
      n(new Error("end of central directory record signature not found"));
    });
  }
  be.inherits(B, Fe);
  function B(e, r, t, n, i, o, s, f, u, d) {
    var a = this;
    Fe.call(a), a.reader = e, a.reader.on("error", function(c) {
      Dr(a, c);
    }), a.reader.once("close", function() {
      a.emit("close");
    }), a.readEntryCursor = r, a.fileSize = t, a.entryCount = n, a.comment = i, a.entriesRead = 0, a.autoClose = !!o, a.lazyEntries = !!s, a.decodeStrings = !!f, a.validateEntrySizes = !!u, a.strictFileNames = !!d, a.isOpen = true, a.emittedError = false, a.lazyEntries || a._readEntry();
  }
  B.prototype.close = function() {
    this.isOpen && (this.isOpen = false, this.reader.unref());
  };
  function L(e, r) {
    e.autoClose && e.close(), Dr(e, r);
  }
  function Dr(e, r) {
    e.emittedError || (e.emittedError = true, e.emit("error", r));
  }
  B.prototype.readEntry = function() {
    if (!this.lazyEntries) throw new Error("readEntry() called without lazyEntries:true");
    this._readEntry();
  };
  B.prototype._readEntry = function() {
    var e = this;
    if (e.entryCount === e.entriesRead) {
      setImmediate(function() {
        e.autoClose && e.close(), !e.emittedError && e.emit("end");
      });
      return;
    }
    if (!e.emittedError) {
      var r = _(46);
      $(e.reader, r, 0, r.length, e.readEntryCursor, function(t) {
        if (t) return L(e, t);
        if (!e.emittedError) {
          var n = new oe(), i = r.readUInt32LE(0);
          if (i !== 33639248) return L(e, new Error("invalid central directory file header signature: 0x" + i.toString(16)));
          if (n.versionMadeBy = r.readUInt16LE(4), n.versionNeededToExtract = r.readUInt16LE(6), n.generalPurposeBitFlag = r.readUInt16LE(8), n.compressionMethod = r.readUInt16LE(10), n.lastModFileTime = r.readUInt16LE(12), n.lastModFileDate = r.readUInt16LE(14), n.crc32 = r.readUInt32LE(16), n.compressedSize = r.readUInt32LE(20), n.uncompressedSize = r.readUInt32LE(24), n.fileNameLength = r.readUInt16LE(28), n.extraFieldLength = r.readUInt16LE(30), n.fileCommentLength = r.readUInt16LE(32), n.internalFileAttributes = r.readUInt16LE(36), n.externalFileAttributes = r.readUInt32LE(38), n.relativeOffsetOfLocalHeader = r.readUInt32LE(42), n.generalPurposeBitFlag & 64) return L(e, new Error("strong encryption is not supported"));
          e.readEntryCursor += 46, r = _(n.fileNameLength + n.extraFieldLength + n.fileCommentLength), $(e.reader, r, 0, r.length, e.readEntryCursor, function(o) {
            if (o) return L(e, o);
            if (!e.emittedError) {
              var s = (n.generalPurposeBitFlag & 2048) !== 0;
              n.fileName = e.decodeStrings ? ye(r, 0, n.fileNameLength, s) : r.slice(0, n.fileNameLength);
              var f = n.fileNameLength + n.extraFieldLength, u = r.slice(n.fileNameLength, f);
              n.extraFields = [];
              for (var d = 0; d < u.length - 3; ) {
                var a = u.readUInt16LE(d + 0), c = u.readUInt16LE(d + 2), l = d + 4, x = l + c;
                if (x > u.length) return L(e, new Error("extra field length exceeds extra field buffer size"));
                var g = _(c);
                u.copy(g, 0, l, x), n.extraFields.push({ id: a, data: g }), d = x;
              }
              if (n.fileComment = e.decodeStrings ? ye(r, f, f + n.fileCommentLength, s) : r.slice(f, f + n.fileCommentLength), n.comment = n.fileComment, e.readEntryCursor += r.length, e.entriesRead += 1, n.uncompressedSize === 4294967295 || n.compressedSize === 4294967295 || n.relativeOffsetOfLocalHeader === 4294967295) {
                for (var p = null, d = 0; d < n.extraFields.length; d++) {
                  var h = n.extraFields[d];
                  if (h.id === 1) {
                    p = h.data;
                    break;
                  }
                }
                if (p == null) return L(e, new Error("expected zip64 extended information extra field"));
                var v = 0;
                if (n.uncompressedSize === 4294967295) {
                  if (v + 8 > p.length) return L(e, new Error("zip64 extended information extra field does not include uncompressed size"));
                  n.uncompressedSize = j(p, v), v += 8;
                }
                if (n.compressedSize === 4294967295) {
                  if (v + 8 > p.length) return L(e, new Error("zip64 extended information extra field does not include compressed size"));
                  n.compressedSize = j(p, v), v += 8;
                }
                if (n.relativeOffsetOfLocalHeader === 4294967295) {
                  if (v + 8 > p.length) return L(e, new Error("zip64 extended information extra field does not include relative header offset"));
                  n.relativeOffsetOfLocalHeader = j(p, v), v += 8;
                }
              }
              if (e.decodeStrings) for (var d = 0; d < n.extraFields.length; d++) {
                var h = n.extraFields[d];
                if (h.id === 28789) {
                  if (h.data.length < 6 || h.data.readUInt8(0) !== 1) continue;
                  var w = h.data.readUInt32LE(1);
                  if (At.unsigned(r.slice(0, n.fileNameLength)) !== w) continue;
                  n.fileName = ye(h.data, 5, h.data.length, true);
                  break;
                }
              }
              if (e.validateEntrySizes && n.compressionMethod === 0) {
                var b = n.uncompressedSize;
                if (n.isEncrypted() && (b += 12), n.compressedSize !== b) {
                  var U = "compressed/uncompressed size mismatch for stored file: " + n.compressedSize + " != " + n.uncompressedSize;
                  return L(e, new Error(U));
                }
              }
              if (e.decodeStrings) {
                e.strictFileNames || (n.fileName = n.fileName.replace(/\\/g, "/"));
                var Y = Tr(n.fileName, e.validateFileNameOptions);
                if (Y != null) return L(e, new Error(Y));
              }
              e.emit("entry", n), e.lazyEntries || e._readEntry();
            }
          });
        }
      });
    }
  };
  B.prototype.openReadStream = function(e, r, t) {
    var n = this, i = 0, o = e.compressedSize;
    if (t == null) t = r, r = {};
    else {
      if (r.decrypt != null) {
        if (!e.isEncrypted()) throw new Error("options.decrypt can only be specified for encrypted entries");
        if (r.decrypt !== false) throw new Error("invalid options.decrypt value: " + r.decrypt);
        if (e.isCompressed() && r.decompress !== false) throw new Error("entry is encrypted and compressed, and options.decompress !== false");
      }
      if (r.decompress != null) {
        if (!e.isCompressed()) throw new Error("options.decompress can only be specified for compressed entries");
        if (!(r.decompress === false || r.decompress === true)) throw new Error("invalid options.decompress value: " + r.decompress);
      }
      if (r.start != null || r.end != null) {
        if (e.isCompressed() && r.decompress !== false) throw new Error("start/end range not allowed for compressed entry without options.decompress === false");
        if (e.isEncrypted() && r.decrypt !== false) throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false");
      }
      if (r.start != null) {
        if (i = r.start, i < 0) throw new Error("options.start < 0");
        if (i > e.compressedSize) throw new Error("options.start > entry.compressedSize");
      }
      if (r.end != null) {
        if (o = r.end, o < 0) throw new Error("options.end < 0");
        if (o > e.compressedSize) throw new Error("options.end > entry.compressedSize");
        if (o < i) throw new Error("options.end < options.start");
      }
    }
    if (!n.isOpen) return t(new Error("closed"));
    if (e.isEncrypted() && r.decrypt !== false) return t(new Error("entry is encrypted, and options.decrypt !== false"));
    n.reader.ref();
    var s = _(30);
    $(n.reader, s, 0, s.length, e.relativeOffsetOfLocalHeader, function(f) {
      try {
        if (f) return t(f);
        var u = s.readUInt32LE(0);
        if (u !== 67324752) return t(new Error("invalid local file header signature: 0x" + u.toString(16)));
        var d = s.readUInt16LE(26), a = s.readUInt16LE(28), c = e.relativeOffsetOfLocalHeader + s.length + d + a, l;
        if (e.compressionMethod === 0) l = false;
        else if (e.compressionMethod === 8) l = r.decompress != null ? r.decompress : true;
        else return t(new Error("unsupported compression method: " + e.compressionMethod));
        var x = c, g = x + e.compressedSize;
        if (e.compressedSize !== 0 && g > n.fileSize) return t(new Error("file data overflows file bounds: " + x + " + " + e.compressedSize + " > " + n.fileSize));
        var p = n.reader.createReadStream({ start: x + i, end: x + o }), h = p;
        if (l) {
          var v = false, w = _t.createInflateRaw();
          p.on("error", function(b) {
            setImmediate(function() {
              v || w.emit("error", b);
            });
          }), p.pipe(w), n.validateEntrySizes ? (h = new se(e.uncompressedSize), w.on("error", function(b) {
            setImmediate(function() {
              v || h.emit("error", b);
            });
          }), w.pipe(h)) : h = w, h.destroy = function() {
            v = true, w !== h && w.unpipe(h), p.unpipe(w), p.destroy();
          };
        }
        t(null, h);
      } finally {
        n.reader.unref();
      }
    });
  };
  function oe() {
  }
  oe.prototype.getLastModDate = function() {
    return Ur(this.lastModFileDate, this.lastModFileTime);
  };
  oe.prototype.isEncrypted = function() {
    return (this.generalPurposeBitFlag & 1) !== 0;
  };
  oe.prototype.isCompressed = function() {
    return this.compressionMethod === 8;
  };
  function Ur(e, r) {
    var t = e & 31, n = (e >> 5 & 15) - 1, i = (e >> 9 & 127) + 1980, o = 0, s = (r & 31) * 2, f = r >> 5 & 63, u = r >> 11 & 31;
    return new Date(i, n, t, u, f, s, o);
  }
  function Tr(e) {
    return e.indexOf("\\") !== -1 ? "invalid characters in fileName: " + e : /^[a-zA-Z]:/.test(e) || /^\//.test(e) ? "absolute path: " + e : e.split("/").indexOf("..") !== -1 ? "invalid relative path: " + e : null;
  }
  function $(e, r, t, n, i, o) {
    if (n === 0) return setImmediate(function() {
      o(null, _(0));
    });
    e.read(r, t, n, i, function(s, f) {
      if (s) return o(s);
      if (f < n) return o(new Error("unexpected EOF"));
      o();
    });
  }
  be.inherits(se, Ar);
  function se(e) {
    Ar.call(this), this.actualByteCount = 0, this.expectedByteCount = e;
  }
  se.prototype._transform = function(e, r, t) {
    if (this.actualByteCount += e.length, this.actualByteCount > this.expectedByteCount) {
      var n = "too many bytes in the stream. expected " + this.expectedByteCount + ". got at least " + this.actualByteCount;
      return t(new Error(n));
    }
    t(null, e);
  };
  se.prototype._flush = function(e) {
    if (this.actualByteCount < this.expectedByteCount) {
      var r = "not enough bytes in the stream. expected " + this.expectedByteCount + ". got only " + this.actualByteCount;
      return e(new Error(r));
    }
    e();
  };
  be.inherits(q, Fe);
  function q() {
    Fe.call(this), this.refCount = 0;
  }
  q.prototype.ref = function() {
    this.refCount += 1;
  };
  q.prototype.unref = function() {
    var e = this;
    if (e.refCount -= 1, e.refCount > 0) return;
    if (e.refCount < 0) throw new Error("invalid unref");
    e.close(r);
    function r(t) {
      if (t) return e.emit("error", t);
      e.emit("close");
    }
  };
  q.prototype.createReadStream = function(e) {
    var r = e.start, t = e.end;
    if (r === t) {
      var n = new Ve();
      return setImmediate(function() {
        n.end();
      }), n;
    }
    var i = this._readStreamForRange(r, t), o = false, s = new Se(this);
    i.on("error", function(u) {
      setImmediate(function() {
        o || s.emit("error", u);
      });
    }), s.destroy = function() {
      i.unpipe(s), s.unref(), i.destroy();
    };
    var f = new se(t - r);
    return s.on("error", function(u) {
      setImmediate(function() {
        o || f.emit("error", u);
      });
    }), f.destroy = function() {
      o = true, s.unpipe(f), s.destroy();
    }, i.pipe(s).pipe(f);
  };
  q.prototype._readStreamForRange = function(e, r) {
    throw new Error("not implemented");
  };
  q.prototype.read = function(e, r, t, n, i) {
    var o = this.createReadStream({ start: n, end: n + t }), s = new Rt(), f = 0;
    s._write = function(u, d, a) {
      u.copy(e, r + f, 0, u.length), f += u.length, a();
    }, s.on("finish", i), o.on("error", function(u) {
      i(u);
    }), o.pipe(s);
  };
  q.prototype.close = function(e) {
    setImmediate(e);
  };
  be.inherits(Se, Ve);
  function Se(e) {
    Ve.call(this), this.context = e, this.context.ref(), this.unreffedYet = false;
  }
  Se.prototype._flush = function(e) {
    this.unref(), e();
  };
  Se.prototype.unref = function(e) {
    this.unreffedYet || (this.unreffedYet = true, this.context.unref());
  };
  var Tt = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
  function ye(e, r, t, n) {
    if (n) return e.toString("utf8", r, t);
    for (var i = "", o = r; o < t; o++) i += Tt[e[o]];
    return i;
  }
  function j(e, r) {
    var t = e.readUInt32LE(r), n = e.readUInt32LE(r + 4);
    return n * 4294967296 + t;
  }
  var _;
  typeof Buffer.allocUnsafe == "function" ? _ = function(e) {
    return Buffer.allocUnsafe(e);
  } : _ = function(e) {
    return new Buffer(e);
  };
  function Ce(e) {
    if (e) throw e;
  }
});
var Mr = E((Nn, Nr) => {
  var V = 1e3, K = V * 60, X = K * 60, H = X * 24, Nt = H * 7, Mt = H * 365.25;
  Nr.exports = function(e, r) {
    r = r || {};
    var t = typeof e;
    if (t === "string" && e.length > 0) return Bt(e);
    if (t === "number" && isFinite(e)) return r.long ? Pt(e) : qt(e);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));
  };
  function Bt(e) {
    if (e = String(e), !(e.length > 100)) {
      var r = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);
      if (r) {
        var t = parseFloat(r[1]), n = (r[2] || "ms").toLowerCase();
        switch (n) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return t * Mt;
          case "weeks":
          case "week":
          case "w":
            return t * Nt;
          case "days":
          case "day":
          case "d":
            return t * H;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return t * X;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return t * K;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return t * V;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return t;
          default:
            return;
        }
      }
    }
  }
  function qt(e) {
    var r = Math.abs(e);
    return r >= H ? Math.round(e / H) + "d" : r >= X ? Math.round(e / X) + "h" : r >= K ? Math.round(e / K) + "m" : r >= V ? Math.round(e / V) + "s" : e + "ms";
  }
  function Pt(e) {
    var r = Math.abs(e);
    return r >= H ? Ie(e, r, H, "day") : r >= X ? Ie(e, r, X, "hour") : r >= K ? Ie(e, r, K, "minute") : r >= V ? Ie(e, r, V, "second") : e + " ms";
  }
  function Ie(e, r, t, n) {
    var i = r >= t * 1.5;
    return Math.round(e / t) + " " + n + (i ? "s" : "");
  }
});
var Je = E((Mn, Br) => {
  function Zt(e) {
    t.debug = t, t.default = t, t.coerce = u, t.disable = o, t.enable = i, t.enabled = s, t.humanize = Mr(), t.destroy = d, Object.keys(e).forEach((a) => {
      t[a] = e[a];
    }), t.names = [], t.skips = [], t.formatters = {};
    function r(a) {
      let c = 0;
      for (let l = 0; l < a.length; l++) c = (c << 5) - c + a.charCodeAt(l), c |= 0;
      return t.colors[Math.abs(c) % t.colors.length];
    }
    t.selectColor = r;
    function t(a) {
      let c, l = null, x, g;
      function p(...h) {
        if (!p.enabled) return;
        let v = p, w = Number(/* @__PURE__ */ new Date()), b = w - (c || w);
        v.diff = b, v.prev = c, v.curr = w, c = w, h[0] = t.coerce(h[0]), typeof h[0] != "string" && h.unshift("%O");
        let U = 0;
        h[0] = h[0].replace(/%([a-zA-Z%])/g, (ee, P) => {
          if (ee === "%%") return "%";
          U++;
          let re = t.formatters[P];
          if (typeof re == "function") {
            let lt = h[U];
            ee = re.call(v, lt), h.splice(U, 1), U--;
          }
          return ee;
        }), t.formatArgs.call(v, h), (v.log || t.log).apply(v, h);
      }
      return p.namespace = a, p.useColors = t.useColors(), p.color = t.selectColor(a), p.extend = n, p.destroy = t.destroy, Object.defineProperty(p, "enabled", { enumerable: true, configurable: false, get: () => l !== null ? l : (x !== t.namespaces && (x = t.namespaces, g = t.enabled(a)), g), set: (h) => {
        l = h;
      } }), typeof t.init == "function" && t.init(p), p;
    }
    function n(a, c) {
      let l = t(this.namespace + (typeof c == "undefined" ? ":" : c) + a);
      return l.log = this.log, l;
    }
    function i(a) {
      t.save(a), t.namespaces = a, t.names = [], t.skips = [];
      let c, l = (typeof a == "string" ? a : "").split(/[\s,]+/), x = l.length;
      for (c = 0; c < x; c++) l[c] && (a = l[c].replace(/\*/g, ".*?"), a[0] === "-" ? t.skips.push(new RegExp("^" + a.slice(1) + "$")) : t.names.push(new RegExp("^" + a + "$")));
    }
    function o() {
      let a = [...t.names.map(f), ...t.skips.map(f).map((c) => "-" + c)].join(",");
      return t.enable(""), a;
    }
    function s(a) {
      if (a[a.length - 1] === "*") return true;
      let c, l;
      for (c = 0, l = t.skips.length; c < l; c++) if (t.skips[c].test(a)) return false;
      for (c = 0, l = t.names.length; c < l; c++) if (t.names[c].test(a)) return true;
      return false;
    }
    function f(a) {
      return a.toString().substring(2, a.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function u(a) {
      return a instanceof Error ? a.stack || a.message : a;
    }
    function d() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return t.enable(t.load()), t;
  }
  Br.exports = Zt;
});
var qr = E((S, Le) => {
  S.formatArgs = Ht;
  S.save = Gt;
  S.load = Yt;
  S.useColors = Wt;
  S.storage = $t();
  S.destroy = /* @__PURE__ */ (() => {
    let e = false;
    return () => {
      e || (e = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
  })();
  S.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
  function Wt() {
    return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function Ht(e) {
    if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + Le.exports.humanize(this.diff), !this.useColors) return;
    let r = "color: " + this.color;
    e.splice(1, 0, r, "color: inherit");
    let t = 0, n = 0;
    e[0].replace(/%[a-zA-Z%]/g, (i) => {
      i !== "%%" && (t++, i === "%c" && (n = t));
    }), e.splice(n, 0, r);
  }
  S.log = console.debug || console.log || (() => {
  });
  function Gt(e) {
    try {
      e ? S.storage.setItem("debug", e) : S.storage.removeItem("debug");
    } catch {
    }
  }
  function Yt() {
    let e;
    try {
      e = S.storage.getItem("debug");
    } catch {
    }
    return !e && typeof process != "undefined" && "env" in process && (e = process.env.DEBUG), e;
  }
  function $t() {
    try {
      return localStorage;
    } catch {
    }
  }
  Le.exports = Je()(S);
  var { formatters: jt } = Le.exports;
  jt.j = function(e) {
    try {
      return JSON.stringify(e);
    } catch (r) {
      return "[UnexpectedJSONParseError]: " + r.message;
    }
  };
});
var Zr = E((Bn, Pr) => {
  Pr.exports = (e, r) => {
    r = r || process.argv;
    let t = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = r.indexOf(t + e), i = r.indexOf("--");
    return n !== -1 && (i === -1 ? true : n < i);
  };
});
var Hr = E((qn, Wr) => {
  var Vt = require$$0$3, O = Zr(), C = process.env, J;
  O("no-color") || O("no-colors") || O("color=false") ? J = false : (O("color") || O("colors") || O("color=true") || O("color=always")) && (J = true);
  "FORCE_COLOR" in C && (J = C.FORCE_COLOR.length === 0 || parseInt(C.FORCE_COLOR, 10) !== 0);
  function Kt(e) {
    return e === 0 ? false : { level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3 };
  }
  function Xt(e) {
    if (J === false) return 0;
    if (O("color=16m") || O("color=full") || O("color=truecolor")) return 3;
    if (O("color=256")) return 2;
    if (e && !e.isTTY && J !== true) return 0;
    let r = J ? 1 : 0;
    if (process.platform === "win32") {
      let t = Vt.release().split(".");
      return Number(process.versions.node.split(".")[0]) >= 8 && Number(t[0]) >= 10 && Number(t[2]) >= 10586 ? Number(t[2]) >= 14931 ? 3 : 2 : 1;
    }
    if ("CI" in C) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((t) => t in C) || C.CI_NAME === "codeship" ? 1 : r;
    if ("TEAMCITY_VERSION" in C) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(C.TEAMCITY_VERSION) ? 1 : 0;
    if (C.COLORTERM === "truecolor") return 3;
    if ("TERM_PROGRAM" in C) {
      let t = parseInt((C.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (C.TERM_PROGRAM) {
        case "iTerm.app":
          return t >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    return /-256(color)?$/i.test(C.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(C.TERM) || "COLORTERM" in C ? 1 : (C.TERM === "dumb", r);
  }
  function Qe(e) {
    let r = Xt(e);
    return Kt(r);
  }
  Wr.exports = { supportsColor: Qe, stdout: Qe(process.stdout), stderr: Qe(process.stderr) };
});
var Yr = E((y, ze) => {
  var Jt = require$$2, Oe = require$$1$1;
  y.init = on2;
  y.log = rn;
  y.formatArgs = kt;
  y.save = tn;
  y.load = nn;
  y.useColors = Qt;
  y.destroy = Oe.deprecate(() => {
  }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  y.colors = [6, 2, 3, 4, 5, 1];
  try {
    let e = Hr();
    e && (e.stderr || e).level >= 2 && (y.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
  } catch {
  }
  y.inspectOpts = Object.keys(process.env).filter((e) => /^debug_/i.test(e)).reduce((e, r) => {
    let t = r.substring(6).toLowerCase().replace(/_([a-z])/g, (i, o) => o.toUpperCase()), n = process.env[r];
    return /^(yes|on|true|enabled)$/i.test(n) ? n = true : /^(no|off|false|disabled)$/i.test(n) ? n = false : n === "null" ? n = null : n = Number(n), e[t] = n, e;
  }, {});
  function Qt() {
    return "colors" in y.inspectOpts ? !!y.inspectOpts.colors : Jt.isatty(process.stderr.fd);
  }
  function kt(e) {
    let { namespace: r, useColors: t } = this;
    if (t) {
      let n = this.color, i = "\x1B[3" + (n < 8 ? n : "8;5;" + n), o = `  ${i};1m${r} \x1B[0m`;
      e[0] = o + e[0].split(`
`).join(`
` + o), e.push(i + "m+" + ze.exports.humanize(this.diff) + "\x1B[0m");
    } else e[0] = en() + r + " " + e[0];
  }
  function en() {
    return y.inspectOpts.hideDate ? "" : (/* @__PURE__ */ new Date()).toISOString() + " ";
  }
  function rn(...e) {
    return process.stderr.write(Oe.format(...e) + `
`);
  }
  function tn(e) {
    e ? process.env.DEBUG = e : delete process.env.DEBUG;
  }
  function nn() {
    return process.env.DEBUG;
  }
  function on2(e) {
    e.inspectOpts = {};
    let r = Object.keys(y.inspectOpts);
    for (let t = 0; t < r.length; t++) e.inspectOpts[r[t]] = y.inspectOpts[r[t]];
  }
  ze.exports = Je()(y);
  var { formatters: Gr } = ze.exports;
  Gr.o = function(e) {
    return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts).split(`
`).map((r) => r.trim()).join(" ");
  };
  Gr.O = function(e) {
    return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts);
  };
});
var $r = E((Pn, ke) => {
  typeof process == "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs ? ke.exports = qr() : ke.exports = Yr();
});
var Kr = E((Zn, Vr) => {
  Vr.exports = jr;
  function jr(e, r) {
    if (e && r) return jr(e)(r);
    if (typeof e != "function") throw new TypeError("need wrapper function");
    return Object.keys(e).forEach(function(n) {
      t[n] = e[n];
    }), t;
    function t() {
      for (var n = new Array(arguments.length), i = 0; i < n.length; i++) n[i] = arguments[i];
      var o = e.apply(this, n), s = n[n.length - 1];
      return typeof o == "function" && o !== s && Object.keys(s).forEach(function(f) {
        o[f] = s[f];
      }), o;
    }
  }
});
var rr = E((Wn, er) => {
  var Xr = Kr();
  er.exports = Xr(_e);
  er.exports.strict = Xr(Jr);
  _e.proto = _e(function() {
    Object.defineProperty(Function.prototype, "once", { value: function() {
      return _e(this);
    }, configurable: true }), Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
      return Jr(this);
    }, configurable: true });
  });
  function _e(e) {
    var r = function() {
      return r.called ? r.value : (r.called = true, r.value = e.apply(this, arguments));
    };
    return r.called = false, r;
  }
  function Jr(e) {
    var r = function() {
      if (r.called) throw new Error(r.onceError);
      return r.called = true, r.value = e.apply(this, arguments);
    }, t = e.name || "Function wrapped with `once`";
    return r.onceError = t + " shouldn't be called more than once", r.called = false, r;
  }
});
var et = E((Hn, kr) => {
  var sn = rr(), fn = function() {
  }, an = function(e) {
    return e.setHeader && typeof e.abort == "function";
  }, un = function(e) {
    return e.stdio && Array.isArray(e.stdio) && e.stdio.length === 3;
  }, Qr = function(e, r, t) {
    if (typeof r == "function") return Qr(e, null, r);
    r || (r = {}), t = sn(t || fn);
    var n = e._writableState, i = e._readableState, o = r.readable || r.readable !== false && e.readable, s = r.writable || r.writable !== false && e.writable, f = false, u = function() {
      e.writable || d();
    }, d = function() {
      s = false, o || t.call(e);
    }, a = function() {
      o = false, s || t.call(e);
    }, c = function(h) {
      t.call(e, h ? new Error("exited with error code: " + h) : null);
    }, l = function(h) {
      t.call(e, h);
    }, x = function() {
      process.nextTick(g);
    }, g = function() {
      if (!f) {
        if (o && !(i && i.ended && !i.destroyed)) return t.call(e, new Error("premature close"));
        if (s && !(n && n.ended && !n.destroyed)) return t.call(e, new Error("premature close"));
      }
    }, p = function() {
      e.req.on("finish", d);
    };
    return an(e) ? (e.on("complete", d), e.on("abort", x), e.req ? p() : e.on("request", p)) : s && !n && (e.on("end", u), e.on("close", u)), un(e) && e.on("exit", c), e.on("end", a), e.on("finish", d), r.error !== false && e.on("error", l), e.on("close", x), function() {
      f = true, e.removeListener("complete", d), e.removeListener("abort", x), e.removeListener("request", p), e.req && e.req.removeListener("finish", d), e.removeListener("end", u), e.removeListener("close", u), e.removeListener("finish", d), e.removeListener("exit", c), e.removeListener("end", a), e.removeListener("error", l), e.removeListener("close", x);
    };
  };
  kr.exports = Qr;
});
var nt = E((Gn, tt) => {
  var cn = rr(), dn = et(), tr = require$$0$2, fe = function() {
  }, ln2 = /^v?\.0/.test(process.version), Ae = function(e) {
    return typeof e == "function";
  }, hn = function(e) {
    return !ln2 || !tr ? false : (e instanceof (tr.ReadStream || fe) || e instanceof (tr.WriteStream || fe)) && Ae(e.close);
  }, pn = function(e) {
    return e.setHeader && Ae(e.abort);
  }, mn = function(e, r, t, n) {
    n = cn(n);
    var i = false;
    e.on("close", function() {
      i = true;
    }), dn(e, { readable: r, writable: t }, function(s) {
      if (s) return n(s);
      i = true, n();
    });
    var o = false;
    return function(s) {
      if (!i && !o) {
        if (o = true, hn(e)) return e.close(fe);
        if (pn(e)) return e.abort();
        if (Ae(e.destroy)) return e.destroy();
        n(s || new Error("stream was destroyed"));
      }
    };
  }, rt = function(e) {
    e();
  }, xn = function(e, r) {
    return e.pipe(r);
  }, vn = function() {
    var e = Array.prototype.slice.call(arguments), r = Ae(e[e.length - 1] || fe) && e.pop() || fe;
    if (Array.isArray(e[0]) && (e = e[0]), e.length < 2) throw new Error("pump requires two streams per minimum");
    var t, n = e.map(function(i, o) {
      var s = o < e.length - 1, f = o > 0;
      return mn(i, s, f, function(u) {
        t || (t = u), u && n.forEach(rt), !s && (n.forEach(rt), r(t));
      });
    });
    return e.reduce(xn);
  };
  tt.exports = vn;
});
var ot = E((Yn, it) => {
  var { PassThrough: En } = require$$12;
  it.exports = (e) => {
    e = { ...e };
    let { array: r } = e, { encoding: t } = e, n = t === "buffer", i = false;
    r ? i = !(t || n) : t = t || "utf8", n && (t = null);
    let o = new En({ objectMode: i });
    t && o.setEncoding(t);
    let s = 0, f = [];
    return o.on("data", (u) => {
      f.push(u), i ? s = f.length : s += u.length;
    }), o.getBufferedValue = () => r ? f : n ? Buffer.concat(f, s) : f.join(""), o.getBufferedLength = () => s, o;
  };
});
var st = E(($n, Q) => {
  var { constants: wn } = require$$14$1, gn = nt(), yn = ot(), Re = class extends Error {
    constructor() {
      super("maxBuffer exceeded"), this.name = "MaxBufferError";
    }
  };
  async function De2(e, r) {
    if (!e) return Promise.reject(new Error("Expected a stream"));
    r = { maxBuffer: 1 / 0, ...r };
    let { maxBuffer: t } = r, n;
    return await new Promise((i, o) => {
      let s = (f) => {
        f && n.getBufferedLength() <= wn.MAX_LENGTH && (f.bufferedData = n.getBufferedValue()), o(f);
      };
      n = gn(e, yn(r), (f) => {
        if (f) {
          s(f);
          return;
        }
        i();
      }), n.on("data", () => {
        n.getBufferedLength() > t && s(new Re());
      });
    }), n.getBufferedValue();
  }
  Q.exports = De2;
  Q.exports.default = De2;
  Q.exports.buffer = (e, r) => De2(e, { ...r, encoding: "buffer" });
  Q.exports.array = (e, r) => De2(e, { ...r, array: true });
  Q.exports.MaxBufferError = Re;
});
var at = E((jn, ft) => {
  var z = $r()("extract-zip"), { createWriteStream: Cn, promises: k } = require$$0$2, bn = st(), G = require$$1, { promisify: ir } = require$$1$1, Fn = require$$12, Sn = Xe(), In = ir(Sn.open), Ln = ir(Fn.pipeline), nr = class {
    constructor(r, t) {
      this.zipPath = r, this.opts = t;
    }
    async extract() {
      return z("opening", this.zipPath, "with opts", this.opts), this.zipfile = await In(this.zipPath, { lazyEntries: true }), this.canceled = false, new Promise((r, t) => {
        this.zipfile.on("error", (n) => {
          this.canceled = true, t(n);
        }), this.zipfile.readEntry(), this.zipfile.on("close", () => {
          this.canceled || (z("zip extraction complete"), r());
        }), this.zipfile.on("entry", async (n) => {
          if (this.canceled) {
            z("skipping entry", n.fileName, { cancelled: this.canceled });
            return;
          }
          if (z("zipfile entry", n.fileName), n.fileName.startsWith("__MACOSX/")) {
            this.zipfile.readEntry();
            return;
          }
          let i = G.dirname(G.join(this.opts.dir, n.fileName));
          try {
            await k.mkdir(i, { recursive: true });
            let o = await k.realpath(i);
            if (G.relative(this.opts.dir, o).split(G.sep).includes("..")) throw new Error(`Out of bound path "${o}" found while processing file ${n.fileName}`);
            await this.extractEntry(n), z("finished processing", n.fileName), this.zipfile.readEntry();
          } catch (o) {
            this.canceled = true, this.zipfile.close(), t(o);
          }
        });
      });
    }
    async extractEntry(r) {
      if (this.canceled) {
        z("skipping entry extraction", r.fileName, { cancelled: this.canceled });
        return;
      }
      this.opts.onEntry && this.opts.onEntry(r, this.zipfile);
      let t = G.join(this.opts.dir, r.fileName), n = r.externalFileAttributes >> 16 & 65535, i = 61440, o = 16384, s = 40960, f = (n & i) === s, u = (n & i) === o;
      !u && r.fileName.endsWith("/") && (u = true);
      let d = r.versionMadeBy >> 8;
      u || (u = d === 0 && r.externalFileAttributes === 16), z("extracting entry", { filename: r.fileName, isDir: u, isSymlink: f });
      let a = this.getExtractedMode(n, u) & 511, c = u ? t : G.dirname(t), l = { recursive: true };
      if (u && (l.mode = a), z("mkdir", { dir: c, ...l }), await k.mkdir(c, l), u) return;
      z("opening read stream", t);
      let x = await ir(this.zipfile.openReadStream.bind(this.zipfile))(r);
      if (f) {
        let g = await bn(x);
        z("creating symlink", g, t), await k.symlink(g, t);
      } else await Ln(x, Cn(t, { mode: a }));
    }
    getExtractedMode(r, t) {
      let n = r;
      return n === 0 && (t ? (this.opts.defaultDirMode && (n = parseInt(this.opts.defaultDirMode, 10)), n || (n = 493)) : (this.opts.defaultFileMode && (n = parseInt(this.opts.defaultFileMode, 10)), n || (n = 420))), n;
    }
  };
  ft.exports = async function(e, r) {
    if (z("creating target directory", r.dir), !G.isAbsolute(r.dir)) throw new Error("Target directory is expected to be absolute");
    return await k.mkdir(r.dir, { recursive: true }), r.dir = await k.realpath(r.dir), new nr(e, r).extract();
  };
});
var zn = {};
Et(zn, { extract: () => On, yauzl: () => dt, yazl: () => ct });
var zipBundleImpl = wt(zn);
var ct = Ue(br()), dt = Ue(Xe()), ut = Ue(at()), On = ut.default;
Object.defineProperty(zipBundle, "__esModule", {
  value: true
});
zipBundle.yazl = zipBundle.yauzl = zipBundle.extract = void 0;
zipBundle.yazl = zipBundleImpl.yazl;
zipBundle.yauzl = zipBundleImpl.yauzl;
zipBundle.extract = zipBundleImpl.extract;
var hasRequiredFileUtils;
function requireFileUtils() {
  if (hasRequiredFileUtils) return fileUtils;
  hasRequiredFileUtils = 1;
  Object.defineProperty(fileUtils, "__esModule", {
    value: true
  });
  fileUtils.SerializedFS = void 0;
  fileUtils.canAccessFile = canAccessFile;
  fileUtils.copyFileAndMakeWritable = copyFileAndMakeWritable;
  fileUtils.fileUploadSizeLimit = fileUtils.existsAsync = void 0;
  fileUtils.mkdirIfNeeded = mkdirIfNeeded;
  fileUtils.removeFolders = removeFolders;
  fileUtils.sanitizeForFilePath = sanitizeForFilePath;
  fileUtils.toPosixPath = toPosixPath;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var _manualPromise2 = requireManualPromise();
  var _zipBundle2 = zipBundle;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  fileUtils.fileUploadSizeLimit = 50 * 1024 * 1024;
  const existsAsync = (path2) => new Promise((resolve) => _fs2.default.stat(path2, (err) => resolve(!err)));
  fileUtils.existsAsync = existsAsync;
  async function mkdirIfNeeded(filePath) {
    await _fs2.default.promises.mkdir(_path2.default.dirname(filePath), {
      recursive: true
    }).catch(() => {
    });
  }
  async function removeFolders(dirs) {
    return await Promise.all(dirs.map((dir) => _fs2.default.promises.rm(dir, {
      recursive: true,
      force: true,
      maxRetries: 10
    }).catch((e) => e)));
  }
  function canAccessFile(file) {
    if (!file) return false;
    try {
      _fs2.default.accessSync(file);
      return true;
    } catch (e) {
      return false;
    }
  }
  async function copyFileAndMakeWritable(from, to2) {
    await _fs2.default.promises.copyFile(from, to2);
    await _fs2.default.promises.chmod(to2, 436);
  }
  function sanitizeForFilePath(s) {
    return s.replace(/[\x00-\x2C\x2E-\x2F\x3A-\x40\x5B-\x60\x7B-\x7F]+/g, "-");
  }
  function toPosixPath(aPath) {
    return aPath.split(_path2.default.sep).join(_path2.default.posix.sep);
  }
  class SerializedFS {
    constructor() {
      this._buffers = /* @__PURE__ */ new Map();
      this._error = void 0;
      this._operations = [];
      this._operationsDone = void 0;
      this._operationsDone = new _manualPromise2.ManualPromise();
      this._operationsDone.resolve();
    }
    mkdir(dir) {
      this._appendOperation({
        op: "mkdir",
        dir
      });
    }
    writeFile(file, content, skipIfExists) {
      this._buffers.delete(file);
      this._appendOperation({
        op: "writeFile",
        file,
        content,
        skipIfExists
      });
    }
    appendFile(file, text, flush) {
      if (!this._buffers.has(file)) this._buffers.set(file, []);
      this._buffers.get(file).push(text);
      if (flush) this._flushFile(file);
    }
    _flushFile(file) {
      const buffer = this._buffers.get(file);
      if (buffer === void 0) return;
      const content = buffer.join("");
      this._buffers.delete(file);
      this._appendOperation({
        op: "appendFile",
        file,
        content
      });
    }
    copyFile(from, to2) {
      this._flushFile(from);
      this._buffers.delete(to2);
      this._appendOperation({
        op: "copyFile",
        from,
        to: to2
      });
    }
    async syncAndGetError() {
      for (const file of this._buffers.keys()) this._flushFile(file);
      await this._operationsDone;
      return this._error;
    }
    zip(entries, zipFileName) {
      for (const file of this._buffers.keys()) this._flushFile(file);
      this._appendOperation({
        op: "zip",
        entries,
        zipFileName
      });
    }
    // This method serializes all writes to the trace.
    _appendOperation(op) {
      const last = this._operations[this._operations.length - 1];
      if ((last === null || last === void 0 ? void 0 : last.op) === "appendFile" && op.op === "appendFile" && last.file === op.file) {
        last.content += op.content;
        return;
      }
      this._operations.push(op);
      if (this._operationsDone.isDone()) this._performOperations();
    }
    async _performOperations() {
      this._operationsDone = new _manualPromise2.ManualPromise();
      while (this._operations.length) {
        const op = this._operations.shift();
        if (this._error) continue;
        try {
          await this._performOperation(op);
        } catch (e) {
          this._error = e;
        }
      }
      this._operationsDone.resolve();
    }
    async _performOperation(op) {
      switch (op.op) {
        case "mkdir": {
          await _fs2.default.promises.mkdir(op.dir, {
            recursive: true
          });
          return;
        }
        case "writeFile": {
          if (op.skipIfExists) await _fs2.default.promises.writeFile(op.file, op.content, {
            flag: "wx"
          }).catch(() => {
          });
          else await _fs2.default.promises.writeFile(op.file, op.content);
          return;
        }
        case "copyFile": {
          await _fs2.default.promises.copyFile(op.from, op.to);
          return;
        }
        case "appendFile": {
          await _fs2.default.promises.appendFile(op.file, op.content);
          return;
        }
        case "zip": {
          const zipFile2 = new _zipBundle2.yazl.ZipFile();
          const result2 = new _manualPromise2.ManualPromise();
          zipFile2.on("error", (error) => result2.reject(error));
          for (const entry of op.entries) zipFile2.addFile(entry.value, entry.name);
          zipFile2.end();
          zipFile2.outputStream.pipe(_fs2.default.createWriteStream(op.zipFileName)).on("close", () => result2.resolve()).on("error", (error) => result2.reject(error));
          await result2;
          return;
        }
      }
    }
  }
  fileUtils.SerializedFS = SerializedFS;
  return fileUtils;
}
var headers = {};
Object.defineProperty(headers, "__esModule", {
  value: true
});
headers.headersArrayToObject = headersArrayToObject;
headers.headersObjectToArray = headersObjectToArray;
function headersObjectToArray(headers2, separator, setCookieSeparator) {
  if (!setCookieSeparator) setCookieSeparator = separator;
  const result2 = [];
  for (const name2 in headers2) {
    const values = headers2[name2];
    if (values === void 0) continue;
    if (separator) {
      const sep = name2.toLowerCase() === "set-cookie" ? setCookieSeparator : separator;
      for (const value of values.split(sep)) result2.push({
        name: name2,
        value: value.trim()
      });
    } else {
      result2.push({
        name: name2,
        value: values
      });
    }
  }
  return result2;
}
function headersArrayToObject(headers2, lowerCase) {
  const result2 = {};
  for (const {
    name: name2,
    value
  } of headers2) result2[lowerCase ? name2.toLowerCase() : name2] = value;
  return result2;
}
var hostPlatform$1 = {};
var linuxUtils = {};
Object.defineProperty(linuxUtils, "__esModule", {
  value: true
});
linuxUtils.getLinuxDistributionInfo = getLinuxDistributionInfo;
linuxUtils.getLinuxDistributionInfoSync = getLinuxDistributionInfoSync;
var _fs$b = _interopRequireDefault$h(require$$0$2);
function _interopRequireDefault$h(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
let didFailToReadOSRelease = false;
let osRelease;
async function getLinuxDistributionInfo() {
  if (process.platform !== "linux") return void 0;
  if (!osRelease && !didFailToReadOSRelease) {
    try {
      var _fields$get, _fields$get2;
      const osReleaseText = await _fs$b.default.promises.readFile("/etc/os-release", "utf8");
      const fields = parseOSReleaseText(osReleaseText);
      osRelease = {
        id: (_fields$get = fields.get("id")) !== null && _fields$get !== void 0 ? _fields$get : "",
        version: (_fields$get2 = fields.get("version_id")) !== null && _fields$get2 !== void 0 ? _fields$get2 : ""
      };
    } catch (e) {
      didFailToReadOSRelease = true;
    }
  }
  return osRelease;
}
function getLinuxDistributionInfoSync() {
  if (process.platform !== "linux") return void 0;
  if (!osRelease && !didFailToReadOSRelease) {
    try {
      var _fields$get3, _fields$get4;
      const osReleaseText = _fs$b.default.readFileSync("/etc/os-release", "utf8");
      const fields = parseOSReleaseText(osReleaseText);
      osRelease = {
        id: (_fields$get3 = fields.get("id")) !== null && _fields$get3 !== void 0 ? _fields$get3 : "",
        version: (_fields$get4 = fields.get("version_id")) !== null && _fields$get4 !== void 0 ? _fields$get4 : ""
      };
    } catch (e) {
      didFailToReadOSRelease = true;
    }
  }
  return osRelease;
}
function parseOSReleaseText(osReleaseText) {
  const fields = /* @__PURE__ */ new Map();
  for (const line of osReleaseText.split("\n")) {
    const tokens = line.split("=");
    const name2 = tokens.shift();
    let value = tokens.join("=").trim();
    if (value.startsWith('"') && value.endsWith('"')) value = value.substring(1, value.length - 1);
    if (!name2) continue;
    fields.set(name2.toLowerCase(), value);
  }
  return fields;
}
Object.defineProperty(hostPlatform$1, "__esModule", {
  value: true
});
hostPlatform$1.isOfficiallySupportedPlatform = hostPlatform$1.hostPlatform = void 0;
var _os$2 = _interopRequireDefault$g(require$$0$3);
var _linuxUtils$1 = linuxUtils;
function _interopRequireDefault$g(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function calculatePlatform() {
  const platform = _os$2.default.platform();
  if (platform === "darwin") {
    const ver = _os$2.default.release().split(".").map((a) => parseInt(a, 10));
    let macVersion = "";
    if (ver[0] < 18) {
      macVersion = "mac10.13";
    } else if (ver[0] === 18) {
      macVersion = "mac10.14";
    } else if (ver[0] === 19) {
      macVersion = "mac10.15";
    } else {
      const LAST_STABLE_MACOS_MAJOR_VERSION = 15;
      macVersion = "mac" + Math.min(ver[0] - 9, LAST_STABLE_MACOS_MAJOR_VERSION);
      if (_os$2.default.cpus().some((cpu) => cpu.model.includes("Apple"))) macVersion += "-arm64";
    }
    return {
      hostPlatform: macVersion,
      isOfficiallySupportedPlatform: true
    };
  }
  if (platform === "linux") {
    if (!["x64", "arm64"].includes(_os$2.default.arch())) return {
      hostPlatform: "<unknown>",
      isOfficiallySupportedPlatform: false
    };
    const archSuffix = "-" + _os$2.default.arch();
    const distroInfo = (0, _linuxUtils$1.getLinuxDistributionInfoSync)();
    if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "ubuntu" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "pop" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "neon" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "tuxedo") {
      const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "ubuntu";
      if (parseInt(distroInfo.version, 10) <= 19) return {
        hostPlatform: "ubuntu18.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
      if (parseInt(distroInfo.version, 10) <= 21) return {
        hostPlatform: "ubuntu20.04" + archSuffix,
        isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
      };
      if (parseInt(distroInfo.version, 10) <= 22) return {
        hostPlatform: "ubuntu22.04" + archSuffix,
        isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
      };
      return {
        hostPlatform: "ubuntu24.04" + archSuffix,
        isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
      };
    }
    if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "linuxmint") {
      const mintMajor = parseInt(distroInfo.version, 10);
      if (mintMajor <= 20) return {
        hostPlatform: "ubuntu20.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
      if (mintMajor === 21) return {
        hostPlatform: "ubuntu22.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
      return {
        hostPlatform: "ubuntu24.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
    }
    if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "debian" || (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "raspbian") {
      const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.id) === "debian";
      if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version) === "11") return {
        hostPlatform: "debian11" + archSuffix,
        isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
      };
      if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version) === "12") return {
        hostPlatform: "debian12" + archSuffix,
        isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
      };
      if ((distroInfo === null || distroInfo === void 0 ? void 0 : distroInfo.version) === "") return {
        hostPlatform: "debian12" + archSuffix,
        isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
      };
    }
    return {
      hostPlatform: "ubuntu20.04" + archSuffix,
      isOfficiallySupportedPlatform: false
    };
  }
  if (platform === "win32") return {
    hostPlatform: "win64",
    isOfficiallySupportedPlatform: true
  };
  return {
    hostPlatform: "<unknown>",
    isOfficiallySupportedPlatform: false
  };
}
const {
  hostPlatform,
  isOfficiallySupportedPlatform
} = calculatePlatform();
hostPlatform$1.isOfficiallySupportedPlatform = isOfficiallySupportedPlatform;
hostPlatform$1.hostPlatform = hostPlatform;
var httpServer = {};
var hasRequiredHttpServer;
function requireHttpServer() {
  if (hasRequiredHttpServer) return httpServer;
  hasRequiredHttpServer = 1;
  Object.defineProperty(httpServer, "__esModule", {
    value: true
  });
  httpServer.HttpServer = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var _utilsBundle2 = utilsBundle;
  var _debug2 = debug$1;
  var _network2 = requireNetwork$2();
  var _manualPromise2 = requireManualPromise();
  var _crypto2 = crypto;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class HttpServer {
    constructor() {
      this._server = void 0;
      this._urlPrefixPrecise = "";
      this._urlPrefixHumanReadable = "";
      this._port = 0;
      this._started = false;
      this._routes = [];
      this._wsGuid = void 0;
      this._server = (0, _network2.createHttpServer)(this._onRequest.bind(this));
    }
    server() {
      return this._server;
    }
    routePrefix(prefix, handler) {
      this._routes.push({
        prefix,
        handler
      });
    }
    routePath(path2, handler) {
      this._routes.push({
        exact: path2,
        handler
      });
    }
    port() {
      return this._port;
    }
    async _tryStart(port, host) {
      const errorPromise = new _manualPromise2.ManualPromise();
      const errorListener = (error) => errorPromise.reject(error);
      this._server.on("error", errorListener);
      try {
        this._server.listen(port, host);
        await Promise.race([new Promise((cb) => this._server.once("listening", cb)), errorPromise]);
      } finally {
        this._server.removeListener("error", errorListener);
      }
    }
    createWebSocket(transport2, guid) {
      (0, _debug2.assert)(!this._wsGuid, "can only create one main websocket transport per server");
      this._wsGuid = guid || (0, _crypto2.createGuid)();
      const wss = new _utilsBundle2.wsServer({
        server: this._server,
        path: "/" + this._wsGuid
      });
      wss.on("connection", (ws2) => {
        transport2.onconnect();
        transport2.sendEvent = (method, params) => ws2.send(JSON.stringify({
          method,
          params
        }));
        transport2.close = () => ws2.close();
        ws2.on("message", async (message) => {
          const {
            id,
            method,
            params
          } = JSON.parse(String(message));
          try {
            const result2 = await transport2.dispatch(method, params);
            ws2.send(JSON.stringify({
              id,
              result: result2
            }));
          } catch (e) {
            ws2.send(JSON.stringify({
              id,
              error: String(e)
            }));
          }
        });
        ws2.on("close", () => transport2.onclose());
        ws2.on("error", () => transport2.onclose());
      });
    }
    wsGuid() {
      return this._wsGuid;
    }
    async start(options = {}) {
      (0, _debug2.assert)(!this._started, "server already started");
      this._started = true;
      const host = options.host || "localhost";
      if (options.preferredPort) {
        try {
          await this._tryStart(options.preferredPort, host);
        } catch (e) {
          if (!e || !e.message || !e.message.includes("EADDRINUSE")) throw e;
          await this._tryStart(void 0, host);
        }
      } else {
        await this._tryStart(options.port, host);
      }
      const address = this._server.address();
      (0, _debug2.assert)(address, "Could not bind server socket");
      if (typeof address === "string") {
        this._urlPrefixPrecise = address;
        this._urlPrefixHumanReadable = address;
      } else {
        this._port = address.port;
        const resolvedHost = address.family === "IPv4" ? address.address : `[${address.address}]`;
        this._urlPrefixPrecise = `http://${resolvedHost}:${address.port}`;
        this._urlPrefixHumanReadable = `http://${host}:${address.port}`;
      }
    }
    async stop() {
      await new Promise((cb) => this._server.close(cb));
    }
    urlPrefix(purpose) {
      return purpose === "human-readable" ? this._urlPrefixHumanReadable : this._urlPrefixPrecise;
    }
    serveFile(request2, response, absoluteFilePath, headers2) {
      try {
        for (const [name2, value] of Object.entries(headers2 || {})) response.setHeader(name2, value);
        if (request2.headers.range) this._serveRangeFile(request2, response, absoluteFilePath);
        else this._serveFile(response, absoluteFilePath);
        return true;
      } catch (e) {
        return false;
      }
    }
    _serveFile(response, absoluteFilePath) {
      const content = _fs2.default.readFileSync(absoluteFilePath);
      response.statusCode = 200;
      const contentType = _utilsBundle2.mime.getType(_path2.default.extname(absoluteFilePath)) || "application/octet-stream";
      response.setHeader("Content-Type", contentType);
      response.setHeader("Content-Length", content.byteLength);
      response.end(content);
    }
    _serveRangeFile(request2, response, absoluteFilePath) {
      const range = request2.headers.range;
      if (!range || !range.startsWith("bytes=") || range.includes(", ") || [...range].filter((char) => char === "-").length !== 1) {
        response.statusCode = 400;
        return response.end("Bad request");
      }
      const [startStr, endStr] = range.replace(/bytes=/, "").split("-");
      let start;
      let end;
      const size = _fs2.default.statSync(absoluteFilePath).size;
      if (startStr !== "" && endStr === "") {
        start = +startStr;
        end = size - 1;
      } else if (startStr === "" && endStr !== "") {
        start = size - +endStr;
        end = size - 1;
      } else {
        start = +startStr;
        end = +endStr;
      }
      if (Number.isNaN(start) || Number.isNaN(end) || start >= size || end >= size || start > end) {
        response.writeHead(416, {
          "Content-Range": `bytes */${size}`
        });
        return response.end();
      }
      response.writeHead(206, {
        "Content-Range": `bytes ${start}-${end}/${size}`,
        "Accept-Ranges": "bytes",
        "Content-Length": end - start + 1,
        "Content-Type": _utilsBundle2.mime.getType(_path2.default.extname(absoluteFilePath))
      });
      const readable = _fs2.default.createReadStream(absoluteFilePath, {
        start,
        end
      });
      readable.pipe(response);
    }
    _onRequest(request2, response) {
      response.setHeader("Access-Control-Allow-Origin", "*");
      response.setHeader("Access-Control-Request-Method", "*");
      response.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET");
      if (request2.headers.origin) response.setHeader("Access-Control-Allow-Headers", request2.headers.origin);
      if (request2.method === "OPTIONS") {
        response.writeHead(200);
        response.end();
        return;
      }
      request2.on("error", () => response.end());
      try {
        if (!request2.url) {
          response.end();
          return;
        }
        const url = new URL("http://localhost" + request2.url);
        for (const route of this._routes) {
          if (route.exact && url.pathname === route.exact && route.handler(request2, response)) return;
          if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request2, response)) return;
        }
        response.statusCode = 404;
        response.end();
      } catch (e) {
        response.end();
      }
    }
  }
  httpServer.HttpServer = HttpServer;
  return httpServer;
}
var locatorGenerators = {};
var selectorParser = {};
var cssParser = {};
var cssTokenizer = {};
Object.defineProperty(cssTokenizer, "__esModule", {
  value: true
});
cssTokenizer.WhitespaceToken = cssTokenizer.URLToken = cssTokenizer.SuffixMatchToken = cssTokenizer.SubstringMatchToken = cssTokenizer.StringValuedToken = cssTokenizer.StringToken = cssTokenizer.SemicolonToken = cssTokenizer.PrefixMatchToken = cssTokenizer.PercentageToken = cssTokenizer.OpenSquareToken = cssTokenizer.OpenParenToken = cssTokenizer.OpenCurlyToken = cssTokenizer.NumberToken = cssTokenizer.InvalidCharacterError = cssTokenizer.IncludeMatchToken = cssTokenizer.IdentToken = cssTokenizer.HashToken = cssTokenizer.GroupingToken = cssTokenizer.FunctionToken = cssTokenizer.EOFToken = cssTokenizer.DimensionToken = cssTokenizer.DelimToken = cssTokenizer.DashMatchToken = cssTokenizer.CommaToken = cssTokenizer.ColumnToken = cssTokenizer.ColonToken = cssTokenizer.CloseSquareToken = cssTokenizer.CloseParenToken = cssTokenizer.CloseCurlyToken = cssTokenizer.CSSParserToken = cssTokenizer.CDOToken = cssTokenizer.CDCToken = cssTokenizer.BadURLToken = cssTokenizer.BadStringToken = cssTokenizer.AtKeywordToken = void 0;
cssTokenizer.tokenize = tokenize;
const between = function(num, first, last) {
  return num >= first && num <= last;
};
function digit(code) {
  return between(code, 48, 57);
}
function hexdigit(code) {
  return digit(code) || between(code, 65, 70) || between(code, 97, 102);
}
function uppercaseletter(code) {
  return between(code, 65, 90);
}
function lowercaseletter(code) {
  return between(code, 97, 122);
}
function letter(code) {
  return uppercaseletter(code) || lowercaseletter(code);
}
function nonascii(code) {
  return code >= 128;
}
function namestartchar(code) {
  return letter(code) || nonascii(code) || code === 95;
}
function namechar(code) {
  return namestartchar(code) || digit(code) || code === 45;
}
function nonprintable(code) {
  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
}
function newline(code) {
  return code === 10;
}
function whitespace(code) {
  return newline(code) || code === 9 || code === 32;
}
const maximumallowedcodepoint = 1114111;
class InvalidCharacterError extends Error {
  constructor(message) {
    super(message);
    this.name = "InvalidCharacterError";
  }
}
cssTokenizer.InvalidCharacterError = InvalidCharacterError;
function preprocess(str) {
  const codepoints = [];
  for (let i = 0; i < str.length; i++) {
    let code = str.charCodeAt(i);
    if (code === 13 && str.charCodeAt(i + 1) === 10) {
      code = 10;
      i++;
    }
    if (code === 13 || code === 12) code = 10;
    if (code === 0) code = 65533;
    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
      const lead = code - 55296;
      const trail = str.charCodeAt(i + 1) - 56320;
      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
      i++;
    }
    codepoints.push(code);
  }
  return codepoints;
}
function stringFromCode(code) {
  if (code <= 65535) return String.fromCharCode(code);
  code -= Math.pow(2, 16);
  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
  const trail = code % Math.pow(2, 10) + 56320;
  return String.fromCharCode(lead) + String.fromCharCode(trail);
}
function tokenize(str1) {
  const str = preprocess(str1);
  let i = -1;
  const tokens = [];
  let code;
  const codepoint = function(i2) {
    if (i2 >= str.length) return -1;
    return str[i2];
  };
  const next = function(num) {
    if (num === void 0) num = 1;
    if (num > 3) throw "Spec Error: no more than three codepoints of lookahead.";
    return codepoint(i + num);
  };
  const consume = function(num) {
    if (num === void 0) num = 1;
    i += num;
    code = codepoint(i);
    return true;
  };
  const reconsume = function() {
    i -= 1;
    return true;
  };
  const eof = function(codepoint2) {
    if (codepoint2 === void 0) codepoint2 = code;
    return codepoint2 === -1;
  };
  const consumeAToken = function() {
    consumeComments();
    consume();
    if (whitespace(code)) {
      while (whitespace(next())) consume();
      return new WhitespaceToken();
    } else if (code === 34) {
      return consumeAStringToken();
    } else if (code === 35) {
      if (namechar(next()) || areAValidEscape(next(1), next(2))) {
        const token = new HashToken("");
        if (wouldStartAnIdentifier(next(1), next(2), next(3))) token.type = "id";
        token.value = consumeAName();
        return token;
      } else {
        return new DelimToken(code);
      }
    } else if (code === 36) {
      if (next() === 61) {
        consume();
        return new SuffixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 39) {
      return consumeAStringToken();
    } else if (code === 40) {
      return new OpenParenToken();
    } else if (code === 41) {
      return new CloseParenToken();
    } else if (code === 42) {
      if (next() === 61) {
        consume();
        return new SubstringMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 43) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 44) {
      return new CommaToken();
    } else if (code === 45) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else if (next(1) === 45 && next(2) === 62) {
        consume(2);
        return new CDCToken();
      } else if (startsWithAnIdentifier()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 46) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 58) {
      return new ColonToken();
    } else if (code === 59) {
      return new SemicolonToken();
    } else if (code === 60) {
      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
        consume(3);
        return new CDOToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 64) {
      if (wouldStartAnIdentifier(next(1), next(2), next(3))) return new AtKeywordToken(consumeAName());
      else return new DelimToken(code);
    } else if (code === 91) {
      return new OpenSquareToken();
    } else if (code === 92) {
      if (startsWithAValidEscape()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 93) {
      return new CloseSquareToken();
    } else if (code === 94) {
      if (next() === 61) {
        consume();
        return new PrefixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 123) {
      return new OpenCurlyToken();
    } else if (code === 124) {
      if (next() === 61) {
        consume();
        return new DashMatchToken();
      } else if (next() === 124) {
        consume();
        return new ColumnToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 125) {
      return new CloseCurlyToken();
    } else if (code === 126) {
      if (next() === 61) {
        consume();
        return new IncludeMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (digit(code)) {
      reconsume();
      return consumeANumericToken();
    } else if (namestartchar(code)) {
      reconsume();
      return consumeAnIdentlikeToken();
    } else if (eof()) {
      return new EOFToken();
    } else {
      return new DelimToken(code);
    }
  };
  const consumeComments = function() {
    while (next(1) === 47 && next(2) === 42) {
      consume(2);
      while (true) {
        consume();
        if (code === 42 && next() === 47) {
          consume();
          break;
        } else if (eof()) {
          return;
        }
      }
    }
  };
  const consumeANumericToken = function() {
    const num = consumeANumber();
    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
      const token = new DimensionToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      token.unit = consumeAName();
      return token;
    } else if (next() === 37) {
      consume();
      const token = new PercentageToken();
      token.value = num.value;
      token.repr = num.repr;
      return token;
    } else {
      const token = new NumberToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      return token;
    }
  };
  const consumeAnIdentlikeToken = function() {
    const str2 = consumeAName();
    if (str2.toLowerCase() === "url" && next() === 40) {
      consume();
      while (whitespace(next(1)) && whitespace(next(2))) consume();
      if (next() === 34 || next() === 39) return new FunctionToken(str2);
      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39)) return new FunctionToken(str2);
      else return consumeAURLToken();
    } else if (next() === 40) {
      consume();
      return new FunctionToken(str2);
    } else {
      return new IdentToken(str2);
    }
  };
  const consumeAStringToken = function(endingCodePoint) {
    if (endingCodePoint === void 0) endingCodePoint = code;
    let string = "";
    while (consume()) {
      if (code === endingCodePoint || eof()) {
        return new StringToken(string);
      } else if (newline(code)) {
        reconsume();
        return new BadStringToken();
      } else if (code === 92) {
        if (eof(next())) ;
        else if (newline(next())) consume();
        else string += stringFromCode(consumeEscape());
      } else {
        string += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeAURLToken = function() {
    const token = new URLToken("");
    while (whitespace(next())) consume();
    if (eof(next())) return token;
    while (consume()) {
      if (code === 41 || eof()) {
        return token;
      } else if (whitespace(code)) {
        while (whitespace(next())) consume();
        if (next() === 41 || eof(next())) {
          consume();
          return token;
        } else {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
        consumeTheRemnantsOfABadURL();
        return new BadURLToken();
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          token.value += stringFromCode(consumeEscape());
        } else {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else {
        token.value += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeEscape = function() {
    consume();
    if (hexdigit(code)) {
      const digits = [code];
      for (let total = 0; total < 5; total++) {
        if (hexdigit(next())) {
          consume();
          digits.push(code);
        } else {
          break;
        }
      }
      if (whitespace(next())) consume();
      let value = parseInt(digits.map(function(x) {
        return String.fromCharCode(x);
      }).join(""), 16);
      if (value > maximumallowedcodepoint) value = 65533;
      return value;
    } else if (eof()) {
      return 65533;
    } else {
      return code;
    }
  };
  const areAValidEscape = function(c1, c2) {
    if (c1 !== 92) return false;
    if (newline(c2)) return false;
    return true;
  };
  const startsWithAValidEscape = function() {
    return areAValidEscape(code, next());
  };
  const wouldStartAnIdentifier = function(c1, c2, c3) {
    if (c1 === 45) return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
    else if (namestartchar(c1)) return true;
    else if (c1 === 92) return areAValidEscape(c1, c2);
    else return false;
  };
  const startsWithAnIdentifier = function() {
    return wouldStartAnIdentifier(code, next(1), next(2));
  };
  const wouldStartANumber = function(c1, c2, c3) {
    if (c1 === 43 || c1 === 45) {
      if (digit(c2)) return true;
      if (c2 === 46 && digit(c3)) return true;
      return false;
    } else if (c1 === 46) {
      if (digit(c2)) return true;
      return false;
    } else if (digit(c1)) {
      return true;
    } else {
      return false;
    }
  };
  const startsWithANumber = function() {
    return wouldStartANumber(code, next(1), next(2));
  };
  const consumeAName = function() {
    let result2 = "";
    while (consume()) {
      if (namechar(code)) {
        result2 += stringFromCode(code);
      } else if (startsWithAValidEscape()) {
        result2 += stringFromCode(consumeEscape());
      } else {
        reconsume();
        return result2;
      }
    }
    throw new Error("Internal parse error");
  };
  const consumeANumber = function() {
    let repr = "";
    let type = "integer";
    if (next() === 43 || next() === 45) {
      consume();
      repr += stringFromCode(code);
    }
    while (digit(next())) {
      consume();
      repr += stringFromCode(code);
    }
    if (next(1) === 46 && digit(next(2))) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const c1 = next(1), c2 = next(2), c3 = next(3);
    if ((c1 === 69 || c1 === 101) && digit(c2)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const value = convertAStringToANumber(repr);
    return {
      type,
      value,
      repr
    };
  };
  const convertAStringToANumber = function(string) {
    return +string;
  };
  const consumeTheRemnantsOfABadURL = function() {
    while (consume()) {
      if (code === 41 || eof()) {
        return;
      } else if (startsWithAValidEscape()) {
        consumeEscape();
      } else ;
    }
  };
  let iterationCount = 0;
  while (!eof(next())) {
    tokens.push(consumeAToken());
    iterationCount++;
    if (iterationCount > str.length * 2) throw new Error("I'm infinite-looping!");
  }
  return tokens;
}
class CSSParserToken {
  constructor() {
    this.tokenType = "";
    this.value = void 0;
  }
  toJSON() {
    return {
      token: this.tokenType
    };
  }
  toString() {
    return this.tokenType;
  }
  toSource() {
    return "" + this;
  }
}
cssTokenizer.CSSParserToken = CSSParserToken;
class BadStringToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "BADSTRING";
  }
}
cssTokenizer.BadStringToken = BadStringToken;
class BadURLToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "BADURL";
  }
}
cssTokenizer.BadURLToken = BadURLToken;
class WhitespaceToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "WHITESPACE";
  }
  toString() {
    return "WS";
  }
  toSource() {
    return " ";
  }
}
cssTokenizer.WhitespaceToken = WhitespaceToken;
class CDOToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "CDO";
  }
  toSource() {
    return "<!--";
  }
}
cssTokenizer.CDOToken = CDOToken;
class CDCToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "CDC";
  }
  toSource() {
    return "-->";
  }
}
cssTokenizer.CDCToken = CDCToken;
class ColonToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = ":";
  }
}
cssTokenizer.ColonToken = ColonToken;
class SemicolonToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = ";";
  }
}
cssTokenizer.SemicolonToken = SemicolonToken;
class CommaToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = ",";
  }
}
cssTokenizer.CommaToken = CommaToken;
class GroupingToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.value = "";
    this.mirror = "";
  }
}
cssTokenizer.GroupingToken = GroupingToken;
class OpenCurlyToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "{";
    this.value = "{";
    this.mirror = "}";
  }
}
cssTokenizer.OpenCurlyToken = OpenCurlyToken;
class CloseCurlyToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "}";
    this.value = "}";
    this.mirror = "{";
  }
}
cssTokenizer.CloseCurlyToken = CloseCurlyToken;
class OpenSquareToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "[";
    this.value = "[";
    this.mirror = "]";
  }
}
cssTokenizer.OpenSquareToken = OpenSquareToken;
class CloseSquareToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "]";
    this.value = "]";
    this.mirror = "[";
  }
}
cssTokenizer.CloseSquareToken = CloseSquareToken;
class OpenParenToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "(";
    this.value = "(";
    this.mirror = ")";
  }
}
cssTokenizer.OpenParenToken = OpenParenToken;
class CloseParenToken extends GroupingToken {
  constructor() {
    super();
    this.tokenType = ")";
    this.value = ")";
    this.mirror = "(";
  }
}
cssTokenizer.CloseParenToken = CloseParenToken;
class IncludeMatchToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "~=";
  }
}
cssTokenizer.IncludeMatchToken = IncludeMatchToken;
class DashMatchToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "|=";
  }
}
cssTokenizer.DashMatchToken = DashMatchToken;
class PrefixMatchToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "^=";
  }
}
cssTokenizer.PrefixMatchToken = PrefixMatchToken;
class SuffixMatchToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "$=";
  }
}
cssTokenizer.SuffixMatchToken = SuffixMatchToken;
class SubstringMatchToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "*=";
  }
}
cssTokenizer.SubstringMatchToken = SubstringMatchToken;
class ColumnToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "||";
  }
}
cssTokenizer.ColumnToken = ColumnToken;
class EOFToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.tokenType = "EOF";
  }
  toSource() {
    return "";
  }
}
cssTokenizer.EOFToken = EOFToken;
class DelimToken extends CSSParserToken {
  constructor(code) {
    super();
    this.tokenType = "DELIM";
    this.value = "";
    this.value = stringFromCode(code);
  }
  toString() {
    return "DELIM(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
  toSource() {
    if (this.value === "\\") return "\\\n";
    else return this.value;
  }
}
cssTokenizer.DelimToken = DelimToken;
class StringValuedToken extends CSSParserToken {
  constructor(...args) {
    super(...args);
    this.value = "";
  }
  ASCIIMatch(str) {
    return this.value.toLowerCase() === str.toLowerCase();
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
}
cssTokenizer.StringValuedToken = StringValuedToken;
class IdentToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "IDENT";
    this.value = val;
  }
  toString() {
    return "IDENT(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value);
  }
}
cssTokenizer.IdentToken = IdentToken;
class FunctionToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "FUNCTION";
    this.mirror = void 0;
    this.value = val;
    this.mirror = ")";
  }
  toString() {
    return "FUNCTION(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value) + "(";
  }
}
cssTokenizer.FunctionToken = FunctionToken;
class AtKeywordToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "AT-KEYWORD";
    this.value = val;
  }
  toString() {
    return "AT(" + this.value + ")";
  }
  toSource() {
    return "@" + escapeIdent(this.value);
  }
}
cssTokenizer.AtKeywordToken = AtKeywordToken;
class HashToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "HASH";
    this.type = void 0;
    this.value = val;
    this.type = "unrestricted";
  }
  toString() {
    return "HASH(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    return json;
  }
  toSource() {
    if (this.type === "id") return "#" + escapeIdent(this.value);
    else return "#" + escapeHash(this.value);
  }
}
cssTokenizer.HashToken = HashToken;
class StringToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "STRING";
    this.value = val;
  }
  toString() {
    return '"' + escapeString(this.value) + '"';
  }
}
cssTokenizer.StringToken = StringToken;
class URLToken extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "URL";
    this.value = val;
  }
  toString() {
    return "URL(" + this.value + ")";
  }
  toSource() {
    return 'url("' + escapeString(this.value) + '")';
  }
}
cssTokenizer.URLToken = URLToken;
class NumberToken extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "NUMBER";
    this.type = void 0;
    this.repr = void 0;
    this.type = "integer";
    this.repr = "";
  }
  toString() {
    if (this.type === "integer") return "INT(" + this.value + ")";
    return "NUMBER(" + this.value + ")";
  }
  toJSON() {
    const json = super.toJSON();
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr;
  }
}
cssTokenizer.NumberToken = NumberToken;
class PercentageToken extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "PERCENTAGE";
    this.repr = void 0;
    this.repr = "";
  }
  toString() {
    return "PERCENTAGE(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr + "%";
  }
}
cssTokenizer.PercentageToken = PercentageToken;
class DimensionToken extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "DIMENSION";
    this.type = void 0;
    this.repr = void 0;
    this.unit = void 0;
    this.type = "integer";
    this.repr = "";
    this.unit = "";
  }
  toString() {
    return "DIM(" + this.value + "," + this.unit + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    json.unit = this.unit;
    return json;
  }
  toSource() {
    const source2 = this.repr;
    let unit = escapeIdent(this.unit);
    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
      unit = "\\65 " + unit.slice(1, unit.length);
    }
    return source2 + unit;
  }
}
cssTokenizer.DimensionToken = DimensionToken;
function escapeIdent(string) {
  string = "" + string;
  let result2 = "";
  const firstcode = string.charCodeAt(0);
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45) result2 += "\\" + code.toString(16) + " ";
    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122)) result2 += string[i];
    else result2 += "\\" + string[i];
  }
  return result2;
}
function escapeHash(string) {
  string = "" + string;
  let result2 = "";
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122)) result2 += string[i];
    else result2 += "\\" + code.toString(16) + " ";
  }
  return result2;
}
function escapeString(string) {
  string = "" + string;
  let result2 = "";
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127) result2 += "\\" + code.toString(16) + " ";
    else if (code === 34 || code === 92) result2 += "\\" + string[i];
    else result2 += string[i];
  }
  return result2;
}
Object.defineProperty(cssParser, "__esModule", {
  value: true
});
cssParser.InvalidSelectorError = void 0;
cssParser.isInvalidSelectorError = isInvalidSelectorError;
cssParser.parseCSS = parseCSS;
cssParser.serializeSelector = serializeSelector;
var css = _interopRequireWildcard$h(cssTokenizer);
function _getRequireWildcardCache$h(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$h = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$h(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$h(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class InvalidSelectorError extends Error {
}
cssParser.InvalidSelectorError = InvalidSelectorError;
function isInvalidSelectorError(error) {
  return error instanceof InvalidSelectorError;
}
function parseCSS(selector, customNames) {
  let tokens;
  try {
    tokens = css.tokenize(selector);
    if (!(tokens[tokens.length - 1] instanceof css.EOFToken)) tokens.push(new css.EOFToken());
  } catch (e) {
    const newMessage = e.message + ` while parsing selector "${selector}"`;
    const index = (e.stack || "").indexOf(e.message);
    if (index !== -1) e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
    e.message = newMessage;
    throw e;
  }
  const unsupportedToken = tokens.find((token) => {
    return token instanceof css.AtKeywordToken || token instanceof css.BadStringToken || token instanceof css.BadURLToken || token instanceof css.ColumnToken || token instanceof css.CDOToken || token instanceof css.CDCToken || token instanceof css.SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.
    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }
    // Or this way :xpath( {complex-xpath-goes-here("hello")} )
    token instanceof css.OpenCurlyToken || token instanceof css.CloseCurlyToken || // TODO: Consider treating these as strings?
    token instanceof css.URLToken || token instanceof css.PercentageToken;
  });
  if (unsupportedToken) throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing selector "${selector}"`);
  let pos = 0;
  const names = /* @__PURE__ */ new Set();
  function unexpected() {
    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing selector "${selector}"`);
  }
  function skipWhitespace() {
    while (tokens[pos] instanceof css.WhitespaceToken) pos++;
  }
  function isIdent(p = pos) {
    return tokens[p] instanceof css.IdentToken;
  }
  function isString2(p = pos) {
    return tokens[p] instanceof css.StringToken;
  }
  function isNumber(p = pos) {
    return tokens[p] instanceof css.NumberToken;
  }
  function isComma(p = pos) {
    return tokens[p] instanceof css.CommaToken;
  }
  function isOpenParen(p = pos) {
    return tokens[p] instanceof css.OpenParenToken;
  }
  function isCloseParen(p = pos) {
    return tokens[p] instanceof css.CloseParenToken;
  }
  function isFunction(p = pos) {
    return tokens[p] instanceof css.FunctionToken;
  }
  function isStar(p = pos) {
    return tokens[p] instanceof css.DelimToken && tokens[p].value === "*";
  }
  function isEOF(p = pos) {
    return tokens[p] instanceof css.EOFToken;
  }
  function isClauseCombinator(p = pos) {
    return tokens[p] instanceof css.DelimToken && [">", "+", "~"].includes(tokens[p].value);
  }
  function isSelectorClauseEnd(p = pos) {
    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof css.WhitespaceToken;
  }
  function consumeFunctionArguments() {
    const result3 = [consumeArgument()];
    while (true) {
      skipWhitespace();
      if (!isComma()) break;
      pos++;
      result3.push(consumeArgument());
    }
    return result3;
  }
  function consumeArgument() {
    skipWhitespace();
    if (isNumber()) return tokens[pos++].value;
    if (isString2()) return tokens[pos++].value;
    return consumeComplexSelector();
  }
  function consumeComplexSelector() {
    const result3 = {
      simples: []
    };
    skipWhitespace();
    if (isClauseCombinator()) {
      result3.simples.push({
        selector: {
          functions: [{
            name: "scope",
            args: []
          }]
        },
        combinator: ""
      });
    } else {
      result3.simples.push({
        selector: consumeSimpleSelector(),
        combinator: ""
      });
    }
    while (true) {
      skipWhitespace();
      if (isClauseCombinator()) {
        result3.simples[result3.simples.length - 1].combinator = tokens[pos++].value;
        skipWhitespace();
      } else if (isSelectorClauseEnd()) {
        break;
      }
      result3.simples.push({
        combinator: "",
        selector: consumeSimpleSelector()
      });
    }
    return result3;
  }
  function consumeSimpleSelector() {
    let rawCSSString = "";
    const functions = [];
    while (!isSelectorClauseEnd()) {
      if (isIdent() || isStar()) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof css.HashToken) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof css.DelimToken && tokens[pos].value === ".") {
        pos++;
        if (isIdent()) rawCSSString += "." + tokens[pos++].toSource();
        else throw unexpected();
      } else if (tokens[pos] instanceof css.ColonToken) {
        pos++;
        if (isIdent()) {
          if (!customNames.has(tokens[pos].value.toLowerCase())) {
            rawCSSString += ":" + tokens[pos++].toSource();
          } else {
            const name2 = tokens[pos++].value.toLowerCase();
            functions.push({
              name: name2,
              args: []
            });
            names.add(name2);
          }
        } else if (isFunction()) {
          const name2 = tokens[pos++].value.toLowerCase();
          if (!customNames.has(name2)) {
            rawCSSString += `:${name2}(${consumeBuiltinFunctionArguments()})`;
          } else {
            functions.push({
              name: name2,
              args: consumeFunctionArguments()
            });
            names.add(name2);
          }
          skipWhitespace();
          if (!isCloseParen()) throw unexpected();
          pos++;
        } else {
          throw unexpected();
        }
      } else if (tokens[pos] instanceof css.OpenSquareToken) {
        rawCSSString += "[";
        pos++;
        while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF()) rawCSSString += tokens[pos++].toSource();
        if (!(tokens[pos] instanceof css.CloseSquareToken)) throw unexpected();
        rawCSSString += "]";
        pos++;
      } else {
        throw unexpected();
      }
    }
    if (!rawCSSString && !functions.length) throw unexpected();
    return {
      css: rawCSSString || void 0,
      functions
    };
  }
  function consumeBuiltinFunctionArguments() {
    let s = "";
    let balance = 1;
    while (!isEOF()) {
      if (isOpenParen() || isFunction()) balance++;
      if (isCloseParen()) balance--;
      if (!balance) break;
      s += tokens[pos++].toSource();
    }
    return s;
  }
  const result2 = consumeFunctionArguments();
  if (!isEOF()) throw unexpected();
  if (result2.some((arg) => typeof arg !== "object" || !("simples" in arg))) throw new InvalidSelectorError(`Error while parsing selector "${selector}"`);
  return {
    selector: result2,
    names: Array.from(names)
  };
}
function serializeSelector(args) {
  return args.map((arg) => {
    if (typeof arg === "string") return `"${arg}"`;
    if (typeof arg === "number") return String(arg);
    return arg.simples.map(({
      selector,
      combinator
    }) => {
      let s = selector.css || "";
      s = s + selector.functions.map((func) => `:${func.name}(${serializeSelector(func.args)})`).join("");
      if (combinator) s += " " + combinator;
      return s;
    }).join(" ");
  }).join(", ");
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  Object.defineProperty(exports2, "InvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.InvalidSelectorError;
    }
  });
  exports2.customCSSNames = void 0;
  Object.defineProperty(exports2, "isInvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.isInvalidSelectorError;
    }
  });
  exports2.parseAttributeSelector = parseAttributeSelector;
  exports2.parseSelector = parseSelector;
  exports2.splitSelectorByFrame = splitSelectorByFrame;
  exports2.stringifySelector = stringifySelector;
  exports2.visitAllSelectorParts = visitAllSelectorParts;
  var _cssParser = cssParser;
  const kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
  const kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);
  const customCSSNames = exports2.customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
  function parseSelector(selector) {
    const parsedStrings = parseSelectorString(selector);
    const parts = [];
    for (const part of parsedStrings.parts) {
      if (part.name === "css" || part.name === "css:light") {
        if (part.name === "css:light") part.body = ":light(" + part.body + ")";
        const parsedCSS = (0, _cssParser.parseCSS)(part.body, customCSSNames);
        parts.push({
          name: "css",
          body: parsedCSS.selector,
          source: part.body
        });
        continue;
      }
      if (kNestedSelectorNames.has(part.name)) {
        let innerSelector;
        let distance;
        try {
          const unescaped = JSON.parse("[" + part.body + "]");
          if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string") throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
          innerSelector = unescaped[0];
          if (unescaped.length === 2) {
            if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name)) throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
            distance = unescaped[1];
          }
        } catch (e) {
          throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
        }
        const nested = {
          name: part.name,
          source: part.body,
          body: {
            parsed: parseSelector(innerSelector),
            distance
          }
        };
        const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
        const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
        if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1))) nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
        parts.push(nested);
        continue;
      }
      parts.push({
        ...part,
        source: part.body
      });
    }
    if (kNestedSelectorNames.has(parts[0].name)) throw new _cssParser.InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
    return {
      capture: parsedStrings.capture,
      parts
    };
  }
  function splitSelectorByFrame(selectorText) {
    const selector = parseSelector(selectorText);
    const result2 = [];
    let chunk = {
      parts: []
    };
    let chunkStartIndex = 0;
    for (let i = 0; i < selector.parts.length; ++i) {
      const part = selector.parts[i];
      if (part.name === "internal:control" && part.body === "enter-frame") {
        if (!chunk.parts.length) throw new _cssParser.InvalidSelectorError("Selector cannot start with entering frame, select the iframe first");
        result2.push(chunk);
        chunk = {
          parts: []
        };
        chunkStartIndex = i + 1;
        continue;
      }
      if (selector.capture === i) chunk.capture = i - chunkStartIndex;
      chunk.parts.push(part);
    }
    if (!chunk.parts.length) throw new _cssParser.InvalidSelectorError(`Selector cannot end with entering frame, while parsing selector ${selectorText}`);
    result2.push(chunk);
    if (typeof selector.capture === "number" && typeof result2[result2.length - 1].capture !== "number") throw new _cssParser.InvalidSelectorError(`Can not capture the selector before diving into the frame. Only use * after the last frame has been selected`);
    return result2;
  }
  function selectorPartsEqual(list1, list2) {
    return stringifySelector({
      parts: list1
    }) === stringifySelector({
      parts: list2
    });
  }
  function stringifySelector(selector, forceEngineName) {
    if (typeof selector === "string") return selector;
    return selector.parts.map((p, i) => {
      let includeEngine = true;
      if (!forceEngineName && i !== selector.capture) {
        if (p.name === "css") includeEngine = false;
        else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith("..")) includeEngine = false;
      }
      const prefix = includeEngine ? p.name + "=" : "";
      return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
    }).join(" >> ");
  }
  function visitAllSelectorParts(selector, visitor) {
    const visit = (selector2, nested) => {
      for (const part of selector2.parts) {
        visitor(part, nested);
        if (kNestedSelectorNames.has(part.name)) visit(part.body.parsed, true);
      }
    };
    visit(selector, false);
  }
  function parseSelectorString(selector) {
    let index = 0;
    let quote2;
    let start = 0;
    const result2 = {
      parts: []
    };
    const append = () => {
      const part = selector.substring(start, index).trim();
      const eqIndex = part.indexOf("=");
      let name2;
      let body;
      if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
        name2 = part.substring(0, eqIndex).trim();
        body = part.substring(eqIndex + 1);
      } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
        name2 = "text";
        body = part;
      } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
        name2 = "text";
        body = part;
      } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
        name2 = "xpath";
        body = part;
      } else {
        name2 = "css";
        body = part;
      }
      let capture = false;
      if (name2[0] === "*") {
        capture = true;
        name2 = name2.substring(1);
      }
      result2.parts.push({
        name: name2,
        body
      });
      if (capture) {
        if (result2.capture !== void 0) throw new _cssParser.InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
        result2.capture = result2.parts.length - 1;
      }
    };
    if (!selector.includes(">>")) {
      index = selector.length;
      append();
      return result2;
    }
    const shouldIgnoreTextSelectorQuote = () => {
      const prefix = selector.substring(start, index);
      const match = prefix.match(/^\s*text\s*=(.*)$/);
      return !!match && !!match[1];
    };
    while (index < selector.length) {
      const c = selector[index];
      if (c === "\\" && index + 1 < selector.length) {
        index += 2;
      } else if (c === quote2) {
        quote2 = void 0;
        index++;
      } else if (!quote2 && (c === '"' || c === "'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {
        quote2 = c;
        index++;
      } else if (!quote2 && c === ">" && selector[index + 1] === ">") {
        append();
        index += 2;
        start = index;
      } else {
        index++;
      }
    }
    append();
    return result2;
  }
  function parseAttributeSelector(selector, allowUnquotedStrings) {
    let wp = 0;
    let EOL = selector.length === 0;
    const next = () => selector[wp] || "";
    const eat1 = () => {
      const result3 = next();
      ++wp;
      EOL = wp >= selector.length;
      return result3;
    };
    const syntaxError = (stage) => {
      if (EOL) throw new _cssParser.InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
    };
    function skipSpaces() {
      while (!EOL && /\s/.test(next())) eat1();
    }
    function isCSSNameChar(char) {
      return char >= "" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
    }
    function readIdentifier() {
      let result3 = "";
      skipSpaces();
      while (!EOL && isCSSNameChar(next())) result3 += eat1();
      return result3;
    }
    function readQuotedString(quote2) {
      let result3 = eat1();
      if (result3 !== quote2) syntaxError("parsing quoted string");
      while (!EOL && next() !== quote2) {
        if (next() === "\\") eat1();
        result3 += eat1();
      }
      if (next() !== quote2) syntaxError("parsing quoted string");
      result3 += eat1();
      return result3;
    }
    function readRegularExpression() {
      if (eat1() !== "/") syntaxError("parsing regular expression");
      let source2 = "";
      let inClass = false;
      while (!EOL) {
        if (next() === "\\") {
          source2 += eat1();
          if (EOL) syntaxError("parsing regular expression");
        } else if (inClass && next() === "]") {
          inClass = false;
        } else if (!inClass && next() === "[") {
          inClass = true;
        } else if (!inClass && next() === "/") {
          break;
        }
        source2 += eat1();
      }
      if (eat1() !== "/") syntaxError("parsing regular expression");
      let flags = "";
      while (!EOL && next().match(/[dgimsuy]/)) flags += eat1();
      try {
        return new RegExp(source2, flags);
      } catch (e) {
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e.message}`);
      }
    }
    function readAttributeToken() {
      let token = "";
      skipSpaces();
      if (next() === `'` || next() === `"`) token = readQuotedString(next()).slice(1, -1);
      else token = readIdentifier();
      if (!token) syntaxError("parsing property path");
      return token;
    }
    function readOperator() {
      skipSpaces();
      let op = "";
      if (!EOL) op += eat1();
      if (!EOL && op !== "=") op += eat1();
      if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op)) syntaxError("parsing operator");
      return op;
    }
    function readAttribute() {
      eat1();
      const jsonPath = [];
      jsonPath.push(readAttributeToken());
      skipSpaces();
      while (next() === ".") {
        eat1();
        jsonPath.push(readAttributeToken());
        skipSpaces();
      }
      if (next() === "]") {
        eat1();
        return {
          name: jsonPath.join("."),
          jsonPath,
          op: "<truthy>",
          value: null,
          caseSensitive: false
        };
      }
      const operator = readOperator();
      let value = void 0;
      let caseSensitive = true;
      skipSpaces();
      if (next() === "/") {
        if (operator !== "=") throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
        value = readRegularExpression();
      } else if (next() === `'` || next() === `"`) {
        value = readQuotedString(next()).slice(1, -1);
        skipSpaces();
        if (next() === "i" || next() === "I") {
          caseSensitive = false;
          eat1();
        } else if (next() === "s" || next() === "S") {
          caseSensitive = true;
          eat1();
        }
      } else {
        value = "";
        while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === ".")) value += eat1();
        if (value === "true") {
          value = true;
        } else if (value === "false") {
          value = false;
        } else {
          if (!allowUnquotedStrings) {
            value = +value;
            if (Number.isNaN(value)) syntaxError("parsing attribute value");
          }
        }
      }
      skipSpaces();
      if (next() !== "]") syntaxError("parsing attribute value");
      eat1();
      if (operator !== "=" && typeof value !== "string") throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
      return {
        name: jsonPath.join("."),
        jsonPath,
        op: operator,
        value,
        caseSensitive
      };
    }
    const result2 = {
      name: "",
      attributes: []
    };
    result2.name = readIdentifier();
    skipSpaces();
    while (next() === "[") {
      result2.attributes.push(readAttribute());
      skipSpaces();
    }
    if (!EOL) syntaxError(void 0);
    if (!result2.name && !result2.attributes.length) throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
    return result2;
  }
})(selectorParser);
Object.defineProperty(locatorGenerators, "__esModule", {
  value: true
});
locatorGenerators.PythonLocatorFactory = locatorGenerators.JsonlLocatorFactory = locatorGenerators.JavaScriptLocatorFactory = locatorGenerators.JavaLocatorFactory = locatorGenerators.CSharpLocatorFactory = void 0;
locatorGenerators.asLocator = asLocator;
locatorGenerators.asLocators = asLocators;
var _stringUtils$3 = stringUtils;
var _selectorParser$3 = selectorParser;
function asLocator(lang, selector, isFrameLocator = false) {
  return asLocators(lang, selector, isFrameLocator)[0];
}
function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
  try {
    return innerAsLocators(new generators[lang](preferredQuote), (0, _selectorParser$3.parseSelector)(selector), isFrameLocator, maxOutputSize);
  } catch (e) {
    return [selector];
  }
}
function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
  const parts = [...parsed.parts];
  const tokens = [];
  let nextBase = isFrameLocator ? "frame-locator" : "page";
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const base = nextBase;
    nextBase = "locator";
    if (part.name === "nth") {
      if (part.body === "0") tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
      else if (part.body === "-1") tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
      else tokens.push([factory.generateLocator(base, "nth", part.body)]);
      continue;
    }
    if (part.name === "internal:text") {
      const {
        exact,
        text
      } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "text", text, {
        exact
      })]);
      continue;
    }
    if (part.name === "internal:has-text") {
      const {
        exact,
        text
      } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-text", text, {
          exact
        })]);
        continue;
      }
    }
    if (part.name === "internal:has-not-text") {
      const {
        exact,
        text
      } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-not-text", text, {
          exact
        })]);
        continue;
      }
    }
    if (part.name === "internal:has") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
      continue;
    }
    if (part.name === "internal:has-not") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
      continue;
    }
    if (part.name === "internal:and") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
      continue;
    }
    if (part.name === "internal:or") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
      continue;
    }
    if (part.name === "internal:chain") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
      continue;
    }
    if (part.name === "internal:label") {
      const {
        exact,
        text
      } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "label", text, {
        exact
      })]);
      continue;
    }
    if (part.name === "internal:role") {
      const attrSelector = (0, _selectorParser$3.parseAttributeSelector)(part.body, true);
      const options = {
        attrs: []
      };
      for (const attr of attrSelector.attributes) {
        if (attr.name === "name") {
          options.exact = attr.caseSensitive;
          options.name = attr.value;
        } else {
          if (attr.name === "level" && typeof attr.value === "string") attr.value = +attr.value;
          options.attrs.push({
            name: attr.name === "include-hidden" ? "includeHidden" : attr.name,
            value: attr.value
          });
        }
      }
      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
      continue;
    }
    if (part.name === "internal:testid") {
      const attrSelector = (0, _selectorParser$3.parseAttributeSelector)(part.body, true);
      const {
        value
      } = attrSelector.attributes[0];
      tokens.push([factory.generateLocator(base, "test-id", value)]);
      continue;
    }
    if (part.name === "internal:attr") {
      const attrSelector = (0, _selectorParser$3.parseAttributeSelector)(part.body, true);
      const {
        name: name2,
        value,
        caseSensitive
      } = attrSelector.attributes[0];
      const text = value;
      const exact = !!caseSensitive;
      if (name2 === "placeholder") {
        tokens.push([factory.generateLocator(base, "placeholder", text, {
          exact
        })]);
        continue;
      }
      if (name2 === "alt") {
        tokens.push([factory.generateLocator(base, "alt", text, {
          exact
        })]);
        continue;
      }
      if (name2 === "title") {
        tokens.push([factory.generateLocator(base, "title", text, {
          exact
        })]);
        continue;
      }
    }
    if (part.name === "internal:control" && part.body === "enter-frame") {
      tokens.push([factory.generateLocator(base, "frame", "")]);
      nextBase = "frame-locator";
      continue;
    }
    let locatorType = "default";
    const nextPart = parts[index + 1];
    const selectorPart = (0, _selectorParser$3.stringifySelector)({
      parts: [part]
    });
    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);
    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
      const {
        exact,
        text
      } = detectExact(nextPart.body);
      if (!exact) {
        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, {
          exact
        });
        const options = {};
        if (nextPart.name === "internal:has-text") options.hasText = text;
        else options.hasNotText = text;
        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
        index++;
        continue;
      }
    }
    let locatorPartWithEngine;
    if (["xpath", "css"].includes(part.name)) {
      const selectorPart2 = (0, _selectorParser$3.stringifySelector)(
        {
          parts: [part]
        },
        /* forceEngineName */
        true
      );
      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);
    }
    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
  }
  return combineTokens(factory, tokens, maxOutputSize);
}
function combineTokens(factory, tokens, maxOutputSize) {
  const currentTokens = tokens.map(() => "");
  const result2 = [];
  const visit = (index) => {
    if (index === tokens.length) {
      result2.push(factory.chainLocators(currentTokens));
      return currentTokens.length < maxOutputSize;
    }
    for (const taken of tokens[index]) {
      currentTokens[index] = taken;
      if (!visit(index + 1)) return false;
    }
    return true;
  };
  visit(0);
  return result2;
}
function detectExact(text) {
  let exact = false;
  const match = text.match(/^\/(.*)\/([igm]*)$/);
  if (match) return {
    text: new RegExp(match[1], match[2])
  };
  if (text.endsWith('"')) {
    text = JSON.parse(text);
    exact = true;
  } else if (text.endsWith('"s')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = true;
  } else if (text.endsWith('"i')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = false;
  }
  return {
    exact,
    text
  };
}
class JavaScriptLocatorFactory {
  constructor(preferredQuote) {
    this.preferredQuote = preferredQuote;
  }
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0) return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
        if (options.hasNotText !== void 0) return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
        return `locator(${this.quote(body)})`;
      case "frame":
        return `contentFrame()`;
      case "nth":
        return `nth(${body})`;
      case "first":
        return `first()`;
      case "last":
        return `last()`;
      case "role":
        const attrs = [];
        if (isRegExp$3(options.name)) {
          attrs.push(`name: ${this.regexToSourceString(options.name)}`);
        } else if (typeof options.name === "string") {
          attrs.push(`name: ${this.quote(options.name)}`);
          if (options.exact) attrs.push(`exact: true`);
        }
        for (const {
          name: name2,
          value
        } of options.attrs) attrs.push(`${name2}: ${typeof value === "string" ? this.quote(value) : value}`);
        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
        return `getByRole(${this.quote(body)}${attrString})`;
      case "has-text":
        return `filter({ hasText: ${this.toHasText(body)} })`;
      case "has-not-text":
        return `filter({ hasNotText: ${this.toHasText(body)} })`;
      case "has":
        return `filter({ has: ${body} })`;
      case "hasNot":
        return `filter({ hasNot: ${body} })`;
      case "and":
        return `and(${body})`;
      case "or":
        return `or(${body})`;
      case "chain":
        return `locator(${body})`;
      case "test-id":
        return `getByTestId(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact("getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToSourceString(re) {
    return (0, _stringUtils$3.normalizeEscapedRegexQuotes)(String(re));
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp$3(body)) return `${method}(${this.regexToSourceString(body)})`;
    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp$3(body)) return this.regexToSourceString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp$3(value)) return this.regexToSourceString(value);
    return this.quote(value);
  }
  quote(text) {
    var _this$preferredQuote;
    return (0, _stringUtils$3.escapeWithQuotes)(text, (_this$preferredQuote = this.preferredQuote) !== null && _this$preferredQuote !== void 0 ? _this$preferredQuote : "'");
  }
}
locatorGenerators.JavaScriptLocatorFactory = JavaScriptLocatorFactory;
class PythonLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0) return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
        if (options.hasNotText !== void 0) return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
        return `locator(${this.quote(body)})`;
      case "frame":
        return `content_frame`;
      case "nth":
        return `nth(${body})`;
      case "first":
        return `first`;
      case "last":
        return `last`;
      case "role":
        const attrs = [];
        if (isRegExp$3(options.name)) {
          attrs.push(`name=${this.regexToString(options.name)}`);
        } else if (typeof options.name === "string") {
          attrs.push(`name=${this.quote(options.name)}`);
          if (options.exact) attrs.push(`exact=True`);
        }
        for (const {
          name: name2,
          value
        } of options.attrs) {
          let valueString = typeof value === "string" ? this.quote(value) : value;
          if (typeof value === "boolean") valueString = value ? "True" : "False";
          attrs.push(`${(0, _stringUtils$3.toSnakeCase)(name2)}=${valueString}`);
        }
        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
        return `get_by_role(${this.quote(body)}${attrString})`;
      case "has-text":
        return `filter(has_text=${this.toHasText(body)})`;
      case "has-not-text":
        return `filter(has_not_text=${this.toHasText(body)})`;
      case "has":
        return `filter(has=${body})`;
      case "hasNot":
        return `filter(has_not=${body})`;
      case "and":
        return `and_(${body})`;
      case "or":
        return `or_(${body})`;
      case "chain":
        return `locator(${body})`;
      case "test-id":
        return `get_by_test_id(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact("get_by_text", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("get_by_label", body, !!options.exact);
      case "title":
        return this.toCallWithExact("get_by_title", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
    return `re.compile(r"${(0, _stringUtils$3.normalizeEscapedRegexQuotes)(body.source).replace(/\\\//, "/").replace(/"/g, '\\"')}"${suffix})`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp$3(body)) return `${method}(${this.regexToString(body)})`;
    if (exact) return `${method}(${this.quote(body)}, exact=True)`;
    return `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp$3(body)) return this.regexToString(body);
    return `${this.quote(body)}`;
  }
  toTestIdValue(value) {
    if (isRegExp$3(value)) return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return (0, _stringUtils$3.escapeWithQuotes)(text, '"');
  }
}
locatorGenerators.PythonLocatorFactory = PythonLocatorFactory;
class JavaLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    let clazz;
    switch (base) {
      case "page":
        clazz = "Page";
        break;
      case "frame-locator":
        clazz = "FrameLocator";
        break;
      case "locator":
        clazz = "Locator";
        break;
    }
    switch (kind) {
      case "default":
        if (options.hasText !== void 0) return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
        if (options.hasNotText !== void 0) return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
        return `locator(${this.quote(body)})`;
      case "frame":
        return `contentFrame()`;
      case "nth":
        return `nth(${body})`;
      case "first":
        return `first()`;
      case "last":
        return `last()`;
      case "role":
        const attrs = [];
        if (isRegExp$3(options.name)) {
          attrs.push(`.setName(${this.regexToString(options.name)})`);
        } else if (typeof options.name === "string") {
          attrs.push(`.setName(${this.quote(options.name)})`);
          if (options.exact) attrs.push(`.setExact(true)`);
        }
        for (const {
          name: name2,
          value
        } of options.attrs) attrs.push(`.set${(0, _stringUtils$3.toTitleCase)(name2)}(${typeof value === "string" ? this.quote(value) : value})`);
        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
        return `getByRole(AriaRole.${(0, _stringUtils$3.toSnakeCase)(body).toUpperCase()}${attrString})`;
      case "has-text":
        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
      case "has-not-text":
        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
      case "has":
        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
      case "hasNot":
        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
      case "and":
        return `and(${body})`;
      case "or":
        return `or(${body})`;
      case "chain":
        return `locator(${body})`;
      case "test-id":
        return `getByTestId(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
    return `Pattern.compile(${this.quote((0, _stringUtils$3.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
  }
  toCallWithExact(clazz, method, body, exact) {
    if (isRegExp$3(body)) return `${method}(${this.regexToString(body)})`;
    if (exact) return `${method}(${this.quote(body)}, new ${clazz}.${(0, _stringUtils$3.toTitleCase)(method)}Options().setExact(true))`;
    return `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp$3(body)) return this.regexToString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp$3(value)) return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return (0, _stringUtils$3.escapeWithQuotes)(text, '"');
  }
}
locatorGenerators.JavaLocatorFactory = JavaLocatorFactory;
class CSharpLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0) return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
        if (options.hasNotText !== void 0) return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
        return `Locator(${this.quote(body)})`;
      case "frame":
        return `ContentFrame`;
      case "nth":
        return `Nth(${body})`;
      case "first":
        return `First`;
      case "last":
        return `Last`;
      case "role":
        const attrs = [];
        if (isRegExp$3(options.name)) {
          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
        } else if (typeof options.name === "string") {
          attrs.push(`Name = ${this.quote(options.name)}`);
          if (options.exact) attrs.push(`Exact = true`);
        }
        for (const {
          name: name2,
          value
        } of options.attrs) attrs.push(`${(0, _stringUtils$3.toTitleCase)(name2)} = ${typeof value === "string" ? this.quote(value) : value}`);
        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
        return `GetByRole(AriaRole.${(0, _stringUtils$3.toTitleCase)(body)}${attrString})`;
      case "has-text":
        return `Filter(new() { ${this.toHasText(body)} })`;
      case "has-not-text":
        return `Filter(new() { ${this.toHasNotText(body)} })`;
      case "has":
        return `Filter(new() { Has = ${body} })`;
      case "hasNot":
        return `Filter(new() { HasNot = ${body} })`;
      case "and":
        return `And(${body})`;
      case "or":
        return `Or(${body})`;
      case "chain":
        return `Locator(${body})`;
      case "test-id":
        return `GetByTestId(${this.toTestIdValue(body)})`;
      case "text":
        return this.toCallWithExact("GetByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("GetByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("GetByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("GetByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
    return `new Regex(${this.quote((0, _stringUtils$3.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp$3(body)) return `${method}(${this.regexToString(body)})`;
    if (exact) return `${method}(${this.quote(body)}, new() { Exact = true })`;
    return `${method}(${this.quote(body)})`;
  }
  toHasText(body) {
    if (isRegExp$3(body)) return `HasTextRegex = ${this.regexToString(body)}`;
    return `HasText = ${this.quote(body)}`;
  }
  toTestIdValue(value) {
    if (isRegExp$3(value)) return this.regexToString(value);
    return this.quote(value);
  }
  toHasNotText(body) {
    if (isRegExp$3(body)) return `HasNotTextRegex = ${this.regexToString(body)}`;
    return `HasNotText = ${this.quote(body)}`;
  }
  quote(text) {
    return (0, _stringUtils$3.escapeWithQuotes)(text, '"');
  }
}
locatorGenerators.CSharpLocatorFactory = CSharpLocatorFactory;
class JsonlLocatorFactory {
  generateLocator(base, kind, body, options = {}) {
    return JSON.stringify({
      kind,
      body,
      options
    });
  }
  chainLocators(locators) {
    const objects = locators.map((l) => JSON.parse(l));
    for (let i = 0; i < objects.length - 1; ++i) objects[i].next = objects[i + 1];
    return JSON.stringify(objects[0]);
  }
}
locatorGenerators.JsonlLocatorFactory = JsonlLocatorFactory;
const generators = {
  javascript: JavaScriptLocatorFactory,
  python: PythonLocatorFactory,
  java: JavaLocatorFactory,
  csharp: CSharpLocatorFactory,
  jsonl: JsonlLocatorFactory
};
function isRegExp$3(obj) {
  return obj instanceof RegExp;
}
var mimeType = {};
Object.defineProperty(mimeType, "__esModule", {
  value: true
});
mimeType.isJsonMimeType = isJsonMimeType;
mimeType.isTextualMimeType = isTextualMimeType;
function isJsonMimeType(mimeType2) {
  return !!mimeType2.match(/^(application\/json|application\/.*?\+json|text\/(x-)?json)(;\s*charset=.*)?$/);
}
function isTextualMimeType(mimeType2) {
  return !!mimeType2.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
}
var urlMatch = {};
Object.defineProperty(urlMatch, "__esModule", {
  value: true
});
urlMatch.constructURLBasedOnBaseURL = constructURLBasedOnBaseURL;
urlMatch.globToRegex = globToRegex;
urlMatch.urlMatches = urlMatches;
urlMatch.urlMatchesEqual = urlMatchesEqual;
var _stringUtils$2 = stringUtils;
const escapedChars = /* @__PURE__ */ new Set(["$", "^", "+", ".", "*", "(", ")", "|", "\\", "?", "{", "}", "[", "]"]);
function globToRegex(glob) {
  const tokens = ["^"];
  let inGroup = false;
  for (let i = 0; i < glob.length; ++i) {
    const c = glob[i];
    if (c === "\\" && i + 1 < glob.length) {
      const char = glob[++i];
      tokens.push(escapedChars.has(char) ? "\\" + char : char);
      continue;
    }
    if (c === "*") {
      const beforeDeep = glob[i - 1];
      let starCount = 1;
      while (glob[i + 1] === "*") {
        starCount++;
        i++;
      }
      const afterDeep = glob[i + 1];
      const isDeep = starCount > 1 && (beforeDeep === "/" || beforeDeep === void 0) && (afterDeep === "/" || afterDeep === void 0);
      if (isDeep) {
        tokens.push("((?:[^/]*(?:/|$))*)");
        i++;
      } else {
        tokens.push("([^/]*)");
      }
      continue;
    }
    switch (c) {
      case "?":
        tokens.push(".");
        break;
      case "[":
        tokens.push("[");
        break;
      case "]":
        tokens.push("]");
        break;
      case "{":
        inGroup = true;
        tokens.push("(");
        break;
      case "}":
        inGroup = false;
        tokens.push(")");
        break;
      case ",":
        if (inGroup) {
          tokens.push("|");
          break;
        }
        tokens.push("\\" + c);
        break;
      default:
        tokens.push(escapedChars.has(c) ? "\\" + c : c);
    }
  }
  tokens.push("$");
  return new RegExp(tokens.join(""));
}
function isRegExp$2(obj) {
  return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
}
function urlMatchesEqual(match1, match2) {
  if (isRegExp$2(match1) && isRegExp$2(match2)) return match1.source === match2.source && match1.flags === match2.flags;
  return match1 === match2;
}
function urlMatches(baseURL, urlString, match) {
  if (match === void 0 || match === "") return true;
  if ((0, _stringUtils$2.isString)(match) && !match.startsWith("*")) match = constructURLBasedOnBaseURL(baseURL, match);
  if ((0, _stringUtils$2.isString)(match)) match = globToRegex(match);
  if (isRegExp$2(match)) return match.test(urlString);
  if (typeof match === "string" && match === urlString) return true;
  const url = parsedURL(urlString);
  if (!url) return false;
  if (typeof match === "string") return url.pathname === match;
  if (typeof match !== "function") throw new Error("url parameter should be string, RegExp or function");
  return match(url);
}
function parsedURL(url) {
  try {
    return new URL(url);
  } catch (e) {
    return null;
  }
}
function constructURLBasedOnBaseURL(baseURL, givenURL) {
  try {
    return new URL(givenURL, baseURL).toString();
  } catch (e) {
    return givenURL;
  }
}
var multimap = {};
Object.defineProperty(multimap, "__esModule", {
  value: true
});
multimap.MultiMap = void 0;
let _Symbol$iterator;
_Symbol$iterator = Symbol.iterator;
class MultiMap {
  constructor() {
    this._map = void 0;
    this._map = /* @__PURE__ */ new Map();
  }
  set(key, value) {
    let values = this._map.get(key);
    if (!values) {
      values = [];
      this._map.set(key, values);
    }
    values.push(value);
  }
  get(key) {
    return this._map.get(key) || [];
  }
  has(key) {
    return this._map.has(key);
  }
  delete(key, value) {
    const values = this._map.get(key);
    if (!values) return;
    if (values.includes(value)) this._map.set(key, values.filter((v) => value !== v));
  }
  deleteAll(key) {
    this._map.delete(key);
  }
  hasValue(key, value) {
    const values = this._map.get(key);
    if (!values) return false;
    return values.includes(value);
  }
  get size() {
    return this._map.size;
  }
  [_Symbol$iterator]() {
    return this._map[Symbol.iterator]();
  }
  keys() {
    return this._map.keys();
  }
  values() {
    const result2 = [];
    for (const key of this.keys()) result2.push(...this.get(key));
    return result2;
  }
  clear() {
    this._map.clear();
  }
}
multimap.MultiMap = MultiMap;
var processLauncher = {};
var hasRequiredProcessLauncher;
function requireProcessLauncher() {
  if (hasRequiredProcessLauncher) return processLauncher;
  hasRequiredProcessLauncher = 1;
  Object.defineProperty(processLauncher, "__esModule", {
    value: true
  });
  processLauncher.envArrayToObject = envArrayToObject;
  processLauncher.gracefullyCloseAll = gracefullyCloseAll;
  processLauncher.gracefullyCloseSet = void 0;
  processLauncher.gracefullyProcessExitDoNotHang = gracefullyProcessExitDoNotHang;
  processLauncher.launchProcess = launchProcess;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var childProcess = _interopRequireWildcard2(require$$11);
  var readline = _interopRequireWildcard2(require$$2$1);
  var _ = requireUtils();
  var _fileUtils2 = requireFileUtils();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const gracefullyCloseSet = processLauncher.gracefullyCloseSet = /* @__PURE__ */ new Set();
  const killSet = /* @__PURE__ */ new Set();
  async function gracefullyCloseAll() {
    await Promise.all(Array.from(gracefullyCloseSet).map((gracefullyClose) => gracefullyClose().catch((e) => {
    })));
  }
  function gracefullyProcessExitDoNotHang(code) {
    setTimeout(() => process.exit(code), 3e4);
    gracefullyCloseAll().then(() => {
      process.exit(code);
    });
  }
  function exitHandler() {
    for (const kill of killSet) kill();
  }
  let sigintHandlerCalled = false;
  function sigintHandler() {
    const exitWithCode130 = () => {
      if ((0, _.isUnderTest)()) {
        setTimeout(() => process.exit(130), 1e3);
      } else {
        process.exit(130);
      }
    };
    if (sigintHandlerCalled) {
      process.off("SIGINT", sigintHandler);
      for (const kill of killSet) kill();
      exitWithCode130();
    } else {
      sigintHandlerCalled = true;
      gracefullyCloseAll().then(() => exitWithCode130());
    }
  }
  function sigtermHandler() {
    gracefullyCloseAll();
  }
  function sighupHandler() {
    gracefullyCloseAll();
  }
  const installedHandlers = /* @__PURE__ */ new Set();
  const processHandlers = {
    exit: exitHandler,
    SIGINT: sigintHandler,
    SIGTERM: sigtermHandler,
    SIGHUP: sighupHandler
  };
  function addProcessHandlerIfNeeded(name2) {
    if (!installedHandlers.has(name2)) {
      installedHandlers.add(name2);
      process.on(name2, processHandlers[name2]);
    }
  }
  function removeProcessHandlersIfNeeded() {
    if (killSet.size) return;
    for (const handler of installedHandlers) process.off(handler, processHandlers[handler]);
    installedHandlers.clear();
  }
  async function launchProcess(options) {
    const stdio = options.stdio === "pipe" ? ["ignore", "pipe", "pipe", "pipe", "pipe"] : ["pipe", "pipe", "pipe"];
    options.log(`<launching> ${options.command} ${options.args ? options.args.join(" ") : ""}`);
    const spawnOptions = {
      // On non-windows platforms, `detached: true` makes child process a leader of a new
      // process group, making it possible to kill child process tree with `.kill(-pid)` command.
      // @see https://nodejs.org/api/child_process.html#child_process_options_detached
      detached: process.platform !== "win32",
      env: options.env,
      cwd: options.cwd,
      shell: options.shell,
      stdio
    };
    const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);
    const cleanup = async () => {
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      const errors2 = await (0, _fileUtils2.removeFolders)(options.tempDirectories);
      for (let i = 0; i < options.tempDirectories.length; ++i) {
        if (errors2[i]) options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${options.tempDirectories[i]}: ${errors2[i]}`);
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    };
    spawnedProcess.on("error", () => {
    });
    if (!spawnedProcess.pid) {
      let failed;
      const failedPromise = new Promise((f, r) => failed = f);
      spawnedProcess.once("error", (error) => {
        failed(new Error("Failed to launch: " + error));
      });
      return cleanup().then(() => failedPromise).then((e) => Promise.reject(e));
    }
    options.log(`<launched> pid=${spawnedProcess.pid}`);
    const stdout = readline.createInterface({
      input: spawnedProcess.stdout
    });
    stdout.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][out] ` + data);
    });
    const stderr = readline.createInterface({
      input: spawnedProcess.stderr
    });
    stderr.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][err] ` + data);
    });
    let processClosed = false;
    let fulfillCleanup = () => {
    };
    const waitForCleanup = new Promise((f) => fulfillCleanup = f);
    spawnedProcess.once("exit", (exitCode, signal) => {
      options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);
      processClosed = true;
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.onExit(exitCode, signal);
      cleanup().then(fulfillCleanup);
    });
    addProcessHandlerIfNeeded("exit");
    if (options.handleSIGINT) addProcessHandlerIfNeeded("SIGINT");
    if (options.handleSIGTERM) addProcessHandlerIfNeeded("SIGTERM");
    if (options.handleSIGHUP) addProcessHandlerIfNeeded("SIGHUP");
    gracefullyCloseSet.add(gracefullyClose);
    killSet.add(killProcessAndCleanup);
    let gracefullyClosing = false;
    async function gracefullyClose() {
      if (gracefullyClosing) {
        options.log(`[pid=${spawnedProcess.pid}] <forcefully close>`);
        killProcess();
        await waitForCleanup;
        return;
      }
      gracefullyClosing = true;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);
      await options.attemptToGracefullyClose().catch(() => killProcess());
      await waitForCleanup;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);
    }
    function killProcess() {
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.log(`[pid=${spawnedProcess.pid}] <kill>`);
      if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {
        options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);
        try {
          if (process.platform === "win32") {
            const taskkillProcess = childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, {
              shell: true
            });
            const [stdout2, stderr2] = [taskkillProcess.stdout.toString(), taskkillProcess.stderr.toString()];
            if (stdout2) options.log(`[pid=${spawnedProcess.pid}] taskkill stdout: ${stdout2}`);
            if (stderr2) options.log(`[pid=${spawnedProcess.pid}] taskkill stderr: ${stderr2}`);
          } else {
            process.kill(-spawnedProcess.pid, "SIGKILL");
          }
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e}`);
        }
      } else {
        options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);
      }
    }
    function killProcessAndCleanup() {
      killProcess();
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      for (const dir of options.tempDirectories) {
        try {
          _fs2.default.rmSync(dir, {
            force: true,
            recursive: true,
            maxRetries: 5
          });
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${dir}: ${e}`);
        }
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    }
    function killAndWait() {
      killProcess();
      return waitForCleanup;
    }
    return {
      launchedProcess: spawnedProcess,
      gracefullyClose,
      kill: killAndWait
    };
  }
  function envArrayToObject(env2) {
    const result2 = {};
    for (const {
      name: name2,
      value
    } of env2) result2[name2] = value;
    return result2;
  }
  return processLauncher;
}
var profiler = {};
Object.defineProperty(profiler, "__esModule", {
  value: true
});
profiler.startProfiling = startProfiling;
profiler.stopProfiling = stopProfiling;
var fs$3 = _interopRequireWildcard$g(require$$0$2);
var path = _interopRequireWildcard$g(require$$1);
function _getRequireWildcardCache$g(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$g = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$g(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$g(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
const profileDir = process.env.PWTEST_PROFILE_DIR || "";
let session;
async function startProfiling() {
  if (!profileDir) return;
  session = new require$$2$2.Session();
  session.connect();
  await new Promise((f) => {
    session.post("Profiler.enable", () => {
      session.post("Profiler.start", f);
    });
  });
}
async function stopProfiling(profileName) {
  if (!profileDir) return;
  await new Promise((f) => session.post("Profiler.stop", (err, {
    profile
  }) => {
    if (!err) {
      fs$3.mkdirSync(profileDir, {
        recursive: true
      });
      fs$3.writeFileSync(path.join(profileDir, profileName + ".json"), JSON.stringify(profile));
    }
    f();
  }));
}
var semaphore = {};
var hasRequiredSemaphore;
function requireSemaphore() {
  if (hasRequiredSemaphore) return semaphore;
  hasRequiredSemaphore = 1;
  Object.defineProperty(semaphore, "__esModule", {
    value: true
  });
  semaphore.Semaphore = void 0;
  var _manualPromise2 = requireManualPromise();
  class Semaphore {
    constructor(max) {
      this._max = void 0;
      this._acquired = 0;
      this._queue = [];
      this._max = max;
    }
    setMax(max) {
      this._max = max;
    }
    acquire() {
      const lock = new _manualPromise2.ManualPromise();
      this._queue.push(lock);
      this._flush();
      return lock;
    }
    release() {
      --this._acquired;
      this._flush();
    }
    _flush() {
      while (this._acquired < this._max && this._queue.length) {
        ++this._acquired;
        this._queue.shift().resolve();
      }
    }
  }
  semaphore.Semaphore = Semaphore;
  return semaphore;
}
var spawnAsync$1 = {};
Object.defineProperty(spawnAsync$1, "__esModule", {
  value: true
});
spawnAsync$1.spawnAsync = spawnAsync;
var _child_process$1 = require$$11;
function spawnAsync(cmd, args, options = {}) {
  const process2 = (0, _child_process$1.spawn)(cmd, args, Object.assign({
    windowsHide: true
  }, options));
  return new Promise((resolve) => {
    let stdout = "";
    let stderr = "";
    if (process2.stdout) process2.stdout.on("data", (data) => stdout += data.toString());
    if (process2.stderr) process2.stderr.on("data", (data) => stderr += data.toString());
    process2.on("close", (code) => resolve({
      stdout,
      stderr,
      code
    }));
    process2.on("error", (error) => resolve({
      stdout,
      stderr,
      code: 0,
      error
    }));
  });
}
var task = {};
Object.defineProperty(task, "__esModule", {
  value: true
});
task.makeWaitForNextTask = makeWaitForNextTask;
function makeWaitForNextTask() {
  if (process.versions.electron) return (callback) => setTimeout(callback, 0);
  if (parseInt(process.versions.node, 10) >= 11) return setImmediate;
  let spinning = false;
  const callbacks = [];
  const loop = () => {
    const callback = callbacks.shift();
    if (!callback) {
      spinning = false;
      return;
    }
    setImmediate(loop);
    callback();
  };
  return (callback) => {
    callbacks.push(callback);
    if (!spinning) {
      spinning = true;
      setImmediate(loop);
    }
  };
}
var time = {};
Object.defineProperty(time, "__esModule", {
  value: true
});
time.monotonicTime = monotonicTime;
const initialTime = process.hrtime();
function monotonicTime() {
  const [seconds, nanoseconds] = process.hrtime(initialTime);
  return seconds * 1e3 + (nanoseconds / 1e3 | 0) / 1e3;
}
var timeoutRunner = {};
var hasRequiredTimeoutRunner;
function requireTimeoutRunner() {
  if (hasRequiredTimeoutRunner) return timeoutRunner;
  hasRequiredTimeoutRunner = 1;
  Object.defineProperty(timeoutRunner, "__esModule", {
    value: true
  });
  timeoutRunner.pollAgainstDeadline = pollAgainstDeadline;
  timeoutRunner.raceAgainstDeadline = raceAgainstDeadline;
  var _ = requireUtils();
  async function raceAgainstDeadline(cb, deadline) {
    let timer;
    return Promise.race([cb().then((result2) => {
      return {
        result: result2,
        timedOut: false
      };
    }), new Promise((resolve) => {
      const kMaxDeadline = 2147483647;
      const timeout = (deadline || kMaxDeadline) - (0, _.monotonicTime)();
      timer = setTimeout(() => resolve({
        timedOut: true
      }), timeout);
    })]).finally(() => {
      clearTimeout(timer);
    });
  }
  async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1e3]) {
    var _pollIntervals$pop;
    const lastPollInterval = (_pollIntervals$pop = pollIntervals.pop()) !== null && _pollIntervals$pop !== void 0 ? _pollIntervals$pop : 1e3;
    let lastResult;
    const wrappedCallback = () => Promise.resolve().then(callback);
    while (true) {
      var _shift;
      const time2 = (0, _.monotonicTime)();
      if (deadline && time2 >= deadline) break;
      const received = await raceAgainstDeadline(wrappedCallback, deadline);
      if (received.timedOut) break;
      lastResult = received.result.result;
      if (!received.result.continuePolling) return {
        result: lastResult,
        timedOut: false
      };
      const interval = (_shift = pollIntervals.shift()) !== null && _shift !== void 0 ? _shift : lastPollInterval;
      if (deadline && deadline <= (0, _.monotonicTime)() + interval) break;
      await new Promise((x) => setTimeout(x, interval));
    }
    return {
      timedOut: true,
      result: lastResult
    };
  }
  return timeoutRunner;
}
var traceUtils = {};
Object.defineProperty(traceUtils, "__esModule", {
  value: true
});
traceUtils.serializeClientSideCallMetadata = serializeClientSideCallMetadata;
function serializeClientSideCallMetadata(metadatas) {
  const fileNames = /* @__PURE__ */ new Map();
  const stacks = [];
  for (const m of metadatas) {
    if (!m.stack || !m.stack.length) continue;
    const stack = [];
    for (const frame2 of m.stack) {
      let ordinal = fileNames.get(frame2.file);
      if (typeof ordinal !== "number") {
        ordinal = fileNames.size;
        fileNames.set(frame2.file, ordinal);
      }
      const stackFrame = [ordinal, frame2.line || 0, frame2.column || 0, frame2.function || ""];
      stack.push(stackFrame);
    }
    stacks.push([m.id, stack]);
  }
  return {
    files: [...fileNames.keys()],
    stacks
  };
}
var userAgent = {};
const name = "playwright-core";
const version = "1.48.2";
const description = "A high-level API to automate web browsers";
const repository = {
  type: "git",
  url: "git+https://github.com/microsoft/playwright.git"
};
const homepage = "https://playwright.dev";
const engines = {
  node: ">=18"
};
const author = {
  name: "Microsoft Corporation"
};
const license = "Apache-2.0";
const exports = {
  ".": {
    types: "./index.d.ts",
    "import": "./index.mjs",
    require: "./index.js",
    "default": "./index.js"
  },
  "./package.json": "./package.json",
  "./lib/outofprocess": "./lib/outofprocess.js",
  "./lib/image_tools/stats": "./lib/image_tools/stats.js",
  "./lib/image_tools/compare": "./lib/image_tools/compare.js",
  "./lib/image_tools/imageChannel": "./lib/image_tools/imageChannel.js",
  "./lib/image_tools/colorUtils": "./lib/image_tools/colorUtils.js",
  "./lib/cli/program": "./lib/cli/program.js",
  "./lib/server/registry/index": "./lib/server/registry/index.js",
  "./lib/remote/playwrightServer": "./lib/remote/playwrightServer.js",
  "./lib/server": "./lib/server/index.js",
  "./lib/utils": "./lib/utils/index.js",
  "./lib/utilsBundle": "./lib/utilsBundle.js",
  "./lib/zipBundle": "./lib/zipBundle.js",
  "./types/protocol": "./types/protocol.d.ts",
  "./types/structs": "./types/structs.d.ts"
};
const bin = {
  "playwright-core": "cli.js"
};
const types$2 = "types/types.d.ts";
const require$$10 = {
  name,
  version,
  description,
  repository,
  homepage,
  engines,
  author,
  license,
  exports,
  bin,
  types: types$2
};
Object.defineProperty(userAgent, "__esModule", {
  value: true
});
userAgent.getEmbedderName = getEmbedderName;
userAgent.getPlaywrightVersion = getPlaywrightVersion;
userAgent.getUserAgent = getUserAgent;
userAgent.userAgentVersionMatchesErrorMessage = userAgentVersionMatchesErrorMessage;
var _child_process = require$$11;
var _os$1 = _interopRequireDefault$f(require$$0$3);
var _linuxUtils = linuxUtils;
var _ascii = ascii;
function _interopRequireDefault$f(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
let cachedUserAgent;
function getUserAgent() {
  if (cachedUserAgent) return cachedUserAgent;
  try {
    cachedUserAgent = determineUserAgent();
  } catch (e) {
    cachedUserAgent = "Playwright/unknown";
  }
  return cachedUserAgent;
}
function determineUserAgent() {
  let osIdentifier = "unknown";
  let osVersion = "unknown";
  if (process.platform === "win32") {
    const version2 = _os$1.default.release().split(".");
    osIdentifier = "windows";
    osVersion = `${version2[0]}.${version2[1]}`;
  } else if (process.platform === "darwin") {
    const version2 = (0, _child_process.execSync)("sw_vers -productVersion", {
      stdio: ["ignore", "pipe", "ignore"]
    }).toString().trim().split(".");
    osIdentifier = "macOS";
    osVersion = `${version2[0]}.${version2[1]}`;
  } else if (process.platform === "linux") {
    const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
    if (distroInfo) {
      osIdentifier = distroInfo.id || "linux";
      osVersion = distroInfo.version || "unknown";
    } else {
      osIdentifier = "linux";
    }
  }
  const additionalTokens = [];
  if (process.env.CI) additionalTokens.push("CI/1");
  const serializedTokens = additionalTokens.length ? " " + additionalTokens.join(" ") : "";
  const {
    embedderName,
    embedderVersion
  } = getEmbedderName();
  return `Playwright/${getPlaywrightVersion()} (${_os$1.default.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;
}
function getEmbedderName() {
  let embedderName = "unknown";
  let embedderVersion = "unknown";
  if (!process.env.PW_LANG_NAME) {
    embedderName = "node";
    embedderVersion = process.version.substring(1).split(".").slice(0, 2).join(".");
  } else if (["node", "python", "java", "csharp"].includes(process.env.PW_LANG_NAME)) {
    var _process$env$PW_LANG_;
    embedderName = process.env.PW_LANG_NAME;
    embedderVersion = (_process$env$PW_LANG_ = process.env.PW_LANG_NAME_VERSION) !== null && _process$env$PW_LANG_ !== void 0 ? _process$env$PW_LANG_ : "unknown";
  }
  return {
    embedderName,
    embedderVersion
  };
}
function getPlaywrightVersion(majorMinorOnly = false) {
  const version2 = process.env.PW_VERSION_OVERRIDE || require$$10.version;
  return majorMinorOnly ? version2.split(".").slice(0, 2).join(".") : version2;
}
function userAgentVersionMatchesErrorMessage(userAgent2) {
  const match = userAgent2.match(/^Playwright\/(\d+\.\d+\.\d+)/);
  if (!match) {
    return;
  }
  const received = match[1].split(".").slice(0, 2).join(".");
  const expected = getPlaywrightVersion(true);
  if (received !== expected) {
    return (0, _ascii.wrapInASCIIBox)([`Playwright version mismatch:`, `  - server version: v${expected}`, `  - client version: v${received}`, ``, `If you are using VSCode extension, restart VSCode.`, ``, `If you are connecting to a remote service,`, `keep your local Playwright version in sync`, `with the remote service version.`, ``, `<3 Playwright Team`].join("\n"), 1);
  }
}
var wsServer = {};
var hasRequiredWsServer;
function requireWsServer() {
  if (hasRequiredWsServer) return wsServer;
  hasRequiredWsServer = 1;
  Object.defineProperty(wsServer, "__esModule", {
    value: true
  });
  wsServer.perMessageDeflate = wsServer.WSServer = void 0;
  var _utils2 = requireUtils();
  var _utilsBundle2 = utilsBundle;
  var _debugLogger2 = debugLogger;
  let lastConnectionId = 0;
  const kConnectionSymbol = Symbol("kConnection");
  const perMessageDeflate2 = wsServer.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };
  class WSServer {
    constructor(delegate) {
      this._wsServer = void 0;
      this.server = void 0;
      this._delegate = void 0;
      this._delegate = delegate;
    }
    async listen(port = 0, hostname, path2) {
      _debugLogger2.debugLogger.log("server", `Server started at ${/* @__PURE__ */ new Date()}`);
      const server2 = (0, _utils2.createHttpServer)((request2, response) => {
        if (request2.method === "GET" && request2.url === "/json") {
          response.setHeader("Content-Type", "application/json");
          response.end(JSON.stringify({
            wsEndpointPath: path2
          }));
          return;
        }
        response.end("Running");
      });
      server2.on("error", (error) => _debugLogger2.debugLogger.log("server", String(error)));
      this.server = server2;
      const wsEndpoint = await new Promise((resolve, reject) => {
        server2.listen(port, hostname, () => {
          const address = server2.address();
          if (!address) {
            reject(new Error("Could not bind server socket"));
            return;
          }
          const wsEndpoint2 = typeof address === "string" ? `${address}${path2}` : `ws://${hostname || "localhost"}:${address.port}${path2}`;
          resolve(wsEndpoint2);
        }).on("error", reject);
      });
      _debugLogger2.debugLogger.log("server", "Listening at " + wsEndpoint);
      this._wsServer = new _utilsBundle2.wsServer({
        noServer: true,
        perMessageDeflate: perMessageDeflate2
      });
      if (this._delegate.onHeaders) this._wsServer.on("headers", (headers2) => this._delegate.onHeaders(headers2));
      server2.on("upgrade", (request2, socket, head) => {
        var _this$_delegate$onUpg, _this$_delegate, _this$_wsServer;
        const pathname = new URL("http://localhost" + request2.url).pathname;
        if (pathname !== path2) {
          socket.write(`HTTP/${request2.httpVersion} 400 Bad Request\r
\r
`);
          socket.destroy();
          return;
        }
        const upgradeResult = (_this$_delegate$onUpg = (_this$_delegate = this._delegate).onUpgrade) === null || _this$_delegate$onUpg === void 0 ? void 0 : _this$_delegate$onUpg.call(_this$_delegate, request2, socket);
        if (upgradeResult) {
          socket.write(upgradeResult.error);
          socket.destroy();
          return;
        }
        (_this$_wsServer = this._wsServer) === null || _this$_wsServer === void 0 || _this$_wsServer.handleUpgrade(request2, socket, head, (ws2) => {
          var _this$_wsServer2;
          return (_this$_wsServer2 = this._wsServer) === null || _this$_wsServer2 === void 0 ? void 0 : _this$_wsServer2.emit("connection", ws2, request2);
        });
      });
      this._wsServer.on("connection", (ws2, request2) => {
        _debugLogger2.debugLogger.log("server", "Connected client ws.extension=" + ws2.extensions);
        const url = new URL("http://localhost" + (request2.url || ""));
        const id = String(++lastConnectionId);
        _debugLogger2.debugLogger.log("server", `[${id}] serving connection: ${request2.url}`);
        const connection2 = this._delegate.onConnection(request2, url, ws2, id);
        ws2[kConnectionSymbol] = connection2;
      });
      return wsEndpoint;
    }
    async close() {
      var _this$_delegate$onClo, _this$_delegate2;
      const server2 = this._wsServer;
      if (!server2) return;
      _debugLogger2.debugLogger.log("server", "closing websocket server");
      const waitForClose = new Promise((f) => server2.close(f));
      await Promise.all(Array.from(server2.clients).map(async (ws2) => {
        const connection2 = ws2[kConnectionSymbol];
        if (connection2) await connection2.close();
        try {
          ws2.terminate();
        } catch (e) {
        }
      }));
      await waitForClose;
      _debugLogger2.debugLogger.log("server", "closing http server");
      if (this.server) await new Promise((f) => this.server.close(f));
      this._wsServer = void 0;
      this.server = void 0;
      _debugLogger2.debugLogger.log("server", "closed server");
      await ((_this$_delegate$onClo = (_this$_delegate2 = this._delegate).onClose) === null || _this$_delegate$onClo === void 0 ? void 0 : _this$_delegate$onClo.call(_this$_delegate2));
    }
  }
  wsServer.WSServer = WSServer;
  return wsServer;
}
var zipFile = {};
Object.defineProperty(zipFile, "__esModule", {
  value: true
});
zipFile.ZipFile = void 0;
var _zipBundle$1 = zipBundle;
class ZipFile {
  constructor(fileName) {
    this._fileName = void 0;
    this._zipFile = void 0;
    this._entries = /* @__PURE__ */ new Map();
    this._openedPromise = void 0;
    this._fileName = fileName;
    this._openedPromise = this._open();
  }
  async _open() {
    await new Promise((fulfill, reject) => {
      _zipBundle$1.yauzl.open(this._fileName, {
        autoClose: false
      }, (e, z) => {
        if (e) {
          reject(e);
          return;
        }
        this._zipFile = z;
        this._zipFile.on("entry", (entry) => {
          this._entries.set(entry.fileName, entry);
        });
        this._zipFile.on("end", fulfill);
      });
    });
  }
  async entries() {
    await this._openedPromise;
    return [...this._entries.keys()];
  }
  async read(entryPath) {
    await this._openedPromise;
    const entry = this._entries.get(entryPath);
    if (!entry) throw new Error(`${entryPath} not found in file ${this._fileName}`);
    return new Promise((resolve, reject) => {
      this._zipFile.openReadStream(entry, (error, readStream) => {
        if (error || !readStream) {
          reject(error || "Entry not found");
          return;
        }
        const buffers = [];
        readStream.on("data", (data) => buffers.push(data));
        readStream.on("end", () => resolve(Buffer.concat(buffers)));
      });
    });
  }
  close() {
    var _this$_zipFile;
    (_this$_zipFile = this._zipFile) === null || _this$_zipFile === void 0 || _this$_zipFile.close();
  }
}
zipFile.ZipFile = ZipFile;
var zones = {};
Object.defineProperty(zones, "__esModule", {
  value: true
});
zones.zones = void 0;
var _async_hooks = require$$0$4;
class ZoneManager {
  constructor() {
    this._asyncLocalStorage = new _async_hooks.AsyncLocalStorage();
  }
  run(type, data, func) {
    const previous = this._asyncLocalStorage.getStore();
    const zone = new Zone(previous, type, data);
    return this._asyncLocalStorage.run(zone, func);
  }
  zoneData(type) {
    for (let zone = this._asyncLocalStorage.getStore(); zone; zone = zone.previous) {
      if (zone.type === type) return zone.data;
    }
    return void 0;
  }
  exitZones(func) {
    return this._asyncLocalStorage.run(void 0, func);
  }
  printZones() {
    const zones2 = [];
    for (let zone = this._asyncLocalStorage.getStore(); zone; zone = zone.previous) {
      let str = zone.type;
      if (zone.type === "apiZone") str += `(${zone.data.apiName})`;
      zones2.push(str);
    }
    console.log("zones: ", zones2.join(" -> "));
  }
}
class Zone {
  constructor(previous, type, data) {
    this.type = void 0;
    this.data = void 0;
    this.previous = void 0;
    this.type = type;
    this.data = data;
    this.previous = previous;
  }
}
zones.zones = new ZoneManager();
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _ascii2 = ascii;
    Object.keys(_ascii2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _ascii2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _ascii2[key];
        }
      });
    });
    var _comparators = comparators;
    Object.keys(_comparators).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _comparators[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _comparators[key];
        }
      });
    });
    var _crypto2 = crypto;
    Object.keys(_crypto2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _crypto2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _crypto2[key];
        }
      });
    });
    var _debug2 = debug$1;
    Object.keys(_debug2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _debug2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _debug2[key];
        }
      });
    });
    var _debugLogger2 = debugLogger;
    Object.keys(_debugLogger2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _debugLogger2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _debugLogger2[key];
        }
      });
    });
    var _env2 = env;
    Object.keys(_env2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _env2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _env2[key];
        }
      });
    });
    var _eventsHelper2 = eventsHelper;
    Object.keys(_eventsHelper2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _eventsHelper2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _eventsHelper2[key];
        }
      });
    });
    var _expectUtils = expectUtils;
    Object.keys(_expectUtils).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _expectUtils[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _expectUtils[key];
        }
      });
    });
    var _fileUtils2 = requireFileUtils();
    Object.keys(_fileUtils2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _fileUtils2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _fileUtils2[key];
        }
      });
    });
    var _headers = headers;
    Object.keys(_headers).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _headers[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _headers[key];
        }
      });
    });
    var _hostPlatform = hostPlatform$1;
    Object.keys(_hostPlatform).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _hostPlatform[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _hostPlatform[key];
        }
      });
    });
    var _httpServer2 = requireHttpServer();
    Object.keys(_httpServer2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _httpServer2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _httpServer2[key];
        }
      });
    });
    var _manualPromise2 = requireManualPromise();
    Object.keys(_manualPromise2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _manualPromise2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _manualPromise2[key];
        }
      });
    });
    var _locatorGenerators2 = locatorGenerators;
    Object.keys(_locatorGenerators2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _locatorGenerators2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _locatorGenerators2[key];
        }
      });
    });
    var _mimeType = mimeType;
    Object.keys(_mimeType).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _mimeType[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _mimeType[key];
        }
      });
    });
    var _stringUtils2 = stringUtils;
    Object.keys(_stringUtils2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _stringUtils2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _stringUtils2[key];
        }
      });
    });
    var _urlMatch = urlMatch;
    Object.keys(_urlMatch).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _urlMatch[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _urlMatch[key];
        }
      });
    });
    var _multimap2 = multimap;
    Object.keys(_multimap2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _multimap2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _multimap2[key];
        }
      });
    });
    var _network2 = requireNetwork$2();
    Object.keys(_network2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _network2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _network2[key];
        }
      });
    });
    var _processLauncher = requireProcessLauncher();
    Object.keys(_processLauncher).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _processLauncher[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _processLauncher[key];
        }
      });
    });
    var _profiler = profiler;
    Object.keys(_profiler).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _profiler[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _profiler[key];
        }
      });
    });
    var _rtti2 = rtti;
    Object.keys(_rtti2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _rtti2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _rtti2[key];
        }
      });
    });
    var _semaphore2 = requireSemaphore();
    Object.keys(_semaphore2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _semaphore2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _semaphore2[key];
        }
      });
    });
    var _spawnAsync = spawnAsync$1;
    Object.keys(_spawnAsync).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _spawnAsync[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _spawnAsync[key];
        }
      });
    });
    var _stackTrace2 = requireStackTrace();
    Object.keys(_stackTrace2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _stackTrace2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _stackTrace2[key];
        }
      });
    });
    var _task = task;
    Object.keys(_task).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _task[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _task[key];
        }
      });
    });
    var _time2 = time;
    Object.keys(_time2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _time2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _time2[key];
        }
      });
    });
    var _timeoutRunner = requireTimeoutRunner();
    Object.keys(_timeoutRunner).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _timeoutRunner[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _timeoutRunner[key];
        }
      });
    });
    var _traceUtils = traceUtils;
    Object.keys(_traceUtils).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _traceUtils[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _traceUtils[key];
        }
      });
    });
    var _userAgent2 = userAgent;
    Object.keys(_userAgent2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _userAgent2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _userAgent2[key];
        }
      });
    });
    var _wsServer2 = requireWsServer();
    Object.keys(_wsServer2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _wsServer2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _wsServer2[key];
        }
      });
    });
    var _zipFile2 = zipFile;
    Object.keys(_zipFile2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _zipFile2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _zipFile2[key];
        }
      });
    });
    var _zones2 = zones;
    Object.keys(_zones2).forEach(function(key) {
      if (key === "default" || key === "__esModule") return;
      if (key in exports2 && exports2[key] === _zones2[key]) return;
      Object.defineProperty(exports2, key, {
        enumerable: true,
        get: function() {
          return _zones2[key];
        }
      });
    });
  })(utils);
  return utils;
}
var hasRequiredStackTrace;
function requireStackTrace() {
  if (hasRequiredStackTrace) return stackTrace;
  hasRequiredStackTrace = 1;
  Object.defineProperty(stackTrace, "__esModule", {
    value: true
  });
  stackTrace.addInternalStackPrefix = void 0;
  stackTrace.captureLibraryStackText = captureLibraryStackText;
  stackTrace.captureLibraryStackTrace = captureLibraryStackTrace;
  stackTrace.captureRawStack = captureRawStack;
  stackTrace.formatCallLog = formatCallLog;
  stackTrace.rewriteErrorMessage = rewriteErrorMessage;
  stackTrace.splitErrorMessage = splitErrorMessage;
  stackTrace.stringifyStackFrames = stringifyStackFrames;
  var _path2 = _interopRequireDefault2(require$$1);
  var _utilsBundle2 = utilsBundle;
  var _ = requireUtils();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function rewriteErrorMessage(e, newMessage) {
    var _e$stack;
    const lines = (((_e$stack = e.stack) === null || _e$stack === void 0 ? void 0 : _e$stack.split("\n")) || []).filter((l) => l.startsWith("    at "));
    e.message = newMessage;
    const errorTitle = `${e.name}: ${e.message}`;
    if (lines.length) e.stack = `${errorTitle}
${lines.join("\n")}`;
    return e;
  }
  const CORE_DIR = _path2.default.resolve(__dirname, "..", "..");
  const internalStackPrefixes = [CORE_DIR];
  const addInternalStackPrefix = (prefix) => internalStackPrefixes.push(prefix);
  stackTrace.addInternalStackPrefix = addInternalStackPrefix;
  function captureRawStack() {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 50;
    const error = new Error();
    const stack = error.stack || "";
    Error.stackTraceLimit = stackTraceLimit;
    return stack.split("\n");
  }
  function captureLibraryStackTrace() {
    const stack = captureRawStack();
    (0, _.isUnderTest)();
    let parsedFrames = stack.map((line) => {
      const frame2 = (0, _utilsBundle2.parseStackTraceLine)(line);
      if (!frame2 || !frame2.file) return null;
      const isPlaywrightLibrary = frame2.file.startsWith(CORE_DIR);
      const parsed = {
        frame: frame2,
        frameText: line,
        isPlaywrightLibrary
      };
      return parsed;
    }).filter(Boolean);
    let apiName = "";
    for (let i = 0; i < parsedFrames.length - 1; i++) {
      const parsedFrame = parsedFrames[i];
      if (parsedFrame.isPlaywrightLibrary && !parsedFrames[i + 1].isPlaywrightLibrary) {
        apiName = apiName || normalizeAPIName(parsedFrame.frame.function);
        break;
      }
    }
    function normalizeAPIName(name2) {
      if (!name2) return "";
      const match = name2.match(/(API|JS|CDP|[A-Z])(.*)/);
      if (!match) return name2;
      return match[1].toLowerCase() + match[2];
    }
    parsedFrames = parsedFrames.filter((f) => {
      if (process.env.PWDEBUGIMPL) return true;
      if (internalStackPrefixes.some((prefix) => f.frame.file.startsWith(prefix))) return false;
      return true;
    });
    return {
      frames: parsedFrames.map((p) => p.frame),
      apiName
    };
  }
  function stringifyStackFrames(frames2) {
    const stackLines = [];
    for (const frame2 of frames2) {
      if (frame2.function) stackLines.push(`    at ${frame2.function} (${frame2.file}:${frame2.line}:${frame2.column})`);
      else stackLines.push(`    at ${frame2.file}:${frame2.line}:${frame2.column}`);
    }
    return stackLines;
  }
  function captureLibraryStackText() {
    const parsed = captureLibraryStackTrace();
    return stringifyStackFrames(parsed.frames).join("\n");
  }
  function splitErrorMessage(message) {
    const separationIdx = message.indexOf(":");
    return {
      name: separationIdx !== -1 ? message.slice(0, separationIdx) : "",
      message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message
    };
  }
  function formatCallLog(log) {
    if (!log || !log.some((l) => !!l)) return "";
    return `
Call log:
  ${_utilsBundle2.colors.dim("- " + (log || []).join("\n  - "))}
`;
  }
  return stackTrace;
}
var hasRequiredManualPromise;
function requireManualPromise() {
  if (hasRequiredManualPromise) return manualPromise;
  hasRequiredManualPromise = 1;
  Object.defineProperty(manualPromise, "__esModule", {
    value: true
  });
  manualPromise.ManualPromise = manualPromise.LongStandingScope = void 0;
  var _stackTrace2 = requireStackTrace();
  let _Symbol$species, _Symbol$toStringTag;
  _Symbol$species = Symbol.species;
  _Symbol$toStringTag = Symbol.toStringTag;
  class ManualPromise extends Promise {
    constructor() {
      let resolve;
      let reject;
      super((f, r) => {
        resolve = f;
        reject = r;
      });
      this._resolve = void 0;
      this._reject = void 0;
      this._isDone = void 0;
      this._isDone = false;
      this._resolve = resolve;
      this._reject = reject;
    }
    isDone() {
      return this._isDone;
    }
    resolve(t) {
      this._isDone = true;
      this._resolve(t);
    }
    reject(e) {
      this._isDone = true;
      this._reject(e);
    }
    static get [_Symbol$species]() {
      return Promise;
    }
    get [_Symbol$toStringTag]() {
      return "ManualPromise";
    }
  }
  manualPromise.ManualPromise = ManualPromise;
  class LongStandingScope {
    constructor() {
      this._terminateError = void 0;
      this._closeError = void 0;
      this._terminatePromises = /* @__PURE__ */ new Map();
      this._isClosed = false;
    }
    reject(error) {
      this._isClosed = true;
      this._terminateError = error;
      for (const p of this._terminatePromises.keys()) p.resolve(error);
    }
    close(error) {
      this._isClosed = true;
      this._closeError = error;
      for (const [p, frames2] of this._terminatePromises) p.resolve(cloneError(error, frames2));
    }
    isClosed() {
      return this._isClosed;
    }
    static async raceMultiple(scopes, promise) {
      return Promise.race(scopes.map((s) => s.race(promise)));
    }
    async race(promise) {
      return this._race(Array.isArray(promise) ? promise : [promise], false);
    }
    async safeRace(promise, defaultValue) {
      return this._race([promise], true, defaultValue);
    }
    async _race(promises, safe, defaultValue) {
      const terminatePromise = new ManualPromise();
      const frames2 = (0, _stackTrace2.captureRawStack)();
      if (this._terminateError) terminatePromise.resolve(this._terminateError);
      if (this._closeError) terminatePromise.resolve(cloneError(this._closeError, frames2));
      this._terminatePromises.set(terminatePromise, frames2);
      try {
        return await Promise.race([terminatePromise.then((e) => safe ? defaultValue : Promise.reject(e)), ...promises]);
      } finally {
        this._terminatePromises.delete(terminatePromise);
      }
    }
  }
  manualPromise.LongStandingScope = LongStandingScope;
  function cloneError(error, frames2) {
    const clone = new Error();
    clone.name = error.name;
    clone.message = error.message;
    clone.stack = [error.name + ":" + error.message, ...frames2].join("\n");
    return clone;
  }
  return manualPromise;
}
var hasRequiredHappyEyeballs;
function requireHappyEyeballs() {
  if (hasRequiredHappyEyeballs) return happyEyeballs;
  hasRequiredHappyEyeballs = 1;
  Object.defineProperty(happyEyeballs, "__esModule", {
    value: true
  });
  happyEyeballs.createConnectionAsync = createConnectionAsync;
  happyEyeballs.createSocket = createSocket;
  happyEyeballs.createTLSSocket = createTLSSocket;
  happyEyeballs.httpsHappyEyeballsAgent = happyEyeballs.httpHappyEyeballsAgent = void 0;
  happyEyeballs.timingForSocket = timingForSocket;
  var dns = _interopRequireWildcard2(require$$15);
  var http = _interopRequireWildcard2(require$$20);
  var https = _interopRequireWildcard2(require$$1$2);
  var net2 = _interopRequireWildcard2(require$$8);
  var tls = _interopRequireWildcard2(require$$9);
  var _manualPromise2 = requireManualPromise();
  var _debug2 = debug$1;
  var _time2 = time;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const connectionAttemptDelayMs = 300;
  const kDNSLookupAt = Symbol("kDNSLookupAt");
  const kTCPConnectionAt = Symbol("kTCPConnectionAt");
  class HttpHappyEyeballsAgent extends http.Agent {
    createConnection(options, oncreate) {
      if (net2.isIP(clientRequestArgsToHostName(options))) return net2.createConnection(options);
      createConnectionAsync(
        options,
        oncreate,
        /* useTLS */
        false
      ).catch((err) => oncreate === null || oncreate === void 0 ? void 0 : oncreate(err));
    }
  }
  class HttpsHappyEyeballsAgent extends https.Agent {
    createConnection(options, oncreate) {
      if (net2.isIP(clientRequestArgsToHostName(options))) return tls.connect(options);
      createConnectionAsync(
        options,
        oncreate,
        /* useTLS */
        true
      ).catch((err) => oncreate === null || oncreate === void 0 ? void 0 : oncreate(err));
    }
  }
  happyEyeballs.httpsHappyEyeballsAgent = new HttpsHappyEyeballsAgent({
    keepAlive: true
  });
  happyEyeballs.httpHappyEyeballsAgent = new HttpHappyEyeballsAgent({
    keepAlive: true
  });
  async function createSocket(host, port) {
    return new Promise((resolve, reject) => {
      if (net2.isIP(host)) {
        const socket = net2.createConnection({
          host,
          port
        });
        socket.on("connect", () => resolve(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync(
          {
            host,
            port
          },
          (err, socket) => {
            if (err) reject(err);
            if (socket) resolve(socket);
          },
          /* useTLS */
          false
        ).catch((err) => reject(err));
      }
    });
  }
  async function createTLSSocket(options) {
    return new Promise((resolve, reject) => {
      (0, _debug2.assert)(options.host, "host is required");
      if (net2.isIP(options.host)) {
        const socket = tls.connect(options);
        socket.on("secureConnect", () => resolve(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync(options, (err, socket) => {
          if (err) reject(err);
          if (socket) {
            socket.on("secureConnect", () => resolve(socket));
            socket.on("error", (error) => reject(error));
          }
        }, true).catch((err) => reject(err));
      }
    });
  }
  async function createConnectionAsync(options, oncreate, useTLS) {
    const lookup = options.__testHookLookup || lookupAddresses;
    const hostname = clientRequestArgsToHostName(options);
    const addresses = await lookup(hostname);
    const dnsLookupAt = (0, _time2.monotonicTime)();
    const sockets = /* @__PURE__ */ new Set();
    let firstError;
    let errorCount = 0;
    const handleError = (socket, err) => {
      var _firstError;
      if (!sockets.delete(socket)) return;
      ++errorCount;
      (_firstError = firstError) !== null && _firstError !== void 0 ? _firstError : firstError = err;
      if (errorCount === addresses.length) oncreate === null || oncreate === void 0 || oncreate(firstError);
    };
    const connected = new _manualPromise2.ManualPromise();
    for (const {
      address
    } of addresses) {
      const socket = useTLS ? tls.connect({
        ...options,
        port: options.port,
        host: address,
        servername: hostname
      }) : net2.createConnection({
        ...options,
        port: options.port,
        host: address
      });
      socket[kDNSLookupAt] = dnsLookupAt;
      socket.on("connect", () => {
        socket[kTCPConnectionAt] = (0, _time2.monotonicTime)();
        connected.resolve();
        oncreate === null || oncreate === void 0 || oncreate(null, socket);
        sockets.delete(socket);
        for (const s of sockets) s.destroy();
        sockets.clear();
      });
      socket.on("timeout", () => {
        socket.destroy();
        handleError(socket, new Error("Connection timeout"));
      });
      socket.on("error", (e) => handleError(socket, e));
      sockets.add(socket);
      await Promise.race([connected, new Promise((f) => setTimeout(f, connectionAttemptDelayMs))]);
      if (connected.isDone()) break;
    }
  }
  async function lookupAddresses(hostname) {
    const addresses = await dns.promises.lookup(hostname, {
      all: true,
      family: 0,
      verbatim: true
    });
    let firstFamily = addresses.filter(({
      family
    }) => family === 6);
    let secondFamily = addresses.filter(({
      family
    }) => family === 4);
    if (firstFamily.length && firstFamily[0] !== addresses[0]) {
      const tmp = firstFamily;
      firstFamily = secondFamily;
      secondFamily = tmp;
    }
    const result2 = [];
    for (let i = 0; i < Math.max(firstFamily.length, secondFamily.length); i++) {
      if (firstFamily[i]) result2.push(firstFamily[i]);
      if (secondFamily[i]) result2.push(secondFamily[i]);
    }
    return result2;
  }
  function clientRequestArgsToHostName(options) {
    if (options.hostname) return options.hostname;
    if (options.host) return options.host;
    throw new Error("Either options.hostname or options.host must be provided");
  }
  function timingForSocket(socket) {
    return {
      dnsLookupAt: socket[kDNSLookupAt],
      tcpConnectionAt: socket[kTCPConnectionAt]
    };
  }
  return happyEyeballs;
}
var hasRequiredNetwork$2;
function requireNetwork$2() {
  if (hasRequiredNetwork$2) return network$2;
  hasRequiredNetwork$2 = 1;
  Object.defineProperty(network$2, "__esModule", {
    value: true
  });
  network$2.NET_DEFAULT_TIMEOUT = void 0;
  network$2.createHttp2Server = createHttp2Server;
  network$2.createHttpServer = createHttpServer;
  network$2.createHttpsServer = createHttpsServer;
  network$2.fetchData = fetchData;
  network$2.httpRequest = httpRequest;
  network$2.isURLAvailable = isURLAvailable;
  var _http = _interopRequireDefault2(require$$20);
  var _https = _interopRequireDefault2(require$$1$2);
  var _http2 = _interopRequireDefault2(require$$2$3);
  var _utilsBundle2 = utilsBundle;
  var _url2 = _interopRequireDefault2(require$$6);
  var _happyEyeballs2 = requireHappyEyeballs();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const NET_DEFAULT_TIMEOUT = network$2.NET_DEFAULT_TIMEOUT = 3e4;
  function httpRequest(params, onResponse, onError) {
    var _params$timeout;
    const parsedUrl = _url2.default.parse(params.url);
    let options = {
      ...parsedUrl,
      agent: parsedUrl.protocol === "https:" ? _happyEyeballs2.httpsHappyEyeballsAgent : _happyEyeballs2.httpHappyEyeballsAgent,
      method: params.method || "GET",
      headers: params.headers
    };
    if (params.rejectUnauthorized !== void 0) options.rejectUnauthorized = params.rejectUnauthorized;
    const timeout = (_params$timeout = params.timeout) !== null && _params$timeout !== void 0 ? _params$timeout : NET_DEFAULT_TIMEOUT;
    const proxyURL = (0, _utilsBundle2.getProxyForUrl)(params.url);
    if (proxyURL) {
      const parsedProxyURL = _url2.default.parse(proxyURL);
      if (params.url.startsWith("http:")) {
        options = {
          path: parsedUrl.href,
          host: parsedProxyURL.hostname,
          port: parsedProxyURL.port,
          headers: options.headers,
          method: options.method
        };
      } else {
        parsedProxyURL.secureProxy = parsedProxyURL.protocol === "https:";
        options.agent = new _utilsBundle2.HttpsProxyAgent(parsedProxyURL);
        options.rejectUnauthorized = false;
      }
    }
    const requestCallback = (res) => {
      const statusCode = res.statusCode || 0;
      if (statusCode >= 300 && statusCode < 400 && res.headers.location) httpRequest({
        ...params,
        url: new URL(res.headers.location, params.url).toString()
      }, onResponse, onError);
      else onResponse(res);
    };
    const request2 = options.protocol === "https:" ? _https.default.request(options, requestCallback) : _http.default.request(options, requestCallback);
    request2.on("error", onError);
    if (timeout !== void 0) {
      const rejectOnTimeout = () => {
        onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
        request2.abort();
      };
      if (timeout <= 0) {
        rejectOnTimeout();
        return;
      }
      request2.setTimeout(timeout, rejectOnTimeout);
    }
    request2.end(params.data);
  }
  function fetchData(params, onError) {
    return new Promise((resolve, reject) => {
      httpRequest(params, async (response) => {
        if (response.statusCode !== 200) {
          const error = onError ? await onError(params, response) : new Error(`fetch failed: server returned code ${response.statusCode}. URL: ${params.url}`);
          reject(error);
          return;
        }
        let body = "";
        response.on("data", (chunk) => body += chunk);
        response.on("error", (error) => reject(error));
        response.on("end", () => resolve(body));
      }, reject);
    });
  }
  function createHttpServer(...args) {
    const server2 = _http.default.createServer(...args);
    decorateServer(server2);
    return server2;
  }
  function createHttpsServer(...args) {
    const server2 = _https.default.createServer(...args);
    decorateServer(server2);
    return server2;
  }
  function createHttp2Server(...args) {
    const server2 = _http2.default.createSecureServer(...args);
    decorateServer(server2);
    return server2;
  }
  async function isURLAvailable(url, ignoreHTTPSErrors, onLog, onStdErr) {
    let statusCode = await httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr);
    if (statusCode === 404 && url.pathname === "/") {
      const indexUrl = new URL(url);
      indexUrl.pathname = "/index.html";
      statusCode = await httpStatusCode(indexUrl, ignoreHTTPSErrors, onLog, onStdErr);
    }
    return statusCode >= 200 && statusCode < 404;
  }
  async function httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr) {
    return new Promise((resolve) => {
      onLog === null || onLog === void 0 || onLog(`HTTP GET: ${url}`);
      httpRequest({
        url: url.toString(),
        headers: {
          Accept: "*/*"
        },
        rejectUnauthorized: !ignoreHTTPSErrors
      }, (res) => {
        var _res$statusCode;
        res.resume();
        const statusCode = (_res$statusCode = res.statusCode) !== null && _res$statusCode !== void 0 ? _res$statusCode : 0;
        onLog === null || onLog === void 0 || onLog(`HTTP Status: ${statusCode}`);
        resolve(statusCode);
      }, (error) => {
        if (error.code === "DEPTH_ZERO_SELF_SIGNED_CERT") onStdErr === null || onStdErr === void 0 || onStdErr(`[WebServer] Self-signed certificate detected. Try adding ignoreHTTPSErrors: true to config.webServer.`);
        onLog === null || onLog === void 0 || onLog(`Error while checking if ${url} is available: ${error.message}`);
        resolve(0);
      });
    });
  }
  function decorateServer(server2) {
    const sockets = /* @__PURE__ */ new Set();
    server2.on("connection", (socket) => {
      sockets.add(socket);
      socket.once("close", () => sockets.delete(socket));
    });
    const close = server2.close;
    server2.close = (callback) => {
      for (const socket of sockets) socket.destroy();
      sockets.clear();
      return close.call(server2, callback);
    };
  }
  return network$2;
}
var dependencies = {};
var nativeDeps = {};
Object.defineProperty(nativeDeps, "__esModule", {
  value: true
});
nativeDeps.deps = void 0;
const deps = nativeDeps.deps = {
  "ubuntu20.04-x64": {
    tools: ["xvfb", "fonts-noto-color-emoji", "ttf-unifont", "libfontconfig", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "ttf-ubuntu-font-family"],
    chromium: ["fonts-liberation", "libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libegl1", "libgbm1", "libglib2.0-0", "libgtk-3-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libx11-xcb1", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxrandr2", "libxshmfence1"],
    firefox: ["ffmpeg", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpangoft2-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrender1", "libxt6", "libxtst6"],
    webkit: ["libenchant-2-2", "libflite1", "libx264-155", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libegl1", "libenchant1c2a", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libgl1", "libgles2", "libglib2.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu66", "libjpeg-turbo8", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libsecret-1-0", "libvpx6", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
    lib2package: {
      "libflite.so.1": "libflite1",
      "libflite_usenglish.so.1": "libflite1",
      "libflite_cmu_grapheme_lang.so.1": "libflite1",
      "libflite_cmu_grapheme_lex.so.1": "libflite1",
      "libflite_cmu_indic_lang.so.1": "libflite1",
      "libflite_cmu_indic_lex.so.1": "libflite1",
      "libflite_cmulex.so.1": "libflite1",
      "libflite_cmu_time_awb.so.1": "libflite1",
      "libflite_cmu_us_awb.so.1": "libflite1",
      "libflite_cmu_us_kal16.so.1": "libflite1",
      "libflite_cmu_us_kal.so.1": "libflite1",
      "libflite_cmu_us_rms.so.1": "libflite1",
      "libflite_cmu_us_slt.so.1": "libflite1",
      "libx264.so": "libx264-155",
      "libasound.so.2": "libasound2",
      "libatk-1.0.so.0": "libatk1.0-0",
      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
      "libatspi.so.0": "libatspi2.0-0",
      "libcairo-gobject.so.2": "libcairo-gobject2",
      "libcairo.so.2": "libcairo2",
      "libcups.so.2": "libcups2",
      "libdbus-1.so.3": "libdbus-1-3",
      "libdbus-glib-1.so.2": "libdbus-glib-1-2",
      "libdrm.so.2": "libdrm2",
      "libEGL.so.1": "libegl1",
      "libenchant.so.1": "libenchant1c2a",
      "libevdev.so.2": "libevdev2",
      "libepoxy.so.0": "libepoxy0",
      "libfontconfig.so.1": "libfontconfig1",
      "libfreetype.so.6": "libfreetype6",
      "libgbm.so.1": "libgbm1",
      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf2.0-0",
      "libgdk-3.so.0": "libgtk-3-0",
      "libgdk-x11-2.0.so.0": "libgtk2.0-0",
      "libgio-2.0.so.0": "libglib2.0-0",
      "libGL.so.1": "libgl1",
      "libGLESv2.so.2": "libgles2",
      "libglib-2.0.so.0": "libglib2.0-0",
      "libgmodule-2.0.so.0": "libglib2.0-0",
      "libgobject-2.0.so.0": "libglib2.0-0",
      "libgthread-2.0.so.0": "libglib2.0-0",
      "libgtk-3.so.0": "libgtk-3-0",
      "libgtk-x11-2.0.so.0": "libgtk2.0-0",
      "libgudev-1.0.so.0": "libgudev-1.0-0",
      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
      "libharfbuzz.so.0": "libharfbuzz0b",
      "libhyphen.so.0": "libhyphen0",
      "libicui18n.so.66": "libicu66",
      "libicuuc.so.66": "libicu66",
      "libjpeg.so.8": "libjpeg-turbo8",
      "libnotify.so.4": "libnotify4",
      "libnspr4.so": "libnspr4",
      "libnss3.so": "libnss3",
      "libnssutil3.so": "libnss3",
      "libOpenGL.so.0": "libopengl0",
      "libopenjp2.so.7": "libopenjp2-7",
      "libopus.so.0": "libopus0",
      "libpango-1.0.so.0": "libpango-1.0-0",
      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
      "libpangoft2-1.0.so.0": "libpangoft2-1.0-0",
      "libpng16.so.16": "libpng16-16",
      "libsecret-1.so.0": "libsecret-1-0",
      "libsmime3.so": "libnss3",
      "libvpx.so.6": "libvpx6",
      "libwayland-client.so.0": "libwayland-client0",
      "libwayland-egl.so.1": "libwayland-egl1",
      "libwayland-server.so.0": "libwayland-server0",
      "libwebp.so.6": "libwebp6",
      "libwebpdemux.so.2": "libwebpdemux2",
      "libwoff2dec.so.1.0.2": "libwoff1",
      "libX11-xcb.so.1": "libx11-xcb1",
      "libX11.so.6": "libx11-6",
      "libxcb-dri3.so.0": "libxcb-dri3-0",
      "libxcb-shm.so.0": "libxcb-shm0",
      "libxcb.so.1": "libxcb1",
      "libXcomposite.so.1": "libxcomposite1",
      "libXcursor.so.1": "libxcursor1",
      "libXdamage.so.1": "libxdamage1",
      "libXext.so.6": "libxext6",
      "libXfixes.so.3": "libxfixes3",
      "libXi.so.6": "libxi6",
      "libxkbcommon.so.0": "libxkbcommon0",
      "libxml2.so.2": "libxml2",
      "libXrandr.so.2": "libxrandr2",
      "libXrender.so.1": "libxrender1",
      "libxslt.so.1": "libxslt1.1",
      "libXt.so.6": "libxt6",
      "libXtst.so.6": "libxtst6",
      "libxshmfence.so.1": "libxshmfence1",
      "libatomic.so.1": "libatomic1",
      "libenchant-2.so.2": "libenchant-2-2",
      "libevent-2.1.so.7": "libevent-2.1-7"
    }
  },
  "ubuntu22.04-x64": {
    tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
    chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
    firefox: ["ffmpeg", "libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
    webkit: ["libsoup-3.0-0", "libenchant-2-2", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu70", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libepoxy0", "libevdev2", "libffi7", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-163", "libatomic1", "libevent-2.1-7"],
    lib2package: {
      "libsoup-3.0.so.0": "libsoup-3.0-0",
      "libasound.so.2": "libasound2",
      "libatk-1.0.so.0": "libatk1.0-0",
      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
      "libatspi.so.0": "libatspi2.0-0",
      "libcairo-gobject.so.2": "libcairo-gobject2",
      "libcairo.so.2": "libcairo2",
      "libcups.so.2": "libcups2",
      "libdbus-1.so.3": "libdbus-1-3",
      "libdbus-glib-1.so.2": "libdbus-glib-1-2",
      "libdrm.so.2": "libdrm2",
      "libEGL.so.1": "libegl1",
      "libepoxy.so.0": "libepoxy0",
      "libevdev.so.2": "libevdev2",
      "libffi.so.7": "libffi7",
      "libfontconfig.so.1": "libfontconfig1",
      "libfreetype.so.6": "libfreetype6",
      "libgbm.so.1": "libgbm1",
      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
      "libgdk-3.so.0": "libgtk-3-0",
      "libgio-2.0.so.0": "libglib2.0-0",
      "libGLESv2.so.2": "libgles2",
      "libglib-2.0.so.0": "libglib2.0-0",
      "libGLX.so.0": "libglx0",
      "libgmodule-2.0.so.0": "libglib2.0-0",
      "libgobject-2.0.so.0": "libglib2.0-0",
      "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstbase-1.0.so.0": "libgstreamer1.0-0",
      "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
      "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
      "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgtk-3.so.0": "libgtk-3-0",
      "libgudev-1.0.so.0": "libgudev-1.0-0",
      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
      "libharfbuzz.so.0": "libharfbuzz0b",
      "libhyphen.so.0": "libhyphen0",
      "libjpeg.so.8": "libjpeg-turbo8",
      "liblcms2.so.2": "liblcms2-2",
      "libmanette-0.2.so.0": "libmanette-0.2-0",
      "libnotify.so.4": "libnotify4",
      "libnspr4.so": "libnspr4",
      "libnss3.so": "libnss3",
      "libnssutil3.so": "libnss3",
      "libOpenGL.so.0": "libopengl0",
      "libopenjp2.so.7": "libopenjp2-7",
      "libopus.so.0": "libopus0",
      "libpango-1.0.so.0": "libpango-1.0-0",
      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
      "libpng16.so.16": "libpng16-16",
      "libproxy.so.1": "libproxy1v5",
      "libsecret-1.so.0": "libsecret-1-0",
      "libsmime3.so": "libnss3",
      "libwayland-client.so.0": "libwayland-client0",
      "libwayland-egl.so.1": "libwayland-egl1",
      "libwayland-server.so.0": "libwayland-server0",
      "libwebpdemux.so.2": "libwebpdemux2",
      "libwoff2dec.so.1.0.2": "libwoff1",
      "libX11-xcb.so.1": "libx11-xcb1",
      "libX11.so.6": "libx11-6",
      "libxcb-shm.so.0": "libxcb-shm0",
      "libxcb.so.1": "libxcb1",
      "libXcomposite.so.1": "libxcomposite1",
      "libXcursor.so.1": "libxcursor1",
      "libXdamage.so.1": "libxdamage1",
      "libXext.so.6": "libxext6",
      "libXfixes.so.3": "libxfixes3",
      "libXi.so.6": "libxi6",
      "libxkbcommon.so.0": "libxkbcommon0",
      "libxml2.so.2": "libxml2",
      "libXrandr.so.2": "libxrandr2",
      "libXrender.so.1": "libxrender1",
      "libxslt.so.1": "libxslt1.1",
      "libXtst.so.6": "libxtst6",
      "libicui18n.so.60": "libicu70",
      "libicuuc.so.66": "libicu70",
      "libicui18n.so.66": "libicu70",
      "libwebp.so.6": "libwebp6",
      "libenchant-2.so.2": "libenchant-2-2",
      "libx264.so": "libx264-163",
      "libvpx.so.7": "libvpx7",
      "libatomic.so.1": "libatomic1",
      "libevent-2.1.so.7": "libevent-2.1-7"
    }
  },
  "ubuntu24.04-x64": {
    tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
    chromium: ["libasound2t64", "libatk-bridge2.0-0t64", "libatk1.0-0t64", "libatspi2.0-0t64", "libcairo2", "libcups2t64", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0t64", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
    firefox: ["libasound2t64", "libatk1.0-0t64", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0t64", "libgtk-3-0t64", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1"],
    webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu74", "libatomic1", "libatk-bridge2.0-0t64", "libatk1.0-0t64", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdrm2", "libenchant-2-2", "libepoxy0", "libevent-2.1-7t64", "libflite1", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0t64", "libgstreamer-gl1.0-0", "libgstreamer-plugins-bad1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0t64", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu74", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libopus0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpng16-16t64", "libsecret-1-0", "libvpx9", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-164"],
    lib2package: {
      "libasound.so.2": "libasound2t64",
      "libatk-1.0.so.0": "libatk1.0-0t64",
      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0t64",
      "libatomic.so.1": "libatomic1",
      "libatspi.so.0": "libatspi2.0-0t64",
      "libcairo-gobject.so.2": "libcairo-gobject2",
      "libcairo.so.2": "libcairo2",
      "libcups.so.2": "libcups2t64",
      "libdbus-1.so.3": "libdbus-1-3",
      "libdrm.so.2": "libdrm2",
      "libenchant-2.so.2": "libenchant-2-2",
      "libepoxy.so.0": "libepoxy0",
      "libevent-2.1.so.7": "libevent-2.1-7t64",
      "libflite_cmu_grapheme_lang.so.1": "libflite1",
      "libflite_cmu_grapheme_lex.so.1": "libflite1",
      "libflite_cmu_indic_lang.so.1": "libflite1",
      "libflite_cmu_indic_lex.so.1": "libflite1",
      "libflite_cmu_time_awb.so.1": "libflite1",
      "libflite_cmu_us_awb.so.1": "libflite1",
      "libflite_cmu_us_kal.so.1": "libflite1",
      "libflite_cmu_us_kal16.so.1": "libflite1",
      "libflite_cmu_us_rms.so.1": "libflite1",
      "libflite_cmu_us_slt.so.1": "libflite1",
      "libflite_cmulex.so.1": "libflite1",
      "libflite_usenglish.so.1": "libflite1",
      "libflite.so.1": "libflite1",
      "libfontconfig.so.1": "libfontconfig1",
      "libfreetype.so.6": "libfreetype6",
      "libgbm.so.1": "libgbm1",
      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
      "libgdk-3.so.0": "libgtk-3-0t64",
      "libgio-2.0.so.0": "libglib2.0-0t64",
      "libGLESv2.so.2": "libgles2",
      "libglib-2.0.so.0": "libglib2.0-0t64",
      "libgmodule-2.0.so.0": "libglib2.0-0t64",
      "libgobject-2.0.so.0": "libglib2.0-0t64",
      "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstbase-1.0.so.0": "libgstreamer1.0-0",
      "libgstcodecparsers-1.0.so.0": "libgstreamer-plugins-bad1.0-0",
      "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
      "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
      "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgtk-3.so.0": "libgtk-3-0t64",
      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
      "libharfbuzz.so.0": "libharfbuzz0b",
      "libhyphen.so.0": "libhyphen0",
      "libicudata.so.74": "libicu74",
      "libicui18n.so.74": "libicu74",
      "libicuuc.so.74": "libicu74",
      "libjpeg.so.8": "libjpeg-turbo8",
      "liblcms2.so.2": "liblcms2-2",
      "libmanette-0.2.so.0": "libmanette-0.2-0",
      "libnspr4.so": "libnspr4",
      "libnss3.so": "libnss3",
      "libnssutil3.so": "libnss3",
      "libopus.so.0": "libopus0",
      "libpango-1.0.so.0": "libpango-1.0-0",
      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
      "libpng16.so.16": "libpng16-16t64",
      "libsecret-1.so.0": "libsecret-1-0",
      "libsmime3.so": "libnss3",
      "libsoup-3.0.so.0": "libsoup-3.0-0",
      "libvpx.so.9": "libvpx9",
      "libwayland-client.so.0": "libwayland-client0",
      "libwayland-egl.so.1": "libwayland-egl1",
      "libwayland-server.so.0": "libwayland-server0",
      "libwebp.so.7": "libwebp7",
      "libwebpdemux.so.2": "libwebpdemux2",
      "libwoff2dec.so.1.0.2": "libwoff1",
      "libX11-xcb.so.1": "libx11-xcb1",
      "libX11.so.6": "libx11-6",
      "libxcb-shm.so.0": "libxcb-shm0",
      "libxcb.so.1": "libxcb1",
      "libXcomposite.so.1": "libxcomposite1",
      "libXcursor.so.1": "libxcursor1",
      "libXdamage.so.1": "libxdamage1",
      "libXext.so.6": "libxext6",
      "libXfixes.so.3": "libxfixes3",
      "libXi.so.6": "libxi6",
      "libxkbcommon.so.0": "libxkbcommon0",
      "libxml2.so.2": "libxml2",
      "libXrandr.so.2": "libxrandr2",
      "libXrender.so.1": "libxrender1",
      "libxslt.so.1": "libxslt1.1",
      "libx264.so": "libx264-164"
    }
  },
  "debian11-x64": {
    tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
    chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
    firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
    webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu67", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
    lib2package: {
      "libasound.so.2": "libasound2",
      "libatk-1.0.so.0": "libatk1.0-0",
      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
      "libatspi.so.0": "libatspi2.0-0",
      "libcairo-gobject.so.2": "libcairo-gobject2",
      "libcairo.so.2": "libcairo2",
      "libcups.so.2": "libcups2",
      "libdbus-1.so.3": "libdbus-1-3",
      "libdbus-glib-1.so.2": "libdbus-glib-1-2",
      "libdrm.so.2": "libdrm2",
      "libEGL.so.1": "libegl1",
      "libenchant-2.so.2": "libenchant-2-2",
      "libepoxy.so.0": "libepoxy0",
      "libevdev.so.2": "libevdev2",
      "libfontconfig.so.1": "libfontconfig1",
      "libfreetype.so.6": "libfreetype6",
      "libgbm.so.1": "libgbm1",
      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
      "libgdk-3.so.0": "libgtk-3-0",
      "libgio-2.0.so.0": "libglib2.0-0",
      "libGLESv2.so.2": "libgles2",
      "libglib-2.0.so.0": "libglib2.0-0",
      "libGLX.so.0": "libglx0",
      "libgmodule-2.0.so.0": "libglib2.0-0",
      "libgobject-2.0.so.0": "libglib2.0-0",
      "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstbase-1.0.so.0": "libgstreamer1.0-0",
      "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
      "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
      "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
      "libgtk-3.so.0": "libgtk-3-0",
      "libgudev-1.0.so.0": "libgudev-1.0-0",
      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
      "libharfbuzz.so.0": "libharfbuzz0b",
      "libhyphen.so.0": "libhyphen0",
      "libicui18n.so.67": "libicu67",
      "libicuuc.so.67": "libicu67",
      "libjpeg.so.62": "libjpeg62-turbo",
      "liblcms2.so.2": "liblcms2-2",
      "libmanette-0.2.so.0": "libmanette-0.2-0",
      "libnotify.so.4": "libnotify4",
      "libnspr4.so": "libnspr4",
      "libnss3.so": "libnss3",
      "libnssutil3.so": "libnss3",
      "libOpenGL.so.0": "libopengl0",
      "libopenjp2.so.7": "libopenjp2-7",
      "libopus.so.0": "libopus0",
      "libpango-1.0.so.0": "libpango-1.0-0",
      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
      "libpng16.so.16": "libpng16-16",
      "libproxy.so.1": "libproxy1v5",
      "libsecret-1.so.0": "libsecret-1-0",
      "libsmime3.so": "libnss3",
      "libwayland-client.so.0": "libwayland-client0",
      "libwayland-egl.so.1": "libwayland-egl1",
      "libwayland-server.so.0": "libwayland-server0",
      "libwebp.so.6": "libwebp6",
      "libwebpdemux.so.2": "libwebpdemux2",
      "libwoff2dec.so.1.0.2": "libwoff1",
      "libX11-xcb.so.1": "libx11-xcb1",
      "libX11.so.6": "libx11-6",
      "libxcb-shm.so.0": "libxcb-shm0",
      "libxcb.so.1": "libxcb1",
      "libXcomposite.so.1": "libxcomposite1",
      "libXcursor.so.1": "libxcursor1",
      "libXdamage.so.1": "libxdamage1",
      "libXext.so.6": "libxext6",
      "libXfixes.so.3": "libxfixes3",
      "libXi.so.6": "libxi6",
      "libxkbcommon.so.0": "libxkbcommon0",
      "libxml2.so.2": "libxml2",
      "libXrandr.so.2": "libxrandr2",
      "libXrender.so.1": "libxrender1",
      "libxslt.so.1": "libxslt1.1",
      "libXtst.so.6": "libxtst6",
      "libatomic.so.1": "libatomic1",
      "libevent-2.1.so.7": "libevent-2.1-7"
    }
  },
  "debian12-x64": {
    tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
    chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
    firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
    webkit: ["libsoup-3.0-0", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu72", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
    lib2package: {
      "libsoup-3.0.so.0": "libsoup-3.0-0",
      "libasound.so.2": "libasound2",
      "libatk-1.0.so.0": "libatk1.0-0",
      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
      "libatspi.so.0": "libatspi2.0-0",
      "libcairo.so.2": "libcairo2",
      "libcups.so.2": "libcups2",
      "libdbus-1.so.3": "libdbus-1-3",
      "libdrm.so.2": "libdrm2",
      "libgbm.so.1": "libgbm1",
      "libgio-2.0.so.0": "libglib2.0-0",
      "libglib-2.0.so.0": "libglib2.0-0",
      "libgobject-2.0.so.0": "libglib2.0-0",
      "libnspr4.so": "libnspr4",
      "libnss3.so": "libnss3",
      "libnssutil3.so": "libnss3",
      "libpango-1.0.so.0": "libpango-1.0-0",
      "libsmime3.so": "libnss3",
      "libX11.so.6": "libx11-6",
      "libxcb.so.1": "libxcb1",
      "libXcomposite.so.1": "libxcomposite1",
      "libXdamage.so.1": "libxdamage1",
      "libXext.so.6": "libxext6",
      "libXfixes.so.3": "libxfixes3",
      "libxkbcommon.so.0": "libxkbcommon0",
      "libXrandr.so.2": "libxrandr2"
    }
  }
};
deps["ubuntu20.04-arm64"] = {
  tools: [...deps["ubuntu20.04-x64"].tools],
  chromium: [...deps["ubuntu20.04-x64"].chromium],
  firefox: [...deps["ubuntu20.04-x64"].firefox],
  webkit: [...deps["ubuntu20.04-x64"].webkit],
  lib2package: {
    ...deps["ubuntu20.04-x64"].lib2package
  }
};
deps["ubuntu22.04-arm64"] = {
  tools: [...deps["ubuntu22.04-x64"].tools],
  chromium: [...deps["ubuntu22.04-x64"].chromium],
  firefox: [...deps["ubuntu22.04-x64"].firefox],
  webkit: [...deps["ubuntu22.04-x64"].webkit],
  lib2package: {
    ...deps["ubuntu22.04-x64"].lib2package
  }
};
deps["ubuntu24.04-arm64"] = {
  tools: [...deps["ubuntu24.04-x64"].tools],
  chromium: [...deps["ubuntu24.04-x64"].chromium],
  firefox: [...deps["ubuntu24.04-x64"].firefox],
  webkit: [...deps["ubuntu24.04-x64"].webkit],
  lib2package: {
    ...deps["ubuntu24.04-x64"].lib2package
  }
};
deps["debian11-arm64"] = {
  tools: [...deps["debian11-x64"].tools],
  chromium: [...deps["debian11-x64"].chromium],
  firefox: [...deps["debian11-x64"].firefox],
  webkit: [...deps["debian11-x64"].webkit],
  lib2package: {
    ...deps["debian11-x64"].lib2package
  }
};
deps["debian12-arm64"] = {
  tools: [...deps["debian12-x64"].tools],
  chromium: [...deps["debian12-x64"].chromium],
  firefox: [...deps["debian12-x64"].firefox],
  webkit: [...deps["debian12-x64"].webkit],
  lib2package: {
    ...deps["debian12-x64"].lib2package
  }
};
var hasRequiredDependencies;
function requireDependencies() {
  if (hasRequiredDependencies) return dependencies;
  hasRequiredDependencies = 1;
  Object.defineProperty(dependencies, "__esModule", {
    value: true
  });
  dependencies.dockerVersion = dockerVersion;
  dependencies.installDependenciesLinux = installDependenciesLinux;
  dependencies.installDependenciesWindows = installDependenciesWindows;
  dependencies.readDockerVersionSync = readDockerVersionSync;
  dependencies.transformCommandsForRoot = transformCommandsForRoot;
  dependencies.validateDependenciesLinux = validateDependenciesLinux;
  dependencies.validateDependenciesWindows = validateDependenciesWindows;
  dependencies.writeDockerVersion = writeDockerVersion;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var os = _interopRequireWildcard2(require$$0$3);
  var _child_process2 = _interopRequireDefault2(require$$11);
  var utils2 = _interopRequireWildcard2(requireUtils());
  var _spawnAsync = spawnAsync$1;
  var _hostPlatform = hostPlatform$1;
  var _ = requireRegistry();
  var _nativeDeps = nativeDeps;
  var _userAgent2 = userAgent;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const BIN_DIRECTORY = _path2.default.join(__dirname, "..", "..", "..", "bin");
  const languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require$$10.version;
  const dockerVersionFilePath = "/ms-playwright/.docker-info";
  async function writeDockerVersion(dockerImageNameTemplate) {
    await _fs2.default.promises.mkdir(_path2.default.dirname(dockerVersionFilePath), {
      recursive: true
    });
    await _fs2.default.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), "utf8");
    await _fs2.default.promises.chmod(dockerVersionFilePath, 511);
  }
  function dockerVersion(dockerImageNameTemplate) {
    return {
      driverVersion: languageBindingVersion,
      dockerImageName: dockerImageNameTemplate.replace("%version%", languageBindingVersion)
    };
  }
  function readDockerVersionSync() {
    try {
      const data = JSON.parse(_fs2.default.readFileSync(dockerVersionFilePath, "utf8"));
      return {
        ...data,
        dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, "%version%")
      };
    } catch (e) {
      return null;
    }
  }
  const checkExecutable = (filePath) => {
    if (process.platform === "win32") return filePath.endsWith(".exe");
    return _fs2.default.promises.access(filePath, _fs2.default.constants.X_OK).then(() => true).catch(() => false);
  };
  function isSupportedWindowsVersion() {
    if (os.platform() !== "win32" || os.arch() !== "x64") return false;
    const [major2, minor] = os.release().split(".").map((token) => parseInt(token, 10));
    return major2 > 6 || major2 === 6 && minor > 1;
  }
  async function installDependenciesWindows(targets, dryRun) {
    if (targets.has("chromium")) {
      const command = "powershell.exe";
      const args = ["-ExecutionPolicy", "Bypass", "-File", _path2.default.join(BIN_DIRECTORY, "install_media_pack.ps1")];
      if (dryRun) {
        console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
        return;
      }
      const {
        code
      } = await (0, _spawnAsync.spawnAsync)(command, args, {
        cwd: BIN_DIRECTORY,
        stdio: "inherit"
      });
      if (code !== 0) throw new Error("Failed to install windows dependencies!");
    }
  }
  async function installDependenciesLinux(targets, dryRun) {
    const libraries = [];
    const platform = _hostPlatform.hostPlatform;
    if (!_hostPlatform.isOfficiallySupportedPlatform) console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform} as a fallback.`);
    for (const target of targets) {
      const info = _nativeDeps.deps[platform];
      if (!info) {
        console.warn(`Cannot install dependencies for ${platform}!`);
        return;
      }
      libraries.push(...info[target]);
    }
    const uniqueLibraries = Array.from(new Set(libraries));
    if (!dryRun) console.log(`Installing dependencies...`);
    const commands = [];
    commands.push("apt-get update");
    commands.push(["apt-get", "install", "-y", "--no-install-recommends", ...uniqueLibraries].join(" "));
    const {
      command,
      args,
      elevatedPermissions
    } = await transformCommandsForRoot(commands);
    if (dryRun) {
      console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
      return;
    }
    if (elevatedPermissions) console.log("Switching to root user to install dependencies...");
    const child = _child_process2.default.spawn(command, args, {
      stdio: "inherit"
    });
    await new Promise((resolve, reject) => {
      child.on("exit", (code) => code === 0 ? resolve() : reject(new Error(`Installation process exited with code: ${code}`)));
      child.on("error", reject);
    });
  }
  async function validateDependenciesWindows(windowsExeAndDllDirectories) {
    const directoryPaths = windowsExeAndDllDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths) lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const allMissingDeps = await Promise.all(lddPaths.map((lddPath) => missingFileDependenciesWindows(lddPath)));
    const missingDeps = /* @__PURE__ */ new Set();
    for (const deps2 of allMissingDeps) {
      for (const dep of deps2) missingDeps.add(dep);
    }
    if (!missingDeps.size) return;
    let isCrtMissing = false;
    let isMediaFoundationMissing = false;
    for (const dep of missingDeps) {
      if (dep.startsWith("api-ms-win-crt") || dep === "vcruntime140.dll" || dep === "vcruntime140_1.dll" || dep === "msvcp140.dll") isCrtMissing = true;
      else if (dep === "mf.dll" || dep === "mfplat.dll" || dep === "msmpeg2vdec.dll" || dep === "evr.dll" || dep === "avrt.dll") isMediaFoundationMissing = true;
    }
    const details = [];
    if (isCrtMissing) {
      details.push(`Some of the Universal C Runtime files cannot be found on the system. You can fix`, `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`, `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`, ``);
    }
    if (isMediaFoundationMissing) {
      details.push(`Some of the Media Foundation files cannot be found on the system. If you are`, `on Windows Server try fixing this by running the following command in PowerShell`, `as Administrator:`, ``, `    Install-WindowsFeature Server-Media-Foundation`, ``, `For Windows N editions visit:`, `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`, ``);
    }
    details.push(`Full list of missing libraries:`, `    ${[...missingDeps].join("\n    ")}`, ``);
    const message = `Host system is missing dependencies!

${details.join("\n")}`;
    if (isSupportedWindowsVersion()) {
      throw new Error(message);
    } else {
      console.warn(`WARNING: running on unsupported windows version!`);
      console.warn(message);
    }
  }
  async function validateDependenciesLinux(sdkLanguage, linuxLddDirectories, dlOpenLibraries) {
    var _deps$hostPlatform, _process$getuid, _process;
    const directoryPaths = linuxLddDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths) lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const missingDepsPerFile = await Promise.all(lddPaths.map((lddPath) => missingFileDependencies(lddPath, directoryPaths)));
    const missingDeps = /* @__PURE__ */ new Set();
    for (const deps2 of missingDepsPerFile) {
      for (const dep of deps2) missingDeps.add(dep);
    }
    for (const dep of await missingDLOPENLibraries(dlOpenLibraries)) missingDeps.add(dep);
    if (!missingDeps.size) return;
    const allMissingDeps = new Set(missingDeps);
    const missingPackages = /* @__PURE__ */ new Set();
    const libraryToPackageNameMapping = _nativeDeps.deps[_hostPlatform.hostPlatform] ? {
      ...((_deps$hostPlatform = _nativeDeps.deps[_hostPlatform.hostPlatform]) === null || _deps$hostPlatform === void 0 ? void 0 : _deps$hostPlatform.lib2package) || {},
      ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU
    } : {};
    for (const missingDep of missingDeps) {
      const packageName = libraryToPackageNameMapping[missingDep];
      if (packageName) {
        missingPackages.add(packageName);
        missingDeps.delete(missingDep);
      }
    }
    const maybeSudo = (_process$getuid = (_process = process).getuid) !== null && _process$getuid !== void 0 && _process$getuid.call(_process) && os.platform() !== "win32" ? "sudo " : "";
    const dockerInfo = readDockerVersionSync();
    const errorLines = [`Host system is missing dependencies to run browsers.`];
    if (dockerInfo && !dockerInfo.driverVersion.startsWith((0, _userAgent2.getPlaywrightVersion)(
      true
      /* majorMinorOnly */
    ) + ".")) {
      const pwVersion = (0, _userAgent2.getPlaywrightVersion)();
      const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);
      errorLines.push(...[`This is most likely due to Docker image version not matching Playwright version:`, `- Playwright  : ${pwVersion}`, `- Docker image: ${dockerInfo.driverVersion}`, ``, `Either:`, `- (recommended) use Docker image "${requiredDockerImage}"`, `- (alternative 1) run the following command inside Docker to install missing dependencies:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `- (alternative 2) use apt inside Docker:`, ``, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else if (missingPackages.size && !missingDeps.size) {
      errorLines.push(...[`Please install them with the following command:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `Alternatively, use apt:`, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else {
      errorLines.push(...[`Missing libraries:`, ...[...allMissingDeps].map((dep) => "    " + dep)]);
    }
    throw new Error("\n" + utils2.wrapInASCIIBox(errorLines.join("\n"), 1));
  }
  function isSharedLib(basename) {
    switch (os.platform()) {
      case "linux":
        return basename.endsWith(".so") || basename.includes(".so.");
      case "win32":
        return basename.endsWith(".dll");
      default:
        return false;
    }
  }
  async function executablesOrSharedLibraries(directoryPath) {
    if (!_fs2.default.existsSync(directoryPath)) return [];
    const allPaths = (await _fs2.default.promises.readdir(directoryPath)).map((file) => _path2.default.resolve(directoryPath, file));
    const allStats = await Promise.all(allPaths.map((aPath) => _fs2.default.promises.stat(aPath)));
    const filePaths = allPaths.filter((aPath, index) => allStats[index].isFile());
    const executablersOrLibraries = (await Promise.all(filePaths.map(async (filePath) => {
      const basename = _path2.default.basename(filePath).toLowerCase();
      if (isSharedLib(basename)) return filePath;
      if (await checkExecutable(filePath)) return filePath;
      return false;
    }))).filter(Boolean);
    return executablersOrLibraries;
  }
  async function missingFileDependenciesWindows(filePath) {
    const executable = _path2.default.join(__dirname, "..", "..", "..", "bin", "PrintDeps.exe");
    const dirname = _path2.default.dirname(filePath);
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)(executable, [filePath], {
      cwd: dirname,
      env: {
        ...process.env,
        LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname}` : dirname
      }
    });
    if (code !== 0) return [];
    const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim().toLowerCase());
    return missingDeps;
  }
  async function missingFileDependencies(filePath, extraLDPaths) {
    const dirname = _path2.default.dirname(filePath);
    let LD_LIBRARY_PATH = extraLDPaths.join(":");
    if (process.env.LD_LIBRARY_PATH) LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)("ldd", [filePath], {
      cwd: dirname,
      env: {
        ...process.env,
        LD_LIBRARY_PATH
      }
    });
    if (code !== 0) return [];
    const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim());
    return missingDeps;
  }
  async function missingDLOPENLibraries(libraries) {
    if (!libraries.length) return [];
    const {
      stdout,
      code,
      error
    } = await (0, _spawnAsync.spawnAsync)("/sbin/ldconfig", ["-p"], {});
    if (code !== 0 || error) return [];
    const isLibraryAvailable = (library) => stdout.toLowerCase().includes(library.toLowerCase());
    return libraries.filter((library) => !isLibraryAvailable(library));
  }
  const MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU = {
    // libgstlibav.so (the only actual library provided by gstreamer1.0-libav) is not
    // in the ldconfig cache, so we detect the actual library required for playing h.264
    // and if it's missing recommend installing missing gstreamer lib.
    // gstreamer1.0-libav -> libavcodec57 -> libx264-152
    "libx264.so": "gstreamer1.0-libav"
  };
  function quoteProcessArgs(args) {
    return args.map((arg) => {
      if (arg.includes(" ")) return `"${arg}"`;
      return arg;
    });
  }
  async function transformCommandsForRoot(commands) {
    var _process$getuid2, _process2;
    const isRoot = ((_process$getuid2 = (_process2 = process).getuid) === null || _process$getuid2 === void 0 ? void 0 : _process$getuid2.call(_process2)) === 0;
    if (isRoot) return {
      command: "sh",
      args: ["-c", `${commands.join("&& ")}`],
      elevatedPermissions: false
    };
    const sudoExists = await (0, _spawnAsync.spawnAsync)("which", ["sudo"]);
    if (sudoExists.code === 0) return {
      command: "sudo",
      args: ["--", "sh", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
    return {
      command: "su",
      args: ["root", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
  }
  return dependencies;
}
var browserFetcher = {};
var hasRequiredBrowserFetcher;
function requireBrowserFetcher() {
  if (hasRequiredBrowserFetcher) return browserFetcher;
  hasRequiredBrowserFetcher = 1;
  Object.defineProperty(browserFetcher, "__esModule", {
    value: true
  });
  browserFetcher.downloadBrowserWithProgressBar = downloadBrowserWithProgressBar;
  browserFetcher.logPolitely = logPolitely;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _child_process2 = _interopRequireDefault2(require$$11);
  var _fileUtils2 = requireFileUtils();
  var _debugLogger2 = debugLogger;
  var _manualPromise2 = requireManualPromise();
  var _utilsBundle2 = utilsBundle;
  var _ = requireRegistry();
  var _userAgent2 = userAgent;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  async function downloadBrowserWithProgressBar(title, browserDirectory, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout) {
    if (await (0, _fileUtils2.existsAsync)((0, _.browserDirectoryToMarkerFilePath)(browserDirectory))) {
      _debugLogger2.debugLogger.log("install", `${title} is already downloaded.`);
      return false;
    }
    const zipPath = _path2.default.join(_os2.default.tmpdir(), downloadFileName);
    try {
      const retryCount = 3;
      for (let attempt = 1; attempt <= retryCount; ++attempt) {
        _debugLogger2.debugLogger.log("install", `downloading ${title} - attempt #${attempt}`);
        const url = downloadURLs[(attempt - 1) % downloadURLs.length];
        logPolitely(`Downloading ${title}` + _utilsBundle2.colors.dim(` from ${url}`));
        const {
          error
        } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadConnectionTimeout);
        if (!error) {
          _debugLogger2.debugLogger.log("install", `SUCCESS installing ${title}`);
          break;
        }
        if (await (0, _fileUtils2.existsAsync)(zipPath)) await _fs2.default.promises.unlink(zipPath);
        if (await (0, _fileUtils2.existsAsync)(browserDirectory)) await _fs2.default.promises.rmdir(browserDirectory, {
          recursive: true
        });
        const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || "";
        _debugLogger2.debugLogger.log("install", `attempt #${attempt} - ERROR: ${errorMessage}`);
        if (attempt >= retryCount) throw error;
      }
    } catch (e) {
      _debugLogger2.debugLogger.log("install", `FAILED installation ${title} with error: ${e}`);
      process.exitCode = 1;
      throw e;
    } finally {
      if (await (0, _fileUtils2.existsAsync)(zipPath)) await _fs2.default.promises.unlink(zipPath);
    }
    logPolitely(`${title} downloaded to ${browserDirectory}`);
    return true;
  }
  function downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, connectionTimeout) {
    const cp = _child_process2.default.fork(_path2.default.join(__dirname, "oopDownloadBrowserMain.js"));
    const promise = new _manualPromise2.ManualPromise();
    const progress2 = getDownloadProgress();
    cp.on("message", (message) => {
      if ((message === null || message === void 0 ? void 0 : message.method) === "log") _debugLogger2.debugLogger.log("install", message.params.message);
      if ((message === null || message === void 0 ? void 0 : message.method) === "progress") progress2(message.params.done, message.params.total);
    });
    cp.on("exit", (code) => {
      if (code !== 0) {
        promise.resolve({
          error: new Error(`Download failure, code=${code}`)
        });
        return;
      }
      if (!_fs2.default.existsSync((0, _.browserDirectoryToMarkerFilePath)(browserDirectory))) promise.resolve({
        error: new Error(`Download failure, ${(0, _.browserDirectoryToMarkerFilePath)(browserDirectory)} does not exist`)
      });
      else promise.resolve({
        error: null
      });
    });
    cp.on("error", (error) => {
      promise.resolve({
        error
      });
    });
    _debugLogger2.debugLogger.log("install", `running download:`);
    _debugLogger2.debugLogger.log("install", `-- from url: ${url}`);
    _debugLogger2.debugLogger.log("install", `-- to location: ${zipPath}`);
    const downloadParams = {
      title,
      browserDirectory,
      url,
      zipPath,
      executablePath,
      connectionTimeout,
      userAgent: (0, _userAgent2.getUserAgent)()
    };
    cp.send({
      method: "download",
      params: downloadParams
    });
    return promise;
  }
  function logPolitely(toBeLogged) {
    const logLevel = process.env.npm_config_loglevel;
    const logLevelDisplay = ["silent", "error", "warn"].indexOf(logLevel || "") > -1;
    if (!logLevelDisplay) console.log(toBeLogged);
  }
  function getDownloadProgress() {
    if (process.stdout.isTTY) return getAnimatedDownloadProgress();
    return getBasicDownloadProgress();
  }
  function getAnimatedDownloadProgress() {
    let progressBar;
    let lastDownloadedBytes = 0;
    return (downloadedBytes, totalBytes) => {
      if (!progressBar) {
        progressBar = new _utilsBundle2.progress(`${toMegabytes(totalBytes)} [:bar] :percent :etas`, {
          complete: "=",
          incomplete: " ",
          width: 20,
          total: totalBytes
        });
      }
      const delta = downloadedBytes - lastDownloadedBytes;
      lastDownloadedBytes = downloadedBytes;
      progressBar.tick(delta);
    };
  }
  function getBasicDownloadProgress() {
    const totalRows = 10;
    const stepWidth = 8;
    let lastRow = -1;
    return (downloadedBytes, totalBytes) => {
      const percentage = downloadedBytes / totalBytes;
      const row = Math.floor(totalRows * percentage);
      if (row > lastRow) {
        lastRow = row;
        const percentageString = String(percentage * 100 | 0).padStart(3);
        console.log(`|${"■".repeat(row * stepWidth)}${" ".repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);
      }
    };
  }
  function toMegabytes(bytes) {
    const mb = bytes / 1024 / 1024;
    return `${Math.round(mb * 10) / 10} MiB`;
  }
  return browserFetcher;
}
const comment = "Do not edit this file, use utils/roll_browser.js";
const browsers = [
  {
    name: "chromium",
    revision: "1140",
    installByDefault: true,
    browserVersion: "130.0.6723.31"
  },
  {
    name: "chromium-tip-of-tree",
    revision: "1264",
    installByDefault: false,
    browserVersion: "131.0.6740.0"
  },
  {
    name: "firefox",
    revision: "1465",
    installByDefault: true,
    browserVersion: "131.0"
  },
  {
    name: "firefox-beta",
    revision: "1464",
    installByDefault: false,
    browserVersion: "131.0b2"
  },
  {
    name: "webkit",
    revision: "2083",
    installByDefault: true,
    revisionOverrides: {
      "mac10.14": "1446",
      "mac10.15": "1616",
      mac11: "1816",
      "mac11-arm64": "1816",
      mac12: "2009",
      "mac12-arm64": "2009"
    },
    browserVersion: "18.0"
  },
  {
    name: "ffmpeg",
    revision: "1010",
    installByDefault: true,
    revisionOverrides: {
      mac12: "1010",
      "mac12-arm64": "1010"
    }
  },
  {
    name: "android",
    revision: "1001",
    installByDefault: false
  }
];
const require$$14 = {
  comment,
  browsers
};
var hasRequiredRegistry;
function requireRegistry() {
  if (hasRequiredRegistry) return registry;
  hasRequiredRegistry = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.Registry = void 0;
    exports2.browserDirectoryToMarkerFilePath = browserDirectoryToMarkerFilePath;
    exports2.buildPlaywrightCLICommand = buildPlaywrightCLICommand;
    exports2.findChromiumChannel = findChromiumChannel;
    exports2.installBrowsersForNpmInstall = installBrowsersForNpmInstall;
    exports2.installDefaultBrowsersForNpmInstall = installDefaultBrowsersForNpmInstall;
    exports2.registryDirectory = exports2.registry = void 0;
    Object.defineProperty(exports2, "writeDockerVersion", {
      enumerable: true,
      get: function() {
        return _dependencies.writeDockerVersion;
      }
    });
    var os = _interopRequireWildcard2(require$$0$3);
    var _path2 = _interopRequireDefault2(require$$1);
    var util = _interopRequireWildcard2(require$$1$1);
    var fs2 = _interopRequireWildcard2(require$$0$2);
    var _utilsBundle2 = utilsBundle;
    var _network2 = requireNetwork$2();
    var _userAgent2 = userAgent;
    var _utils2 = requireUtils();
    var _fileUtils2 = requireFileUtils();
    var _hostPlatform = hostPlatform$1;
    var _spawnAsync = spawnAsync$1;
    var _dependencies = requireDependencies();
    var _browserFetcher = requireBrowserFetcher();
    var _debugLogger2 = debugLogger;
    function _interopRequireDefault2(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache2(e) {
      if ("function" != typeof WeakMap) return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache2 = function(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard2(e, r) {
      if (e && e.__esModule) return e;
      if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
      var t = _getRequireWildcardCache2(r);
      if (t && t.has(e)) return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
      return n.default = e, t && t.set(e, n), n;
    }
    const PACKAGE_PATH = _path2.default.join(__dirname, "..", "..", "..");
    const BIN_PATH = _path2.default.join(__dirname, "..", "..", "..", "bin");
    const PLAYWRIGHT_CDN_MIRRORS = ["https://playwright.azureedge.net", "https://playwright-akamai.azureedge.net", "https://playwright-verizon.azureedge.net"];
    if (process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
      for (let i = 0; i < PLAYWRIGHT_CDN_MIRRORS.length; i++) {
        const cdn = PLAYWRIGHT_CDN_MIRRORS[i];
        if (cdn !== process.env.PW_TEST_CDN_THAT_SHOULD_WORK) PLAYWRIGHT_CDN_MIRRORS[i] = cdn + ".does-not-resolve.playwright.dev";
      }
    }
    const EXECUTABLE_PATHS = {
      "chromium": {
        "linux": ["chrome-linux", "chrome"],
        "mac": ["chrome-mac", "Chromium.app", "Contents", "MacOS", "Chromium"],
        "win": ["chrome-win", "chrome.exe"]
      },
      "firefox": {
        "linux": ["firefox", "firefox"],
        "mac": ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
        "win": ["firefox", "firefox.exe"]
      },
      "webkit": {
        "linux": ["pw_run.sh"],
        "mac": ["pw_run.sh"],
        "win": ["Playwright.exe"]
      },
      "ffmpeg": {
        "linux": ["ffmpeg-linux"],
        "mac": ["ffmpeg-mac"],
        "win": ["ffmpeg-win64.exe"]
      }
    };
    const DOWNLOAD_PATHS = {
      "chromium": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/chromium/%s/chromium-linux.zip",
        "ubuntu22.04-x64": "builds/chromium/%s/chromium-linux.zip",
        "ubuntu24.04-x64": "builds/chromium/%s/chromium-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "debian11-x64": "builds/chromium/%s/chromium-linux.zip",
        "debian11-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "debian12-x64": "builds/chromium/%s/chromium-linux.zip",
        "debian12-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
        "mac10.13": "builds/chromium/%s/chromium-mac.zip",
        "mac10.14": "builds/chromium/%s/chromium-mac.zip",
        "mac10.15": "builds/chromium/%s/chromium-mac.zip",
        "mac11": "builds/chromium/%s/chromium-mac.zip",
        "mac11-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac12": "builds/chromium/%s/chromium-mac.zip",
        "mac12-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac13": "builds/chromium/%s/chromium-mac.zip",
        "mac13-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac14": "builds/chromium/%s/chromium-mac.zip",
        "mac14-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "mac15": "builds/chromium/%s/chromium-mac.zip",
        "mac15-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
        "win64": "builds/chromium/%s/chromium-win64.zip"
      },
      "chromium-tip-of-tree": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "ubuntu24.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
        "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
        "mac10.13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac10.14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac10.15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac11": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac12": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "mac15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
        "mac15-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
        "win64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-win64.zip"
      },
      "firefox": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/firefox/%s/firefox-ubuntu-20.04.zip",
        "ubuntu22.04-x64": "builds/firefox/%s/firefox-ubuntu-22.04.zip",
        "ubuntu24.04-x64": "builds/firefox/%s/firefox-ubuntu-24.04.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/firefox/%s/firefox-ubuntu-20.04-arm64.zip",
        "ubuntu22.04-arm64": "builds/firefox/%s/firefox-ubuntu-22.04-arm64.zip",
        "ubuntu24.04-arm64": "builds/firefox/%s/firefox-ubuntu-24.04-arm64.zip",
        "debian11-x64": "builds/firefox/%s/firefox-debian-11.zip",
        "debian11-arm64": "builds/firefox/%s/firefox-debian-11-arm64.zip",
        "debian12-x64": "builds/firefox/%s/firefox-debian-12.zip",
        "debian12-arm64": "builds/firefox/%s/firefox-debian-12-arm64.zip",
        "mac10.13": "builds/firefox/%s/firefox-mac.zip",
        "mac10.14": "builds/firefox/%s/firefox-mac.zip",
        "mac10.15": "builds/firefox/%s/firefox-mac.zip",
        "mac11": "builds/firefox/%s/firefox-mac.zip",
        "mac11-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac12": "builds/firefox/%s/firefox-mac.zip",
        "mac12-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac13": "builds/firefox/%s/firefox-mac.zip",
        "mac13-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac14": "builds/firefox/%s/firefox-mac.zip",
        "mac14-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "mac15": "builds/firefox/%s/firefox-mac.zip",
        "mac15-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
        "win64": "builds/firefox/%s/firefox-win64.zip"
      },
      "firefox-beta": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip",
        "ubuntu22.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04.zip",
        "ubuntu24.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": void 0,
        "ubuntu22.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04-arm64.zip",
        "ubuntu24.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04-arm64.zip",
        "debian11-x64": "builds/firefox-beta/%s/firefox-beta-debian-11.zip",
        "debian11-arm64": "builds/firefox-beta/%s/firefox-beta-debian-11-arm64.zip",
        "debian12-x64": "builds/firefox-beta/%s/firefox-beta-debian-12.zip",
        "debian12-arm64": "builds/firefox-beta/%s/firefox-beta-debian-12-arm64.zip",
        "mac10.13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac10.14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac10.15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac11": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac11-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac12": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac12-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac13-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac14-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "mac15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
        "mac15-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
        "win64": "builds/firefox-beta/%s/firefox-beta-win64.zip"
      },
      "webkit": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/webkit/%s/webkit-ubuntu-20.04.zip",
        "ubuntu22.04-x64": "builds/webkit/%s/webkit-ubuntu-22.04.zip",
        "ubuntu24.04-x64": "builds/webkit/%s/webkit-ubuntu-24.04.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/webkit/%s/webkit-ubuntu-20.04-arm64.zip",
        "ubuntu22.04-arm64": "builds/webkit/%s/webkit-ubuntu-22.04-arm64.zip",
        "ubuntu24.04-arm64": "builds/webkit/%s/webkit-ubuntu-24.04-arm64.zip",
        "debian11-x64": "builds/webkit/%s/webkit-debian-11.zip",
        "debian11-arm64": "builds/webkit/%s/webkit-debian-11-arm64.zip",
        "debian12-x64": "builds/webkit/%s/webkit-debian-12.zip",
        "debian12-arm64": "builds/webkit/%s/webkit-debian-12-arm64.zip",
        "mac10.13": void 0,
        "mac10.14": "builds/deprecated-webkit-mac-10.14/%s/deprecated-webkit-mac-10.14.zip",
        "mac10.15": "builds/deprecated-webkit-mac-10.15/%s/deprecated-webkit-mac-10.15.zip",
        "mac11": "builds/webkit/%s/webkit-mac-11.zip",
        "mac11-arm64": "builds/webkit/%s/webkit-mac-11-arm64.zip",
        "mac12": "builds/webkit/%s/webkit-mac-12.zip",
        "mac12-arm64": "builds/webkit/%s/webkit-mac-12-arm64.zip",
        "mac13": "builds/webkit/%s/webkit-mac-13.zip",
        "mac13-arm64": "builds/webkit/%s/webkit-mac-13-arm64.zip",
        "mac14": "builds/webkit/%s/webkit-mac-14.zip",
        "mac14-arm64": "builds/webkit/%s/webkit-mac-14-arm64.zip",
        "mac15": "builds/webkit/%s/webkit-mac-15.zip",
        "mac15-arm64": "builds/webkit/%s/webkit-mac-15-arm64.zip",
        "win64": "builds/webkit/%s/webkit-win64.zip"
      },
      "ffmpeg": {
        "<unknown>": void 0,
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "ubuntu22.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "ubuntu24.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "ubuntu22.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "ubuntu24.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "debian11-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "debian11-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "debian12-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
        "debian12-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
        "mac10.13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac10.14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac10.15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac11": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac11-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac12": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac12-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac13-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac14-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "mac15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
        "mac15-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
        "win64": "builds/ffmpeg/%s/ffmpeg-win64.zip"
      },
      "android": {
        "<unknown>": "builds/android/%s/android.zip",
        "ubuntu18.04-x64": void 0,
        "ubuntu20.04-x64": "builds/android/%s/android.zip",
        "ubuntu22.04-x64": "builds/android/%s/android.zip",
        "ubuntu24.04-x64": "builds/android/%s/android.zip",
        "ubuntu18.04-arm64": void 0,
        "ubuntu20.04-arm64": "builds/android/%s/android.zip",
        "ubuntu22.04-arm64": "builds/android/%s/android.zip",
        "ubuntu24.04-arm64": "builds/android/%s/android.zip",
        "debian11-x64": "builds/android/%s/android.zip",
        "debian11-arm64": "builds/android/%s/android.zip",
        "debian12-x64": "builds/android/%s/android.zip",
        "debian12-arm64": "builds/android/%s/android.zip",
        "mac10.13": "builds/android/%s/android.zip",
        "mac10.14": "builds/android/%s/android.zip",
        "mac10.15": "builds/android/%s/android.zip",
        "mac11": "builds/android/%s/android.zip",
        "mac11-arm64": "builds/android/%s/android.zip",
        "mac12": "builds/android/%s/android.zip",
        "mac12-arm64": "builds/android/%s/android.zip",
        "mac13": "builds/android/%s/android.zip",
        "mac13-arm64": "builds/android/%s/android.zip",
        "mac14": "builds/android/%s/android.zip",
        "mac14-arm64": "builds/android/%s/android.zip",
        "mac15": "builds/android/%s/android.zip",
        "mac15-arm64": "builds/android/%s/android.zip",
        "win64": "builds/android/%s/android.zip"
      },
      // TODO(bidi): implement downloads.
      "bidi": {}
    };
    const registryDirectory = exports2.registryDirectory = (() => {
      let result2;
      const envDefined = (0, _utils2.getFromENV)("PLAYWRIGHT_BROWSERS_PATH");
      if (envDefined === "0") {
        result2 = _path2.default.join(__dirname, "..", "..", "..", ".local-browsers");
      } else if (envDefined) {
        result2 = envDefined;
      } else {
        let cacheDirectory;
        if (process.platform === "linux") cacheDirectory = process.env.XDG_CACHE_HOME || _path2.default.join(os.homedir(), ".cache");
        else if (process.platform === "darwin") cacheDirectory = _path2.default.join(os.homedir(), "Library", "Caches");
        else if (process.platform === "win32") cacheDirectory = process.env.LOCALAPPDATA || _path2.default.join(os.homedir(), "AppData", "Local");
        else throw new Error("Unsupported platform: " + process.platform);
        result2 = _path2.default.join(cacheDirectory, "ms-playwright");
      }
      if (!_path2.default.isAbsolute(result2)) {
        result2 = _path2.default.resolve((0, _utils2.getFromENV)("INIT_CWD") || process.cwd(), result2);
      }
      return result2;
    })();
    function isBrowserDirectory(browserDirectory) {
      const baseName = _path2.default.basename(browserDirectory);
      for (const browserName of allDownloadable) {
        if (baseName.startsWith(browserName + "-")) return true;
      }
      return false;
    }
    function readDescriptors(browsersJSON) {
      return browsersJSON["browsers"].map((obj) => {
        const name2 = obj.name;
        const revisionOverride = (obj.revisionOverrides || {})[_hostPlatform.hostPlatform];
        const revision = revisionOverride || obj.revision;
        const browserDirectoryPrefix = revisionOverride ? `${name2}_${_hostPlatform.hostPlatform}_special` : `${name2}`;
        const descriptor = {
          name: name2,
          revision,
          // We only put browser version for the supported operating systems.
          browserVersion: revisionOverride ? void 0 : obj.browserVersion,
          installByDefault: !!obj.installByDefault,
          // Method `isBrowserDirectory` determines directory to be browser iff
          // it starts with some browser name followed by '-'. Some browser names
          // are prefixes of others, e.g. 'webkit' is a prefix of `webkit-technology-preview`.
          // To avoid older registries erroneously removing 'webkit-technology-preview', we have to
          // ensure that browser folders to never include dashes inside.
          dir: _path2.default.join(registryDirectory, browserDirectoryPrefix.replace(/-/g, "_") + "-" + revision)
        };
        return descriptor;
      });
    }
    const allDownloadable = ["chromium", "firefox", "webkit", "ffmpeg", "firefox-beta", "chromium-tip-of-tree"];
    class Registry {
      constructor(browsersJSON) {
        this._executables = void 0;
        const descriptors = readDescriptors(browsersJSON);
        const findExecutablePath = (dir, name2) => {
          let tokens = void 0;
          if (process.platform === "linux") tokens = EXECUTABLE_PATHS[name2]["linux"];
          else if (process.platform === "darwin") tokens = EXECUTABLE_PATHS[name2]["mac"];
          else if (process.platform === "win32") tokens = EXECUTABLE_PATHS[name2]["win"];
          return tokens ? _path2.default.join(dir, ...tokens) : void 0;
        };
        const executablePathOrDie = (name2, e, installByDefault, sdkLanguage) => {
          if (!e) throw new Error(`${name2} is not supported on ${_hostPlatform.hostPlatform}`);
          const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? "" : " " + name2}`);
          if (!(0, _fileUtils2.canAccessFile)(e)) {
            const currentDockerVersion = (0, _dependencies.readDockerVersionSync)();
            const preferredDockerVersion = currentDockerVersion ? (0, _dependencies.dockerVersion)(currentDockerVersion.dockerImageNameTemplate) : null;
            const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
            const prettyMessage = isOutdatedDockerImage ? [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`, `Please update docker image as well.`, `-  current: ${currentDockerVersion.dockerImageName}`, `- required: ${preferredDockerVersion.dockerImageName}`, ``, `<3 Playwright Team`].join("\n") : [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just installed or updated.`, `Please run the following command to download new browser${installByDefault ? "s" : ""}:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
            throw new Error(`Executable doesn't exist at ${e}
${(0, _utils2.wrapInASCIIBox)(prettyMessage, 1)}`);
          }
          return e;
        };
        this._executables = [];
        const chromium2 = descriptors.find((d) => d.name === "chromium");
        const chromiumExecutable = findExecutablePath(chromium2.dir, "chromium");
        this._executables.push({
          type: "browser",
          name: "chromium",
          browserName: "chromium",
          directory: chromium2.dir,
          executablePath: () => chromiumExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium2.installByDefault, sdkLanguage),
          installType: chromium2.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromium2.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromium2),
          browserVersion: chromium2.browserVersion,
          _install: () => this._downloadExecutable(chromium2, chromiumExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        const chromiumTipOfTree = descriptors.find((d) => d.name === "chromium-tip-of-tree");
        const chromiumTipOfTreeExecutable = findExecutablePath(chromiumTipOfTree.dir, "chromium");
        this._executables.push({
          type: "tool",
          name: "chromium-tip-of-tree",
          browserName: "chromium",
          directory: chromiumTipOfTree.dir,
          executablePath: () => chromiumTipOfTreeExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-tip-of-tree", chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
          installType: chromiumTipOfTree.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromiumTipOfTree.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromiumTipOfTree),
          browserVersion: chromiumTipOfTree.browserVersion,
          _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        this._executables.push(this._createChromiumChannel("chrome", {
          "linux": "/opt/google/chrome/chrome",
          "darwin": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
          "win32": `\\Google\\Chrome\\Application\\chrome.exe`
        }, () => this._installChromiumChannel("chrome", {
          "linux": "reinstall_chrome_stable_linux.sh",
          "darwin": "reinstall_chrome_stable_mac.sh",
          "win32": "reinstall_chrome_stable_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("chrome-beta", {
          "linux": "/opt/google/chrome-beta/chrome",
          "darwin": "/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta",
          "win32": `\\Google\\Chrome Beta\\Application\\chrome.exe`
        }, () => this._installChromiumChannel("chrome-beta", {
          "linux": "reinstall_chrome_beta_linux.sh",
          "darwin": "reinstall_chrome_beta_mac.sh",
          "win32": "reinstall_chrome_beta_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("chrome-dev", {
          "linux": "/opt/google/chrome-unstable/chrome",
          "darwin": "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev",
          "win32": `\\Google\\Chrome Dev\\Application\\chrome.exe`
        }));
        this._executables.push(this._createChromiumChannel("chrome-canary", {
          "linux": "",
          "darwin": "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
          "win32": `\\Google\\Chrome SxS\\Application\\chrome.exe`
        }));
        this._executables.push(this._createChromiumChannel("msedge", {
          "linux": "/opt/microsoft/msedge/msedge",
          "darwin": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
          "win32": `\\Microsoft\\Edge\\Application\\msedge.exe`
        }, () => this._installMSEdgeChannel("msedge", {
          "linux": "reinstall_msedge_stable_linux.sh",
          "darwin": "reinstall_msedge_stable_mac.sh",
          "win32": "reinstall_msedge_stable_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("msedge-beta", {
          "linux": "/opt/microsoft/msedge-beta/msedge",
          "darwin": "/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta",
          "win32": `\\Microsoft\\Edge Beta\\Application\\msedge.exe`
        }, () => this._installMSEdgeChannel("msedge-beta", {
          "darwin": "reinstall_msedge_beta_mac.sh",
          "linux": "reinstall_msedge_beta_linux.sh",
          "win32": "reinstall_msedge_beta_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("msedge-dev", {
          "linux": "/opt/microsoft/msedge-dev/msedge",
          "darwin": "/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev",
          "win32": `\\Microsoft\\Edge Dev\\Application\\msedge.exe`
        }, () => this._installMSEdgeChannel("msedge-dev", {
          "darwin": "reinstall_msedge_dev_mac.sh",
          "linux": "reinstall_msedge_dev_linux.sh",
          "win32": "reinstall_msedge_dev_win.ps1"
        })));
        this._executables.push(this._createChromiumChannel("msedge-canary", {
          "linux": "",
          "darwin": "/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary",
          "win32": `\\Microsoft\\Edge SxS\\Application\\msedge.exe`
        }));
        this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-stable", {
          "linux": "/firefox/firefox",
          "darwin": "/Firefox.app/Contents/MacOS/firefox",
          "win32": "\\core\\firefox.exe"
        }));
        this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-beta", {
          "linux": "/firefox/firefox",
          "darwin": "/Firefox.app/Contents/MacOS/firefox",
          "win32": "\\core\\firefox.exe"
        }));
        this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-nightly", {
          "linux": "/firefox/firefox",
          "darwin": "/Firefox Nightly.app/Contents/MacOS/firefox",
          "win32": "\\firefox\\firefox.exe"
        }));
        this._executables.push(this._createBidiChannel("bidi-chrome-stable", {
          "linux": "/opt/google/chrome/chrome",
          "darwin": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
          "win32": `\\Google\\Chrome\\Application\\chrome.exe`
        }));
        this._executables.push(this._createBidiChannel("bidi-chrome-canary", {
          "linux": "",
          "darwin": "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
          "win32": `\\Google\\Chrome SxS\\Application\\chrome.exe`
        }));
        this._executables.push({
          type: "browser",
          name: "bidi-chromium",
          browserName: "bidi",
          directory: chromium2.dir,
          executablePath: () => chromiumExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium2.installByDefault, sdkLanguage),
          installType: "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "chromium", chromium2.dir, ["chrome-linux"], [], ["chrome-win"]),
          downloadURLs: this._downloadURLs(chromium2),
          browserVersion: chromium2.browserVersion,
          _install: () => this._downloadExecutable(chromium2, chromiumExecutable),
          _dependencyGroup: "chromium",
          _isHermeticInstallation: true
        });
        const firefox2 = descriptors.find((d) => d.name === "firefox");
        const firefoxExecutable = findExecutablePath(firefox2.dir, "firefox");
        this._executables.push({
          type: "browser",
          name: "firefox",
          browserName: "firefox",
          directory: firefox2.dir,
          executablePath: () => firefoxExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox", firefoxExecutable, firefox2.installByDefault, sdkLanguage),
          installType: firefox2.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefox2.dir, ["firefox"], [], ["firefox"]),
          downloadURLs: this._downloadURLs(firefox2),
          browserVersion: firefox2.browserVersion,
          _install: () => this._downloadExecutable(firefox2, firefoxExecutable),
          _dependencyGroup: "firefox",
          _isHermeticInstallation: true
        });
        const firefoxBeta = descriptors.find((d) => d.name === "firefox-beta");
        const firefoxBetaExecutable = findExecutablePath(firefoxBeta.dir, "firefox");
        this._executables.push({
          type: "tool",
          name: "firefox-beta",
          browserName: "firefox",
          directory: firefoxBeta.dir,
          executablePath: () => firefoxBetaExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-beta", firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
          installType: firefoxBeta.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "firefox", firefoxBeta.dir, ["firefox"], [], ["firefox"]),
          downloadURLs: this._downloadURLs(firefoxBeta),
          browserVersion: firefoxBeta.browserVersion,
          _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
          _dependencyGroup: "firefox",
          _isHermeticInstallation: true
        });
        const webkit2 = descriptors.find((d) => d.name === "webkit");
        const webkitExecutable = findExecutablePath(webkit2.dir, "webkit");
        const webkitLinuxLddDirectories = [_path2.default.join("minibrowser-gtk"), _path2.default.join("minibrowser-gtk", "bin"), _path2.default.join("minibrowser-gtk", "lib"), _path2.default.join("minibrowser-gtk", "sys", "lib"), _path2.default.join("minibrowser-wpe"), _path2.default.join("minibrowser-wpe", "bin"), _path2.default.join("minibrowser-wpe", "lib"), _path2.default.join("minibrowser-wpe", "sys", "lib")];
        this._executables.push({
          type: "browser",
          name: "webkit",
          browserName: "webkit",
          directory: webkit2.dir,
          executablePath: () => webkitExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("webkit", webkitExecutable, webkit2.installByDefault, sdkLanguage),
          installType: webkit2.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, "webkit", webkit2.dir, webkitLinuxLddDirectories, ["libGLESv2.so.2", "libx264.so"], [""]),
          downloadURLs: this._downloadURLs(webkit2),
          browserVersion: webkit2.browserVersion,
          _install: () => this._downloadExecutable(webkit2, webkitExecutable),
          _dependencyGroup: "webkit",
          _isHermeticInstallation: true
        });
        const ffmpeg = descriptors.find((d) => d.name === "ffmpeg");
        const ffmpegExecutable = findExecutablePath(ffmpeg.dir, "ffmpeg");
        this._executables.push({
          type: "tool",
          name: "ffmpeg",
          browserName: void 0,
          directory: ffmpeg.dir,
          executablePath: () => ffmpegExecutable,
          executablePathOrDie: (sdkLanguage) => executablePathOrDie("ffmpeg", ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
          installType: ffmpeg.installByDefault ? "download-by-default" : "download-on-demand",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: this._downloadURLs(ffmpeg),
          _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
        const android2 = descriptors.find((d) => d.name === "android");
        this._executables.push({
          type: "tool",
          name: "android",
          browserName: void 0,
          directory: android2.dir,
          executablePath: () => void 0,
          executablePathOrDie: () => "",
          installType: "download-on-demand",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: this._downloadURLs(android2),
          _install: () => this._downloadExecutable(android2),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
        this._executables.push({
          type: "browser",
          name: "bidi",
          browserName: "bidi",
          directory: void 0,
          executablePath: () => void 0,
          executablePathOrDie: () => "",
          installType: "none",
          _validateHostRequirements: () => Promise.resolve(),
          downloadURLs: [],
          _install: () => Promise.resolve(),
          _dependencyGroup: "tools",
          _isHermeticInstallation: true
        });
      }
      _createChromiumChannel(name2, lookAt, install) {
        const executablePath = (sdkLanguage, shouldThrow) => {
          const suffix = lookAt[process.platform];
          if (!suffix) {
            if (shouldThrow) throw new Error(`Chromium distribution '${name2}' is not supported on ${process.platform}`);
            return void 0;
          }
          const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
          for (const prefix of prefixes) {
            const executablePath2 = _path2.default.join(prefix, suffix);
            if ((0, _fileUtils2.canAccessFile)(executablePath2)) return executablePath2;
          }
          if (!shouldThrow) return void 0;
          const location2 = prefixes.length ? ` at ${_path2.default.join(prefixes[0], suffix)}` : ``;
          const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name2)}"` : "";
          throw new Error(`Chromium distribution '${name2}' is not found${location2}${installation}`);
        };
        return {
          type: "channel",
          name: name2,
          browserName: "chromium",
          directory: void 0,
          executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
          executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
          installType: install ? "install-script" : "none",
          _validateHostRequirements: () => Promise.resolve(),
          _isHermeticInstallation: false,
          _install: install
        };
      }
      _createBidiFirefoxChannel(name2, lookAt, install) {
        const executablePath = (sdkLanguage, shouldThrow) => {
          const suffix = lookAt[process.platform];
          if (!suffix) {
            if (shouldThrow) throw new Error(`Firefox distribution '${name2}' is not supported on ${process.platform}`);
            return void 0;
          }
          const folder = _path2.default.resolve("firefox");
          let channelName = "stable";
          if (name2.includes("beta")) channelName = "beta";
          else if (name2.includes("nightly")) channelName = "nightly";
          const installedVersions = fs2.readdirSync(folder);
          const found = installedVersions.filter((e) => e.includes(channelName));
          if (found.length === 1) return _path2.default.join(folder, found[0], suffix);
          if (found.length > 1) {
            if (shouldThrow) throw new Error(`Multiple Firefox installations found for channel '${name2}': ${found.join(", ")}`);
            else return void 0;
          }
          if (shouldThrow) throw new Error(`Cannot find Firefox installation for channel '${name2}' under ${folder}`);
          return void 0;
        };
        return {
          type: "channel",
          name: name2,
          browserName: "bidi",
          directory: void 0,
          executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
          executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
          installType: "none",
          _validateHostRequirements: () => Promise.resolve(),
          _isHermeticInstallation: true,
          _install: install
        };
      }
      _createBidiChannel(name2, lookAt, install) {
        const executablePath = (sdkLanguage, shouldThrow) => {
          const suffix = lookAt[process.platform];
          if (!suffix) {
            if (shouldThrow) throw new Error(`Firefox distribution '${name2}' is not supported on ${process.platform}`);
            return void 0;
          }
          const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
          for (const prefix of prefixes) {
            const executablePath2 = _path2.default.join(prefix, suffix);
            if ((0, _fileUtils2.canAccessFile)(executablePath2)) return executablePath2;
          }
          if (!shouldThrow) return void 0;
          const location2 = prefixes.length ? ` at ${_path2.default.join(prefixes[0], suffix)}` : ``;
          const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name2)}"` : "";
          throw new Error(`Firefox distribution '${name2}' is not found${location2}${installation}`);
        };
        return {
          type: "channel",
          name: name2,
          browserName: "bidi",
          directory: void 0,
          executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
          executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
          installType: install ? "install-script" : "none",
          _validateHostRequirements: () => Promise.resolve(),
          _isHermeticInstallation: false,
          _install: install
        };
      }
      executables() {
        return this._executables;
      }
      findExecutable(name2) {
        return this._executables.find((b) => b.name === name2);
      }
      defaultExecutables() {
        return this._executables.filter((e) => e.installType === "download-by-default");
      }
      _addRequirementsAndDedupe(executables) {
        const set = /* @__PURE__ */ new Set();
        for (const executable of executables) {
          set.add(executable);
          if (executable.browserName === "chromium") set.add(this.findExecutable("ffmpeg"));
        }
        return Array.from(set);
      }
      async _validateHostRequirements(sdkLanguage, browserName, browserDirectory, linuxLddDirectories, dlOpenLibraries, windowsExeAndDllDirectories) {
        if (os.platform() === "linux") return await (0, _dependencies.validateDependenciesLinux)(sdkLanguage, linuxLddDirectories.map((d) => _path2.default.join(browserDirectory, d)), dlOpenLibraries);
        if (os.platform() === "win32" && os.arch() === "x64") return await (0, _dependencies.validateDependenciesWindows)(windowsExeAndDllDirectories.map((d) => _path2.default.join(browserDirectory, d)));
      }
      async installDeps(executablesToInstallDeps, dryRun) {
        const executables = this._addRequirementsAndDedupe(executablesToInstallDeps);
        const targets = /* @__PURE__ */ new Set();
        for (const executable of executables) {
          if (executable._dependencyGroup) targets.add(executable._dependencyGroup);
        }
        targets.add("tools");
        if (os.platform() === "win32") return await (0, _dependencies.installDependenciesWindows)(targets, dryRun);
        if (os.platform() === "linux") return await (0, _dependencies.installDependenciesLinux)(targets, dryRun);
      }
      async install(executablesToInstall, forceReinstall) {
        const executables = this._addRequirementsAndDedupe(executablesToInstall);
        await fs2.promises.mkdir(registryDirectory, {
          recursive: true
        });
        const lockfilePath = _path2.default.join(registryDirectory, "__dirlock");
        const linksDir = _path2.default.join(registryDirectory, ".links");
        let releaseLock;
        try {
          releaseLock = await _utilsBundle2.lockfile.lock(registryDirectory, {
            retries: {
              // Retry 20 times during 10 minutes with
              // exponential back-off.
              // See documentation at: https://www.npmjs.com/package/retry#retrytimeoutsoptions
              retries: 20,
              factor: 1.27579
            },
            onCompromised: (err) => {
              throw new Error(`${err.message} Path: ${lockfilePath}`);
            },
            lockfilePath
          });
          await fs2.promises.mkdir(linksDir, {
            recursive: true
          });
          await fs2.promises.writeFile(_path2.default.join(linksDir, (0, _utils2.calculateSha1)(PACKAGE_PATH)), PACKAGE_PATH);
          await this._validateInstallationCache(linksDir);
          for (const executable of executables) {
            if (!executable._install) throw new Error(`ERROR: Playwright does not support installing ${executable.name}`);
            const {
              embedderName
            } = (0, _userAgent2.getEmbedderName)();
            if (!(0, _utils2.getAsBooleanFromENV)("CI") && !executable._isHermeticInstallation && !forceReinstall && executable.executablePath(embedderName)) {
              const command = buildPlaywrightCLICommand(embedderName, "install --force " + executable.name);
              throw new Error("\n" + (0, _utils2.wrapInASCIIBox)([`ATTENTION: "${executable.name}" is already installed on the system!`, ``, `"${executable.name}" installation is not hermetic; installing newer version`, `requires *removal* of a current installation first.`, ``, `To *uninstall* current version and re-install latest "${executable.name}":`, ``, `- Close all running instances of "${executable.name}", if any`, `- Use "--force" to install browser:`, ``, `    ${command}`, ``, `<3 Playwright Team`].join("\n"), 1));
            }
            await executable._install();
          }
        } catch (e) {
          if (e.code === "ELOCKED") {
            const rmCommand = process.platform === "win32" ? "rm -R" : "rm -rf";
            throw new Error("\n" + (0, _utils2.wrapInASCIIBox)([`An active lockfile is found at:`, ``, `  ${lockfilePath}`, ``, `Either:`, `- wait a few minutes if other Playwright is installing browsers in parallel`, `- remove lock manually with:`, ``, `    ${rmCommand} ${lockfilePath}`, ``, `<3 Playwright Team`].join("\n"), 1));
          } else {
            throw e;
          }
        } finally {
          if (releaseLock) await releaseLock();
        }
      }
      async uninstall(all) {
        const linksDir = _path2.default.join(registryDirectory, ".links");
        if (all) {
          const links = await fs2.promises.readdir(linksDir).catch(() => []);
          for (const link of links) await fs2.promises.unlink(_path2.default.join(linksDir, link));
        } else {
          await fs2.promises.unlink(_path2.default.join(linksDir, (0, _utils2.calculateSha1)(PACKAGE_PATH))).catch(() => {
          });
        }
        await this._validateInstallationCache(linksDir);
        return {
          numberOfBrowsersLeft: (await fs2.promises.readdir(registryDirectory).catch(() => [])).filter((browserDirectory) => isBrowserDirectory(browserDirectory)).length
        };
      }
      async validateHostRequirementsForExecutablesIfNeeded(executables, sdkLanguage) {
        if ((0, _utils2.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS")) {
          process.stderr.write("Skipping host requirements validation logic because `PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS` env variable is set.\n");
          return;
        }
        for (const executable of executables) await this._validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage);
      }
      async _validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage) {
        const kMaximumReValidationPeriod = 30 * 24 * 60 * 60 * 1e3;
        if (!executable.directory) return;
        const markerFile = _path2.default.join(executable.directory, "DEPENDENCIES_VALIDATED");
        if (await fs2.promises.stat(markerFile).then((stat) => Date.now() - stat.mtime.getTime() < kMaximumReValidationPeriod).catch(() => false)) return;
        _debugLogger2.debugLogger.log("install", `validating host requirements for "${executable.name}"`);
        try {
          await executable._validateHostRequirements(sdkLanguage);
          _debugLogger2.debugLogger.log("install", `validation passed for ${executable.name}`);
        } catch (error) {
          _debugLogger2.debugLogger.log("install", `validation failed for ${executable.name}`);
          throw error;
        }
        await fs2.promises.writeFile(markerFile, "").catch(() => {
        });
      }
      _downloadURLs(descriptor) {
        const paths = DOWNLOAD_PATHS[descriptor.name];
        const downloadPathTemplate = paths[_hostPlatform.hostPlatform] || paths["<unknown>"];
        if (!downloadPathTemplate) return [];
        const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
        let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map((mirror) => `${mirror}/${downloadPath}`);
        let downloadHostEnv;
        if (descriptor.name.startsWith("chromium")) downloadHostEnv = "PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST";
        else if (descriptor.name.startsWith("firefox")) downloadHostEnv = "PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST";
        else if (descriptor.name.startsWith("webkit")) downloadHostEnv = "PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST";
        const customHostOverride = downloadHostEnv && (0, _utils2.getFromENV)(downloadHostEnv) || (0, _utils2.getFromENV)("PLAYWRIGHT_DOWNLOAD_HOST");
        if (customHostOverride) downloadURLs = [`${customHostOverride}/${downloadPath}`];
        return downloadURLs;
      }
      async _downloadExecutable(descriptor, executablePath) {
        const downloadURLs = this._downloadURLs(descriptor);
        if (!downloadURLs.length) throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${_hostPlatform.hostPlatform}`);
        if (!_hostPlatform.isOfficiallySupportedPlatform) (0, _browserFetcher.logPolitely)(`BEWARE: your OS is not officially supported by Playwright; downloading fallback build for ${_hostPlatform.hostPlatform}.`);
        const displayName = descriptor.name.split("-").map((word) => {
          return word === "ffmpeg" ? "FFMPEG" : word.charAt(0).toUpperCase() + word.slice(1);
        }).join(" ");
        const title = descriptor.browserVersion ? `${displayName} ${descriptor.browserVersion} (playwright build v${descriptor.revision})` : `${displayName} playwright build v${descriptor.revision}`;
        const downloadFileName = `playwright-download-${descriptor.name}-${_hostPlatform.hostPlatform}-${descriptor.revision}.zip`;
        const downloadConnectionTimeoutEnv = (0, _utils2.getFromENV)("PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT");
        const downloadConnectionTimeout = +(downloadConnectionTimeoutEnv || "0") || 3e4;
        await (0, _browserFetcher.downloadBrowserWithProgressBar)(title, descriptor.dir, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout).catch((e) => {
          throw new Error(`Failed to download ${title}, caused by
${e.stack}`);
        });
      }
      async _installMSEdgeChannel(channel, scripts) {
        const scriptArgs = [];
        if (process.platform !== "linux") {
          const products = lowercaseAllKeys(JSON.parse(await (0, _network2.fetchData)({
            url: "https://edgeupdates.microsoft.com/api/products"
          })));
          const productName = {
            "msedge": "Stable",
            "msedge-beta": "Beta",
            "msedge-dev": "Dev"
          }[channel];
          const product = products.find((product2) => product2.product === productName);
          const searchConfig = {
            darwin: {
              platform: "MacOS",
              arch: "universal",
              artifact: "pkg"
            },
            win32: {
              platform: "Windows",
              arch: "x64",
              artifact: "msi"
            }
          }[process.platform];
          const release = searchConfig ? product.releases.find((release2) => release2.platform === searchConfig.platform && release2.architecture === searchConfig.arch && release2.artifacts.length > 0) : null;
          const artifact2 = release ? release.artifacts.find((artifact22) => artifact22.artifactname === searchConfig.artifact) : null;
          if (artifact2) scriptArgs.push(
            artifact2.location
            /* url */
          );
          else throw new Error(`Cannot install ${channel} on ${process.platform}`);
        }
        await this._installChromiumChannel(channel, scripts, scriptArgs);
      }
      async _installChromiumChannel(channel, scripts, scriptArgs = []) {
        const scriptName = scripts[process.platform];
        if (!scriptName) throw new Error(`Cannot install ${channel} on ${process.platform}`);
        const cwd = BIN_PATH;
        const isPowerShell = scriptName.endsWith(".ps1");
        if (isPowerShell) {
          const args = ["-ExecutionPolicy", "Bypass", "-File", _path2.default.join(BIN_PATH, scriptName), ...scriptArgs];
          const {
            code
          } = await (0, _spawnAsync.spawnAsync)("powershell.exe", args, {
            cwd,
            stdio: "inherit"
          });
          if (code !== 0) throw new Error(`Failed to install ${channel}`);
        } else {
          const {
            command,
            args,
            elevatedPermissions
          } = await (0, _dependencies.transformCommandsForRoot)([`bash "${_path2.default.join(BIN_PATH, scriptName)}" ${scriptArgs.join("")}`]);
          if (elevatedPermissions) console.log("Switching to root user to install dependencies...");
          const {
            code
          } = await (0, _spawnAsync.spawnAsync)(command, args, {
            cwd,
            stdio: "inherit"
          });
          if (code !== 0) throw new Error(`Failed to install ${channel}`);
        }
      }
      async _validateInstallationCache(linksDir) {
        const usedBrowserPaths = /* @__PURE__ */ new Set();
        for (const fileName of await fs2.promises.readdir(linksDir)) {
          const linkPath = _path2.default.join(linksDir, fileName);
          let linkTarget = "";
          try {
            linkTarget = (await fs2.promises.readFile(linkPath)).toString();
            const browsersJSON = commonjsRequire(_path2.default.join(linkTarget, "browsers.json"));
            const descriptors = readDescriptors(browsersJSON);
            for (const browserName of allDownloadable) {
              const descriptor = descriptors.find((d) => d.name === browserName);
              if (!descriptor) continue;
              const usedBrowserPath = descriptor.dir;
              const browserRevision = parseInt(descriptor.revision, 10);
              const shouldHaveMarkerFile = browserName === "chromium" && (browserRevision >= 786218 || browserRevision < 3e5) || browserName === "firefox" && browserRevision >= 1128 || browserName === "webkit" && browserRevision >= 1307 || // All new applications have a marker file right away.
              browserName !== "firefox" && browserName !== "chromium" && browserName !== "webkit";
              if (!shouldHaveMarkerFile || await (0, _fileUtils2.existsAsync)(browserDirectoryToMarkerFilePath(usedBrowserPath))) usedBrowserPaths.add(usedBrowserPath);
            }
          } catch (e) {
            await fs2.promises.unlink(linkPath).catch((e2) => {
            });
          }
        }
        if (!(0, _utils2.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_GC")) {
          let downloadedBrowsers = (await fs2.promises.readdir(registryDirectory)).map((file) => _path2.default.join(registryDirectory, file));
          downloadedBrowsers = downloadedBrowsers.filter((file) => isBrowserDirectory(file));
          const directories = new Set(downloadedBrowsers);
          for (const browserDirectory of usedBrowserPaths) directories.delete(browserDirectory);
          for (const directory of directories) (0, _browserFetcher.logPolitely)("Removing unused browser at " + directory);
          await (0, _fileUtils2.removeFolders)([...directories]);
        }
      }
    }
    exports2.Registry = Registry;
    function browserDirectoryToMarkerFilePath(browserDirectory) {
      return _path2.default.join(browserDirectory, "INSTALLATION_COMPLETE");
    }
    function buildPlaywrightCLICommand(sdkLanguage, parameters) {
      switch (sdkLanguage) {
        case "python":
          return `playwright ${parameters}`;
        case "java":
          return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="${parameters}"`;
        case "csharp":
          return `pwsh bin/Debug/netX/playwright.ps1 ${parameters}`;
        default: {
          const packageManagerCommand = (0, _utils2.getPackageManagerExecCommand)();
          return `${packageManagerCommand} playwright ${parameters}`;
        }
      }
    }
    async function installDefaultBrowsersForNpmInstall() {
      const defaultBrowserNames = registry2.defaultExecutables().map((e) => e.name);
      return installBrowsersForNpmInstall(defaultBrowserNames);
    }
    async function installBrowsersForNpmInstall(browsers2) {
      if ((0, _utils2.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD")) {
        (0, _browserFetcher.logPolitely)("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set");
        return false;
      }
      const executables = [];
      for (const browserName of browsers2) {
        const executable = registry2.findExecutable(browserName);
        if (!executable || executable.installType === "none") throw new Error(`Cannot install ${browserName}`);
        executables.push(executable);
      }
      await registry2.install(
        executables,
        false
        /* forceReinstall */
      );
    }
    function findChromiumChannel(sdkLanguage) {
      let channel = null;
      for (const name2 of ["chromium", "chrome", "msedge"]) {
        try {
          registry2.findExecutable(name2).executablePathOrDie(sdkLanguage);
          channel = name2 === "chromium" ? void 0 : name2;
          break;
        } catch (e) {
        }
      }
      if (channel === null) {
        const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install chromium`);
        const prettyMessage = [`No chromium-based browser found on the system.`, `Please run the following command to download one:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join("\n");
        throw new Error("\n" + (0, _utils2.wrapInASCIIBox)(prettyMessage, 1));
      }
      return channel;
    }
    function lowercaseAllKeys(json) {
      if (typeof json !== "object" || !json) return json;
      if (Array.isArray(json)) return json.map(lowercaseAllKeys);
      const result2 = {};
      for (const [key, value] of Object.entries(json)) result2[key.toLowerCase()] = lowercaseAllKeys(value);
      return result2;
    }
    const registry2 = exports2.registry = new Registry(require$$14);
  })(registry);
  return registry;
}
var dispatcher = {};
var validator = {};
var validatorPrimitives = {};
Object.defineProperty(validatorPrimitives, "__esModule", {
  value: true
});
validatorPrimitives.ValidationError = void 0;
validatorPrimitives.createMetadataValidator = createMetadataValidator;
validatorPrimitives.findValidator = findValidator;
validatorPrimitives.maybeFindValidator = maybeFindValidator;
validatorPrimitives.tUndefined = validatorPrimitives.tType = validatorPrimitives.tString = validatorPrimitives.tOptional = validatorPrimitives.tObject = validatorPrimitives.tNumber = validatorPrimitives.tEnum = validatorPrimitives.tChannel = validatorPrimitives.tBoolean = validatorPrimitives.tBinary = validatorPrimitives.tArray = validatorPrimitives.tAny = validatorPrimitives.scheme = void 0;
var _utils$T = requireUtils();
class ValidationError extends Error {
}
validatorPrimitives.ValidationError = ValidationError;
const scheme = validatorPrimitives.scheme = {};
function findValidator(type, method, kind) {
  const validator2 = maybeFindValidator(type, method, kind);
  if (!validator2) throw new ValidationError(`Unknown scheme for ${kind}: ${type}.${method}`);
  return validator2;
}
function maybeFindValidator(type, method, kind) {
  const schemeName = type + (kind === "Initializer" ? "" : method[0].toUpperCase() + method.substring(1)) + kind;
  return scheme[schemeName];
}
function createMetadataValidator() {
  return tOptional(scheme["Metadata"]);
}
const tNumber = (arg, path2, context) => {
  if (arg instanceof Number) return arg.valueOf();
  if (typeof arg === "number") return arg;
  throw new ValidationError(`${path2}: expected number, got ${typeof arg}`);
};
validatorPrimitives.tNumber = tNumber;
const tBoolean = (arg, path2, context) => {
  if (arg instanceof Boolean) return arg.valueOf();
  if (typeof arg === "boolean") return arg;
  throw new ValidationError(`${path2}: expected boolean, got ${typeof arg}`);
};
validatorPrimitives.tBoolean = tBoolean;
const tString = (arg, path2, context) => {
  if (arg instanceof String) return arg.valueOf();
  if (typeof arg === "string") return arg;
  throw new ValidationError(`${path2}: expected string, got ${typeof arg}`);
};
validatorPrimitives.tString = tString;
const tBinary = (arg, path2, context) => {
  if (context.binary === "fromBase64") {
    if (arg instanceof String) return Buffer.from(arg.valueOf(), "base64");
    if (typeof arg === "string") return Buffer.from(arg, "base64");
    throw new ValidationError(`${path2}: expected base64-encoded buffer, got ${typeof arg}`);
  }
  if (context.binary === "toBase64") {
    if (!(arg instanceof Buffer)) throw new ValidationError(`${path2}: expected Buffer, got ${typeof arg}`);
    return arg.toString("base64");
  }
  if (context.binary === "buffer") {
    if (!(arg instanceof Buffer)) throw new ValidationError(`${path2}: expected Buffer, got ${typeof arg}`);
    return arg;
  }
  throw new ValidationError(`Unsupported binary behavior "${context.binary}"`);
};
validatorPrimitives.tBinary = tBinary;
const tUndefined = (arg, path2, context) => {
  if (Object.is(arg, void 0)) return arg;
  throw new ValidationError(`${path2}: expected undefined, got ${typeof arg}`);
};
validatorPrimitives.tUndefined = tUndefined;
const tAny = (arg, path2, context) => {
  return arg;
};
validatorPrimitives.tAny = tAny;
const tOptional = (v) => {
  return (arg, path2, context) => {
    if (Object.is(arg, void 0)) return arg;
    return v(arg, path2, context);
  };
};
validatorPrimitives.tOptional = tOptional;
const tArray = (v) => {
  return (arg, path2, context) => {
    if (!Array.isArray(arg)) throw new ValidationError(`${path2}: expected array, got ${typeof arg}`);
    return arg.map((x, index) => v(x, path2 + "[" + index + "]", context));
  };
};
validatorPrimitives.tArray = tArray;
const tObject = (s) => {
  return (arg, path2, context) => {
    if (Object.is(arg, null)) throw new ValidationError(`${path2}: expected object, got null`);
    if (typeof arg !== "object") throw new ValidationError(`${path2}: expected object, got ${typeof arg}`);
    const result2 = {};
    for (const [key, v] of Object.entries(s)) {
      const value = v(arg[key], path2 ? path2 + "." + key : key, context);
      if (!Object.is(value, void 0)) result2[key] = value;
    }
    if ((0, _utils$T.isUnderTest)()) {
      for (const [key, value] of Object.entries(arg)) {
        if (key.startsWith("__testHook")) result2[key] = value;
      }
    }
    return result2;
  };
};
validatorPrimitives.tObject = tObject;
const tEnum = (e) => {
  return (arg, path2, context) => {
    if (!e.includes(arg)) throw new ValidationError(`${path2}: expected one of (${e.join("|")})`);
    return arg;
  };
};
validatorPrimitives.tEnum = tEnum;
const tChannel = (names) => {
  return (arg, path2, context) => {
    return context.tChannelImpl(names, arg, path2, context);
  };
};
validatorPrimitives.tChannel = tChannel;
const tType = (name2) => {
  return (arg, path2, context) => {
    const v = scheme[name2];
    if (!v) throw new ValidationError(path2 + ': unknown type "' + name2 + '"');
    return v(arg, path2, context);
  };
};
validatorPrimitives.tType = tType;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  Object.defineProperty(exports2, "ValidationError", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.ValidationError;
    }
  });
  Object.defineProperty(exports2, "createMetadataValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.createMetadataValidator;
    }
  });
  Object.defineProperty(exports2, "findValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.findValidator;
    }
  });
  Object.defineProperty(exports2, "maybeFindValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.maybeFindValidator;
    }
  });
  var _validatorPrimitives = validatorPrimitives;
  _validatorPrimitives.scheme.StackFrame = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString,
    line: _validatorPrimitives.tNumber,
    column: _validatorPrimitives.tNumber,
    function: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.Metadata = (0, _validatorPrimitives.tObject)({
    location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString,
      line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    apiName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    internal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    stepId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ClientSideCallMetadata = (0, _validatorPrimitives.tObject)({
    id: _validatorPrimitives.tNumber,
    stack: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("StackFrame")))
  });
  _validatorPrimitives.scheme.Point = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.Rect = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    width: _validatorPrimitives.tNumber,
    height: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SerializedValue = (0, _validatorPrimitives.tObject)({
    n: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    b: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    s: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    v: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["null", "undefined", "NaN", "Infinity", "-Infinity", "-0"])),
    d: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    u: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    bi: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    e: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      m: _validatorPrimitives.tString,
      n: _validatorPrimitives.tString,
      s: _validatorPrimitives.tString
    })),
    r: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      p: _validatorPrimitives.tString,
      f: _validatorPrimitives.tString
    })),
    a: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    o: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      k: _validatorPrimitives.tString,
      v: (0, _validatorPrimitives.tType)("SerializedValue")
    }))),
    h: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    id: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ref: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.SerializedArgument = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue"),
    handles: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)("*"))
  });
  _validatorPrimitives.scheme.ExpectedTextValue = (0, _validatorPrimitives.tObject)({
    string: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    matchSubstring: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreCase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    normalizeWhiteSpace: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AXNode = (0, _validatorPrimitives.tObject)({
    role: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    valueString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valueNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    description: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    keyshortcuts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    roledescription: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valuetext: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    disabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expanded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiselectable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    readonly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    required: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["checked", "unchecked", "mixed"])),
    pressed: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["pressed", "released", "mixed"])),
    level: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemax: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    autocomplete: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    haspopup: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    invalid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    orientation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AXNode")))
  });
  _validatorPrimitives.scheme.SetNetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    expires: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    httpOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    secure: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sameSite: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"]))
  });
  _validatorPrimitives.scheme.NetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    domain: _validatorPrimitives.tString,
    path: _validatorPrimitives.tString,
    expires: _validatorPrimitives.tNumber,
    httpOnly: _validatorPrimitives.tBoolean,
    secure: _validatorPrimitives.tBoolean,
    sameSite: (0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"])
  });
  _validatorPrimitives.scheme.NameValue = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.OriginStorage = (0, _validatorPrimitives.tObject)({
    origin: _validatorPrimitives.tString,
    localStorage: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.SerializedError = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      stack: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue"))
  });
  _validatorPrimitives.scheme.RecordHarOptions = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString,
    content: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["embed", "attach", "omit"])),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["full", "minimal"])),
    urlGlob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FormField = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    file: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))
  });
  _validatorPrimitives.scheme.APIRequestContextInitializer = (0, _validatorPrimitives.tObject)({
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.APIRequestContextFetchParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    encodedParams: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    params: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    jsonData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    formData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    multipartData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("FormField"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    failOnStatusCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    maxRedirects: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    maxRetries: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tType)("APIResponse")
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogResult = (0, _validatorPrimitives.tObject)({
    log: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.APIRequestContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextDisposeParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIResponse = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LifecycleEvent = (0, _validatorPrimitives.tEnum)(["load", "domcontentloaded", "networkidle", "commit"]);
  _validatorPrimitives.scheme.LocalUtilsInitializer = (0, _validatorPrimitives.tObject)({
    deviceDescriptors: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      descriptor: (0, _validatorPrimitives.tObject)({
        userAgent: _validatorPrimitives.tString,
        viewport: (0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }),
        screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        })),
        deviceScaleFactor: _validatorPrimitives.tNumber,
        isMobile: _validatorPrimitives.tBoolean,
        hasTouch: _validatorPrimitives.tBoolean,
        defaultBrowserType: (0, _validatorPrimitives.tEnum)(["chromium", "firefox", "webkit"])
      })
    }))
  });
  _validatorPrimitives.scheme.LocalUtilsZipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    stacksId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tEnum)(["write", "append"]),
    includeSources: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsZipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarOpenParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarOpenResult = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    isNavigationRequest: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupResult = (0, _validatorPrimitives.tObject)({
    action: (0, _validatorPrimitives.tEnum)(["error", "redirect", "fulfill", "noentry"]),
    message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    redirectURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarUnzipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    harFile: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarUnzipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsConnectParams = (0, _validatorPrimitives.tObject)({
    wsEndpoint: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    exposeNetwork: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    socksProxyRedirectPortForTest: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.LocalUtilsConnectResult = (0, _validatorPrimitives.tObject)({
    pipe: (0, _validatorPrimitives.tChannel)(["JsonPipe"]),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedParams = (0, _validatorPrimitives.tObject)({
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedResult = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyParams = (0, _validatorPrimitives.tObject)({
    callData: (0, _validatorPrimitives.tType)("ClientSideCallMetadata")
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedParams = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializeParams = (0, _validatorPrimitives.tObject)({
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.RootInitializeResult = (0, _validatorPrimitives.tObject)({
    playwright: (0, _validatorPrimitives.tChannel)(["Playwright"])
  });
  _validatorPrimitives.scheme.PlaywrightInitializer = (0, _validatorPrimitives.tObject)({
    chromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    firefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    webkit: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    bidiChromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    bidiFirefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    android: (0, _validatorPrimitives.tChannel)(["Android"]),
    electron: (0, _validatorPrimitives.tChannel)(["Electron"]),
    utils: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["LocalUtils"])),
    selectors: (0, _validatorPrimitives.tChannel)(["Selectors"]),
    preLaunchedBrowser: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Browser"])),
    preConnectedAndroidDevice: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["AndroidDevice"])),
    socksSupport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["SocksSupport"]))
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestParams = (0, _validatorPrimitives.tObject)({
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    })),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestResult = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["APIRequestContext"])
  });
  _validatorPrimitives.scheme.RecorderSource = (0, _validatorPrimitives.tObject)({
    isRecorded: _validatorPrimitives.tBoolean,
    id: _validatorPrimitives.tString,
    label: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    language: _validatorPrimitives.tString,
    highlight: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      line: _validatorPrimitives.tNumber,
      type: _validatorPrimitives.tString
    })),
    revealLine: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    group: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerInspectRequestedEvent = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    locator: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerSetModeRequestedEvent = (0, _validatorPrimitives.tObject)({
    mode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerStateChangedEvent = (0, _validatorPrimitives.tObject)({
    pageCount: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.DebugControllerSourceChangedEvent = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    header: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.DebugControllerPausedEvent = (0, _validatorPrimitives.tObject)({
    paused: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerInitializeParams = (0, _validatorPrimitives.tObject)({
    codegenId: _validatorPrimitives.tString,
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.DebugControllerInitializeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedParams = (0, _validatorPrimitives.tObject)({
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerNavigateParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerNavigateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["inspecting", "recording", "none"]),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksRequestedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksClosedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksFailedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    errorCode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksFailedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksDataParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksErrorParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksErrorResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksEndParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsRegisterParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    source: _validatorPrimitives.tString,
    contentScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.SelectorsRegisterResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameParams = (0, _validatorPrimitives.tObject)({
    testIdAttributeName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserTypeInitializer = (0, _validatorPrimitives.tObject)({
    executablePath: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"])
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    userDataDir: _validatorPrimitives.tString,
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPParams = (0, _validatorPrimitives.tObject)({
    endpointURL: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"]),
    defaultContext: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["BrowserContext"]))
  });
  _validatorPrimitives.scheme.BrowserInitializer = (0, _validatorPrimitives.tObject)({
    version: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestResult = (0, _validatorPrimitives.tObject)({
    userAgent: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserNewContextParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsParams = (0, _validatorPrimitives.tObject)({
    reason: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserStartTracingParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    categories: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.BrowserStartTracingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.EventTargetInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoParams = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tObject)({
      waitId: _validatorPrimitives.tString,
      phase: (0, _validatorPrimitives.tEnum)(["before", "after", "log"]),
      event: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })
  });
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.PageWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.PageWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.BrowserContextInitializer = (0, _validatorPrimitives.tObject)({
    isChromium: _validatorPrimitives.tBoolean,
    requestContext: (0, _validatorPrimitives.tChannel)(["APIRequestContext"]),
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.BrowserContextBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.BrowserContextConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    }),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextDialogEvent = (0, _validatorPrimitives.tObject)({
    dialog: (0, _validatorPrimitives.tChannel)(["Dialog"])
  });
  _validatorPrimitives.scheme.BrowserContextPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextPageErrorEvent = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError"),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.BrowserContextWebSocketRouteEvent = (0, _validatorPrimitives.tObject)({
    webSocketRoute: (0, _validatorPrimitives.tChannel)(["WebSocketRoute"])
  });
  _validatorPrimitives.scheme.BrowserContextVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextBackgroundPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextServiceWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.BrowserContextRequestEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFailedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    failureText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFinishedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"])),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextResponseEvent = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tChannel)(["Response"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesParams = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearCookiesParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    nameRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    nameRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domainRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domainRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    pathRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    pathRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClearCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCookiesParams = (0, _validatorPrimitives.tObject)({
    urls: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCookiesResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsParams = (0, _validatorPrimitives.tObject)({
    permissions: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString),
    origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageResult = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetGeolocationParams = (0, _validatorPrimitives.tObject)({
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetGeolocationResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsParams = (0, _validatorPrimitives.tObject)({
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetOfflineParams = (0, _validatorPrimitives.tObject)({
    offline: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextSetOfflineResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.BrowserContextPauseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextPauseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextEnableRecorderParams = (0, _validatorPrimitives.tObject)({
    language: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["inspecting", "recording"])),
    codegenMode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["actions", "trace-events"])),
    pauseOnNextStatement: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    launchOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    contextOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    device: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    saveStorage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    outputFile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    omitCallTracking: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextEnableRecorderResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserContextHarStartParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    options: (0, _validatorPrimitives.tType)("RecordHarOptions")
  });
  _validatorPrimitives.scheme.BrowserContextHarStartResult = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextHarExportParams = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextHarExportResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFilesParams = (0, _validatorPrimitives.tObject)({
    rootDirName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    items: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      lastModifiedMs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFilesResult = (0, _validatorPrimitives.tObject)({
    rootDir: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
    writableStreams: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockFastForwardParams = (0, _validatorPrimitives.tObject)({
    ticksNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ticksString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockFastForwardResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockInstallParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockInstallResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockPauseAtParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockPauseAtResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockRunForParams = (0, _validatorPrimitives.tObject)({
    ticksNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ticksString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockRunForResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockSetFixedTimeParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockSetFixedTimeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockSetSystemTimeParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockSetSystemTimeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageInitializer = (0, _validatorPrimitives.tObject)({
    mainFrame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    viewportSize: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    isClosed: _validatorPrimitives.tBoolean,
    opener: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.PageBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.PageCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCrashEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageDownloadEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    suggestedFilename: _validatorPrimitives.tString,
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageFileChooserEvent = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"]),
    isMultiple: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageFrameAttachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageFrameDetachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageLocatorHandlerTriggeredEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.PageWebSocketRouteEvent = (0, _validatorPrimitives.tObject)({
    webSocketRoute: (0, _validatorPrimitives.tChannel)(["WebSocketRoute"])
  });
  _validatorPrimitives.scheme.PageVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageWebSocketEvent = (0, _validatorPrimitives.tObject)({
    webSocket: (0, _validatorPrimitives.tChannel)(["WebSocket"])
  });
  _validatorPrimitives.scheme.PageWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCloseParams = (0, _validatorPrimitives.tObject)({
    runBeforeUnload: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageEmulateMediaParams = (0, _validatorPrimitives.tObject)({
    media: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["screen", "print", "no-override"])),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"]))
  });
  _validatorPrimitives.scheme.PageEmulateMediaResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageGoBackParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoBackResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageGoForwardParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoForwardResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageRequestGCParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageRequestGCResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerResult = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber,
    remove: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUnregisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageUnregisterLocatorHandlerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageReloadParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageReloadResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageExpectScreenshotParams = (0, _validatorPrimitives.tObject)({
    expected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isNot: _validatorPrimitives.tBoolean,
    locator: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    })),
    comparator: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    maxDiffPixels: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    maxDiffPixelRatio: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    threshold: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageExpectScreenshotResult = (0, _validatorPrimitives.tObject)({
    diff: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    errorMessage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actual: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    previous: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.PageScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetViewportSizeParams = (0, _validatorPrimitives.tObject)({
    viewportSize: (0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.PageSetViewportSizeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardDownParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardUpParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardInsertTextParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardInsertTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseMoveParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    steps: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseMoveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseDownParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseUpParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseClickParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseWheelParams = (0, _validatorPrimitives.tObject)({
    deltaX: _validatorPrimitives.tNumber,
    deltaY: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageMouseWheelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageTouchscreenTapParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageTouchscreenTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAccessibilitySnapshotParams = (0, _validatorPrimitives.tObject)({
    interestingOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    root: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.PageAccessibilitySnapshotResult = (0, _validatorPrimitives.tObject)({
    rootAXNode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("AXNode"))
  });
  _validatorPrimitives.scheme.PagePdfParams = (0, _validatorPrimitives.tObject)({
    scale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    displayHeaderFooter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    headerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    printBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    landscape: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pageRanges: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    format: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    width: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    height: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    preferCSSPageSize: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    margin: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      top: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      bottom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      left: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      right: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    tagged: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    outline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PagePdfResult = (0, _validatorPrimitives.tObject)({
    pdf: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageStartJSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reportAnonymousScripts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartJSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      scriptId: _validatorPrimitives.tString,
      source: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      functions: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        functionName: _validatorPrimitives.tString,
        isBlockCoverage: _validatorPrimitives.tBoolean,
        ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          startOffset: _validatorPrimitives.tNumber,
          endOffset: _validatorPrimitives.tNumber,
          count: _validatorPrimitives.tNumber
        }))
      }))
    }))
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        start: _validatorPrimitives.tNumber,
        end: _validatorPrimitives.tNumber
      }))
    }))
  });
  _validatorPrimitives.scheme.PageBringToFrontParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageBringToFrontResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "fileChooser", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    parentFrame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    loadStates: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameLoadstateEvent = (0, _validatorPrimitives.tObject)({
    add: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    remove: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameNavigatedEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    newDocument: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
    })),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameAddScriptTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    type: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddScriptTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameAddStyleTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddStyleTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameBlurParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameBlurResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameCheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameClickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameDragAndDropParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString,
    target: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sourcePosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    targetPosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDragAndDropResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDblclickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDispatchEventParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameFillParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFocusParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameGetAttributeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    name: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    referer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.FrameHoverParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInnerHTMLParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInnerTextParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInputValueParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameIsCheckedParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsDisabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEnabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsHiddenParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsVisibleParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEditableParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FramePressParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FramePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQueryCountParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQueryCountResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameSelectOptionParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameSetContentParams = (0, _validatorPrimitives.tObject)({
    html: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameSetContentResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localDirectory: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    directoryStream: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTapParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTextContentParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameTitleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTitleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameTypeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameUncheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForTimeoutParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameWaitForTimeoutResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForFunctionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    pollingInterval: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameWaitForFunctionResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"])),
    omitReturnValue: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameExpectParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    expressionArg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    expectedText: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("ExpectedTextValue"))),
    expectedNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    expectedValue: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedArgument")),
    useInnerText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    isNot: _validatorPrimitives.tBoolean,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameExpectResult = (0, _validatorPrimitives.tObject)({
    matches: _validatorPrimitives.tBoolean,
    received: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue")),
    timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.WorkerInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WorkerCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WorkerEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.JSHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.JSHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tType)("JSHandlePreviewUpdatedEvent");
  _validatorPrimitives.scheme.JSHandleDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeParams = (0, _validatorPrimitives.tType)("JSHandleDisposeParams");
  _validatorPrimitives.scheme.JSHandleDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeResult = (0, _validatorPrimitives.tType)("JSHandleDisposeResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyListParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetPropertyListParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyListResult = (0, _validatorPrimitives.tObject)({
    properties: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    }))
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyListResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyResult");
  _validatorPrimitives.scheme.JSHandleJsonValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleJsonValueParams = (0, _validatorPrimitives.tType)("JSHandleJsonValueParams");
  _validatorPrimitives.scheme.JSHandleJsonValueResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleJsonValueResult = (0, _validatorPrimitives.tType)("JSHandleJsonValueResult");
  _validatorPrimitives.scheme.ElementHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleBoundingBoxParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleBoundingBoxResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect"))
  });
  _validatorPrimitives.scheme.ElementHandleCheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleClickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandleDblclickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDispatchEventParams = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFillParams = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetAttributeParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleHoverParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInnerTextParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInputValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleIsCheckedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsDisabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEditableParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEnabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsHiddenParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsVisibleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleOwnerFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleOwnerFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandlePressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandlePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSelectOptionParams = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localDirectory: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    directoryStream: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTapParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleUncheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateParams = (0, _validatorPrimitives.tObject)({
    state: (0, _validatorPrimitives.tEnum)(["visible", "hidden", "stable", "enabled", "disabled", "editable"]),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"]))
  });
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.RequestInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    serviceWorker: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Worker"])),
    url: _validatorPrimitives.tString,
    resourceType: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    isNavigationRequest: _validatorPrimitives.tBoolean,
    redirectedFrom: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
  });
  _validatorPrimitives.scheme.RequestResponseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestResponseResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.RequestRawRequestHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestRawRequestHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.RouteInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"])
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteAbortParams = (0, _validatorPrimitives.tObject)({
    errorCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.RouteAbortResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteContinueParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    isFallback: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.RouteContinueResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteFulfillParams = (0, _validatorPrimitives.tObject)({
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    isBase64: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    fetchResponseUid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.RouteFulfillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketRouteMessageFromPageEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteMessageFromServerEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteClosePageEvent = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteCloseServerEvent = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteConnectParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteConnectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteEnsureOpenedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteEnsureOpenedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteSendToPageParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteSendToPageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteSendToServerParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteSendToServerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteClosePageParams = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteClosePageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteCloseServerParams = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteCloseServerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResourceTiming = (0, _validatorPrimitives.tObject)({
    startTime: _validatorPrimitives.tNumber,
    domainLookupStart: _validatorPrimitives.tNumber,
    domainLookupEnd: _validatorPrimitives.tNumber,
    connectStart: _validatorPrimitives.tNumber,
    secureConnectionStart: _validatorPrimitives.tNumber,
    connectEnd: _validatorPrimitives.tNumber,
    requestStart: _validatorPrimitives.tNumber,
    responseStart: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.ResponseInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    timing: (0, _validatorPrimitives.tType)("ResourceTiming"),
    fromServiceWorker: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ResponseBodyParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ResponseSecurityDetailsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSecurityDetailsResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SecurityDetails"))
  });
  _validatorPrimitives.scheme.ResponseServerAddrParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseServerAddrResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RemoteAddr"))
  });
  _validatorPrimitives.scheme.ResponseRawResponseHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseRawResponseHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.ResponseSizesParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSizesResult = (0, _validatorPrimitives.tObject)({
    sizes: (0, _validatorPrimitives.tType)("RequestSizes")
  });
  _validatorPrimitives.scheme.SecurityDetails = (0, _validatorPrimitives.tObject)({
    issuer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    protocol: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    subjectName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    validFrom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    validTo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.RequestSizes = (0, _validatorPrimitives.tObject)({
    requestBodySize: _validatorPrimitives.tNumber,
    requestHeadersSize: _validatorPrimitives.tNumber,
    responseBodySize: _validatorPrimitives.tNumber,
    responseHeadersSize: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.RemoteAddr = (0, _validatorPrimitives.tObject)({
    ipAddress: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.WebSocketInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketOpenEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketFrameSentEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketFrameReceivedEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketSocketErrorEvent = (0, _validatorPrimitives.tObject)({
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    name: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    handle: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"]))
  });
  _validatorPrimitives.scheme.BindingCallRejectParams = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError")
  });
  _validatorPrimitives.scheme.BindingCallRejectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallResolveParams = (0, _validatorPrimitives.tObject)({
    result: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.BindingCallResolveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogInitializer = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    type: _validatorPrimitives.tString,
    message: _validatorPrimitives.tString,
    defaultValue: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DialogAcceptParams = (0, _validatorPrimitives.tObject)({
    promptText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DialogAcceptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    snapshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    live: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.TracingTracingStartResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartChunkParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    title: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.TracingTracingStartChunkResult = (0, _validatorPrimitives.tObject)({
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["archive", "discard", "entries"])
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Artifact"])),
    entries: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")))
  });
  _validatorPrimitives.scheme.TracingTracingStopParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStopResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactInitializer = (0, _validatorPrimitives.tObject)({
    absolutePath: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsParams = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactFailureParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactFailureResult = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ArtifactStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactCancelParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactCancelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamReadParams = (0, _validatorPrimitives.tObject)({
    size: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.StreamReadResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.StreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamWriteParams = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.WritableStreamWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionEventEvent = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendParams = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.CDPSessionDetachParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionDetachResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronLaunchParams = (0, _validatorPrimitives.tObject)({
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    cwd: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElectronLaunchResult = (0, _validatorPrimitives.tObject)({
    electronApplication: (0, _validatorPrimitives.tChannel)(["ElectronApplication"])
  });
  _validatorPrimitives.scheme.ElectronApplicationInitializer = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.ElectronApplicationCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicesParams = (0, _validatorPrimitives.tObject)({
    host: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    port: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitDriverInstall: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AndroidDevicesResult = (0, _validatorPrimitives.tObject)({
    devices: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["AndroidDevice"]))
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketDataEvent = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketWriteParams = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInitializer = (0, _validatorPrimitives.tObject)({
    model: _validatorPrimitives.tString,
    serial: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceWebViewAddedEvent = (0, _validatorPrimitives.tObject)({
    webView: (0, _validatorPrimitives.tType)("AndroidWebView")
  });
  _validatorPrimitives.scheme.AndroidDeviceWebViewRemovedEvent = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["gone"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFillParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    text: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    duration: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceDragParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    dest: (0, _validatorPrimitives.tType)("Point"),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFlingParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFlingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLongTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceLongTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchCloseParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchOpenParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchOpenResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScrollParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceScrollResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSwipeParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInfoParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector")
  });
  _validatorPrimitives.scheme.AndroidDeviceInfoResult = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tType)("AndroidElementInfo")
  });
  _validatorPrimitives.scheme.AndroidDeviceScreenshotParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputTapParams = (0, _validatorPrimitives.tObject)({
    point: (0, _validatorPrimitives.tType)("Point")
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeParams = (0, _validatorPrimitives.tObject)({
    segments: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("Point")),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputDragParams = (0, _validatorPrimitives.tObject)({
    from: (0, _validatorPrimitives.tType)("Point"),
    to: (0, _validatorPrimitives.tType)("Point"),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenResult = (0, _validatorPrimitives.tObject)({
    socket: (0, _validatorPrimitives.tChannel)(["AndroidSocket"])
  });
  _validatorPrimitives.scheme.AndroidDeviceShellParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceShellResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePushParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    path: _validatorPrimitives.tString,
    mode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePushResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewParams = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidWebView = (0, _validatorPrimitives.tObject)({
    pid: _validatorPrimitives.tNumber,
    pkg: _validatorPrimitives.tString,
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidSelector = (0, _validatorPrimitives.tObject)({
    checkable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clazz: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    clickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    depth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    desc: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    enabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focusable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasChild: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector")
    })),
    hasDescendant: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      maxDepth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    longClickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    res: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    scrollable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.AndroidElementInfo = (0, _validatorPrimitives.tObject)({
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AndroidElementInfo"))),
    clazz: _validatorPrimitives.tString,
    desc: _validatorPrimitives.tString,
    res: _validatorPrimitives.tString,
    pkg: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    bounds: (0, _validatorPrimitives.tType)("Rect"),
    checkable: _validatorPrimitives.tBoolean,
    checked: _validatorPrimitives.tBoolean,
    clickable: _validatorPrimitives.tBoolean,
    enabled: _validatorPrimitives.tBoolean,
    focusable: _validatorPrimitives.tBoolean,
    focused: _validatorPrimitives.tBoolean,
    longClickable: _validatorPrimitives.tBoolean,
    scrollable: _validatorPrimitives.tBoolean,
    selected: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.JsonPipeInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeMessageEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeClosedEvent = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.JsonPipeSendParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeSendResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
})(validator);
var errors$2 = {};
var serializers = {};
Object.defineProperty(serializers, "__esModule", {
  value: true
});
serializers.parseSerializedValue = parseSerializedValue;
serializers.serializeValue = serializeValue;
function parseSerializedValue(value, handles) {
  return innerParseSerializedValue(value, handles, /* @__PURE__ */ new Map());
}
function innerParseSerializedValue(value, handles, refs) {
  if (value.ref !== void 0) return refs.get(value.ref);
  if (value.n !== void 0) return value.n;
  if (value.s !== void 0) return value.s;
  if (value.b !== void 0) return value.b;
  if (value.v !== void 0) {
    if (value.v === "undefined") return void 0;
    if (value.v === "null") return null;
    if (value.v === "NaN") return NaN;
    if (value.v === "Infinity") return Infinity;
    if (value.v === "-Infinity") return -Infinity;
    if (value.v === "-0") return -0;
  }
  if (value.d !== void 0) return new Date(value.d);
  if (value.u !== void 0) return new URL(value.u);
  if (value.bi !== void 0) return BigInt(value.bi);
  if (value.e !== void 0) {
    const error = new Error(value.e.m);
    error.name = value.e.n;
    error.stack = value.e.s;
    return error;
  }
  if (value.r !== void 0) return new RegExp(value.r.p, value.r.f);
  if (value.a !== void 0) {
    const result2 = [];
    refs.set(value.id, result2);
    for (const v of value.a) result2.push(innerParseSerializedValue(v, handles, refs));
    return result2;
  }
  if (value.o !== void 0) {
    const result2 = {};
    refs.set(value.id, result2);
    for (const {
      k,
      v
    } of value.o) result2[k] = innerParseSerializedValue(v, handles, refs);
    return result2;
  }
  if (value.h !== void 0) {
    if (handles === void 0) throw new Error("Unexpected handle");
    return handles[value.h];
  }
  throw new Error("Unexpected value");
}
function serializeValue(value, handleSerializer) {
  return innerSerializeValue(value, handleSerializer, {
    lastId: 0,
    visited: /* @__PURE__ */ new Map()
  });
}
function innerSerializeValue(value, handleSerializer, visitorInfo) {
  const handle = handleSerializer(value);
  if ("fallThrough" in handle) value = handle.fallThrough;
  else return handle;
  if (typeof value === "symbol") return {
    v: "undefined"
  };
  if (Object.is(value, void 0)) return {
    v: "undefined"
  };
  if (Object.is(value, null)) return {
    v: "null"
  };
  if (Object.is(value, NaN)) return {
    v: "NaN"
  };
  if (Object.is(value, Infinity)) return {
    v: "Infinity"
  };
  if (Object.is(value, -Infinity)) return {
    v: "-Infinity"
  };
  if (Object.is(value, -0)) return {
    v: "-0"
  };
  if (typeof value === "boolean") return {
    b: value
  };
  if (typeof value === "number") return {
    n: value
  };
  if (typeof value === "string") return {
    s: value
  };
  if (typeof value === "bigint") return {
    bi: value.toString()
  };
  if (isError(value)) return {
    e: {
      n: value.name,
      m: value.message,
      s: value.stack || ""
    }
  };
  if (isDate$1(value)) return {
    d: value.toJSON()
  };
  if (isURL(value)) return {
    u: value.toJSON()
  };
  if (isRegExp$1(value)) return {
    r: {
      p: value.source,
      f: value.flags
    }
  };
  const id = visitorInfo.visited.get(value);
  if (id) return {
    ref: id
  };
  if (Array.isArray(value)) {
    const a = [];
    const id2 = ++visitorInfo.lastId;
    visitorInfo.visited.set(value, id2);
    for (let i = 0; i < value.length; ++i) a.push(innerSerializeValue(value[i], handleSerializer, visitorInfo));
    return {
      a,
      id: id2
    };
  }
  if (typeof value === "object") {
    const o = [];
    const id2 = ++visitorInfo.lastId;
    visitorInfo.visited.set(value, id2);
    for (const name2 of Object.keys(value)) o.push({
      k: name2,
      v: innerSerializeValue(value[name2], handleSerializer, visitorInfo)
    });
    return {
      o,
      id: id2
    };
  }
  throw new Error("Unexpected value");
}
function isRegExp$1(obj) {
  return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
}
function isDate$1(obj) {
  return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
}
function isURL(obj) {
  return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
}
function isError(obj) {
  const proto = obj ? Object.getPrototypeOf(obj) : null;
  return obj instanceof Error || (proto === null || proto === void 0 ? void 0 : proto.name) === "Error" || proto && isError(proto);
}
Object.defineProperty(errors$2, "__esModule", {
  value: true
});
errors$2.TimeoutError = errors$2.TargetClosedError = void 0;
errors$2.isTargetClosedError = isTargetClosedError$1;
errors$2.parseError = parseError$1;
errors$2.serializeError = serializeError$1;
var _utils$S = requireUtils();
var _serializers$2 = serializers;
class CustomError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
  }
}
let TimeoutError$1 = class TimeoutError extends CustomError {
};
errors$2.TimeoutError = TimeoutError$1;
let TargetClosedError$1 = class TargetClosedError extends CustomError {
  constructor(cause, logs) {
    super((cause || "Target page, context or browser has been closed") + (logs || ""));
  }
};
errors$2.TargetClosedError = TargetClosedError$1;
function isTargetClosedError$1(error) {
  return error instanceof TargetClosedError$1 || error.name === "TargetClosedError";
}
function serializeError$1(e) {
  if ((0, _utils$S.isError)(e)) return {
    error: {
      message: e.message,
      stack: e.stack,
      name: e.name
    }
  };
  return {
    value: (0, _serializers$2.serializeValue)(e, (value) => ({
      fallThrough: value
    }))
  };
}
function parseError$1(error) {
  if (!error.error) {
    if (error.value === void 0) throw new Error("Serialized error must have either an error or a value");
    return (0, _serializers$2.parseSerializedValue)(error.value, void 0);
  }
  const e = new Error(error.error.message);
  e.stack = error.error.stack || "";
  e.name = error.error.name;
  return e;
}
var instrumentation = {};
Object.defineProperty(instrumentation, "__esModule", {
  value: true
});
instrumentation.SdkObject = void 0;
instrumentation.createInstrumentation = createInstrumentation$1;
instrumentation.serverSideCallMetadata = serverSideCallMetadata;
var _events$d = require$$0$1;
var _utils$R = requireUtils();
class SdkObject extends _events$d.EventEmitter {
  constructor(parent, guidPrefix, guid) {
    super();
    this.guid = void 0;
    this.attribution = void 0;
    this.instrumentation = void 0;
    this.guid = guid || `${guidPrefix || ""}@${(0, _utils$R.createGuid)()}`;
    this.setMaxListeners(0);
    this.attribution = {
      ...parent.attribution
    };
    this.instrumentation = parent.instrumentation;
  }
}
instrumentation.SdkObject = SdkObject;
function createInstrumentation$1() {
  const listeners = /* @__PURE__ */ new Map();
  return new Proxy({}, {
    get: (obj, prop) => {
      if (typeof prop !== "string") return obj[prop];
      if (prop === "addListener") return (listener, context) => listeners.set(listener, context);
      if (prop === "removeListener") return (listener) => listeners.delete(listener);
      if (!prop.startsWith("on")) return obj[prop];
      return async (sdkObject, ...params) => {
        for (const [listener, context] of listeners) {
          var _prop, _ref;
          if (!context || sdkObject.attribution.context === context) await ((_prop = (_ref = listener)[prop]) === null || _prop === void 0 ? void 0 : _prop.call(_ref, sdkObject, ...params));
        }
      };
    }
  });
}
function serverSideCallMetadata() {
  return {
    id: "",
    startTime: 0,
    endTime: 0,
    type: "Internal",
    method: "",
    params: {},
    log: [],
    isServerSide: true
  };
}
var protocolError = {};
Object.defineProperty(protocolError, "__esModule", {
  value: true
});
protocolError.ProtocolError = void 0;
protocolError.isProtocolError = isProtocolError;
protocolError.isSessionClosedError = isSessionClosedError;
var _stackTrace$6 = requireStackTrace();
class ProtocolError extends Error {
  constructor(type, method, logs) {
    super();
    this.type = void 0;
    this.method = void 0;
    this.logs = void 0;
    this.type = type;
    this.method = method;
    this.logs = logs;
  }
  setMessage(message) {
    (0, _stackTrace$6.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
  }
  browserLogMessage() {
    return this.logs ? "\nBrowser logs:\n" + this.logs : "";
  }
}
protocolError.ProtocolError = ProtocolError;
function isProtocolError(e) {
  return e instanceof ProtocolError;
}
function isSessionClosedError(e) {
  return e instanceof ProtocolError && (e.type === "closed" || e.type === "crashed");
}
Object.defineProperty(dispatcher, "__esModule", {
  value: true
});
dispatcher.dispatcherSymbol = dispatcher.RootDispatcher = dispatcher.DispatcherConnection = dispatcher.Dispatcher = void 0;
dispatcher.existingDispatcher = existingDispatcher;
dispatcher.setMaxDispatchersForTest = setMaxDispatchersForTest;
var _events$c = require$$0$1;
var _validator$2 = validator;
var _utils$Q = requireUtils();
var _errors$7 = errors$2;
var _instrumentation$8 = instrumentation;
var _eventsHelper$4 = eventsHelper;
var _protocolError$8 = protocolError;
const dispatcherSymbol = dispatcher.dispatcherSymbol = Symbol("dispatcher");
const metadataValidator = (0, _validator$2.createMetadataValidator)();
function existingDispatcher(object) {
  return object[dispatcherSymbol];
}
let maxDispatchersOverride;
function setMaxDispatchersForTest(value) {
  maxDispatchersOverride = value;
}
function maxDispatchersForBucket(gcBucket) {
  var _ref, _maxDispatchersOverri;
  return (_ref = (_maxDispatchersOverri = maxDispatchersOverride) !== null && _maxDispatchersOverri !== void 0 ? _maxDispatchersOverri : {
    "JSHandle": 1e5,
    "ElementHandle": 1e5
  }[gcBucket]) !== null && _ref !== void 0 ? _ref : 1e4;
}
class Dispatcher extends _events$c.EventEmitter {
  constructor(parent, object, type, initializer, gcBucket) {
    super();
    this._connection = void 0;
    this._parent = void 0;
    this._dispatchers = /* @__PURE__ */ new Map();
    this._disposed = false;
    this._eventListeners = [];
    this._guid = void 0;
    this._type = void 0;
    this._gcBucket = void 0;
    this._object = void 0;
    this._openScope = new _utils$Q.LongStandingScope();
    this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
    this._parent = parent instanceof DispatcherConnection ? void 0 : parent;
    const guid = object.guid;
    this._guid = guid;
    this._type = type;
    this._object = object;
    this._gcBucket = gcBucket !== null && gcBucket !== void 0 ? gcBucket : type;
    object[dispatcherSymbol] = this;
    this._connection.registerDispatcher(this);
    if (this._parent) {
      (0, _utils$Q.assert)(!this._parent._dispatchers.has(guid));
      this._parent._dispatchers.set(guid, this);
    }
    if (this._parent) this._connection.sendCreate(this._parent, type, guid, initializer);
    this._connection.maybeDisposeStaleDispatchers(this._gcBucket);
  }
  parentScope() {
    return this._parent;
  }
  addObjectListener(eventName, handler) {
    this._eventListeners.push(_eventsHelper$4.eventsHelper.addEventListener(this._object, eventName, handler));
  }
  adopt(child) {
    if (child._parent === this) return;
    const oldParent = child._parent;
    oldParent._dispatchers.delete(child._guid);
    this._dispatchers.set(child._guid, child);
    child._parent = this;
    this._connection.sendAdopt(this, child);
  }
  async _handleCommand(callMetadata, method, validParams) {
    const commandPromise = this[method](validParams, callMetadata);
    try {
      return await this._openScope.race(commandPromise);
    } catch (e) {
      if (callMetadata.potentiallyClosesScope && (0, _errors$7.isTargetClosedError)(e)) return await commandPromise;
      throw e;
    }
  }
  _dispatchEvent(method, params) {
    if (this._disposed) {
      if ((0, _utils$Q.isUnderTest)()) throw new Error(`${this._guid} is sending "${String(method)}" event after being disposed`);
      return;
    }
    this._connection.sendEvent(this, method, params);
  }
  _dispose(reason) {
    this._disposeRecursively(new _errors$7.TargetClosedError());
    this._connection.sendDispose(this, reason);
  }
  _onDispose() {
  }
  _disposeRecursively(error) {
    var _this$_parent;
    (0, _utils$Q.assert)(!this._disposed, `${this._guid} is disposed more than once`);
    this._onDispose();
    this._disposed = true;
    _eventsHelper$4.eventsHelper.removeEventListeners(this._eventListeners);
    (_this$_parent = this._parent) === null || _this$_parent === void 0 || _this$_parent._dispatchers.delete(this._guid);
    const list = this._connection._dispatchersByBucket.get(this._gcBucket);
    list === null || list === void 0 || list.delete(this._guid);
    this._connection._dispatchers.delete(this._guid);
    for (const dispatcher2 of [...this._dispatchers.values()]) dispatcher2._disposeRecursively(error);
    this._dispatchers.clear();
    delete this._object[dispatcherSymbol];
    this._openScope.close(error);
  }
  _debugScopeState() {
    return {
      _guid: this._guid,
      objects: Array.from(this._dispatchers.values()).map((o) => o._debugScopeState())
    };
  }
  async waitForEventInfo() {
  }
}
dispatcher.Dispatcher = Dispatcher;
class RootDispatcher extends Dispatcher {
  constructor(connection2, createPlaywright) {
    super(connection2, {
      guid: ""
    }, "Root", {});
    this._initialized = false;
    this.createPlaywright = createPlaywright;
  }
  async initialize(params) {
    (0, _utils$Q.assert)(this.createPlaywright);
    (0, _utils$Q.assert)(!this._initialized);
    this._initialized = true;
    return {
      playwright: await this.createPlaywright(this, params)
    };
  }
}
dispatcher.RootDispatcher = RootDispatcher;
class DispatcherConnection {
  constructor(isLocal) {
    this._dispatchers = /* @__PURE__ */ new Map();
    this._dispatchersByBucket = /* @__PURE__ */ new Map();
    this.onmessage = (message) => {
    };
    this._waitOperations = /* @__PURE__ */ new Map();
    this._isLocal = void 0;
    this._isLocal = !!isLocal;
  }
  sendEvent(dispatcher2, event, params) {
    const validator2 = (0, _validator$2.findValidator)(dispatcher2._type, event, "Event");
    params = validator2(params, "", {
      tChannelImpl: this._tChannelImplToWire.bind(this),
      binary: this._isLocal ? "buffer" : "toBase64"
    });
    this.onmessage({
      guid: dispatcher2._guid,
      method: event,
      params
    });
  }
  sendCreate(parent, type, guid, initializer) {
    const validator2 = (0, _validator$2.findValidator)(type, "", "Initializer");
    initializer = validator2(initializer, "", {
      tChannelImpl: this._tChannelImplToWire.bind(this),
      binary: this._isLocal ? "buffer" : "toBase64"
    });
    this.onmessage({
      guid: parent._guid,
      method: "__create__",
      params: {
        type,
        initializer,
        guid
      }
    });
  }
  sendAdopt(parent, dispatcher2) {
    this.onmessage({
      guid: parent._guid,
      method: "__adopt__",
      params: {
        guid: dispatcher2._guid
      }
    });
  }
  sendDispose(dispatcher2, reason) {
    this.onmessage({
      guid: dispatcher2._guid,
      method: "__dispose__",
      params: {
        reason
      }
    });
  }
  _tChannelImplFromWire(names, arg, path2, context) {
    if (arg && typeof arg === "object" && typeof arg.guid === "string") {
      const guid = arg.guid;
      const dispatcher2 = this._dispatchers.get(guid);
      if (!dispatcher2) throw new _validator$2.ValidationError(`${path2}: no object with guid ${guid}`);
      if (names !== "*" && !names.includes(dispatcher2._type)) throw new _validator$2.ValidationError(`${path2}: object with guid ${guid} has type ${dispatcher2._type}, expected ${names.toString()}`);
      return dispatcher2;
    }
    throw new _validator$2.ValidationError(`${path2}: expected guid for ${names.toString()}`);
  }
  _tChannelImplToWire(names, arg, path2, context) {
    if (arg instanceof Dispatcher) {
      if (names !== "*" && !names.includes(arg._type)) throw new _validator$2.ValidationError(`${path2}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);
      return {
        guid: arg._guid
      };
    }
    throw new _validator$2.ValidationError(`${path2}: expected dispatcher ${names.toString()}`);
  }
  registerDispatcher(dispatcher2) {
    (0, _utils$Q.assert)(!this._dispatchers.has(dispatcher2._guid));
    this._dispatchers.set(dispatcher2._guid, dispatcher2);
    let list = this._dispatchersByBucket.get(dispatcher2._gcBucket);
    if (!list) {
      list = /* @__PURE__ */ new Set();
      this._dispatchersByBucket.set(dispatcher2._gcBucket, list);
    }
    list.add(dispatcher2._guid);
  }
  maybeDisposeStaleDispatchers(gcBucket) {
    const maxDispatchers = maxDispatchersForBucket(gcBucket);
    const list = this._dispatchersByBucket.get(gcBucket);
    if (!list || list.size <= maxDispatchers) return;
    const dispatchersArray = [...list];
    const disposeCount = maxDispatchers / 10 | 0;
    this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));
    for (let i = 0; i < disposeCount; ++i) {
      const d = this._dispatchers.get(dispatchersArray[i]);
      if (!d) continue;
      d._dispose("gc");
    }
  }
  async dispatch(message) {
    var _sdkObject$attributio, _sdkObject$attributio2, _params$info;
    const {
      id,
      guid,
      method,
      params,
      metadata
    } = message;
    const dispatcher2 = this._dispatchers.get(guid);
    if (!dispatcher2) {
      this.onmessage({
        id,
        error: (0, _errors$7.serializeError)(new _errors$7.TargetClosedError())
      });
      return;
    }
    let validParams;
    let validMetadata;
    try {
      const validator2 = (0, _validator$2.findValidator)(dispatcher2._type, method, "Params");
      validParams = validator2(params, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._isLocal ? "buffer" : "fromBase64"
      });
      validMetadata = metadataValidator(metadata, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._isLocal ? "buffer" : "fromBase64"
      });
      if (typeof dispatcher2[method] !== "function") throw new Error(`Mismatching dispatcher: "${dispatcher2._type}" does not implement "${method}"`);
    } catch (e) {
      this.onmessage({
        id,
        error: (0, _errors$7.serializeError)(e)
      });
      return;
    }
    const sdkObject = dispatcher2._object instanceof _instrumentation$8.SdkObject ? dispatcher2._object : void 0;
    const callMetadata = {
      id: `call@${id}`,
      location: validMetadata.location,
      apiName: validMetadata.apiName,
      internal: validMetadata.internal,
      stepId: validMetadata.stepId,
      objectId: sdkObject === null || sdkObject === void 0 ? void 0 : sdkObject.guid,
      pageId: sdkObject === null || sdkObject === void 0 || (_sdkObject$attributio = sdkObject.attribution) === null || _sdkObject$attributio === void 0 || (_sdkObject$attributio = _sdkObject$attributio.page) === null || _sdkObject$attributio === void 0 ? void 0 : _sdkObject$attributio.guid,
      frameId: sdkObject === null || sdkObject === void 0 || (_sdkObject$attributio2 = sdkObject.attribution) === null || _sdkObject$attributio2 === void 0 || (_sdkObject$attributio2 = _sdkObject$attributio2.frame) === null || _sdkObject$attributio2 === void 0 ? void 0 : _sdkObject$attributio2.guid,
      startTime: (0, _utils$Q.monotonicTime)(),
      endTime: 0,
      type: dispatcher2._type,
      method,
      params: params || {},
      log: []
    };
    if (sdkObject && params !== null && params !== void 0 && (_params$info = params.info) !== null && _params$info !== void 0 && _params$info.waitId) {
      const info = params.info;
      switch (info.phase) {
        case "before": {
          this._waitOperations.set(info.waitId, callMetadata);
          await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);
          this.onmessage({
            id
          });
          return;
        }
        case "log": {
          const originalMetadata = this._waitOperations.get(info.waitId);
          originalMetadata.log.push(info.message);
          sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, "api", info.message);
          this.onmessage({
            id
          });
          return;
        }
        case "after": {
          const originalMetadata = this._waitOperations.get(info.waitId);
          originalMetadata.endTime = (0, _utils$Q.monotonicTime)();
          originalMetadata.error = info.error ? {
            error: {
              name: "Error",
              message: info.error
            }
          } : void 0;
          this._waitOperations.delete(info.waitId);
          await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);
          this.onmessage({
            id
          });
          return;
        }
      }
    }
    await (sdkObject === null || sdkObject === void 0 ? void 0 : sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata));
    const response = {
      id
    };
    try {
      const result2 = await dispatcher2._handleCommand(callMetadata, method, validParams);
      const validator2 = (0, _validator$2.findValidator)(dispatcher2._type, method, "Result");
      response.result = validator2(result2, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      callMetadata.result = result2;
    } catch (e) {
      if ((0, _errors$7.isTargetClosedError)(e) && sdkObject) {
        const reason = closeReason(sdkObject);
        if (reason) (0, _utils$Q.rewriteErrorMessage)(e, reason);
      } else if ((0, _protocolError$8.isProtocolError)(e)) {
        if (e.type === "closed") {
          const reason = sdkObject ? closeReason(sdkObject) : void 0;
          e = new _errors$7.TargetClosedError(reason, e.browserLogMessage());
        } else if (e.type === "crashed") {
          (0, _utils$Q.rewriteErrorMessage)(e, "Target crashed " + e.browserLogMessage());
        }
      }
      response.error = (0, _errors$7.serializeError)(e);
      callMetadata.error = response.error;
    } finally {
      callMetadata.endTime = (0, _utils$Q.monotonicTime)();
      await (sdkObject === null || sdkObject === void 0 ? void 0 : sdkObject.instrumentation.onAfterCall(sdkObject, callMetadata));
    }
    if (response.error) response.log = callMetadata.log;
    this.onmessage(response);
  }
}
dispatcher.DispatcherConnection = DispatcherConnection;
function closeReason(sdkObject) {
  var _sdkObject$attributio3, _sdkObject$attributio4, _sdkObject$attributio5;
  return ((_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === void 0 ? void 0 : _sdkObject$attributio3._closeReason) || ((_sdkObject$attributio4 = sdkObject.attribution.context) === null || _sdkObject$attributio4 === void 0 ? void 0 : _sdkObject$attributio4._closeReason) || ((_sdkObject$attributio5 = sdkObject.attribution.browser) === null || _sdkObject$attributio5 === void 0 ? void 0 : _sdkObject$attributio5._closeReason);
}
var playwrightDispatcher = {};
var fetch$1 = {};
var timeoutSettings = {};
Object.defineProperty(timeoutSettings, "__esModule", {
  value: true
});
timeoutSettings.TimeoutSettings = timeoutSettings.DEFAULT_TIMEOUT = timeoutSettings.DEFAULT_LAUNCH_TIMEOUT = void 0;
var _utils$P = requireUtils();
const DEFAULT_TIMEOUT = timeoutSettings.DEFAULT_TIMEOUT = 3e4;
const DEFAULT_LAUNCH_TIMEOUT = timeoutSettings.DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1e3;
class TimeoutSettings {
  constructor(parent) {
    this._parent = void 0;
    this._defaultTimeout = void 0;
    this._defaultNavigationTimeout = void 0;
    this._parent = parent;
  }
  setDefaultTimeout(timeout) {
    this._defaultTimeout = timeout;
  }
  setDefaultNavigationTimeout(timeout) {
    this._defaultNavigationTimeout = timeout;
  }
  defaultNavigationTimeout() {
    return this._defaultNavigationTimeout;
  }
  defaultTimeout() {
    return this._defaultTimeout;
  }
  navigationTimeout(options) {
    if (typeof options.timeout === "number") return options.timeout;
    if (this._defaultNavigationTimeout !== void 0) return this._defaultNavigationTimeout;
    if ((0, _utils$P.debugMode)()) return 0;
    if (this._defaultTimeout !== void 0) return this._defaultTimeout;
    if (this._parent) return this._parent.navigationTimeout(options);
    return DEFAULT_TIMEOUT;
  }
  timeout(options) {
    if (typeof options.timeout === "number") return options.timeout;
    if ((0, _utils$P.debugMode)()) return 0;
    if (this._defaultTimeout !== void 0) return this._defaultTimeout;
    if (this._parent) return this._parent.timeout(options);
    return DEFAULT_TIMEOUT;
  }
  static timeout(options) {
    if (typeof options.timeout === "number") return options.timeout;
    if ((0, _utils$P.debugMode)()) return 0;
    return DEFAULT_TIMEOUT;
  }
  static launchTimeout(options) {
    if (typeof options.timeout === "number") return options.timeout;
    if ((0, _utils$P.debugMode)()) return 0;
    return DEFAULT_LAUNCH_TIMEOUT;
  }
}
timeoutSettings.TimeoutSettings = TimeoutSettings;
var browserContext$1 = {};
var helper = {};
Object.defineProperty(helper, "__esModule", {
  value: true
});
helper.helper = void 0;
var _debugLogger$a = debugLogger;
var _eventsHelper$3 = eventsHelper;
const MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;
class Helper {
  static completeUserURL(urlString) {
    if (urlString.startsWith("localhost") || urlString.startsWith("127.0.0.1")) urlString = "http://" + urlString;
    return urlString;
  }
  static enclosingIntRect(rect) {
    const x = Math.floor(rect.x + 1e-3);
    const y = Math.floor(rect.y + 1e-3);
    const x2 = Math.ceil(rect.x + rect.width - 1e-3);
    const y2 = Math.ceil(rect.y + rect.height - 1e-3);
    return {
      x,
      y,
      width: x2 - x,
      height: y2 - y
    };
  }
  static enclosingIntSize(size) {
    return {
      width: Math.floor(size.width + 1e-3),
      height: Math.floor(size.height + 1e-3)
    };
  }
  static getViewportSizeFromWindowFeatures(features) {
    const widthString = features.find((f) => f.startsWith("width="));
    const heightString = features.find((f) => f.startsWith("height="));
    const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;
    const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;
    if (!Number.isNaN(width) && !Number.isNaN(height)) return {
      width,
      height
    };
    return null;
  }
  static waitForEvent(progress2, emitter, event, predicate) {
    const listeners = [];
    const promise = new Promise((resolve, reject) => {
      listeners.push(_eventsHelper$3.eventsHelper.addEventListener(emitter, event, (eventArg) => {
        try {
          if (predicate && !predicate(eventArg)) return;
          _eventsHelper$3.eventsHelper.removeEventListeners(listeners);
          resolve(eventArg);
        } catch (e) {
          _eventsHelper$3.eventsHelper.removeEventListeners(listeners);
          reject(e);
        }
      }));
    });
    const dispose = () => _eventsHelper$3.eventsHelper.removeEventListeners(listeners);
    if (progress2) progress2.cleanupWhenAborted(dispose);
    return {
      promise,
      dispose
    };
  }
  static secondsToRoundishMillis(value) {
    return (value * 1e6 | 0) / 1e3;
  }
  static millisToRoundishMillis(value) {
    return (value * 1e3 | 0) / 1e3;
  }
  static debugProtocolLogger(protocolLogger) {
    return (direction, message) => {
      if (protocolLogger) protocolLogger(direction, message);
      if (_debugLogger$a.debugLogger.isEnabled("protocol")) {
        let text = JSON.stringify(message);
        if (text.length > MAX_LOG_LENGTH) text = text.substring(0, MAX_LOG_LENGTH / 2) + " <<<<<( LOG TRUNCATED )>>>>> " + text.substring(text.length - MAX_LOG_LENGTH / 2);
        _debugLogger$a.debugLogger.log("protocol", (direction === "send" ? "SEND ► " : "◀ RECV ") + text);
      }
    };
  }
  static formatBrowserLogs(logs, disconnectReason) {
    if (!disconnectReason && !logs.length) return "";
    return "\n" + (disconnectReason ? disconnectReason + "\n" : "") + logs.join("\n");
  }
}
helper.helper = Helper;
var network$1 = {};
var hasRequiredNetwork$1;
function requireNetwork$1() {
  if (hasRequiredNetwork$1) return network$1;
  hasRequiredNetwork$1 = 1;
  Object.defineProperty(network$1, "__esModule", {
    value: true
  });
  network$1.WebSocket = network$1.Route = network$1.Response = network$1.Request = void 0;
  network$1.filterCookies = filterCookies;
  network$1.kMaxCookieExpiresDateInSeconds = void 0;
  network$1.mergeHeaders = mergeHeaders;
  network$1.parsedURL = parsedURL2;
  network$1.rewriteCookies = rewriteCookies;
  network$1.singleHeader = singleHeader;
  network$1.statusText = statusText;
  network$1.stripFragmentFromUrl = stripFragmentFromUrl;
  var _utils2 = requireUtils();
  var _manualPromise2 = requireManualPromise();
  var _instrumentation2 = instrumentation;
  var _fetch2 = requireFetch$1();
  var _browserContext2 = requireBrowserContext$1();
  function filterCookies(cookies, urls) {
    const parsedURLs = urls.map((s) => new URL(s));
    return cookies.filter((c) => {
      if (!parsedURLs.length) return true;
      for (const parsedURL3 of parsedURLs) {
        let domain = c.domain;
        if (!domain.startsWith(".")) domain = "." + domain;
        if (!("." + parsedURL3.hostname).endsWith(domain)) continue;
        if (!parsedURL3.pathname.startsWith(c.path)) continue;
        if (parsedURL3.protocol !== "https:" && parsedURL3.hostname !== "localhost" && c.secure) continue;
        return true;
      }
      return false;
    });
  }
  const kMaxCookieExpiresDateInSeconds = network$1.kMaxCookieExpiresDateInSeconds = 253402300799;
  function rewriteCookies(cookies) {
    return cookies.map((c) => {
      (0, _utils2.assert)(c.url || c.domain && c.path, "Cookie should have a url or a domain/path pair");
      (0, _utils2.assert)(!(c.url && c.domain), "Cookie should have either url or domain");
      (0, _utils2.assert)(!(c.url && c.path), "Cookie should have either url or path");
      (0, _utils2.assert)(!(c.expires && c.expires < 0 && c.expires !== -1), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      (0, _utils2.assert)(!(c.expires && c.expires > 0 && c.expires > kMaxCookieExpiresDateInSeconds), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      const copy = {
        ...c
      };
      if (copy.url) {
        (0, _utils2.assert)(copy.url !== "about:blank", `Blank page can not have cookie "${c.name}"`);
        (0, _utils2.assert)(!copy.url.startsWith("data:"), `Data URL page can not have cookie "${c.name}"`);
        const url = new URL(copy.url);
        copy.domain = url.hostname;
        copy.path = url.pathname.substring(0, url.pathname.lastIndexOf("/") + 1);
        copy.secure = url.protocol === "https:";
      }
      return copy;
    });
  }
  function parsedURL2(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  }
  function stripFragmentFromUrl(url) {
    if (!url.includes("#")) return url;
    return url.substring(0, url.indexOf("#"));
  }
  class Request extends _instrumentation2.SdkObject {
    constructor(context, frame2, serviceWorker, redirectedFrom, documentId, url, resourceType, method, postData, headers2) {
      super(frame2 || context, "request");
      this._response = null;
      this._redirectedFrom = void 0;
      this._redirectedTo = null;
      this._documentId = void 0;
      this._isFavicon = void 0;
      this._failureText = null;
      this._url = void 0;
      this._resourceType = void 0;
      this._method = void 0;
      this._postData = void 0;
      this._headers = void 0;
      this._headersMap = /* @__PURE__ */ new Map();
      this._frame = null;
      this._serviceWorker = null;
      this._context = void 0;
      this._rawRequestHeadersPromise = new _manualPromise2.ManualPromise();
      this._waitForResponsePromise = new _manualPromise2.ManualPromise();
      this._responseEndTiming = -1;
      this._overrides = void 0;
      this._bodySize = void 0;
      (0, _utils2.assert)(!url.startsWith("data:"), "Data urls should not fire requests");
      this._context = context;
      this._frame = frame2;
      this._serviceWorker = serviceWorker;
      this._redirectedFrom = redirectedFrom;
      if (redirectedFrom) redirectedFrom._redirectedTo = this;
      this._documentId = documentId;
      this._url = stripFragmentFromUrl(url);
      this._resourceType = resourceType;
      this._method = method;
      this._postData = postData;
      this._headers = headers2;
      this._updateHeadersMap();
      this._isFavicon = url.endsWith("/favicon.ico") || !!(redirectedFrom !== null && redirectedFrom !== void 0 && redirectedFrom._isFavicon);
    }
    _setFailureText(failureText) {
      this._failureText = failureText;
      this._waitForResponsePromise.resolve(null);
    }
    _setOverrides(overrides) {
      this._overrides = overrides;
      this._updateHeadersMap();
    }
    _updateHeadersMap() {
      for (const {
        name: name2,
        value
      } of this.headers()) this._headersMap.set(name2.toLowerCase(), value);
    }
    _hasOverrides() {
      return !!this._overrides;
    }
    url() {
      var _this$_overrides;
      return ((_this$_overrides = this._overrides) === null || _this$_overrides === void 0 ? void 0 : _this$_overrides.url) || this._url;
    }
    resourceType() {
      return this._resourceType;
    }
    method() {
      var _this$_overrides2;
      return ((_this$_overrides2 = this._overrides) === null || _this$_overrides2 === void 0 ? void 0 : _this$_overrides2.method) || this._method;
    }
    postDataBuffer() {
      var _this$_overrides3;
      return ((_this$_overrides3 = this._overrides) === null || _this$_overrides3 === void 0 ? void 0 : _this$_overrides3.postData) || this._postData;
    }
    headers() {
      var _this$_overrides4;
      return ((_this$_overrides4 = this._overrides) === null || _this$_overrides4 === void 0 ? void 0 : _this$_overrides4.headers) || this._headers;
    }
    headerValue(name2) {
      return this._headersMap.get(name2);
    }
    // "null" means no raw headers available - we'll use provisional headers as raw headers.
    setRawRequestHeaders(headers2) {
      if (!this._rawRequestHeadersPromise.isDone()) this._rawRequestHeadersPromise.resolve(headers2 || this._headers);
    }
    async rawRequestHeaders() {
      var _this$_overrides5;
      return ((_this$_overrides5 = this._overrides) === null || _this$_overrides5 === void 0 ? void 0 : _this$_overrides5.headers) || this._rawRequestHeadersPromise;
    }
    response() {
      return this._waitForResponsePromise;
    }
    _existingResponse() {
      return this._response;
    }
    _setResponse(response) {
      this._response = response;
      this._waitForResponsePromise.resolve(response);
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    frame() {
      return this._frame;
    }
    serviceWorker() {
      return this._serviceWorker;
    }
    isNavigationRequest() {
      return !!this._documentId;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    failure() {
      if (this._failureText === null) return null;
      return {
        errorText: this._failureText
      };
    }
    // TODO(bidi): remove once post body is available.
    _setBodySize(size) {
      this._bodySize = size;
    }
    bodySize() {
      var _this$postDataBuffer;
      return this._bodySize || ((_this$postDataBuffer = this.postDataBuffer()) === null || _this$postDataBuffer === void 0 ? void 0 : _this$postDataBuffer.length) || 0;
    }
    async requestHeadersSize() {
      let headersSize = 4;
      headersSize += this.method().length;
      headersSize += new URL(this.url()).pathname.length;
      headersSize += 8;
      const headers2 = await this.rawRequestHeaders();
      for (const header of headers2) headersSize += header.name.length + header.value.length + 4;
      return headersSize;
    }
  }
  network$1.Request = Request;
  class Route extends _instrumentation2.SdkObject {
    constructor(request2, delegate) {
      super(request2._frame || request2._context, "route");
      this._request = void 0;
      this._delegate = void 0;
      this._handled = false;
      this._request = request2;
      this._delegate = delegate;
      this._request._context.addRouteInFlight(this);
    }
    request() {
      return this._request;
    }
    async abort(errorCode = "failed") {
      this._startHandling();
      this._request._context.emit(_browserContext2.BrowserContext.Events.RequestAborted, this._request);
      await this._delegate.abort(errorCode);
      this._endHandling();
    }
    async redirectNavigationRequest(url) {
      this._startHandling();
      (0, _utils2.assert)(this._request.isNavigationRequest());
      this._request.frame().redirectNavigation(url, this._request._documentId, this._request.headerValue("referer"));
    }
    async fulfill(overrides) {
      this._startHandling();
      let body = overrides.body;
      let isBase64 = overrides.isBase64 || false;
      if (body === void 0) {
        if (overrides.fetchResponseUid) {
          const buffer = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || _fetch2.APIRequestContext.findResponseBody(overrides.fetchResponseUid);
          (0, _utils2.assert)(buffer, "Fetch response has been disposed");
          body = buffer.toString("base64");
          isBase64 = true;
        } else {
          body = "";
          isBase64 = false;
        }
      }
      const headers2 = [...overrides.headers || []];
      this._maybeAddCorsHeaders(headers2);
      this._request._context.emit(_browserContext2.BrowserContext.Events.RequestFulfilled, this._request);
      await this._delegate.fulfill({
        status: overrides.status || 200,
        headers: headers2,
        body,
        isBase64
      });
      this._endHandling();
    }
    // See https://github.com/microsoft/playwright/issues/12929
    _maybeAddCorsHeaders(headers2) {
      const origin = this._request.headerValue("origin");
      if (!origin) return;
      const requestUrl = new URL(this._request.url());
      if (!requestUrl.protocol.startsWith("http")) return;
      if (requestUrl.origin === origin.trim()) return;
      const corsHeader = headers2.find(({
        name: name2
      }) => name2 === "access-control-allow-origin");
      if (corsHeader) return;
      headers2.push({
        name: "access-control-allow-origin",
        value: origin
      });
      headers2.push({
        name: "access-control-allow-credentials",
        value: "true"
      });
      headers2.push({
        name: "vary",
        value: "Origin"
      });
    }
    async continue(overrides) {
      this._startHandling();
      if (overrides.url) {
        const newUrl = new URL(overrides.url);
        const oldUrl = new URL(this._request.url());
        if (oldUrl.protocol !== newUrl.protocol) throw new Error("New URL must have same protocol as overridden URL");
      }
      this._request._setOverrides(overrides);
      if (!overrides.isFallback) this._request._context.emit(_browserContext2.BrowserContext.Events.RequestContinued, this._request);
      await this._delegate.continue(overrides);
      this._endHandling();
    }
    _startHandling() {
      (0, _utils2.assert)(!this._handled, "Route is already handled!");
      this._handled = true;
    }
    _endHandling() {
      this._request._context.removeRouteInFlight(this);
    }
  }
  network$1.Route = Route;
  class Response extends _instrumentation2.SdkObject {
    constructor(request2, status, statusText2, headers2, timing, getResponseBodyCallback, fromServiceWorker, httpVersion) {
      super(request2.frame() || request2._context, "response");
      this._request = void 0;
      this._contentPromise = null;
      this._finishedPromise = new _manualPromise2.ManualPromise();
      this._status = void 0;
      this._statusText = void 0;
      this._url = void 0;
      this._headers = void 0;
      this._headersMap = /* @__PURE__ */ new Map();
      this._getResponseBodyCallback = void 0;
      this._timing = void 0;
      this._serverAddrPromise = new _manualPromise2.ManualPromise();
      this._securityDetailsPromise = new _manualPromise2.ManualPromise();
      this._rawResponseHeadersPromise = new _manualPromise2.ManualPromise();
      this._httpVersion = void 0;
      this._fromServiceWorker = void 0;
      this._encodedBodySizePromise = new _manualPromise2.ManualPromise();
      this._transferSizePromise = new _manualPromise2.ManualPromise();
      this._responseHeadersSizePromise = new _manualPromise2.ManualPromise();
      this._request = request2;
      this._timing = timing;
      this._status = status;
      this._statusText = statusText2;
      this._url = request2.url();
      this._headers = headers2;
      for (const {
        name: name2,
        value
      } of this._headers) this._headersMap.set(name2.toLowerCase(), value);
      this._getResponseBodyCallback = getResponseBodyCallback;
      this._request._setResponse(this);
      this._httpVersion = httpVersion;
      this._fromServiceWorker = fromServiceWorker;
    }
    _serverAddrFinished(addr) {
      this._serverAddrPromise.resolve(addr);
    }
    _securityDetailsFinished(securityDetails) {
      this._securityDetailsPromise.resolve(securityDetails);
    }
    _requestFinished(responseEndTiming) {
      this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);
      if (this._timing.requestStart === -1) this._timing.requestStart = this._request._responseEndTiming;
      this._finishedPromise.resolve();
    }
    _setHttpVersion(httpVersion) {
      this._httpVersion = httpVersion;
    }
    url() {
      return this._url;
    }
    status() {
      return this._status;
    }
    statusText() {
      return this._statusText;
    }
    headers() {
      return this._headers;
    }
    headerValue(name2) {
      return this._headersMap.get(name2);
    }
    async rawResponseHeaders() {
      return this._rawResponseHeadersPromise;
    }
    // "null" means no raw headers available - we'll use provisional headers as raw headers.
    setRawResponseHeaders(headers2) {
      if (!this._rawResponseHeadersPromise.isDone()) this._rawResponseHeadersPromise.resolve(headers2 || this._headers);
    }
    setTransferSize(size) {
      this._transferSizePromise.resolve(size);
    }
    setEncodedBodySize(size) {
      this._encodedBodySizePromise.resolve(size);
    }
    setResponseHeadersSize(size) {
      this._responseHeadersSizePromise.resolve(size);
    }
    timing() {
      return this._timing;
    }
    async serverAddr() {
      return await this._serverAddrPromise || null;
    }
    async securityDetails() {
      return await this._securityDetailsPromise || null;
    }
    body() {
      if (!this._contentPromise) {
        this._contentPromise = this._finishedPromise.then(async () => {
          if (this._status >= 300 && this._status <= 399) throw new Error("Response body is unavailable for redirect responses");
          return this._getResponseBodyCallback();
        });
      }
      return this._contentPromise;
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    httpVersion() {
      if (!this._httpVersion) return "HTTP/1.1";
      if (this._httpVersion === "http/1.1") return "HTTP/1.1";
      if (this._httpVersion === "h2") return "HTTP/2.0";
      return this._httpVersion;
    }
    fromServiceWorker() {
      return this._fromServiceWorker;
    }
    async responseHeadersSize() {
      const availableSize = await this._responseHeadersSizePromise;
      if (availableSize !== null) return availableSize;
      let headersSize = 4;
      headersSize += 8;
      headersSize += 3;
      headersSize += this.statusText().length;
      const headers2 = await this._rawResponseHeadersPromise;
      for (const header of headers2) headersSize += header.name.length + header.value.length + 4;
      headersSize += 2;
      return headersSize;
    }
    async sizes() {
      const requestHeadersSize = await this._request.requestHeadersSize();
      const responseHeadersSize = await this.responseHeadersSize();
      let encodedBodySize = await this._encodedBodySizePromise;
      if (encodedBodySize === null) {
        var _headers$find;
        const headers2 = await this._rawResponseHeadersPromise;
        const contentLength = (_headers$find = headers2.find((h) => h.name.toLowerCase() === "content-length")) === null || _headers$find === void 0 ? void 0 : _headers$find.value;
        encodedBodySize = contentLength ? +contentLength : 0;
      }
      let transferSize = await this._transferSizePromise;
      if (transferSize === null) {
        transferSize = responseHeadersSize + encodedBodySize;
      }
      return {
        requestBodySize: this._request.bodySize(),
        requestHeadersSize,
        responseBodySize: encodedBodySize,
        responseHeadersSize,
        transferSize
      };
    }
  }
  network$1.Response = Response;
  class WebSocket extends _instrumentation2.SdkObject {
    constructor(parent, url) {
      super(parent, "ws");
      this._url = void 0;
      this._notified = false;
      this._url = url;
    }
    markAsNotified() {
      if (this._notified) return false;
      this._notified = true;
      return true;
    }
    url() {
      return this._url;
    }
    frameSent(opcode, data) {
      this.emit(WebSocket.Events.FrameSent, {
        opcode,
        data
      });
    }
    frameReceived(opcode, data) {
      this.emit(WebSocket.Events.FrameReceived, {
        opcode,
        data
      });
    }
    error(errorMessage) {
      this.emit(WebSocket.Events.SocketError, errorMessage);
    }
    closed() {
      this.emit(WebSocket.Events.Close);
    }
  }
  network$1.WebSocket = WebSocket;
  WebSocket.Events = {
    Close: "close",
    SocketError: "socketerror",
    FrameReceived: "framereceived",
    FrameSent: "framesent"
  };
  const STATUS_TEXTS = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "Switch Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
  function statusText(status) {
    return STATUS_TEXTS[String(status)] || "Unknown";
  }
  function singleHeader(name2, value) {
    return [{
      name: name2,
      value
    }];
  }
  function mergeHeaders(headers2) {
    const lowerCaseToValue = /* @__PURE__ */ new Map();
    const lowerCaseToOriginalCase = /* @__PURE__ */ new Map();
    for (const h of headers2) {
      if (!h) continue;
      for (const {
        name: name2,
        value
      } of h) {
        const lower = name2.toLowerCase();
        lowerCaseToOriginalCase.set(lower, name2);
        lowerCaseToValue.set(lower, value);
      }
    }
    const result2 = [];
    for (const [lower, value] of lowerCaseToValue) result2.push({
      name: lowerCaseToOriginalCase.get(lower),
      value
    });
    return result2;
  }
  return network$1;
}
var page$1 = {};
var frames = {};
var dom = {};
var injectedScriptSource$1 = {};
Object.defineProperty(injectedScriptSource$1, "__esModule", {
  value: true
});
injectedScriptSource$1.source = void 0;
injectedScriptSource$1.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar injectedScript_exports = {};\n__export(injectedScript_exports, {\n  InjectedScript: () => InjectedScript\n});\nmodule.exports = __toCommonJS(injectedScript_exports);\n\n// packages/playwright-core/src/server/injected/xpathSelectorEngine.ts\nvar XPathEngine = {\n  queryAll(root, selector) {\n    if (selector.startsWith("/") && root.nodeType !== Node.DOCUMENT_NODE)\n      selector = "." + selector;\n    const result = [];\n    const document = root.ownerDocument || root;\n    if (!document)\n      return result;\n    const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n    for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n      if (node.nodeType === Node.ELEMENT_NODE)\n        result.push(node);\n    }\n    return result;\n  }\n};\n\n// packages/playwright-core/src/server/injected/domUtils.ts\nvar browserNameForWorkarounds = "";\nfunction setBrowserName(name) {\n  browserNameForWorkarounds = name;\n}\nfunction isInsideScope(scope, element) {\n  while (element) {\n    if (scope.contains(element))\n      return true;\n    element = enclosingShadowHost(element);\n  }\n  return false;\n}\nfunction parentElementOrShadowHost(element) {\n  if (element.parentElement)\n    return element.parentElement;\n  if (!element.parentNode)\n    return;\n  if (element.parentNode.nodeType === 11 && element.parentNode.host)\n    return element.parentNode.host;\n}\nfunction enclosingShadowRootOrDocument(element) {\n  let node = element;\n  while (node.parentNode)\n    node = node.parentNode;\n  if (node.nodeType === 11 || node.nodeType === 9)\n    return node;\n}\nfunction enclosingShadowHost(element) {\n  while (element.parentElement)\n    element = element.parentElement;\n  return parentElementOrShadowHost(element);\n}\nfunction closestCrossShadow(element, css, scope) {\n  while (element) {\n    const closest = element.closest(css);\n    if (scope && closest !== scope && (closest == null ? void 0 : closest.contains(scope)))\n      return;\n    if (closest)\n      return closest;\n    element = enclosingShadowHost(element);\n  }\n}\nfunction getElementComputedStyle(element, pseudo) {\n  return element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element, pseudo) : void 0;\n}\nfunction isElementStyleVisibilityVisible(element, style) {\n  style = style != null ? style : getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (Element.prototype.checkVisibility && browserNameForWorkarounds !== "webkit") {\n    if (!element.checkVisibility())\n      return false;\n  } else {\n    const detailsOrSummary = element.closest("details,summary");\n    if (detailsOrSummary !== element && (detailsOrSummary == null ? void 0 : detailsOrSummary.nodeName) === "DETAILS" && !detailsOrSummary.open)\n      return false;\n  }\n  if (style.visibility !== "visible")\n    return false;\n  return true;\n}\nfunction isElementVisible(element) {\n  const style = getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (style.display === "contents") {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && isElementVisible(child))\n        return true;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return true;\n    }\n    return false;\n  }\n  if (!isElementStyleVisibilityVisible(element, style))\n    return false;\n  const rect = element.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction isVisibleTextNode(node) {\n  const range = node.ownerDocument.createRange();\n  range.selectNode(node);\n  const rect = range.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction elementSafeTagName(element) {\n  if (element instanceof HTMLFormElement)\n    return "FORM";\n  return element.tagName.toUpperCase();\n}\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = "\'") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, \'"\');\n  if (char === "\'")\n    return char + escapedText.replace(/[\']/g, "\\\\\'") + char;\n  if (char === \'"\')\n    return char + escapedText.replace(/["]/g, \'\\\\"\') + char;\n  if (char === "`")\n    return char + escapedText.replace(/[`]/g, "`") + char;\n  throw new Error("Invalid escape char");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();\n}\nfunction cssEscape(s) {\n  let result = "";\n  for (let i = 0; i < s.length; i++)\n    result += cssEscapeOne(s, i);\n  return result;\n}\nfunction quoteCSSAttributeValue(text) {\n  return `"${cssEscape(text).replace(/\\\\ /g, " ")}"`;\n}\nfunction cssEscapeOne(s, i) {\n  const c = s.charCodeAt(i);\n  if (c === 0)\n    return "\\uFFFD";\n  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))\n    return "\\\\" + c.toString(16) + " ";\n  if (i === 0 && c === 45 && s.length === 1)\n    return "\\\\" + s.charAt(i);\n  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)\n    return s.charAt(i);\n  return "\\\\" + s.charAt(i);\n}\nvar normalizedWhitespaceCache;\nfunction cacheNormalizedWhitespaces() {\n  normalizedWhitespaceCache = /* @__PURE__ */ new Map();\n}\nfunction normalizeWhiteSpace(text) {\n  let result = normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.get(text);\n  if (result === void 0) {\n    result = text.replace(/\\u200b/g, "").trim().replace(/\\s+/g, " ");\n    normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.set(text, result);\n  }\n  return result;\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\([\'"`])/g, "$1$2$3");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["\'`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== "string")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== "string")\n    return escapeRegexForSelector(value);\n  return `"${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, \'\\\\"\')}"${exact ? "s" : "i"}`;\n}\nfunction trimString(input, cap, suffix = "") {\n  if (input.length <= cap)\n    return input;\n  const chars = [...input];\n  if (chars.length > cap)\n    return chars.slice(0, cap - suffix.length).join("") + suffix;\n  return chars.join("");\n}\nfunction trimStringWithEllipsis(input, cap) {\n  return trimString(input, cap, "\\u2026");\n}\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&");\n}\nvar escaped = { "&": "&amp;", "<": "&lt;", ">": "&gt;", \'"\': "&quot;", "\'": "&#39;" };\nfunction escapeHTMLAttribute(s) {\n  return s.replace(/[&<>"\']/ug, (char) => escaped[char]);\n}\nfunction escapeHTML(s) {\n  return s.replace(/[&<]/ug, (char) => escaped[char]);\n}\n\n// packages/playwright-core/src/server/injected/roleUtils.ts\nfunction hasExplicitAccessibleName(e) {\n  return e.hasAttribute("aria-label") || e.hasAttribute("aria-labelledby");\n}\nvar kAncestorPreventingLandmark = "article:not([role]), aside:not([role]), main:not([role]), nav:not([role]), section:not([role]), [role=article], [role=complementary], [role=main], [role=navigation], [role=region]";\nvar kGlobalAriaAttributes = /* @__PURE__ */ new Map([\n  ["aria-atomic", void 0],\n  ["aria-busy", void 0],\n  ["aria-controls", void 0],\n  ["aria-current", void 0],\n  ["aria-describedby", void 0],\n  ["aria-details", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-disabled\', undefined],\n  ["aria-dropeffect", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-errormessage\', undefined],\n  ["aria-flowto", void 0],\n  ["aria-grabbed", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-haspopup\', undefined],\n  ["aria-hidden", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-invalid\', undefined],\n  ["aria-keyshortcuts", void 0],\n  ["aria-label", /* @__PURE__ */ new Set(["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"])],\n  ["aria-labelledby", /* @__PURE__ */ new Set(["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"])],\n  ["aria-live", void 0],\n  ["aria-owns", void 0],\n  ["aria-relevant", void 0],\n  ["aria-roledescription", /* @__PURE__ */ new Set(["generic"])]\n]);\nfunction hasGlobalAriaAttribute(element, forRole) {\n  return [...kGlobalAriaAttributes].some(([attr, prohibited]) => {\n    return !(prohibited == null ? void 0 : prohibited.has(forRole || "")) && element.hasAttribute(attr);\n  });\n}\nfunction hasTabIndex(element) {\n  return !Number.isNaN(Number(String(element.getAttribute("tabindex"))));\n}\nfunction isFocusable(element) {\n  return !isNativelyDisabled(element) && (isNativelyFocusable(element) || hasTabIndex(element));\n}\nfunction isNativelyFocusable(element) {\n  const tagName = elementSafeTagName(element);\n  if (["BUTTON", "DETAILS", "SELECT", "TEXTAREA"].includes(tagName))\n    return true;\n  if (tagName === "A" || tagName === "AREA")\n    return element.hasAttribute("href");\n  if (tagName === "INPUT")\n    return !element.hidden;\n  return false;\n}\nvar kImplicitRoleByTagName = {\n  "A": (e) => {\n    return e.hasAttribute("href") ? "link" : null;\n  },\n  "AREA": (e) => {\n    return e.hasAttribute("href") ? "link" : null;\n  },\n  "ARTICLE": () => "article",\n  "ASIDE": () => "complementary",\n  "BLOCKQUOTE": () => "blockquote",\n  "BUTTON": () => "button",\n  "CAPTION": () => "caption",\n  "CODE": () => "code",\n  "DATALIST": () => "listbox",\n  "DD": () => "definition",\n  "DEL": () => "deletion",\n  "DETAILS": () => "group",\n  "DFN": () => "term",\n  "DIALOG": () => "dialog",\n  "DT": () => "term",\n  "EM": () => "emphasis",\n  "FIELDSET": () => "group",\n  "FIGURE": () => "figure",\n  "FOOTER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "contentinfo",\n  "FORM": (e) => hasExplicitAccessibleName(e) ? "form" : null,\n  "H1": () => "heading",\n  "H2": () => "heading",\n  "H3": () => "heading",\n  "H4": () => "heading",\n  "H5": () => "heading",\n  "H6": () => "heading",\n  "HEADER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "banner",\n  "HR": () => "separator",\n  "HTML": () => "document",\n  "IMG": (e) => e.getAttribute("alt") === "" && !e.getAttribute("title") && !hasGlobalAriaAttribute(e) && !hasTabIndex(e) ? "presentation" : "img",\n  "INPUT": (e) => {\n    const type = e.type.toLowerCase();\n    if (type === "search")\n      return e.hasAttribute("list") ? "combobox" : "searchbox";\n    if (["email", "tel", "text", "url", ""].includes(type)) {\n      const list = getIdRefs(e, e.getAttribute("list"))[0];\n      return list && elementSafeTagName(list) === "DATALIST" ? "combobox" : "textbox";\n    }\n    if (type === "hidden")\n      return "";\n    return {\n      "button": "button",\n      "checkbox": "checkbox",\n      "image": "button",\n      "number": "spinbutton",\n      "radio": "radio",\n      "range": "slider",\n      "reset": "button",\n      "submit": "button"\n    }[type] || "textbox";\n  },\n  "INS": () => "insertion",\n  "LI": () => "listitem",\n  "MAIN": () => "main",\n  "MARK": () => "mark",\n  "MATH": () => "math",\n  "MENU": () => "list",\n  "METER": () => "meter",\n  "NAV": () => "navigation",\n  "OL": () => "list",\n  "OPTGROUP": () => "group",\n  "OPTION": () => "option",\n  "OUTPUT": () => "status",\n  "P": () => "paragraph",\n  "PROGRESS": () => "progressbar",\n  "SECTION": (e) => hasExplicitAccessibleName(e) ? "region" : null,\n  "SELECT": (e) => e.hasAttribute("multiple") || e.size > 1 ? "listbox" : "combobox",\n  "STRONG": () => "strong",\n  "SUB": () => "subscript",\n  "SUP": () => "superscript",\n  // For <svg> we default to Chrome behavior:\n  // - Chrome reports \'img\'.\n  // - Firefox reports \'diagram\' that is not in official ARIA spec yet.\n  // - Safari reports \'no role\', but still computes accessible name.\n  "SVG": () => "img",\n  "TABLE": () => "table",\n  "TBODY": () => "rowgroup",\n  "TD": (e) => {\n    const table = closestCrossShadow(e, "table");\n    const role = table ? getExplicitAriaRole(table) : "";\n    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";\n  },\n  "TEXTAREA": () => "textbox",\n  "TFOOT": () => "rowgroup",\n  "TH": (e) => {\n    if (e.getAttribute("scope") === "col")\n      return "columnheader";\n    if (e.getAttribute("scope") === "row")\n      return "rowheader";\n    const table = closestCrossShadow(e, "table");\n    const role = table ? getExplicitAriaRole(table) : "";\n    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";\n  },\n  "THEAD": () => "rowgroup",\n  "TIME": () => "time",\n  "TR": () => "row",\n  "UL": () => "list"\n};\nvar kPresentationInheritanceParents = {\n  "DD": ["DL", "DIV"],\n  "DIV": ["DL"],\n  "DT": ["DL", "DIV"],\n  "LI": ["OL", "UL"],\n  "TBODY": ["TABLE"],\n  "TD": ["TR"],\n  "TFOOT": ["TABLE"],\n  "TH": ["TR"],\n  "THEAD": ["TABLE"],\n  "TR": ["THEAD", "TBODY", "TFOOT", "TABLE"]\n};\nfunction getImplicitAriaRole(element) {\n  var _a;\n  const implicitRole = ((_a = kImplicitRoleByTagName[elementSafeTagName(element)]) == null ? void 0 : _a.call(kImplicitRoleByTagName, element)) || "";\n  if (!implicitRole)\n    return null;\n  let ancestor = element;\n  while (ancestor) {\n    const parent = parentElementOrShadowHost(ancestor);\n    const parents = kPresentationInheritanceParents[elementSafeTagName(ancestor)];\n    if (!parents || !parent || !parents.includes(elementSafeTagName(parent)))\n      break;\n    const parentExplicitRole = getExplicitAriaRole(parent);\n    if ((parentExplicitRole === "none" || parentExplicitRole === "presentation") && !hasPresentationConflictResolution(parent, parentExplicitRole))\n      return parentExplicitRole;\n    ancestor = parent;\n  }\n  return implicitRole;\n}\nvar allRoles = [\n  "alert",\n  "alertdialog",\n  "application",\n  "article",\n  "banner",\n  "blockquote",\n  "button",\n  "caption",\n  "cell",\n  "checkbox",\n  "code",\n  "columnheader",\n  "combobox",\n  "command",\n  "complementary",\n  "composite",\n  "contentinfo",\n  "definition",\n  "deletion",\n  "dialog",\n  "directory",\n  "document",\n  "emphasis",\n  "feed",\n  "figure",\n  "form",\n  "generic",\n  "grid",\n  "gridcell",\n  "group",\n  "heading",\n  "img",\n  "input",\n  "insertion",\n  "landmark",\n  "link",\n  "list",\n  "listbox",\n  "listitem",\n  "log",\n  "main",\n  "marquee",\n  "math",\n  "meter",\n  "menu",\n  "menubar",\n  "menuitem",\n  "menuitemcheckbox",\n  "menuitemradio",\n  "navigation",\n  "none",\n  "note",\n  "option",\n  "paragraph",\n  "presentation",\n  "progressbar",\n  "radio",\n  "radiogroup",\n  "range",\n  "region",\n  "roletype",\n  "row",\n  "rowgroup",\n  "rowheader",\n  "scrollbar",\n  "search",\n  "searchbox",\n  "section",\n  "sectionhead",\n  "select",\n  "separator",\n  "slider",\n  "spinbutton",\n  "status",\n  "strong",\n  "structure",\n  "subscript",\n  "superscript",\n  "switch",\n  "tab",\n  "table",\n  "tablist",\n  "tabpanel",\n  "term",\n  "textbox",\n  "time",\n  "timer",\n  "toolbar",\n  "tooltip",\n  "tree",\n  "treegrid",\n  "treeitem",\n  "widget",\n  "window"\n];\nvar abstractRoles = ["command", "composite", "input", "landmark", "range", "roletype", "section", "sectionhead", "select", "structure", "widget", "window"];\nvar validRoles = allRoles.filter((role) => !abstractRoles.includes(role));\nfunction getExplicitAriaRole(element) {\n  const roles = (element.getAttribute("role") || "").split(" ").map((role) => role.trim());\n  return roles.find((role) => validRoles.includes(role)) || null;\n}\nfunction hasPresentationConflictResolution(element, role) {\n  return hasGlobalAriaAttribute(element, role) || isFocusable(element);\n}\nfunction getAriaRole(element) {\n  const explicitRole = getExplicitAriaRole(element);\n  if (!explicitRole)\n    return getImplicitAriaRole(element);\n  if (explicitRole === "none" || explicitRole === "presentation") {\n    const implicitRole = getImplicitAriaRole(element);\n    if (hasPresentationConflictResolution(element, implicitRole))\n      return implicitRole;\n  }\n  return explicitRole;\n}\nfunction getAriaBoolean(attr) {\n  return attr === null ? void 0 : attr.toLowerCase() === "true";\n}\nfunction isElementIgnoredForAria(element) {\n  return ["STYLE", "SCRIPT", "NOSCRIPT", "TEMPLATE"].includes(elementSafeTagName(element));\n}\nfunction isElementHiddenForAria(element) {\n  if (isElementIgnoredForAria(element))\n    return true;\n  const style = getElementComputedStyle(element);\n  const isSlot = element.nodeName === "SLOT";\n  if ((style == null ? void 0 : style.display) === "contents" && !isSlot) {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && !isElementHiddenForAria(child))\n        return false;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return false;\n    }\n    return true;\n  }\n  const isOptionInsideSelect = element.nodeName === "OPTION" && !!element.closest("select");\n  if (!isOptionInsideSelect && !isSlot && !isElementStyleVisibilityVisible(element, style))\n    return true;\n  return belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element);\n}\nfunction belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element) {\n  let hidden = cacheIsHidden == null ? void 0 : cacheIsHidden.get(element);\n  if (hidden === void 0) {\n    hidden = false;\n    if (element.parentElement && element.parentElement.shadowRoot && !element.assignedSlot)\n      hidden = true;\n    if (!hidden) {\n      const style = getElementComputedStyle(element);\n      hidden = !style || style.display === "none" || getAriaBoolean(element.getAttribute("aria-hidden")) === true;\n    }\n    if (!hidden) {\n      const parent = parentElementOrShadowHost(element);\n      if (parent)\n        hidden = belongsToDisplayNoneOrAriaHiddenOrNonSlotted(parent);\n    }\n    cacheIsHidden == null ? void 0 : cacheIsHidden.set(element, hidden);\n  }\n  return hidden;\n}\nfunction getIdRefs(element, ref) {\n  if (!ref)\n    return [];\n  const root = enclosingShadowRootOrDocument(element);\n  if (!root)\n    return [];\n  try {\n    const ids = ref.split(" ").filter((id) => !!id);\n    const set = /* @__PURE__ */ new Set();\n    for (const id of ids) {\n      const firstElement = root.querySelector("#" + CSS.escape(id));\n      if (firstElement)\n        set.add(firstElement);\n    }\n    return [...set];\n  } catch (e) {\n    return [];\n  }\n}\nfunction trimFlatString(s) {\n  return s.trim();\n}\nfunction asFlatString(s) {\n  return s.split("\\xA0").map((chunk) => chunk.replace(/\\r\\n/g, "\\n").replace(/\\s\\s*/g, " ")).join("\\xA0").trim();\n}\nfunction queryInAriaOwned(element, selector) {\n  const result = [...element.querySelectorAll(selector)];\n  for (const owned of getIdRefs(element, element.getAttribute("aria-owns"))) {\n    if (owned.matches(selector))\n      result.push(owned);\n    result.push(...owned.querySelectorAll(selector));\n  }\n  return result;\n}\nfunction getPseudoContent(element, pseudo) {\n  const cache = pseudo === "::before" ? cachePseudoContentBefore : cachePseudoContentAfter;\n  if (cache == null ? void 0 : cache.has(element))\n    return (cache == null ? void 0 : cache.get(element)) || "";\n  const pseudoStyle = getElementComputedStyle(element, pseudo);\n  const content = getPseudoContentImpl(pseudoStyle);\n  if (cache)\n    cache.set(element, content);\n  return content;\n}\nfunction getPseudoContentImpl(pseudoStyle) {\n  if (!pseudoStyle || pseudoStyle.display === "none" || pseudoStyle.visibility === "hidden")\n    return "";\n  const content = pseudoStyle.content;\n  if (content[0] === "\'" && content[content.length - 1] === "\'" || content[0] === \'"\' && content[content.length - 1] === \'"\') {\n    const unquoted = content.substring(1, content.length - 1);\n    const display = pseudoStyle.display || "inline";\n    if (display !== "inline")\n      return " " + unquoted + " ";\n    return unquoted;\n  }\n  return "";\n}\nfunction getAriaLabelledByElements(element) {\n  const ref = element.getAttribute("aria-labelledby");\n  if (ref === null)\n    return null;\n  return getIdRefs(element, ref);\n}\nfunction allowsNameFromContent(role, targetDescendant) {\n  const alwaysAllowsNameFromContent = ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"].includes(role);\n  const descendantAllowsNameFromContent = targetDescendant && ["", "caption", "code", "contentinfo", "definition", "deletion", "emphasis", "insertion", "list", "listitem", "mark", "none", "paragraph", "presentation", "region", "row", "rowgroup", "section", "strong", "subscript", "superscript", "table", "term", "time"].includes(role);\n  return alwaysAllowsNameFromContent || descendantAllowsNameFromContent;\n}\nfunction getElementAccessibleName(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleNameHidden : cacheAccessibleName;\n  let accessibleName = cache == null ? void 0 : cache.get(element);\n  if (accessibleName === void 0) {\n    accessibleName = "";\n    const elementProhibitsNaming = ["caption", "code", "definition", "deletion", "emphasis", "generic", "insertion", "mark", "paragraph", "presentation", "strong", "subscript", "suggestion", "superscript", "term", "time"].includes(getAriaRole(element) || "");\n    if (!elementProhibitsNaming) {\n      accessibleName = asFlatString(getTextAlternativeInternal(element, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInDescribedBy: void 0,\n        embeddedInLabelledBy: void 0,\n        embeddedInLabel: void 0,\n        embeddedInNativeTextAlternative: void 0,\n        embeddedInTargetElement: "self"\n      }));\n    }\n    cache == null ? void 0 : cache.set(element, accessibleName);\n  }\n  return accessibleName;\n}\nfunction getElementAccessibleDescription(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleDescriptionHidden : cacheAccessibleDescription;\n  let accessibleDescription = cache == null ? void 0 : cache.get(element);\n  if (accessibleDescription === void 0) {\n    accessibleDescription = "";\n    if (element.hasAttribute("aria-describedby")) {\n      const describedBy = getIdRefs(element, element.getAttribute("aria-describedby"));\n      accessibleDescription = asFlatString(describedBy.map((ref) => getTextAlternativeInternal(ref, {\n        includeHidden,\n        visitedElements: /* @__PURE__ */ new Set(),\n        embeddedInLabelledBy: void 0,\n        embeddedInLabel: void 0,\n        embeddedInNativeTextAlternative: void 0,\n        embeddedInTargetElement: "none",\n        embeddedInDescribedBy: { element: ref, hidden: isElementHiddenForAria(ref) }\n      })).join(" "));\n    } else if (element.hasAttribute("aria-description")) {\n      accessibleDescription = asFlatString(element.getAttribute("aria-description") || "");\n    } else {\n      accessibleDescription = asFlatString(element.getAttribute("title") || "");\n    }\n    cache == null ? void 0 : cache.set(element, accessibleDescription);\n  }\n  return accessibleDescription;\n}\nfunction getTextAlternativeInternal(element, options) {\n  var _a, _b, _c, _d;\n  if (options.visitedElements.has(element))\n    return "";\n  const childOptions = {\n    ...options,\n    embeddedInTargetElement: options.embeddedInTargetElement === "self" ? "descendant" : options.embeddedInTargetElement\n  };\n  if (!options.includeHidden) {\n    const isEmbeddedInHiddenReferenceTraversal = !!((_a = options.embeddedInLabelledBy) == null ? void 0 : _a.hidden) || !!((_b = options.embeddedInDescribedBy) == null ? void 0 : _b.hidden) || !!((_c = options.embeddedInNativeTextAlternative) == null ? void 0 : _c.hidden) || !!((_d = options.embeddedInLabel) == null ? void 0 : _d.hidden);\n    if (isElementIgnoredForAria(element) || !isEmbeddedInHiddenReferenceTraversal && isElementHiddenForAria(element)) {\n      options.visitedElements.add(element);\n      return "";\n    }\n  }\n  const labelledBy = getAriaLabelledByElements(element);\n  if (!options.embeddedInLabelledBy) {\n    const accessibleName = (labelledBy || []).map((ref) => getTextAlternativeInternal(ref, {\n      ...options,\n      embeddedInLabelledBy: { element: ref, hidden: isElementHiddenForAria(ref) },\n      embeddedInDescribedBy: void 0,\n      embeddedInTargetElement: "none",\n      embeddedInLabel: void 0,\n      embeddedInNativeTextAlternative: void 0\n    })).join(" ");\n    if (accessibleName)\n      return accessibleName;\n  }\n  const role = getAriaRole(element) || "";\n  const tagName = elementSafeTagName(element);\n  if (!!options.embeddedInLabel || !!options.embeddedInLabelledBy || options.embeddedInTargetElement === "descendant") {\n    const isOwnLabel = [...element.labels || []].includes(element);\n    const isOwnLabelledBy = (labelledBy || []).includes(element);\n    if (!isOwnLabel && !isOwnLabelledBy) {\n      if (role === "textbox") {\n        options.visitedElements.add(element);\n        if (tagName === "INPUT" || tagName === "TEXTAREA")\n          return element.value;\n        return element.textContent || "";\n      }\n      if (["combobox", "listbox"].includes(role)) {\n        options.visitedElements.add(element);\n        let selectedOptions;\n        if (tagName === "SELECT") {\n          selectedOptions = [...element.selectedOptions];\n          if (!selectedOptions.length && element.options.length)\n            selectedOptions.push(element.options[0]);\n        } else {\n          const listbox = role === "combobox" ? queryInAriaOwned(element, "*").find((e) => getAriaRole(e) === "listbox") : element;\n          selectedOptions = listbox ? queryInAriaOwned(listbox, \'[aria-selected="true"]\').filter((e) => getAriaRole(e) === "option") : [];\n        }\n        if (!selectedOptions.length && tagName === "INPUT") {\n          return element.value;\n        }\n        return selectedOptions.map((option) => getTextAlternativeInternal(option, childOptions)).join(" ");\n      }\n      if (["progressbar", "scrollbar", "slider", "spinbutton", "meter"].includes(role)) {\n        options.visitedElements.add(element);\n        if (element.hasAttribute("aria-valuetext"))\n          return element.getAttribute("aria-valuetext") || "";\n        if (element.hasAttribute("aria-valuenow"))\n          return element.getAttribute("aria-valuenow") || "";\n        return element.getAttribute("value") || "";\n      }\n      if (["menu"].includes(role)) {\n        options.visitedElements.add(element);\n        return "";\n      }\n    }\n  }\n  const ariaLabel = element.getAttribute("aria-label") || "";\n  if (trimFlatString(ariaLabel)) {\n    options.visitedElements.add(element);\n    return ariaLabel;\n  }\n  if (!["presentation", "none"].includes(role)) {\n    if (tagName === "INPUT" && ["button", "submit", "reset"].includes(element.type)) {\n      options.visitedElements.add(element);\n      const value = element.value || "";\n      if (trimFlatString(value))\n        return value;\n      if (element.type === "submit")\n        return "Submit";\n      if (element.type === "reset")\n        return "Reset";\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "INPUT" && element.type === "image") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length && !options.embeddedInLabelledBy)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      if (trimFlatString(title))\n        return title;\n      return "Submit";\n    }\n    if (!labelledBy && tagName === "BUTTON") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n    }\n    if (!labelledBy && tagName === "OUTPUT") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      return element.getAttribute("title") || "";\n    }\n    if (!labelledBy && (tagName === "TEXTAREA" || tagName === "SELECT" || tagName === "INPUT")) {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const usePlaceholder = tagName === "INPUT" && ["text", "password", "search", "tel", "email", "url"].includes(element.type) || tagName === "TEXTAREA";\n      const placeholder = element.getAttribute("placeholder") || "";\n      const title = element.getAttribute("title") || "";\n      if (!usePlaceholder || title)\n        return title;\n      return placeholder;\n    }\n    if (!labelledBy && tagName === "FIELDSET") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "LEGEND") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (!labelledBy && tagName === "FIGURE") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "FIGCAPTION") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "IMG") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "TABLE") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "CAPTION") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const summary = element.getAttribute("summary") || "";\n      if (summary)\n        return summary;\n    }\n    if (tagName === "AREA") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "SVG" || element.ownerSVGElement) {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "TITLE" && child.ownerSVGElement) {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInLabelledBy: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n    }\n    if (element.ownerSVGElement && tagName === "A") {\n      const title = element.getAttribute("xlink:title") || "";\n      if (trimFlatString(title)) {\n        options.visitedElements.add(element);\n        return title;\n      }\n    }\n  }\n  const shouldNameFromContentForSummary = tagName === "SUMMARY" && !["presentation", "none"].includes(role);\n  if (allowsNameFromContent(role, options.embeddedInTargetElement === "descendant") || shouldNameFromContentForSummary || !!options.embeddedInLabelledBy || !!options.embeddedInDescribedBy || !!options.embeddedInLabel || !!options.embeddedInNativeTextAlternative) {\n    options.visitedElements.add(element);\n    const tokens = [];\n    const visit = (node, skipSlotted) => {\n      var _a2;\n      if (skipSlotted && node.assignedSlot)\n        return;\n      if (node.nodeType === 1) {\n        const display = ((_a2 = getElementComputedStyle(node)) == null ? void 0 : _a2.display) || "inline";\n        let token = getTextAlternativeInternal(node, childOptions);\n        if (display !== "inline" || node.nodeName === "BR")\n          token = " " + token + " ";\n        tokens.push(token);\n      } else if (node.nodeType === 3) {\n        tokens.push(node.textContent || "");\n      }\n    };\n    tokens.push(getPseudoContent(element, "::before"));\n    const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];\n    if (assignedNodes.length) {\n      for (const child of assignedNodes)\n        visit(child, false);\n    } else {\n      for (let child = element.firstChild; child; child = child.nextSibling)\n        visit(child, true);\n      if (element.shadowRoot) {\n        for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n          visit(child, true);\n      }\n      for (const owned of getIdRefs(element, element.getAttribute("aria-owns")))\n        visit(owned, true);\n    }\n    tokens.push(getPseudoContent(element, "::after"));\n    const accessibleName = tokens.join("");\n    const maybeTrimmedAccessibleName = options.embeddedInTargetElement === "self" ? trimFlatString(accessibleName) : accessibleName;\n    if (maybeTrimmedAccessibleName)\n      return accessibleName;\n  }\n  if (!["presentation", "none"].includes(role) || tagName === "IFRAME") {\n    options.visitedElements.add(element);\n    const title = element.getAttribute("title") || "";\n    if (trimFlatString(title))\n      return title;\n  }\n  options.visitedElements.add(element);\n  return "";\n}\nvar kAriaSelectedRoles = ["gridcell", "option", "row", "tab", "rowheader", "columnheader", "treeitem"];\nfunction getAriaSelected(element) {\n  if (elementSafeTagName(element) === "OPTION")\n    return element.selected;\n  if (kAriaSelectedRoles.includes(getAriaRole(element) || ""))\n    return getAriaBoolean(element.getAttribute("aria-selected")) === true;\n  return false;\n}\nvar kAriaCheckedRoles = ["checkbox", "menuitemcheckbox", "option", "radio", "switch", "menuitemradio", "treeitem"];\nfunction getAriaChecked(element) {\n  const result = getChecked(element, true);\n  return result === "error" ? false : result;\n}\nfunction getChecked(element, allowMixed) {\n  const tagName = elementSafeTagName(element);\n  if (allowMixed && tagName === "INPUT" && element.indeterminate)\n    return "mixed";\n  if (tagName === "INPUT" && ["checkbox", "radio"].includes(element.type))\n    return element.checked;\n  if (kAriaCheckedRoles.includes(getAriaRole(element) || "")) {\n    const checked = element.getAttribute("aria-checked");\n    if (checked === "true")\n      return true;\n    if (allowMixed && checked === "mixed")\n      return "mixed";\n    return false;\n  }\n  return "error";\n}\nvar kAriaPressedRoles = ["button"];\nfunction getAriaPressed(element) {\n  if (kAriaPressedRoles.includes(getAriaRole(element) || "")) {\n    const pressed = element.getAttribute("aria-pressed");\n    if (pressed === "true")\n      return true;\n    if (pressed === "mixed")\n      return "mixed";\n  }\n  return false;\n}\nvar kAriaExpandedRoles = ["application", "button", "checkbox", "combobox", "gridcell", "link", "listbox", "menuitem", "row", "rowheader", "tab", "treeitem", "columnheader", "menuitemcheckbox", "menuitemradio", "rowheader", "switch"];\nfunction getAriaExpanded(element) {\n  if (elementSafeTagName(element) === "DETAILS")\n    return element.open;\n  if (kAriaExpandedRoles.includes(getAriaRole(element) || "")) {\n    const expanded = element.getAttribute("aria-expanded");\n    if (expanded === null)\n      return "none";\n    if (expanded === "true")\n      return true;\n    return false;\n  }\n  return "none";\n}\nvar kAriaLevelRoles = ["heading", "listitem", "row", "treeitem"];\nfunction getAriaLevel(element) {\n  const native = { "H1": 1, "H2": 2, "H3": 3, "H4": 4, "H5": 5, "H6": 6 }[elementSafeTagName(element)];\n  if (native)\n    return native;\n  if (kAriaLevelRoles.includes(getAriaRole(element) || "")) {\n    const attr = element.getAttribute("aria-level");\n    const value = attr === null ? Number.NaN : Number(attr);\n    if (Number.isInteger(value) && value >= 1)\n      return value;\n  }\n  return 0;\n}\nvar kAriaDisabledRoles = ["application", "button", "composite", "gridcell", "group", "input", "link", "menuitem", "scrollbar", "separator", "tab", "checkbox", "columnheader", "combobox", "grid", "listbox", "menu", "menubar", "menuitemcheckbox", "menuitemradio", "option", "radio", "radiogroup", "row", "rowheader", "searchbox", "select", "slider", "spinbutton", "switch", "tablist", "textbox", "toolbar", "tree", "treegrid", "treeitem"];\nfunction getAriaDisabled(element) {\n  return isNativelyDisabled(element) || hasExplicitAriaDisabled(element);\n}\nfunction isNativelyDisabled(element) {\n  const isNativeFormControl = ["BUTTON", "INPUT", "SELECT", "TEXTAREA", "OPTION", "OPTGROUP"].includes(element.tagName);\n  return isNativeFormControl && (element.hasAttribute("disabled") || belongsToDisabledFieldSet(element));\n}\nfunction belongsToDisabledFieldSet(element) {\n  if (!element)\n    return false;\n  if (elementSafeTagName(element) === "FIELDSET" && element.hasAttribute("disabled"))\n    return true;\n  return belongsToDisabledFieldSet(element.parentElement);\n}\nfunction hasExplicitAriaDisabled(element) {\n  if (!element)\n    return false;\n  if (kAriaDisabledRoles.includes(getAriaRole(element) || "")) {\n    const attribute = (element.getAttribute("aria-disabled") || "").toLowerCase();\n    if (attribute === "true")\n      return true;\n    if (attribute === "false")\n      return false;\n  }\n  return hasExplicitAriaDisabled(parentElementOrShadowHost(element));\n}\nfunction getAccessibleNameFromAssociatedLabels(labels, options) {\n  return [...labels].map((label) => getTextAlternativeInternal(label, {\n    ...options,\n    embeddedInLabel: { element: label, hidden: isElementHiddenForAria(label) },\n    embeddedInNativeTextAlternative: void 0,\n    embeddedInLabelledBy: void 0,\n    embeddedInDescribedBy: void 0,\n    embeddedInTargetElement: "none"\n  })).filter((accessibleName) => !!accessibleName).join(" ");\n}\nvar cacheAccessibleName;\nvar cacheAccessibleNameHidden;\nvar cacheAccessibleDescription;\nvar cacheAccessibleDescriptionHidden;\nvar cacheIsHidden;\nvar cachePseudoContentBefore;\nvar cachePseudoContentAfter;\nvar cachesCounter = 0;\nfunction beginAriaCaches() {\n  ++cachesCounter;\n  cacheAccessibleName != null ? cacheAccessibleName : cacheAccessibleName = /* @__PURE__ */ new Map();\n  cacheAccessibleNameHidden != null ? cacheAccessibleNameHidden : cacheAccessibleNameHidden = /* @__PURE__ */ new Map();\n  cacheAccessibleDescription != null ? cacheAccessibleDescription : cacheAccessibleDescription = /* @__PURE__ */ new Map();\n  cacheAccessibleDescriptionHidden != null ? cacheAccessibleDescriptionHidden : cacheAccessibleDescriptionHidden = /* @__PURE__ */ new Map();\n  cacheIsHidden != null ? cacheIsHidden : cacheIsHidden = /* @__PURE__ */ new Map();\n  cachePseudoContentBefore != null ? cachePseudoContentBefore : cachePseudoContentBefore = /* @__PURE__ */ new Map();\n  cachePseudoContentAfter != null ? cachePseudoContentAfter : cachePseudoContentAfter = /* @__PURE__ */ new Map();\n}\nfunction endAriaCaches() {\n  if (!--cachesCounter) {\n    cacheAccessibleName = void 0;\n    cacheAccessibleNameHidden = void 0;\n    cacheAccessibleDescription = void 0;\n    cacheAccessibleDescriptionHidden = void 0;\n    cacheIsHidden = void 0;\n    cachePseudoContentBefore = void 0;\n    cachePseudoContentAfter = void 0;\n  }\n}\n\n// packages/playwright-core/src/server/injected/selectorUtils.ts\nfunction matchesComponentAttribute(obj, attr) {\n  for (const token of attr.jsonPath) {\n    if (obj !== void 0 && obj !== null)\n      obj = obj[token];\n  }\n  return matchesAttributePart(obj, attr);\n}\nfunction matchesAttributePart(value, attr) {\n  const objValue = typeof value === "string" && !attr.caseSensitive ? value.toUpperCase() : value;\n  const attrValue = typeof attr.value === "string" && !attr.caseSensitive ? attr.value.toUpperCase() : attr.value;\n  if (attr.op === "<truthy>")\n    return !!objValue;\n  if (attr.op === "=") {\n    if (attrValue instanceof RegExp)\n      return typeof objValue === "string" && !!objValue.match(attrValue);\n    return objValue === attrValue;\n  }\n  if (typeof objValue !== "string" || typeof attrValue !== "string")\n    return false;\n  if (attr.op === "*=")\n    return objValue.includes(attrValue);\n  if (attr.op === "^=")\n    return objValue.startsWith(attrValue);\n  if (attr.op === "$=")\n    return objValue.endsWith(attrValue);\n  if (attr.op === "|=")\n    return objValue === attrValue || objValue.startsWith(attrValue + "-");\n  if (attr.op === "~=")\n    return objValue.split(" ").includes(attrValue);\n  return false;\n}\nfunction shouldSkipForTextMatching(element) {\n  const document = element.ownerDocument;\n  return element.nodeName === "SCRIPT" || element.nodeName === "NOSCRIPT" || element.nodeName === "STYLE" || document.head && document.head.contains(element);\n}\nfunction elementText(cache, root) {\n  let value = cache.get(root);\n  if (value === void 0) {\n    value = { full: "", normalized: "", immediate: [] };\n    if (!shouldSkipForTextMatching(root)) {\n      let currentImmediate = "";\n      if (root instanceof HTMLInputElement && (root.type === "submit" || root.type === "button")) {\n        value = { full: root.value, normalized: normalizeWhiteSpace(root.value), immediate: [root.value] };\n      } else {\n        for (let child = root.firstChild; child; child = child.nextSibling) {\n          if (child.nodeType === Node.TEXT_NODE) {\n            value.full += child.nodeValue || "";\n            currentImmediate += child.nodeValue || "";\n          } else {\n            if (currentImmediate)\n              value.immediate.push(currentImmediate);\n            currentImmediate = "";\n            if (child.nodeType === Node.ELEMENT_NODE)\n              value.full += elementText(cache, child).full;\n          }\n        }\n        if (currentImmediate)\n          value.immediate.push(currentImmediate);\n        if (root.shadowRoot)\n          value.full += elementText(cache, root.shadowRoot).full;\n        if (value.full)\n          value.normalized = normalizeWhiteSpace(value.full);\n      }\n    }\n    cache.set(root, value);\n  }\n  return value;\n}\nfunction elementMatchesText(cache, element, matcher) {\n  if (shouldSkipForTextMatching(element))\n    return "none";\n  if (!matcher(elementText(cache, element)))\n    return "none";\n  for (let child = element.firstChild; child; child = child.nextSibling) {\n    if (child.nodeType === Node.ELEMENT_NODE && matcher(elementText(cache, child)))\n      return "selfAndChildren";\n  }\n  if (element.shadowRoot && matcher(elementText(cache, element.shadowRoot)))\n    return "selfAndChildren";\n  return "self";\n}\nfunction getElementLabels(textCache, element) {\n  const labels = getAriaLabelledByElements(element);\n  if (labels)\n    return labels.map((label) => elementText(textCache, label));\n  const ariaLabel = element.getAttribute("aria-label");\n  if (ariaLabel !== null && !!ariaLabel.trim())\n    return [{ full: ariaLabel, normalized: normalizeWhiteSpace(ariaLabel), immediate: [ariaLabel] }];\n  const isNonHiddenInput = element.nodeName === "INPUT" && element.type !== "hidden";\n  if (["BUTTON", "METER", "OUTPUT", "PROGRESS", "SELECT", "TEXTAREA"].includes(element.nodeName) || isNonHiddenInput) {\n    const labels2 = element.labels;\n    if (labels2)\n      return [...labels2].map((label) => elementText(textCache, label));\n  }\n  return [];\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "InvalidCharacterError";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw "Spec Error: no more than three codepoints of lookahead.";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken("");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = "id";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === "url" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = "";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken("");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(""), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = "";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error("Internal parse error");\n  };\n  const consumeANumber = function() {\n    let repr = "";\n    let type = "integer";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error("I\'m infinite-looping!");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = "";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return "" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADSTRING";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADURL";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "WHITESPACE";\n  }\n  toString() {\n    return "WS";\n  }\n  toSource() {\n    return " ";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDO";\n  }\n  toSource() {\n    return "<!--";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDC";\n  }\n  toSource() {\n    return "-->";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ":";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ";";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ",";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n    this.mirror = "";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "{";\n    this.value = "{";\n    this.mirror = "}";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "}";\n    this.value = "}";\n    this.mirror = "{";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "[";\n    this.value = "[";\n    this.mirror = "]";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "]";\n    this.value = "]";\n    this.mirror = "[";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "(";\n    this.value = "(";\n    this.mirror = ")";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = ")";\n    this.value = ")";\n    this.mirror = "(";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "~=";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "|=";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "^=";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "$=";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "*=";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "||";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "EOF";\n  }\n  toSource() {\n    return "";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = "DELIM";\n    this.value = "";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return "DELIM(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === "\\\\")\n      return "\\\\\\n";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "IDENT";\n    this.value = val;\n  }\n  toString() {\n    return "IDENT(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "FUNCTION";\n    this.value = val;\n    this.mirror = ")";\n  }\n  toString() {\n    return "FUNCTION(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value) + "(";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "AT-KEYWORD";\n    this.value = val;\n  }\n  toString() {\n    return "AT(" + this.value + ")";\n  }\n  toSource() {\n    return "@" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "HASH";\n    this.value = val;\n    this.type = "unrestricted";\n  }\n  toString() {\n    return "HASH(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === "id")\n      return "#" + escapeIdent(this.value);\n    else\n      return "#" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "STRING";\n    this.value = val;\n  }\n  toString() {\n    return \'"\' + escapeString(this.value) + \'"\';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "URL";\n    this.value = val;\n  }\n  toString() {\n    return "URL(" + this.value + ")";\n  }\n  toSource() {\n    return \'url("\' + escapeString(this.value) + \'")\';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "NUMBER";\n    this.type = "integer";\n    this.repr = "";\n  }\n  toString() {\n    if (this.type === "integer")\n      return "INT(" + this.value + ")";\n    return "NUMBER(" + this.value + ")";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "PERCENTAGE";\n    this.repr = "";\n  }\n  toString() {\n    return "PERCENTAGE(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + "%";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "DIMENSION";\n    this.type = "integer";\n    this.repr = "";\n    this.unit = "";\n  }\n  toString() {\n    return "DIM(" + this.value + "," + this.unit + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = "\\\\65 " + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = "" + string;\n  let result = "";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + code.toString(16) + " ";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code === 34 || code === 92)\n      result += "\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing selector "${selector}"`;\n    const index = (e.stack || "").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here("hello")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing selector "${selector}"`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing selector "${selector}"`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === "*";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = "";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {\n        pos++;\n        if (isIdent())\n          rawCSSString += "." + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += ":" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += "[";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += "]";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = "";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))\n    throw new InvalidSelectorError(`Error while parsing selector "${selector}"`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);\nvar customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === "css" || part.name === "css:light") {\n      if (part.name === "css:light")\n        part.body = ":light(" + part.body + ")";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: "css",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse("[" + part.body + "]");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === "string")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === "css")\n        includeEngine = false;\n      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + "=" : "";\n    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;\n  }).join(" >> ");\n}\nfunction visitAllSelectorParts(selector, visitor) {\n  const visit = (selector2, nested) => {\n    for (const part of selector2.parts) {\n      visitor(part, nested);\n      if (kNestedSelectorNames.has(part.name))\n        visit(part.body.parsed, true);\n    }\n  };\n  visit(selector, false);\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf("=");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === \'"\' && part[part.length - 1] === \'"\') {\n      name = "text";\n      body = part;\n    } else if (part.length > 1 && part[0] === "\'" && part[part.length - 1] === "\'") {\n      name = "text";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {\n      name = "xpath";\n      body = part;\n    } else {\n      name = "css";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === "*") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(">>")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === "\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === \'"\' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === ">" && selector[index + 1] === ">") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || "";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";\n  }\n  function readIdentifier() {\n    let result2 = "";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError("parsing quoted string");\n    while (!EOL && next() !== quote) {\n      if (next() === "\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError("parsing quoted string");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let source = "";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === "\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError("parsing regular expression");\n      } else if (inClass && next() === "]") {\n        inClass = false;\n      } else if (!inClass && next() === "[") {\n        inClass = true;\n      } else if (!inClass && next() === "/") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let flags = "";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = "";\n    skipSpaces();\n    if (next() === `\'` || next() === `"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError("parsing property path");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = "";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== "=")\n      op += eat1();\n    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))\n      syntaxError("parsing operator");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === ".") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === "]") {\n      eat1();\n      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === "/") {\n      if (operator !== "=")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `\'` || next() === `"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === "i" || next() === "I") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === "s" || next() === "S") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = "";\n      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))\n        value += eat1();\n      if (value === "true") {\n        value = true;\n      } else if (value === "false") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError("parsing attribute value");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== "]")\n      syntaxError("parsing attribute value");\n    eat1();\n    if (operator !== "=" && typeof value !== "string")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: "",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === "[") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/reactSelectorEngine.ts\nfunction getFunctionComponentName(component) {\n  return component.displayName || component.name || "Anonymous";\n}\nfunction getComponentName(reactElement) {\n  if (reactElement.type) {\n    switch (typeof reactElement.type) {\n      case "function":\n        return getFunctionComponentName(reactElement.type);\n      case "string":\n        return reactElement.type;\n      case "object":\n        return reactElement.type.displayName || (reactElement.type.render ? getFunctionComponentName(reactElement.type.render) : "");\n    }\n  }\n  if (reactElement._currentElement) {\n    const elementType = reactElement._currentElement.type;\n    if (typeof elementType === "string")\n      return elementType;\n    if (typeof elementType === "function")\n      return elementType.displayName || elementType.name || "Anonymous";\n  }\n  return "";\n}\nfunction getComponentKey(reactElement) {\n  var _a, _b;\n  return (_b = reactElement.key) != null ? _b : (_a = reactElement._currentElement) == null ? void 0 : _a.key;\n}\nfunction getChildren(reactElement) {\n  if (reactElement.child) {\n    const children = [];\n    for (let child = reactElement.child; child; child = child.sibling)\n      children.push(child);\n    return children;\n  }\n  if (!reactElement._currentElement)\n    return [];\n  const isKnownElement = (reactElement2) => {\n    var _a;\n    const elementType = (_a = reactElement2._currentElement) == null ? void 0 : _a.type;\n    return typeof elementType === "function" || typeof elementType === "string";\n  };\n  if (reactElement._renderedComponent) {\n    const child = reactElement._renderedComponent;\n    return isKnownElement(child) ? [child] : [];\n  }\n  if (reactElement._renderedChildren)\n    return [...Object.values(reactElement._renderedChildren)].filter(isKnownElement);\n  return [];\n}\nfunction getProps(reactElement) {\n  var _a;\n  const props = (\n    // React 16+\n    reactElement.memoizedProps || // React 15\n    ((_a = reactElement._currentElement) == null ? void 0 : _a.props)\n  );\n  if (!props || typeof props === "string")\n    return props;\n  const result = { ...props };\n  delete result.children;\n  return result;\n}\nfunction buildComponentsTree(reactElement) {\n  var _a;\n  const treeNode = {\n    key: getComponentKey(reactElement),\n    name: getComponentName(reactElement),\n    children: getChildren(reactElement).map(buildComponentsTree),\n    rootElements: [],\n    props: getProps(reactElement)\n  };\n  const rootElement = (\n    // React 16+\n    // @see https://github.com/baruchvlz/resq/blob/5c15a5e04d3f7174087248f5a158c3d6dcc1ec72/src/utils.js#L29\n    reactElement.stateNode || // React 15\n    reactElement._hostNode || ((_a = reactElement._renderedComponent) == null ? void 0 : _a._hostNode)\n  );\n  if (rootElement instanceof Element) {\n    treeNode.rootElements.push(rootElement);\n  } else {\n    for (const child of treeNode.children)\n      treeNode.rootElements.push(...child.rootElements);\n  }\n  return treeNode;\n}\nfunction filterComponentsTree(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree(child, searchFn, result);\n  return result;\n}\nfunction findReactRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  do {\n    const node = walker.currentNode;\n    const reactNode = node;\n    const rootKey = Object.keys(reactNode).find((key) => key.startsWith("__reactContainer") && reactNode[key] !== null);\n    if (rootKey) {\n      roots.push(reactNode[rootKey].stateNode.current);\n    } else {\n      const legacyRootKey = "_reactRootContainer";\n      if (reactNode.hasOwnProperty(legacyRootKey) && reactNode[legacyRootKey] !== null) {\n        roots.push(reactNode[legacyRootKey]._internalRoot.current);\n      }\n    }\n    if (node instanceof Element && node.hasAttribute("data-reactroot")) {\n      for (const key of Object.keys(node)) {\n        if (key.startsWith("__reactInternalInstance") || key.startsWith("__reactFiber"))\n          roots.push(node[key]);\n      }\n    }\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findReactRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  return roots;\n}\nvar ReactEngine = {\n  queryAll(scope, selector) {\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const reactRoots = findReactRoots(scope.ownerDocument || scope);\n    const trees = reactRoots.map((reactRoot) => buildComponentsTree(reactRoot));\n    const treeNodes = trees.map((tree) => filterComponentsTree(tree, (treeNode) => {\n      var _a;\n      const props = (_a = treeNode.props) != null ? _a : {};\n      if (treeNode.key !== void 0)\n        props.key = treeNode.key;\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((domNode) => !isInsideScope(scope, domNode)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const domNode of treeNode.rootElements)\n        allRootElements.add(domNode);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/vueSelectorEngine.ts\nfunction basename(filename, ext) {\n  const normalized = filename.replace(/^[a-zA-Z]:/, "").replace(/\\\\/g, "/");\n  let result = normalized.substring(normalized.lastIndexOf("/") + 1);\n  if (ext && result.endsWith(ext))\n    result = result.substring(0, result.length - ext.length);\n  return result;\n}\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : "";\n}\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nvar classify = (str) => {\n  return str && str.replace(classifyRE, toUpper);\n};\nfunction buildComponentsTreeVue3(instance) {\n  function getComponentTypeName(options) {\n    const name = options.name || options._componentTag || options.__playwright_guessedName;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, ".vue"));\n  }\n  function saveComponentName(instance2, key) {\n    instance2.type.__playwright_guessedName = key;\n    return key;\n  }\n  function getInstanceName(instance2) {\n    var _a, _b, _c, _d;\n    const name = getComponentTypeName(instance2.type || {});\n    if (name)\n      return name;\n    if (instance2.root === instance2)\n      return "Root";\n    for (const key in (_b = (_a = instance2.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.components) {\n      if (((_c = instance2.parent) == null ? void 0 : _c.type.components[key]) === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    for (const key in (_d = instance2.appContext) == null ? void 0 : _d.components) {\n      if (instance2.appContext.components[key] === instance2.type)\n        return saveComponentName(instance2, key);\n    }\n    return "Anonymous Component";\n  }\n  function isBeingDestroyed(instance2) {\n    return instance2._isBeingDestroyed || instance2.isUnmounted;\n  }\n  function isFragment(instance2) {\n    return instance2.subTree.type.toString() === "Symbol(Fragment)";\n  }\n  function getInternalInstanceChildren(subTree) {\n    const list = [];\n    if (subTree.component)\n      list.push(subTree.component);\n    if (subTree.suspense)\n      list.push(...getInternalInstanceChildren(subTree.suspense.activeBranch));\n    if (Array.isArray(subTree.children)) {\n      subTree.children.forEach((childSubTree) => {\n        if (childSubTree.component)\n          list.push(childSubTree.component);\n        else\n          list.push(...getInternalInstanceChildren(childSubTree));\n      });\n    }\n    return list.filter((child) => {\n      var _a;\n      return !isBeingDestroyed(child) && !((_a = child.type.devtools) == null ? void 0 : _a.hide);\n    });\n  }\n  function getRootElementsFromComponentInstance(instance2) {\n    if (isFragment(instance2))\n      return getFragmentRootElements(instance2.subTree);\n    return [instance2.subTree.el];\n  }\n  function getFragmentRootElements(vnode) {\n    if (!vnode.children)\n      return [];\n    const list = [];\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      const childVnode = vnode.children[i];\n      if (childVnode.component)\n        list.push(...getRootElementsFromComponentInstance(childVnode.component));\n      else if (childVnode.el)\n        list.push(childVnode.el);\n    }\n    return list;\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2.subTree).map(buildComponentsTree2),\n      rootElements: getRootElementsFromComponentInstance(instance2),\n      props: instance2.props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction buildComponentsTreeVue2(instance) {\n  function getComponentName2(options) {\n    const name = options.displayName || options.name || options._componentTag;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, ".vue"));\n  }\n  function getInstanceName(instance2) {\n    const name = getComponentName2(instance2.$options || instance2.fnOptions || {});\n    if (name)\n      return name;\n    return instance2.$root === instance2 ? "Root" : "Anonymous Component";\n  }\n  function getInternalInstanceChildren(instance2) {\n    if (instance2.$children)\n      return instance2.$children;\n    if (Array.isArray(instance2.subTree.children))\n      return instance2.subTree.children.filter((vnode) => !!vnode.component).map((vnode) => vnode.component);\n    return [];\n  }\n  function buildComponentsTree2(instance2) {\n    return {\n      name: getInstanceName(instance2),\n      children: getInternalInstanceChildren(instance2).map(buildComponentsTree2),\n      rootElements: [instance2.$el],\n      props: instance2._props\n    };\n  }\n  return buildComponentsTree2(instance);\n}\nfunction filterComponentsTree2(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree2(child, searchFn, result);\n  return result;\n}\nfunction findVueRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  const vue2Roots = /* @__PURE__ */ new Set();\n  do {\n    const node = walker.currentNode;\n    if (node.__vue__)\n      vue2Roots.add(node.__vue__.$root);\n    if (node.__vue_app__ && node._vnode && node._vnode.component)\n      roots.push({ root: node._vnode.component, version: 3 });\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findVueRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  for (const vue2root of vue2Roots) {\n    roots.push({\n      version: 2,\n      root: vue2root\n    });\n  }\n  return roots;\n}\nvar VueEngine = {\n  queryAll(scope, selector) {\n    const document = scope.ownerDocument || scope;\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const vueRoots = findVueRoots(document);\n    const trees = vueRoots.map((vueRoot) => vueRoot.version === 3 ? buildComponentsTreeVue3(vueRoot.root) : buildComponentsTreeVue2(vueRoot.root));\n    const treeNodes = trees.map((tree) => filterComponentsTree2(tree, (treeNode) => {\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((rootElement) => !isInsideScope(scope, rootElement)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(treeNode.props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = /* @__PURE__ */ new Set();\n    for (const treeNode of treeNodes) {\n      for (const rootElement of treeNode.rootElements)\n        allRootElements.add(rootElement);\n    }\n    return [...allRootElements];\n  }\n};\n\n// packages/playwright-core/src/server/injected/roleSelectorEngine.ts\nvar kSupportedAttributes = ["selected", "checked", "pressed", "expanded", "level", "disabled", "name", "include-hidden"];\nkSupportedAttributes.sort();\nfunction validateSupportedRole(attr, roles, role) {\n  if (!roles.includes(role))\n    throw new Error(`"${attr}" attribute is only supported for roles: ${roles.slice().sort().map((role2) => `"${role2}"`).join(", ")}`);\n}\nfunction validateSupportedValues(attr, values) {\n  if (attr.op !== "<truthy>" && !values.includes(attr.value))\n    throw new Error(`"${attr.name}" must be one of ${values.map((v) => JSON.stringify(v)).join(", ")}`);\n}\nfunction validateSupportedOp(attr, ops) {\n  if (!ops.includes(attr.op))\n    throw new Error(`"${attr.name}" does not support "${attr.op}" matcher`);\n}\nfunction validateAttributes(attrs, role) {\n  const options = { role };\n  for (const attr of attrs) {\n    switch (attr.name) {\n      case "checked": {\n        validateSupportedRole(attr.name, kAriaCheckedRoles, role);\n        validateSupportedValues(attr, [true, false, "mixed"]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.checked = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "pressed": {\n        validateSupportedRole(attr.name, kAriaPressedRoles, role);\n        validateSupportedValues(attr, [true, false, "mixed"]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.pressed = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "selected": {\n        validateSupportedRole(attr.name, kAriaSelectedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.selected = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "expanded": {\n        validateSupportedRole(attr.name, kAriaExpandedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.expanded = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "level": {\n        validateSupportedRole(attr.name, kAriaLevelRoles, role);\n        if (typeof attr.value === "string")\n          attr.value = +attr.value;\n        if (attr.op !== "=" || typeof attr.value !== "number" || Number.isNaN(attr.value))\n          throw new Error(`"level" attribute must be compared to a number`);\n        options.level = attr.value;\n        break;\n      }\n      case "disabled": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.disabled = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "name": {\n        if (attr.op === "<truthy>")\n          throw new Error(`"name" attribute must have a value`);\n        if (typeof attr.value !== "string" && !(attr.value instanceof RegExp))\n          throw new Error(`"name" attribute must be a string or a regular expression`);\n        options.name = attr.value;\n        options.nameOp = attr.op;\n        options.exact = attr.caseSensitive;\n        break;\n      }\n      case "include-hidden": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.includeHidden = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      default: {\n        throw new Error(`Unknown attribute "${attr.name}", must be one of ${kSupportedAttributes.map((a) => `"${a}"`).join(", ")}.`);\n      }\n    }\n  }\n  return options;\n}\nfunction queryRole(scope, options, internal) {\n  const result = [];\n  const match = (element) => {\n    if (getAriaRole(element) !== options.role)\n      return;\n    if (options.selected !== void 0 && getAriaSelected(element) !== options.selected)\n      return;\n    if (options.checked !== void 0 && getAriaChecked(element) !== options.checked)\n      return;\n    if (options.pressed !== void 0 && getAriaPressed(element) !== options.pressed)\n      return;\n    if (options.expanded !== void 0 && getAriaExpanded(element) !== options.expanded)\n      return;\n    if (options.level !== void 0 && getAriaLevel(element) !== options.level)\n      return;\n    if (options.disabled !== void 0 && getAriaDisabled(element) !== options.disabled)\n      return;\n    if (!options.includeHidden) {\n      const isHidden = isElementHiddenForAria(element);\n      if (isHidden)\n        return;\n    }\n    if (options.name !== void 0) {\n      const accessibleName = normalizeWhiteSpace(getElementAccessibleName(element, !!options.includeHidden));\n      if (typeof options.name === "string")\n        options.name = normalizeWhiteSpace(options.name);\n      if (internal && !options.exact && options.nameOp === "=")\n        options.nameOp = "*=";\n      if (!matchesAttributePart(accessibleName, { name: "", jsonPath: [], op: options.nameOp || "=", value: options.name, caseSensitive: !!options.exact }))\n        return;\n    }\n    result.push(element);\n  };\n  const query = (root) => {\n    const shadows = [];\n    if (root.shadowRoot)\n      shadows.push(root.shadowRoot);\n    for (const element of root.querySelectorAll("*")) {\n      match(element);\n      if (element.shadowRoot)\n        shadows.push(element.shadowRoot);\n    }\n    shadows.forEach(query);\n  };\n  query(scope);\n  return result;\n}\nfunction createRoleEngine(internal) {\n  return {\n    queryAll: (scope, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      const role = parsed.name.toLowerCase();\n      if (!role)\n        throw new Error(`Role must not be empty`);\n      const options = validateAttributes(parsed.attributes, role);\n      beginAriaCaches();\n      try {\n        return queryRole(scope, options, internal);\n      } finally {\n        endAriaCaches();\n      }\n    }\n  };\n}\n\n// packages/playwright-core/src/server/injected/layoutSelectorUtils.ts\nfunction boxRightOf(box1, box2, maxDistance) {\n  const distance = box1.left - box2.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxLeftOf(box1, box2, maxDistance) {\n  const distance = box2.left - box1.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxAbove(box1, box2, maxDistance) {\n  const distance = box2.top - box1.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxBelow(box1, box2, maxDistance) {\n  const distance = box1.top - box2.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxNear(box1, box2, maxDistance) {\n  const kThreshold = maxDistance === void 0 ? 50 : maxDistance;\n  let score = 0;\n  if (box1.left - box2.right >= 0)\n    score += box1.left - box2.right;\n  if (box2.left - box1.right >= 0)\n    score += box2.left - box1.right;\n  if (box2.top - box1.bottom >= 0)\n    score += box2.top - box1.bottom;\n  if (box1.top - box2.bottom >= 0)\n    score += box1.top - box2.bottom;\n  return score > kThreshold ? void 0 : score;\n}\nvar kLayoutSelectorNames = ["left-of", "right-of", "above", "below", "near"];\nfunction layoutSelectorScore(name, element, inner, maxDistance) {\n  const box = element.getBoundingClientRect();\n  const scorer = { "left-of": boxLeftOf, "right-of": boxRightOf, "above": boxAbove, "below": boxBelow, "near": boxNear }[name];\n  let bestScore;\n  for (const e of inner) {\n    if (e === element)\n      continue;\n    const score = scorer(box, e.getBoundingClientRect(), maxDistance);\n    if (score === void 0)\n      continue;\n    if (bestScore === void 0 || score < bestScore)\n      bestScore = score;\n  }\n  return bestScore;\n}\n\n// packages/playwright-core/src/server/injected/selectorEvaluator.ts\nvar SelectorEvaluatorImpl = class {\n  constructor(extraEngines) {\n    this._engines = /* @__PURE__ */ new Map();\n    this._cacheQueryCSS = /* @__PURE__ */ new Map();\n    this._cacheMatches = /* @__PURE__ */ new Map();\n    this._cacheQuery = /* @__PURE__ */ new Map();\n    this._cacheMatchesSimple = /* @__PURE__ */ new Map();\n    this._cacheMatchesParents = /* @__PURE__ */ new Map();\n    this._cacheCallMatches = /* @__PURE__ */ new Map();\n    this._cacheCallQuery = /* @__PURE__ */ new Map();\n    this._cacheQuerySimple = /* @__PURE__ */ new Map();\n    this._cacheText = /* @__PURE__ */ new Map();\n    this._retainCacheCounter = 0;\n    for (const [name, engine] of extraEngines)\n      this._engines.set(name, engine);\n    this._engines.set("not", notEngine);\n    this._engines.set("is", isEngine);\n    this._engines.set("where", isEngine);\n    this._engines.set("has", hasEngine);\n    this._engines.set("scope", scopeEngine);\n    this._engines.set("light", lightEngine);\n    this._engines.set("visible", visibleEngine);\n    this._engines.set("text", textEngine);\n    this._engines.set("text-is", textIsEngine);\n    this._engines.set("text-matches", textMatchesEngine);\n    this._engines.set("has-text", hasTextEngine);\n    this._engines.set("right-of", createLayoutEngine("right-of"));\n    this._engines.set("left-of", createLayoutEngine("left-of"));\n    this._engines.set("above", createLayoutEngine("above"));\n    this._engines.set("below", createLayoutEngine("below"));\n    this._engines.set("near", createLayoutEngine("near"));\n    this._engines.set("nth-match", nthMatchEngine);\n    const allNames = [...this._engines.keys()];\n    allNames.sort();\n    const parserNames = [...customCSSNames];\n    parserNames.sort();\n    if (allNames.join("|") !== parserNames.join("|"))\n      throw new Error(`Please keep customCSSNames in sync with evaluator engines: ${allNames.join("|")} vs ${parserNames.join("|")}`);\n  }\n  begin() {\n    ++this._retainCacheCounter;\n  }\n  end() {\n    --this._retainCacheCounter;\n    if (!this._retainCacheCounter) {\n      this._cacheQueryCSS.clear();\n      this._cacheMatches.clear();\n      this._cacheQuery.clear();\n      this._cacheMatchesSimple.clear();\n      this._cacheMatchesParents.clear();\n      this._cacheCallMatches.clear();\n      this._cacheCallQuery.clear();\n      this._cacheQuerySimple.clear();\n      this._cacheText.clear();\n    }\n  }\n  _cached(cache, main, rest, cb) {\n    if (!cache.has(main))\n      cache.set(main, []);\n    const entries = cache.get(main);\n    const entry = entries.find((e) => rest.every((value, index) => e.rest[index] === value));\n    if (entry)\n      return entry.result;\n    const result = cb();\n    entries.push({ rest, result });\n    return result;\n  }\n  _checkSelector(s) {\n    const wellFormed = typeof s === "object" && s && (Array.isArray(s) || "simples" in s && s.simples.length);\n    if (!wellFormed)\n      throw new Error(`Malformed selector "${s}"`);\n    return s;\n  }\n  matches(element, s, context) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheMatches, element, [selector, context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._matchesEngine(isEngine, element, selector, context);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))\n          return false;\n        return this._matchesParents(element, selector, selector.simples.length - 2, context);\n      });\n    } finally {\n      this.end();\n    }\n  }\n  query(context, s) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheQuery, selector, [context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._queryEngine(isEngine, context, selector);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        const previousScoreMap = this._scoreMap;\n        this._scoreMap = /* @__PURE__ */ new Map();\n        let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);\n        elements = elements.filter((element) => this._matchesParents(element, selector, selector.simples.length - 2, context));\n        if (this._scoreMap.size) {\n          elements.sort((a, b) => {\n            const aScore = this._scoreMap.get(a);\n            const bScore = this._scoreMap.get(b);\n            if (aScore === bScore)\n              return 0;\n            if (aScore === void 0)\n              return 1;\n            if (bScore === void 0)\n              return -1;\n            return aScore - bScore;\n          });\n        }\n        this._scoreMap = previousScoreMap;\n        return elements;\n      });\n    } finally {\n      this.end();\n    }\n  }\n  _markScore(element, score) {\n    if (this._scoreMap)\n      this._scoreMap.set(element, score);\n  }\n  _hasScopeClause(selector) {\n    return selector.simples.some((simple) => simple.selector.functions.some((f) => f.name === "scope"));\n  }\n  _expandContextForScopeMatching(context) {\n    if (context.scope.nodeType !== 1)\n      return context;\n    const scope = parentElementOrShadowHost(context.scope);\n    if (!scope)\n      return context;\n    return { ...context, scope, originalScope: context.originalScope || context.scope };\n  }\n  _matchesSimple(element, simple, context) {\n    return this._cached(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {\n      if (element === context.scope)\n        return false;\n      if (simple.css && !this._matchesCSS(element, simple.css))\n        return false;\n      for (const func of simple.functions) {\n        if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))\n          return false;\n      }\n      return true;\n    });\n  }\n  _querySimple(context, simple) {\n    if (!simple.functions.length)\n      return this._queryCSS(context, simple.css || "*");\n    return this._cached(this._cacheQuerySimple, simple, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let css = simple.css;\n      const funcs = simple.functions;\n      if (css === "*" && funcs.length)\n        css = void 0;\n      let elements;\n      let firstIndex = -1;\n      if (css !== void 0) {\n        elements = this._queryCSS(context, css);\n      } else {\n        firstIndex = funcs.findIndex((func) => this._getEngine(func.name).query !== void 0);\n        if (firstIndex === -1)\n          firstIndex = 0;\n        elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches !== void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches === void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      return elements;\n    });\n  }\n  _matchesParents(element, complex, index, context) {\n    if (index < 0)\n      return true;\n    return this._cached(this._cacheMatchesParents, element, [complex, index, context.scope, context.pierceShadow, context.originalScope], () => {\n      const { selector: simple, combinator } = complex.simples[index];\n      if (combinator === ">") {\n        const parent = parentElementOrShadowHostInContext(element, context);\n        if (!parent || !this._matchesSimple(parent, simple, context))\n          return false;\n        return this._matchesParents(parent, complex, index - 1, context);\n      }\n      if (combinator === "+") {\n        const previousSibling = previousSiblingInContext(element, context);\n        if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))\n          return false;\n        return this._matchesParents(previousSibling, complex, index - 1, context);\n      }\n      if (combinator === "") {\n        let parent = parentElementOrShadowHostInContext(element, context);\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      if (combinator === "~") {\n        let previousSibling = previousSiblingInContext(element, context);\n        while (previousSibling) {\n          if (this._matchesSimple(previousSibling, simple, context)) {\n            if (this._matchesParents(previousSibling, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "~")\n              break;\n          }\n          previousSibling = previousSiblingInContext(previousSibling, context);\n        }\n        return false;\n      }\n      if (combinator === ">=") {\n        let parent = element;\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      throw new Error(`Unsupported combinator "${combinator}"`);\n    });\n  }\n  _matchesEngine(engine, element, args, context) {\n    if (engine.matches)\n      return this._callMatches(engine, element, args, context);\n    if (engine.query)\n      return this._callQuery(engine, args, context).includes(element);\n    throw new Error(`Selector engine should implement "matches" or "query"`);\n  }\n  _queryEngine(engine, context, args) {\n    if (engine.query)\n      return this._callQuery(engine, args, context);\n    if (engine.matches)\n      return this._queryCSS(context, "*").filter((element) => this._callMatches(engine, element, args, context));\n    throw new Error(`Selector engine should implement "matches" or "query"`);\n  }\n  _callMatches(engine, element, args, context) {\n    return this._cached(this._cacheCallMatches, element, [engine, context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.matches(element, args, context, this);\n    });\n  }\n  _callQuery(engine, args, context) {\n    return this._cached(this._cacheCallQuery, engine, [context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.query(context, args, this);\n    });\n  }\n  _matchesCSS(element, css) {\n    return element.matches(css);\n  }\n  _queryCSS(context, css) {\n    return this._cached(this._cacheQueryCSS, css, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let result = [];\n      function query(root) {\n        result = result.concat([...root.querySelectorAll(css)]);\n        if (!context.pierceShadow)\n          return;\n        if (root.shadowRoot)\n          query(root.shadowRoot);\n        for (const element of root.querySelectorAll("*")) {\n          if (element.shadowRoot)\n            query(element.shadowRoot);\n        }\n      }\n      query(context.scope);\n      return result;\n    });\n  }\n  _getEngine(name) {\n    const engine = this._engines.get(name);\n    if (!engine)\n      throw new Error(`Unknown selector engine "${name}"`);\n    return engine;\n  }\n};\nvar isEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"is" engine expects non-empty selector list`);\n    return args.some((selector) => evaluator.matches(element, selector, context));\n  },\n  query(context, args, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"is" engine expects non-empty selector list`);\n    let elements = [];\n    for (const arg of args)\n      elements = elements.concat(evaluator.query(context, arg));\n    return args.length === 1 ? elements : sortInDOMOrder(elements);\n  }\n};\nvar hasEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"has" engine expects non-empty selector list`);\n    return evaluator.query({ ...context, scope: element }, args).length > 0;\n  }\n  // TODO: we can implement efficient "query" by matching "args" and returning\n  // all parents/descendants, just have to be careful with the ":scope" matching.\n};\nvar scopeEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`"scope" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9)\n      return element === actualScope.documentElement;\n    return element === actualScope;\n  },\n  query(context, args, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`"scope" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9) {\n      const root = actualScope.documentElement;\n      return root ? [root] : [];\n    }\n    if (actualScope.nodeType === 1)\n      return [actualScope];\n    return [];\n  }\n};\nvar notEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"not" engine expects non-empty selector list`);\n    return !evaluator.matches(element, args, context);\n  }\n};\nvar lightEngine = {\n  query(context, args, evaluator) {\n    return evaluator.query({ ...context, pierceShadow: false }, args);\n  },\n  matches(element, args, context, evaluator) {\n    return evaluator.matches(element, args, { ...context, pierceShadow: false });\n  }\n};\nvar visibleEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length)\n      throw new Error(`"visible" engine expects no arguments`);\n    return isElementVisible(element);\n  }\n};\nvar textEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"text" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";\n  }\n};\nvar textIsEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"text-is" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]);\n    const matcher = (elementText2) => {\n      if (!text && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === text);\n    };\n    return elementMatchesText(evaluator._cacheText, element, matcher) !== "none";\n  }\n};\nvar textMatchesEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0 || typeof args[0] !== "string" || args.length > 2 || args.length === 2 && typeof args[1] !== "string")\n      throw new Error(`"text-matches" engine expects a regexp body and optional regexp flags`);\n    const re = new RegExp(args[0], args.length === 2 ? args[1] : void 0);\n    const matcher = (elementText2) => re.test(elementText2.full);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";\n  }\n};\nvar hasTextEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"has-text" engine expects a single string`);\n    if (shouldSkipForTextMatching(element))\n      return false;\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return matcher(elementText(evaluator._cacheText, element));\n  }\n};\nfunction createLayoutEngine(name) {\n  return {\n    matches(element, args, context, evaluator) {\n      const maxDistance = args.length && typeof args[args.length - 1] === "number" ? args[args.length - 1] : void 0;\n      const queryArgs = maxDistance === void 0 ? args : args.slice(0, args.length - 1);\n      if (args.length < 1 + (maxDistance === void 0 ? 0 : 1))\n        throw new Error(`"${name}" engine expects a selector list and optional maximum distance in pixels`);\n      const inner = evaluator.query(context, queryArgs);\n      const score = layoutSelectorScore(name, element, inner, maxDistance);\n      if (score === void 0)\n        return false;\n      evaluator._markScore(element, score);\n      return true;\n    }\n  };\n}\nvar nthMatchEngine = {\n  query(context, args, evaluator) {\n    let index = args[args.length - 1];\n    if (args.length < 2)\n      throw new Error(`"nth-match" engine expects non-empty selector list and an index argument`);\n    if (typeof index !== "number" || index < 1)\n      throw new Error(`"nth-match" engine expects a one-based index as the last argument`);\n    const elements = isEngine.query(context, args.slice(0, args.length - 1), evaluator);\n    index--;\n    return index < elements.length ? [elements[index]] : [];\n  }\n};\nfunction parentElementOrShadowHostInContext(element, context) {\n  if (element === context.scope)\n    return;\n  if (!context.pierceShadow)\n    return element.parentElement || void 0;\n  return parentElementOrShadowHost(element);\n}\nfunction previousSiblingInContext(element, context) {\n  if (element === context.scope)\n    return;\n  return element.previousElementSibling || void 0;\n}\nfunction sortInDOMOrder(elements) {\n  const elementToEntry = /* @__PURE__ */ new Map();\n  const roots = [];\n  const result = [];\n  function append(element) {\n    let entry = elementToEntry.get(element);\n    if (entry)\n      return entry;\n    const parent = parentElementOrShadowHost(element);\n    if (parent) {\n      const parentEntry = append(parent);\n      parentEntry.children.push(element);\n    } else {\n      roots.push(element);\n    }\n    entry = { children: [], taken: false };\n    elementToEntry.set(element, entry);\n    return entry;\n  }\n  for (const e of elements)\n    append(e).taken = true;\n  function visit(element) {\n    const entry = elementToEntry.get(element);\n    if (entry.taken)\n      result.push(element);\n    if (entry.children.length > 1) {\n      const set = new Set(entry.children);\n      entry.children = [];\n      let child = element.firstElementChild;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n      child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n    }\n    entry.children.forEach(visit);\n  }\n  roots.forEach(visit);\n  return result;\n}\n\n// packages/playwright-core/src/server/injected/selectorGenerator.ts\nvar cacheAllowText = /* @__PURE__ */ new Map();\nvar cacheDisallowText = /* @__PURE__ */ new Map();\nvar kTextScoreRange = 10;\nvar kExactPenalty = kTextScoreRange / 2;\nvar kTestIdScore = 1;\nvar kOtherTestIdScore = 2;\nvar kIframeByAttributeScore = 10;\nvar kBeginPenalizedScore = 50;\nvar kPlaceholderScore = 100;\nvar kLabelScore = 120;\nvar kRoleWithNameScore = 140;\nvar kAltTextScore = 160;\nvar kTextScore = 180;\nvar kTitleScore = 200;\nvar kTextScoreRegex = 250;\nvar kPlaceholderScoreExact = kPlaceholderScore + kExactPenalty;\nvar kLabelScoreExact = kLabelScore + kExactPenalty;\nvar kRoleWithNameScoreExact = kRoleWithNameScore + kExactPenalty;\nvar kAltTextScoreExact = kAltTextScore + kExactPenalty;\nvar kTextScoreExact = kTextScore + kExactPenalty;\nvar kTitleScoreExact = kTitleScore + kExactPenalty;\nvar kEndPenalizedScore = 300;\nvar kCSSIdScore = 500;\nvar kRoleWithoutNameScore = 510;\nvar kCSSInputTypeNameScore = 520;\nvar kCSSTagNameScore = 530;\nvar kNthScore = 1e4;\nvar kCSSFallbackScore = 1e7;\nvar kScoreThresholdForTextExpect = 1e3;\nfunction generateSelector(injectedScript, targetElement, options) {\n  var _a;\n  injectedScript._evaluator.begin();\n  beginAriaCaches();\n  try {\n    let selectors = [];\n    if (options.forTextExpect) {\n      let targetTokens = cssFallback(injectedScript, targetElement.ownerDocument.documentElement, options);\n      for (let element = targetElement; element; element = parentElementOrShadowHost(element)) {\n        const tokens = generateSelectorFor(injectedScript, element, { ...options, noText: true });\n        if (!tokens)\n          continue;\n        const score = combineScores(tokens);\n        if (score <= kScoreThresholdForTextExpect) {\n          targetTokens = tokens;\n          break;\n        }\n      }\n      selectors = [joinTokens(targetTokens)];\n    } else {\n      if (!targetElement.matches("input,textarea,select") && !targetElement.isContentEditable) {\n        const interactiveParent = closestCrossShadow(targetElement, "button,select,input,[role=button],[role=checkbox],[role=radio],a,[role=link]", options.root);\n        if (interactiveParent && isElementVisible(interactiveParent))\n          targetElement = interactiveParent;\n      }\n      if (options.multiple) {\n        const withText = generateSelectorFor(injectedScript, targetElement, options);\n        const withoutText = generateSelectorFor(injectedScript, targetElement, { ...options, noText: true });\n        let tokens = [withText, withoutText];\n        cacheAllowText.clear();\n        cacheDisallowText.clear();\n        if (withText && hasCSSIdToken(withText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noCSSId: true }));\n        if (withoutText && hasCSSIdToken(withoutText))\n          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noText: true, noCSSId: true }));\n        tokens = tokens.filter(Boolean);\n        if (!tokens.length) {\n          const css = cssFallback(injectedScript, targetElement, options);\n          tokens.push(css);\n          if (hasCSSIdToken(css))\n            tokens.push(cssFallback(injectedScript, targetElement, { ...options, noCSSId: true }));\n        }\n        selectors = [...new Set(tokens.map((t) => joinTokens(t)))];\n      } else {\n        const targetTokens = generateSelectorFor(injectedScript, targetElement, options) || cssFallback(injectedScript, targetElement, options);\n        selectors = [joinTokens(targetTokens)];\n      }\n    }\n    const selector = selectors[0];\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      selectors,\n      elements: injectedScript.querySelectorAll(parsedSelector, (_a = options.root) != null ? _a : targetElement.ownerDocument)\n    };\n  } finally {\n    cacheAllowText.clear();\n    cacheDisallowText.clear();\n    endAriaCaches();\n    injectedScript._evaluator.end();\n  }\n}\nfunction filterRegexTokens(textCandidates) {\n  return textCandidates.filter((c) => c[0].selector[0] !== "/");\n}\nfunction generateSelectorFor(injectedScript, targetElement, options) {\n  if (options.root && !isInsideScope(options.root, targetElement))\n    throw new Error(`Target element must belong to the root\'s subtree`);\n  if (targetElement === options.root)\n    return [{ engine: "css", selector: ":scope", score: 1 }];\n  if (targetElement.ownerDocument.documentElement === targetElement)\n    return [{ engine: "css", selector: "html", score: 1 }];\n  const calculate = (element, allowText) => {\n    var _a;\n    const allowNthMatch = element === targetElement;\n    let textCandidates = allowText ? buildTextCandidates(injectedScript, element, element === targetElement) : [];\n    if (element !== targetElement) {\n      textCandidates = filterRegexTokens(textCandidates);\n    }\n    const noTextCandidates = buildNoTextCandidates(injectedScript, element, options).filter((token) => !options.omitInternalEngines || !token.engine.startsWith("internal:")).map((token) => [token]);\n    let result = chooseFirstSelector(injectedScript, (_a = options.root) != null ? _a : targetElement.ownerDocument, element, [...textCandidates, ...noTextCandidates], allowNthMatch);\n    textCandidates = filterRegexTokens(textCandidates);\n    const checkWithText = (textCandidatesToUse) => {\n      const allowParentText = allowText && !textCandidatesToUse.length;\n      const candidates = [...textCandidatesToUse, ...noTextCandidates].filter((c) => {\n        if (!result)\n          return true;\n        return combineScores(c) < combineScores(result);\n      });\n      let bestPossibleInParent = candidates[0];\n      if (!bestPossibleInParent)\n        return;\n      for (let parent = parentElementOrShadowHost(element); parent && parent !== options.root; parent = parentElementOrShadowHost(parent)) {\n        const parentTokens = calculateCached(parent, allowParentText);\n        if (!parentTokens)\n          continue;\n        if (result && combineScores([...parentTokens, ...bestPossibleInParent]) >= combineScores(result))\n          continue;\n        bestPossibleInParent = chooseFirstSelector(injectedScript, parent, element, candidates, allowNthMatch);\n        if (!bestPossibleInParent)\n          return;\n        const combined = [...parentTokens, ...bestPossibleInParent];\n        if (!result || combineScores(combined) < combineScores(result))\n          result = combined;\n      }\n    };\n    checkWithText(textCandidates);\n    if (element === targetElement && textCandidates.length)\n      checkWithText([]);\n    return result;\n  };\n  const calculateCached = (element, allowText) => {\n    const cache = allowText ? cacheAllowText : cacheDisallowText;\n    let value = cache.get(element);\n    if (value === void 0) {\n      value = calculate(element, allowText);\n      cache.set(element, value);\n    }\n    return value;\n  };\n  return calculate(targetElement, !options.noText);\n}\nfunction buildNoTextCandidates(injectedScript, element, options) {\n  const candidates = [];\n  {\n    for (const attr of ["data-testid", "data-test-id", "data-test"]) {\n      if (attr !== options.testIdAttributeName && element.getAttribute(attr))\n        candidates.push({ engine: "css", selector: `[${attr}=${quoteCSSAttributeValue(element.getAttribute(attr))}]`, score: kOtherTestIdScore });\n    }\n    if (!options.noCSSId) {\n      const idAttr = element.getAttribute("id");\n      if (idAttr && !isGuidLike(idAttr))\n        candidates.push({ engine: "css", selector: makeSelectorForId(idAttr), score: kCSSIdScore });\n    }\n    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore });\n  }\n  if (element.nodeName === "IFRAME") {\n    for (const attribute of ["name", "title"]) {\n      if (element.getAttribute(attribute))\n        candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[${attribute}=${quoteCSSAttributeValue(element.getAttribute(attribute))}]`, score: kIframeByAttributeScore });\n    }\n    if (element.getAttribute(options.testIdAttributeName))\n      candidates.push({ engine: "css", selector: `[${options.testIdAttributeName}=${quoteCSSAttributeValue(element.getAttribute(options.testIdAttributeName))}]`, score: kTestIdScore });\n    penalizeScoreForLength([candidates]);\n    return candidates;\n  }\n  if (element.getAttribute(options.testIdAttributeName))\n    candidates.push({ engine: "internal:testid", selector: `[${options.testIdAttributeName}=${escapeForAttributeSelector(element.getAttribute(options.testIdAttributeName), true)}]`, score: kTestIdScore });\n  if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {\n    const input = element;\n    if (input.placeholder) {\n      candidates.push({ engine: "internal:attr", selector: `[placeholder=${escapeForAttributeSelector(input.placeholder, true)}]`, score: kPlaceholderScoreExact });\n      for (const alternative of suitableTextAlternatives(input.placeholder))\n        candidates.push({ engine: "internal:attr", selector: `[placeholder=${escapeForAttributeSelector(alternative.text, false)}]`, score: kPlaceholderScore - alternative.scoreBouns });\n    }\n  }\n  const labels = getElementLabels(injectedScript._evaluator._cacheText, element);\n  for (const label of labels) {\n    const labelText = label.normalized;\n    candidates.push({ engine: "internal:label", selector: escapeForTextSelector(labelText, true), score: kLabelScoreExact });\n    for (const alternative of suitableTextAlternatives(labelText))\n      candidates.push({ engine: "internal:label", selector: escapeForTextSelector(alternative.text, false), score: kLabelScore - alternative.scoreBouns });\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && !["none", "presentation"].includes(ariaRole))\n    candidates.push({ engine: "internal:role", selector: ariaRole, score: kRoleWithoutNameScore });\n  if (element.getAttribute("name") && ["BUTTON", "FORM", "FIELDSET", "FRAME", "IFRAME", "INPUT", "KEYGEN", "OBJECT", "OUTPUT", "SELECT", "TEXTAREA", "MAP", "META", "PARAM"].includes(element.nodeName))\n    candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[name=${quoteCSSAttributeValue(element.getAttribute("name"))}]`, score: kCSSInputTypeNameScore });\n  if (["INPUT", "TEXTAREA"].includes(element.nodeName) && element.getAttribute("type") !== "hidden") {\n    if (element.getAttribute("type"))\n      candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[type=${quoteCSSAttributeValue(element.getAttribute("type"))}]`, score: kCSSInputTypeNameScore });\n  }\n  if (["INPUT", "TEXTAREA", "SELECT"].includes(element.nodeName) && element.getAttribute("type") !== "hidden")\n    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSInputTypeNameScore + 1 });\n  penalizeScoreForLength([candidates]);\n  return candidates;\n}\nfunction buildTextCandidates(injectedScript, element, isTargetNode) {\n  if (element.nodeName === "SELECT")\n    return [];\n  const candidates = [];\n  const title = element.getAttribute("title");\n  if (title) {\n    candidates.push([{ engine: "internal:attr", selector: `[title=${escapeForAttributeSelector(title, true)}]`, score: kTitleScoreExact }]);\n    for (const alternative of suitableTextAlternatives(title))\n      candidates.push([{ engine: "internal:attr", selector: `[title=${escapeForAttributeSelector(alternative.text, false)}]`, score: kTitleScore - alternative.scoreBouns }]);\n  }\n  const alt = element.getAttribute("alt");\n  if (alt && ["APPLET", "AREA", "IMG", "INPUT"].includes(element.nodeName)) {\n    candidates.push([{ engine: "internal:attr", selector: `[alt=${escapeForAttributeSelector(alt, true)}]`, score: kAltTextScoreExact }]);\n    for (const alternative of suitableTextAlternatives(alt))\n      candidates.push([{ engine: "internal:attr", selector: `[alt=${escapeForAttributeSelector(alternative.text, false)}]`, score: kAltTextScore - alternative.scoreBouns }]);\n  }\n  const text = elementText(injectedScript._evaluator._cacheText, element).normalized;\n  if (text) {\n    const alternatives = suitableTextAlternatives(text);\n    if (isTargetNode) {\n      if (text.length <= 80)\n        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(text, true), score: kTextScoreExact }]);\n      for (const alternative of alternatives)\n        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);\n    }\n    const cssToken = { engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore };\n    for (const alternative of alternatives)\n      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);\n    if (text.length <= 80) {\n      const re = new RegExp("^" + escapeRegExp(text) + "$");\n      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(re, false), score: kTextScoreRegex }]);\n    }\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && !["none", "presentation"].includes(ariaRole)) {\n    const ariaName = getElementAccessibleName(element, false);\n    if (ariaName) {\n      candidates.push([{ engine: "internal:role", selector: `${ariaRole}[name=${escapeForAttributeSelector(ariaName, true)}]`, score: kRoleWithNameScoreExact }]);\n      for (const alternative of suitableTextAlternatives(ariaName))\n        candidates.push([{ engine: "internal:role", selector: `${ariaRole}[name=${escapeForAttributeSelector(alternative.text, false)}]`, score: kRoleWithNameScore - alternative.scoreBouns }]);\n    }\n  }\n  penalizeScoreForLength(candidates);\n  return candidates;\n}\nfunction makeSelectorForId(id) {\n  return /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(id) ? "#" + id : `[id="${cssEscape(id)}"]`;\n}\nfunction hasCSSIdToken(tokens) {\n  return tokens.some((token) => token.engine === "css" && (token.selector.startsWith("#") || token.selector.startsWith(\'[id="\')));\n}\nfunction cssFallback(injectedScript, targetElement, options) {\n  var _a;\n  const root = (_a = options.root) != null ? _a : targetElement.ownerDocument;\n  const tokens = [];\n  function uniqueCSSSelector(prefix) {\n    const path = tokens.slice();\n    if (prefix)\n      path.unshift(prefix);\n    const selector = path.join(" > ");\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const node = injectedScript.querySelector(parsedSelector, root, false);\n    return node === targetElement ? selector : void 0;\n  }\n  function makeStrict(selector) {\n    const token = { engine: "css", selector, score: kCSSFallbackScore };\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const elements = injectedScript.querySelectorAll(parsedSelector, root);\n    if (elements.length === 1)\n      return [token];\n    const nth = { engine: "nth", selector: String(elements.indexOf(targetElement)), score: kNthScore };\n    return [token, nth];\n  }\n  for (let element = targetElement; element && element !== root; element = parentElementOrShadowHost(element)) {\n    const nodeName = element.nodeName.toLowerCase();\n    let bestTokenForLevel = "";\n    if (element.id && !options.noCSSId) {\n      const token = makeSelectorForId(element.id);\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      bestTokenForLevel = token;\n    }\n    const parent = element.parentNode;\n    const classes = [...element.classList];\n    for (let i = 0; i < classes.length; ++i) {\n      const token = "." + cssEscape(classes.slice(0, i + 1).join("."));\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel && parent) {\n        const sameClassSiblings = parent.querySelectorAll(token);\n        if (sameClassSiblings.length === 1)\n          bestTokenForLevel = token;\n      }\n    }\n    if (parent) {\n      const siblings = [...parent.children];\n      const sameTagSiblings = siblings.filter((sibling) => sibling.nodeName.toLowerCase() === nodeName);\n      const token = sameTagSiblings.indexOf(element) === 0 ? cssEscape(nodeName) : `${cssEscape(nodeName)}:nth-child(${1 + siblings.indexOf(element)})`;\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel)\n        bestTokenForLevel = token;\n    } else if (!bestTokenForLevel) {\n      bestTokenForLevel = cssEscape(nodeName);\n    }\n    tokens.unshift(bestTokenForLevel);\n  }\n  return makeStrict(uniqueCSSSelector());\n}\nfunction penalizeScoreForLength(groups) {\n  for (const group of groups) {\n    for (const token of group) {\n      if (token.score > kBeginPenalizedScore && token.score < kEndPenalizedScore)\n        token.score += Math.min(kTextScoreRange, token.selector.length / 10 | 0);\n    }\n  }\n}\nfunction joinTokens(tokens) {\n  const parts = [];\n  let lastEngine = "";\n  for (const { engine, selector } of tokens) {\n    if (parts.length && (lastEngine !== "css" || engine !== "css" || selector.startsWith(":nth-match(")))\n      parts.push(">>");\n    lastEngine = engine;\n    if (engine === "css")\n      parts.push(selector);\n    else\n      parts.push(`${engine}=${selector}`);\n  }\n  return parts.join(" ");\n}\nfunction combineScores(tokens) {\n  let score = 0;\n  for (let i = 0; i < tokens.length; i++)\n    score += tokens[i].score * (tokens.length - i);\n  return score;\n}\nfunction chooseFirstSelector(injectedScript, scope, targetElement, selectors, allowNthMatch) {\n  const joined = selectors.map((tokens) => ({ tokens, score: combineScores(tokens) }));\n  joined.sort((a, b) => a.score - b.score);\n  let bestWithIndex = null;\n  for (const { tokens } of joined) {\n    const parsedSelector = injectedScript.parseSelector(joinTokens(tokens));\n    const result = injectedScript.querySelectorAll(parsedSelector, scope);\n    if (result[0] === targetElement && result.length === 1) {\n      return tokens;\n    }\n    const index = result.indexOf(targetElement);\n    if (!allowNthMatch || bestWithIndex || index === -1 || result.length > 5)\n      continue;\n    const nth = { engine: "nth", selector: String(index), score: kNthScore };\n    bestWithIndex = [...tokens, nth];\n  }\n  return bestWithIndex;\n}\nfunction isGuidLike(id) {\n  let lastCharacterType;\n  let transitionCount = 0;\n  for (let i = 0; i < id.length; ++i) {\n    const c = id[i];\n    let characterType;\n    if (c === "-" || c === "_")\n      continue;\n    if (c >= "a" && c <= "z")\n      characterType = "lower";\n    else if (c >= "A" && c <= "Z")\n      characterType = "upper";\n    else if (c >= "0" && c <= "9")\n      characterType = "digit";\n    else\n      characterType = "other";\n    if (characterType === "lower" && lastCharacterType === "upper") {\n      lastCharacterType = characterType;\n      continue;\n    }\n    if (lastCharacterType && lastCharacterType !== characterType)\n      ++transitionCount;\n    lastCharacterType = characterType;\n  }\n  return transitionCount >= id.length / 4;\n}\nfunction trimWordBoundary(text, maxLength) {\n  if (text.length <= maxLength)\n    return text;\n  text = text.substring(0, maxLength);\n  const match = text.match(/^(.*)\\b(.+?)$/);\n  if (!match)\n    return "";\n  return match[1].trimEnd();\n}\nfunction suitableTextAlternatives(text) {\n  let result = [];\n  {\n    const match = text.match(/^([\\d.,]+)[^.,\\w]/);\n    const leadingNumberLength = match ? match[1].length : 0;\n    if (leadingNumberLength) {\n      const alt = trimWordBoundary(text.substring(leadingNumberLength).trimStart(), 80);\n      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  {\n    const match = text.match(/[^.,\\w]([\\d.,]+)$/);\n    const trailingNumberLength = match ? match[1].length : 0;\n    if (trailingNumberLength) {\n      const alt = trimWordBoundary(text.substring(0, text.length - trailingNumberLength).trimEnd(), 80);\n      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  if (text.length <= 30) {\n    result.push({ text, scoreBouns: 0 });\n  } else {\n    result.push({ text: trimWordBoundary(text, 80), scoreBouns: 0 });\n    result.push({ text: trimWordBoundary(text, 30), scoreBouns: 1 });\n  }\n  result = result.filter((r) => r.text);\n  if (!result.length)\n    result.push({ text: text.substring(0, 80), scoreBouns: 0 });\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  const tokens = [];\n  let nextBase = isFrameLocator ? "frame-locator" : "page";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = "locator";\n    if (part.name === "nth") {\n      if (part.body === "0")\n        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);\n      else if (part.body === "-1")\n        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);\n      else\n        tokens.push([factory.generateLocator(base, "nth", part.body)]);\n      continue;\n    }\n    if (part.name === "internal:text") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "text", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:has-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has-not-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));\n      continue;\n    }\n    if (part.name === "internal:has-not") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));\n      continue;\n    }\n    if (part.name === "internal:and") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));\n      continue;\n    }\n    if (part.name === "internal:or") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));\n      continue;\n    }\n    if (part.name === "internal:chain") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));\n      continue;\n    }\n    if (part.name === "internal:label") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "label", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:role") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === "name") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === "level" && typeof attr.value === "string")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === "internal:testid") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, "test-id", value)]);\n      continue;\n    }\n    if (part.name === "internal:attr") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === "placeholder") {\n        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);\n        continue;\n      }\n      if (name === "alt") {\n        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);\n        continue;\n      }\n      if (name === "title") {\n        tokens.push([factory.generateLocator(base, "title", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:control" && part.body === "enter-frame") {\n      tokens.push([factory.generateLocator(base, "frame", "")]);\n      nextBase = "frame-locator";\n      continue;\n    }\n    let locatorType = "default";\n    const nextPart = parts[index + 1];\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);\n    if (locatorType === "default" && nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });\n        const options = {};\n        if (nextPart.name === "internal:has-text")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if (["xpath", "css"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => "");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return currentTokens.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith(\'"\')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith(\'"s\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith(\'"i\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case "has":\n        return `filter({ has: ${body} })`;\n      case "hasNot":\n        return `filter({ hasNot: ${body} })`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "\'");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case "frame":\n        return `content_frame`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first`;\n      case "last":\n        return `last`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === "string" ? this.quote(value) : value;\n          if (typeof value === "boolean")\n            valueString = value ? "True" : "False";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case "has-not-text":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case "has":\n        return `filter(has=${body})`;\n      case "hasNot":\n        return `filter(has_not=${body})`;\n      case "and":\n        return `and_(${body})`;\n      case "or":\n        return `or_(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("get_by_text", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("get_by_label", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("get_by_title", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";\n    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, \'\\\\"\')}"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case "page":\n        clazz = "Page";\n        break;\n      case "frame-locator":\n        clazz = "FrameLocator";\n        break;\n      case "locator":\n        clazz = "Locator";\n        break;\n    }\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case "has-text":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case "has-not-text":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case "has":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case "hasNot":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case "frame":\n        return `ContentFrame`;\n      case "nth":\n        return `Nth(${body})`;\n      case "first":\n        return `First`;\n      case "last":\n        return `Last`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case "has-text":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case "has":\n        return `Filter(new() { Has = ${body} })`;\n      case "hasNot":\n        return `Filter(new() { HasNot = ${body} })`;\n      case "and":\n        return `And(${body})`;\n      case "or":\n        return `Or(${body})`;\n      case "chain":\n        return `Locator(${body})`;\n      case "test-id":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("GetByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("GetByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("GetByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("GetByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/highlight.css?inline\nvar highlight_default = ":host{font-size:13px;font-family:system-ui,Ubuntu,Droid Sans,sans-serif;color:#333}svg{position:absolute;height:0}x-pw-tooltip{backdrop-filter:blur(5px);background-color:#fff;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:none;font-size:12.8px;font-weight:400;left:0;line-height:1.5;max-width:600px;position:absolute;top:0;padding:0;flex-direction:column;overflow:hidden}x-pw-tooltip-line{display:flex;max-width:600px;padding:6px;user-select:none;cursor:pointer}x-pw-tooltip-line.selectable:hover{background-color:#f2f2f2;overflow:hidden}x-pw-tooltip-footer{display:flex;max-width:600px;padding:6px;user-select:none;color:#777}x-pw-dialog{background-color:#fff;pointer-events:auto;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:flex;flex-direction:column;position:absolute;width:400px;height:150px;z-index:10;font-size:13px}x-pw-dialog-body{display:flex;flex-direction:column;flex:auto}x-pw-dialog-body label{margin:5px 8px;display:flex;flex-direction:row;align-items:center}x-pw-highlight{position:absolute;top:0;left:0;width:0;height:0}x-pw-action-point{position:absolute;width:20px;height:20px;background:red;border-radius:10px;margin:-10px 0 0 -10px;z-index:2}x-pw-separator{height:1px;margin:6px 9px;background:rgb(148 148 148 / 90%)}x-pw-tool-gripper{height:28px;width:24px;margin:2px 0;cursor:grab}x-pw-tool-gripper:active{cursor:grabbing}x-pw-tool-gripper>x-div{width:16px;height:16px;margin:6px 4px;clip-path:url(#icon-gripper);background-color:#555}x-pw-tools-list>label{display:flex;align-items:center;margin:0 10px;user-select:none}x-pw-tools-list{display:flex;width:100%;border-bottom:1px solid #dddddd}x-pw-tool-item{pointer-events:auto;cursor:pointer;height:28px;width:28px;border-radius:3px}x-pw-tool-item:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.active{background-color:#8acae480}x-pw-tool-item.active:not(.disabled):hover{background-color:#8acae4c4}x-pw-tool-item>x-div{width:16px;height:16px;margin:6px;background-color:#3a3a3a}x-pw-tool-item.disabled>x-div{background-color:#61616180;cursor:default}x-pw-tool-item.record.active{background-color:transparent}x-pw-tool-item.record.active:hover{background-color:#dbdbdb}x-pw-tool-item.record.active>x-div{background-color:#a1260d}x-pw-tool-item.accept>x-div{background-color:#388a34}x-pw-tool-item.record>x-div{clip-path:url(#icon-circle-large-filled)}x-pw-tool-item.pick-locator>x-div{clip-path:url(#icon-inspect)}x-pw-tool-item.text>x-div{clip-path:url(#icon-whole-word)}x-pw-tool-item.visibility>x-div{clip-path:url(#icon-eye)}x-pw-tool-item.value>x-div{clip-path:url(#icon-symbol-constant)}x-pw-tool-item.accept>x-div{clip-path:url(#icon-check)}x-pw-tool-item.cancel>x-div{clip-path:url(#icon-close)}x-pw-tool-item.succeeded>x-div{clip-path:url(#icon-pass);background-color:#388a34!important}x-pw-overlay{position:absolute;top:0;max-width:min-content;z-index:2147483647;background:transparent;pointer-events:auto}x-pw-overlay x-pw-tools-list{background-color:#fffd;box-shadow:#0000001a 0 5px 5px;border-radius:3px;border-bottom:none}x-pw-overlay x-pw-tool-item{margin:2px}textarea.text-editor{font-family:system-ui,Ubuntu,Droid Sans,sans-serif;flex:auto;border:none;margin:6px 10px;color:#333;outline:1px solid transparent!important;resize:none;padding:0;font-size:13px}textarea.text-editor.does-not-match{outline:1px solid red!important}x-div{display:block}x-spacer{flex:auto}*{box-sizing:border-box}*[hidden]{display:none!important}x-locator-editor{flex:none;width:100%;height:60px;padding:4px;border-bottom:1px solid #dddddd;outline:1px solid transparent}x-locator-editor.does-not-match{outline:1px solid red}.CodeMirror{width:100%!important;height:100%!important}\\n";\n\n// packages/playwright-core/src/server/injected/highlight.ts\nvar Highlight = class {\n  constructor(injectedScript) {\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._language = "javascript";\n    this._injectedScript = injectedScript;\n    const document = injectedScript.document;\n    this._isUnderTest = injectedScript.isUnderTest;\n    this._glassPaneElement = document.createElement("x-pw-glass");\n    this._glassPaneElement.style.position = "fixed";\n    this._glassPaneElement.style.top = "0";\n    this._glassPaneElement.style.right = "0";\n    this._glassPaneElement.style.bottom = "0";\n    this._glassPaneElement.style.left = "0";\n    this._glassPaneElement.style.zIndex = "2147483646";\n    this._glassPaneElement.style.pointerEvents = "none";\n    this._glassPaneElement.style.display = "flex";\n    this._glassPaneElement.style.backgroundColor = "transparent";\n    for (const eventName of ["click", "auxclick", "dragstart", "input", "keydown", "keyup", "pointerdown", "pointerup", "mousedown", "mouseup", "mouseleave", "focus", "scroll"]) {\n      this._glassPaneElement.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        if (e.type === "click" && e.button === 0 && this._highlightOptions.tooltipListItemSelected)\n          this._highlightOptions.tooltipListItemSelected(void 0);\n      });\n    }\n    this._actionPointElement = document.createElement("x-pw-action-point");\n    this._actionPointElement.setAttribute("hidden", "true");\n    this._glassPaneShadow = this._glassPaneElement.attachShadow({ mode: this._isUnderTest ? "open" : "closed" });\n    if (typeof this._glassPaneShadow.adoptedStyleSheets.push === "function") {\n      const sheet = new this._injectedScript.window.CSSStyleSheet();\n      sheet.replaceSync(highlight_default);\n      this._glassPaneShadow.adoptedStyleSheets.push(sheet);\n    } else {\n      const styleElement = this._injectedScript.document.createElement("style");\n      styleElement.textContent = highlight_default;\n      this._glassPaneShadow.appendChild(styleElement);\n    }\n    this._glassPaneShadow.appendChild(this._actionPointElement);\n  }\n  install() {\n    if (!this._injectedScript.document.documentElement.contains(this._glassPaneElement))\n      this._injectedScript.document.documentElement.appendChild(this._glassPaneElement);\n  }\n  setLanguage(language) {\n    this._language = language;\n  }\n  runHighlightOnRaf(selector) {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });\n    this._rafRequest = this._injectedScript.builtinRequestAnimationFrame(() => this.runHighlightOnRaf(selector));\n  }\n  uninstall() {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this._glassPaneElement.remove();\n  }\n  showActionPoint(x, y) {\n    this._actionPointElement.style.top = y + "px";\n    this._actionPointElement.style.left = x + "px";\n    this._actionPointElement.hidden = false;\n  }\n  hideActionPoint() {\n    this._actionPointElement.hidden = true;\n  }\n  clearHighlight() {\n    var _a, _b;\n    for (const entry of this._highlightEntries) {\n      (_a = entry.highlightElement) == null ? void 0 : _a.remove();\n      (_b = entry.tooltipElement) == null ? void 0 : _b.remove();\n    }\n    this._highlightEntries = [];\n    this._highlightOptions = {};\n    this._glassPaneElement.style.pointerEvents = "none";\n  }\n  updateHighlight(elements, options) {\n    this._innerUpdateHighlight(elements, options);\n  }\n  maskElements(elements, color) {\n    this._innerUpdateHighlight(elements, { color });\n  }\n  _innerUpdateHighlight(elements, options) {\n    let color = options.color;\n    if (!color)\n      color = elements.length > 1 ? "#f6b26b7f" : "#6fa8dc7f";\n    if (this._highlightIsUpToDate(elements, options))\n      return;\n    this.clearHighlight();\n    this._highlightOptions = options;\n    this._glassPaneElement.style.pointerEvents = options.tooltipListItemSelected ? "initial" : "none";\n    for (let i = 0; i < elements.length; ++i) {\n      const highlightElement = this._createHighlightElement();\n      this._glassPaneShadow.appendChild(highlightElement);\n      let tooltipElement;\n      if (options.tooltipList || options.tooltipText || options.tooltipFooter) {\n        tooltipElement = this._injectedScript.document.createElement("x-pw-tooltip");\n        this._glassPaneShadow.appendChild(tooltipElement);\n        tooltipElement.style.top = "0";\n        tooltipElement.style.left = "0";\n        tooltipElement.style.display = "flex";\n        let lines = [];\n        if (options.tooltipList) {\n          lines = options.tooltipList;\n        } else if (options.tooltipText) {\n          const suffix = elements.length > 1 ? ` [${i + 1} of ${elements.length}]` : "";\n          lines = [options.tooltipText + suffix];\n        }\n        for (let index = 0; index < lines.length; index++) {\n          const element = this._injectedScript.document.createElement("x-pw-tooltip-line");\n          element.textContent = lines[index];\n          tooltipElement.appendChild(element);\n          if (options.tooltipListItemSelected) {\n            element.classList.add("selectable");\n            element.addEventListener("click", () => {\n              var _a;\n              return (_a = options.tooltipListItemSelected) == null ? void 0 : _a.call(options, index);\n            });\n          }\n        }\n        if (options.tooltipFooter) {\n          const footer = this._injectedScript.document.createElement("x-pw-tooltip-footer");\n          footer.textContent = options.tooltipFooter;\n          tooltipElement.appendChild(footer);\n        }\n      }\n      this._highlightEntries.push({ targetElement: elements[i], tooltipElement, highlightElement });\n    }\n    for (const entry of this._highlightEntries) {\n      entry.box = entry.targetElement.getBoundingClientRect();\n      if (!entry.tooltipElement)\n        continue;\n      const { anchorLeft, anchorTop } = this.tooltipPosition(entry.box, entry.tooltipElement);\n      entry.tooltipTop = anchorTop;\n      entry.tooltipLeft = anchorLeft;\n    }\n    for (const entry of this._highlightEntries) {\n      if (entry.tooltipElement) {\n        entry.tooltipElement.style.top = entry.tooltipTop + "px";\n        entry.tooltipElement.style.left = entry.tooltipLeft + "px";\n      }\n      const box = entry.box;\n      entry.highlightElement.style.backgroundColor = color;\n      entry.highlightElement.style.left = box.x + "px";\n      entry.highlightElement.style.top = box.y + "px";\n      entry.highlightElement.style.width = box.width + "px";\n      entry.highlightElement.style.height = box.height + "px";\n      entry.highlightElement.style.display = "block";\n      if (this._isUnderTest)\n        console.error("Highlight box for test: " + JSON.stringify({ x: box.x, y: box.y, width: box.width, height: box.height }));\n    }\n  }\n  firstBox() {\n    var _a;\n    return (_a = this._highlightEntries[0]) == null ? void 0 : _a.box;\n  }\n  tooltipPosition(box, tooltipElement) {\n    const tooltipWidth = tooltipElement.offsetWidth;\n    const tooltipHeight = tooltipElement.offsetHeight;\n    const totalWidth = this._glassPaneElement.offsetWidth;\n    const totalHeight = this._glassPaneElement.offsetHeight;\n    let anchorLeft = box.left;\n    if (anchorLeft + tooltipWidth > totalWidth - 5)\n      anchorLeft = totalWidth - tooltipWidth - 5;\n    let anchorTop = box.bottom + 5;\n    if (anchorTop + tooltipHeight > totalHeight - 5) {\n      if (box.top > tooltipHeight + 5) {\n        anchorTop = box.top - tooltipHeight - 5;\n      } else {\n        anchorTop = totalHeight - 5 - tooltipHeight;\n      }\n    }\n    return { anchorLeft, anchorTop };\n  }\n  _highlightIsUpToDate(elements, options) {\n    var _a, _b;\n    if (options.tooltipText !== this._highlightOptions.tooltipText)\n      return false;\n    if (options.tooltipListItemSelected !== this._highlightOptions.tooltipListItemSelected)\n      return false;\n    if (options.tooltipFooter !== this._highlightOptions.tooltipFooter)\n      return false;\n    if (((_a = options.tooltipList) == null ? void 0 : _a.length) !== ((_b = this._highlightOptions.tooltipList) == null ? void 0 : _b.length))\n      return false;\n    if (options.tooltipList && this._highlightOptions.tooltipList) {\n      for (let i = 0; i < options.tooltipList.length; i++) {\n        if (options.tooltipList[i] !== this._highlightOptions.tooltipList[i])\n          return false;\n      }\n    }\n    if (elements.length !== this._highlightEntries.length)\n      return false;\n    for (let i = 0; i < this._highlightEntries.length; ++i) {\n      if (elements[i] !== this._highlightEntries[i].targetElement)\n        return false;\n      const oldBox = this._highlightEntries[i].box;\n      if (!oldBox)\n        return false;\n      const box = elements[i].getBoundingClientRect();\n      if (box.top !== oldBox.top || box.right !== oldBox.right || box.bottom !== oldBox.bottom || box.left !== oldBox.left)\n        return false;\n    }\n    return true;\n  }\n  _createHighlightElement() {\n    return this._injectedScript.document.createElement("x-pw-highlight");\n  }\n  appendChild(element) {\n    this._glassPaneShadow.appendChild(element);\n  }\n};\n\n// packages/playwright-core/src/server/injected/simpleDom.ts\nvar leafRoles = /* @__PURE__ */ new Set([\n  "button",\n  "checkbox",\n  "combobox",\n  "link",\n  "textbox"\n]);\nvar lastDom;\nfunction generateSimpleDomNode(injectedScript, target) {\n  return generate(injectedScript, target).node;\n}\nfunction selectorForSimpleDomNodeId(injectedScript, id) {\n  const element = lastDom == null ? void 0 : lastDom.elements.get(id);\n  if (!element)\n    throw new Error(`Internal error: element with id "${id}" not found`);\n  return injectedScript.generateSelectorSimple(element);\n}\nfunction generate(injectedScript, target) {\n  const normalizeWhitespace = (text) => text.replace(/[\\s\\n]+/g, (match) => match.includes("\\n") ? "\\n" : " ");\n  const tokens = [];\n  const elements = /* @__PURE__ */ new Map();\n  let lastId = 0;\n  let resultTarget;\n  const visit = (node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      tokens.push(node.nodeValue);\n      return;\n    }\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const element = node;\n      if (element.nodeName === "SCRIPT" || element.nodeName === "STYLE" || element.nodeName === "NOSCRIPT")\n        return;\n      if (injectedScript.utils.isElementVisible(element)) {\n        const role = injectedScript.utils.getAriaRole(element);\n        if (role && leafRoles.has(role)) {\n          let value;\n          if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA")\n            value = element.value;\n          const name = injectedScript.utils.getElementAccessibleName(element, false);\n          const structuralId = String(++lastId);\n          elements.set(structuralId, element);\n          tokens.push(renderTag(injectedScript, role, name, structuralId, { value }));\n          if (element === target) {\n            const tagNoValue = renderTag(injectedScript, role, name, structuralId);\n            resultTarget = { tag: tagNoValue, id: structuralId };\n          }\n          return;\n        }\n      }\n      for (let child = element.firstChild; child; child = child.nextSibling)\n        visit(child);\n    }\n  };\n  injectedScript.utils.beginAriaCaches();\n  try {\n    visit(injectedScript.document.body);\n  } finally {\n    injectedScript.utils.endAriaCaches();\n  }\n  const dom = {\n    markup: normalizeWhitespace(tokens.join(" ")),\n    elements\n  };\n  if (target && !resultTarget)\n    throw new Error("Target element is not in the simple DOM");\n  lastDom = dom;\n  return { dom, node: resultTarget ? { dom, ...resultTarget } : void 0 };\n}\nfunction renderTag(injectedScript, role, name, id, params) {\n  const escapedTextContent = injectedScript.utils.escapeHTML(name);\n  const escapedValue = injectedScript.utils.escapeHTMLAttribute((params == null ? void 0 : params.value) || "");\n  switch (role) {\n    case "button":\n      return `<button id="${id}">${escapedTextContent}</button>`;\n    case "link":\n      return `<a id="${id}">${escapedTextContent}</a>`;\n    case "textbox":\n      return `<input id="${id}" title="${escapedTextContent}" value="${escapedValue}"></input>`;\n  }\n  return `<div role=${role} id="${id}">${escapedTextContent}</div>`;\n}\n\n// packages/playwright-core/src/server/injected/injectedScript.ts\nvar InjectedScript = class {\n  // eslint-disable-next-line no-restricted-globals\n  constructor(window, isUnderTest, sdkLanguage, testIdAttributeNameForStrictErrorAndConsoleCodegen, stableRafCount, browserName, customEngines) {\n    this.onGlobalListenersRemoved = /* @__PURE__ */ new Set();\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = "data-testid";\n    // Recorder must use any external dependencies through InjectedScript.\n    // Otherwise it will end up with a copy of all modules it uses, and any\n    // module-level globals will be duplicated, which leads to subtle bugs.\n    this.utils = {\n      asLocator,\n      beginAriaCaches,\n      cacheNormalizedWhitespaces,\n      elementText,\n      endAriaCaches,\n      escapeHTML,\n      escapeHTMLAttribute,\n      getAriaRole,\n      getElementAccessibleDescription,\n      getElementAccessibleName,\n      isElementVisible,\n      isInsideScope,\n      normalizeWhiteSpace\n    };\n    this.window = window;\n    this.document = window.document;\n    this.isUnderTest = isUnderTest;\n    this._sdkLanguage = sdkLanguage;\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = testIdAttributeNameForStrictErrorAndConsoleCodegen;\n    this._evaluator = new SelectorEvaluatorImpl(/* @__PURE__ */ new Map());\n    this._engines = /* @__PURE__ */ new Map();\n    this._engines.set("xpath", XPathEngine);\n    this._engines.set("xpath:light", XPathEngine);\n    this._engines.set("_react", ReactEngine);\n    this._engines.set("_vue", VueEngine);\n    this._engines.set("role", createRoleEngine(false));\n    this._engines.set("text", this._createTextEngine(true, false));\n    this._engines.set("text:light", this._createTextEngine(false, false));\n    this._engines.set("id", this._createAttributeEngine("id", true));\n    this._engines.set("id:light", this._createAttributeEngine("id", false));\n    this._engines.set("data-testid", this._createAttributeEngine("data-testid", true));\n    this._engines.set("data-testid:light", this._createAttributeEngine("data-testid", false));\n    this._engines.set("data-test-id", this._createAttributeEngine("data-test-id", true));\n    this._engines.set("data-test-id:light", this._createAttributeEngine("data-test-id", false));\n    this._engines.set("data-test", this._createAttributeEngine("data-test", true));\n    this._engines.set("data-test:light", this._createAttributeEngine("data-test", false));\n    this._engines.set("css", this._createCSSEngine());\n    this._engines.set("nth", { queryAll: () => [] });\n    this._engines.set("visible", this._createVisibleEngine());\n    this._engines.set("internal:control", this._createControlEngine());\n    this._engines.set("internal:has", this._createHasEngine());\n    this._engines.set("internal:has-not", this._createHasNotEngine());\n    this._engines.set("internal:and", { queryAll: () => [] });\n    this._engines.set("internal:or", { queryAll: () => [] });\n    this._engines.set("internal:chain", this._createInternalChainEngine());\n    this._engines.set("internal:label", this._createInternalLabelEngine());\n    this._engines.set("internal:text", this._createTextEngine(true, true));\n    this._engines.set("internal:has-text", this._createInternalHasTextEngine());\n    this._engines.set("internal:has-not-text", this._createInternalHasNotTextEngine());\n    this._engines.set("internal:attr", this._createNamedAttributeEngine());\n    this._engines.set("internal:testid", this._createNamedAttributeEngine());\n    this._engines.set("internal:role", createRoleEngine(true));\n    for (const { name, engine } of customEngines)\n      this._engines.set(name, engine);\n    this._stableRafCount = stableRafCount;\n    this._browserName = browserName;\n    setBrowserName(browserName);\n    this._setupGlobalListenersRemovalDetection();\n    this._setupHitTargetInterceptors();\n    if (isUnderTest)\n      this.window.__injectedScript = this;\n  }\n  builtinSetTimeout(callback, timeout) {\n    var _a;\n    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)\n      return this.window.__pwClock.builtin.setTimeout(callback, timeout);\n    return this.window.setTimeout(callback, timeout);\n  }\n  builtinClearTimeout(timeout) {\n    var _a;\n    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)\n      return this.window.__pwClock.builtin.clearTimeout(timeout);\n    return this.window.clearTimeout(timeout);\n  }\n  builtinRequestAnimationFrame(callback) {\n    var _a;\n    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)\n      return this.window.__pwClock.builtin.requestAnimationFrame(callback);\n    return this.window.requestAnimationFrame(callback);\n  }\n  eval(expression) {\n    return this.window.eval(expression);\n  }\n  testIdAttributeNameForStrictErrorAndConsoleCodegen() {\n    return this._testIdAttributeNameForStrictErrorAndConsoleCodegen;\n  }\n  parseSelector(selector) {\n    const result = parseSelector(selector);\n    visitAllSelectorParts(result, (part) => {\n      if (!this._engines.has(part.name))\n        throw this.createStacklessError(`Unknown engine "${part.name}" while parsing selector ${selector}`);\n    });\n    return result;\n  }\n  generateSelector(targetElement, options) {\n    return generateSelector(this, targetElement, options);\n  }\n  generateSelectorSimple(targetElement, options) {\n    return generateSelector(this, targetElement, { ...options, testIdAttributeName: this._testIdAttributeNameForStrictErrorAndConsoleCodegen }).selector;\n  }\n  querySelector(selector, root, strict) {\n    const result = this.querySelectorAll(selector, root);\n    if (strict && result.length > 1)\n      throw this.strictModeViolationError(selector, result);\n    return result[0];\n  }\n  _queryNth(elements, part) {\n    const list = [...elements];\n    let nth = +part.body;\n    if (nth === -1)\n      nth = list.length - 1;\n    return new Set(list.slice(nth, nth + 1));\n  }\n  _queryLayoutSelector(elements, part, originalRoot) {\n    const name = part.name;\n    const body = part.body;\n    const result = [];\n    const inner = this.querySelectorAll(body.parsed, originalRoot);\n    for (const element of elements) {\n      const score = layoutSelectorScore(name, element, inner, body.distance);\n      if (score !== void 0)\n        result.push({ element, score });\n    }\n    result.sort((a, b) => a.score - b.score);\n    return new Set(result.map((r) => r.element));\n  }\n  querySelectorAll(selector, root) {\n    if (selector.capture !== void 0) {\n      if (selector.parts.some((part) => part.name === "nth"))\n        throw this.createStacklessError(`Can\'t query n-th element in a request with the capture.`);\n      const withHas = { parts: selector.parts.slice(0, selector.capture + 1) };\n      if (selector.capture < selector.parts.length - 1) {\n        const parsed = { parts: selector.parts.slice(selector.capture + 1) };\n        const has = { name: "internal:has", body: { parsed }, source: stringifySelector(parsed) };\n        withHas.parts.push(has);\n      }\n      return this.querySelectorAll(withHas, root);\n    }\n    if (!root["querySelectorAll"])\n      throw this.createStacklessError("Node is not queryable.");\n    if (selector.capture !== void 0) {\n      throw this.createStacklessError("Internal error: there should not be a capture in the selector.");\n    }\n    if (root.nodeType === 11 && selector.parts.length === 1 && selector.parts[0].name === "css" && selector.parts[0].source === ":scope")\n      return [root];\n    this._evaluator.begin();\n    try {\n      let roots = /* @__PURE__ */ new Set([root]);\n      for (const part of selector.parts) {\n        if (part.name === "nth") {\n          roots = this._queryNth(roots, part);\n        } else if (part.name === "internal:and") {\n          const andElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(andElements.filter((e) => roots.has(e)));\n        } else if (part.name === "internal:or") {\n          const orElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(sortInDOMOrder(/* @__PURE__ */ new Set([...roots, ...orElements])));\n        } else if (kLayoutSelectorNames.includes(part.name)) {\n          roots = this._queryLayoutSelector(roots, part, root);\n        } else {\n          const next = /* @__PURE__ */ new Set();\n          for (const root2 of roots) {\n            const all = this._queryEngineAll(part, root2);\n            for (const one of all)\n              next.add(one);\n          }\n          roots = next;\n        }\n      }\n      return [...roots];\n    } finally {\n      this._evaluator.end();\n    }\n  }\n  _queryEngineAll(part, root) {\n    const result = this._engines.get(part.name).queryAll(root, part.body);\n    for (const element of result) {\n      if (!("nodeName" in element))\n        throw this.createStacklessError(`Expected a Node but got ${Object.prototype.toString.call(element)}`);\n    }\n    return result;\n  }\n  _createAttributeEngine(attribute, shadow) {\n    const toCSS = (selector) => {\n      const css = `[${attribute}=${JSON.stringify(selector)}]`;\n      return [{ simples: [{ selector: { css, functions: [] }, combinator: "" }] }];\n    };\n    return {\n      queryAll: (root, selector) => {\n        return this._evaluator.query({ scope: root, pierceShadow: shadow }, toCSS(selector));\n      }\n    };\n  }\n  _createCSSEngine() {\n    return {\n      queryAll: (root, body) => {\n        return this._evaluator.query({ scope: root, pierceShadow: true }, body);\n      }\n    };\n  }\n  _createTextEngine(shadow, internal) {\n    const queryAll = (root, selector) => {\n      const { matcher, kind } = createTextMatcher(selector, internal);\n      const result = [];\n      let lastDidNotMatchSelf = null;\n      const appendElement = (element) => {\n        if (kind === "lax" && lastDidNotMatchSelf && lastDidNotMatchSelf.contains(element))\n          return false;\n        const matches = elementMatchesText(this._evaluator._cacheText, element, matcher);\n        if (matches === "none")\n          lastDidNotMatchSelf = element;\n        if (matches === "self" || matches === "selfAndChildren" && kind === "strict" && !internal)\n          result.push(element);\n      };\n      if (root.nodeType === Node.ELEMENT_NODE)\n        appendElement(root);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: shadow }, "*");\n      for (const element of elements)\n        appendElement(element);\n      return result;\n    };\n    return { queryAll };\n  }\n  _createInternalHasTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [element] : [];\n      }\n    };\n  }\n  _createInternalHasNotTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [] : [element];\n      }\n    };\n  }\n  _createInternalLabelEngine() {\n    return {\n      queryAll: (root, selector) => {\n        const { matcher } = createTextMatcher(selector, true);\n        const allElements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, "*");\n        return allElements.filter((element) => {\n          return getElementLabels(this._evaluator._cacheText, element).some((label) => matcher(label));\n        });\n      }\n    };\n  }\n  _createNamedAttributeEngine() {\n    const queryAll = (root, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      if (parsed.name || parsed.attributes.length !== 1)\n        throw new Error("Malformed attribute selector: " + selector);\n      const { name, value, caseSensitive } = parsed.attributes[0];\n      const lowerCaseValue = caseSensitive ? null : value.toLowerCase();\n      let matcher;\n      if (value instanceof RegExp)\n        matcher = (s) => !!s.match(value);\n      else if (caseSensitive)\n        matcher = (s) => s === value;\n      else\n        matcher = (s) => s.toLowerCase().includes(lowerCaseValue);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, `[${name}]`);\n      return elements.filter((e) => matcher(e.getAttribute(name)));\n    };\n    return { queryAll };\n  }\n  _createControlEngine() {\n    return {\n      queryAll(root, body) {\n        if (body === "enter-frame")\n          return [];\n        if (body === "return-empty")\n          return [];\n        if (body === "component") {\n          if (root.nodeType !== 1)\n            return [];\n          return [root.childElementCount === 1 ? root.firstElementChild : root];\n        }\n        throw new Error(`Internal error, unknown internal:control selector ${body}`);\n      }\n    };\n  }\n  _createHasEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createHasNotEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [] : [root];\n    };\n    return { queryAll };\n  }\n  _createVisibleEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      return isElementVisible(root) === Boolean(body) ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createInternalChainEngine() {\n    const queryAll = (root, body) => {\n      return this.querySelectorAll(body.parsed, root);\n    };\n    return { queryAll };\n  }\n  extend(source, params) {\n    const constrFunction = this.window.eval(`\n    (() => {\n      const module = {};\n      ${source}\n      return module.exports.default();\n    })()`);\n    return new constrFunction(this, params);\n  }\n  async viewportRatio(element) {\n    return await new Promise((resolve) => {\n      const observer = new IntersectionObserver((entries) => {\n        resolve(entries[0].intersectionRatio);\n        observer.disconnect();\n      });\n      observer.observe(element);\n      this.builtinRequestAnimationFrame(() => {\n      });\n    });\n  }\n  getElementBorderWidth(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n      return { left: 0, top: 0 };\n    const style = node.ownerDocument.defaultView.getComputedStyle(node);\n    return { left: parseInt(style.borderLeftWidth || "", 10), top: parseInt(style.borderTopWidth || "", 10) };\n  }\n  describeIFrameStyle(iframe) {\n    if (!iframe.ownerDocument || !iframe.ownerDocument.defaultView)\n      return "error:notconnected";\n    const defaultView = iframe.ownerDocument.defaultView;\n    for (let e = iframe; e; e = parentElementOrShadowHost(e)) {\n      if (defaultView.getComputedStyle(e).transform !== "none")\n        return "transformed";\n    }\n    const iframeStyle = defaultView.getComputedStyle(iframe);\n    return {\n      left: parseInt(iframeStyle.borderLeftWidth || "", 10) + parseInt(iframeStyle.paddingLeft || "", 10),\n      top: parseInt(iframeStyle.borderTopWidth || "", 10) + parseInt(iframeStyle.paddingTop || "", 10)\n    };\n  }\n  retarget(node, behavior) {\n    let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n    if (!element)\n      return null;\n    if (behavior === "none")\n      return element;\n    if (!element.matches("input, textarea, select") && !element.isContentEditable) {\n      if (behavior === "button-link")\n        element = element.closest("button, [role=button], a, [role=link]") || element;\n      else\n        element = element.closest("button, [role=button], [role=checkbox], [role=radio]") || element;\n    }\n    if (behavior === "follow-label") {\n      if (!element.matches("a, input, textarea, button, select, [role=link], [role=button], [role=checkbox], [role=radio]") && !element.isContentEditable) {\n        element = element.closest("label") || element;\n      }\n      if (element.nodeName === "LABEL")\n        element = element.control || element;\n    }\n    return element;\n  }\n  async checkElementStates(node, states) {\n    if (states.includes("stable")) {\n      const stableResult = await this._checkElementIsStable(node);\n      if (stableResult === false)\n        return { missingState: "stable" };\n      if (stableResult === "error:notconnected")\n        return stableResult;\n    }\n    for (const state of states) {\n      if (state !== "stable") {\n        const result = this.elementState(node, state);\n        if (result === false)\n          return { missingState: state };\n        if (result === "error:notconnected")\n          return result;\n      }\n    }\n  }\n  async _checkElementIsStable(node) {\n    const continuePolling = Symbol("continuePolling");\n    let lastRect;\n    let stableRafCounter = 0;\n    let lastTime = 0;\n    const check = () => {\n      const element = this.retarget(node, "no-follow-label");\n      if (!element)\n        return "error:notconnected";\n      const time = performance.now();\n      if (this._stableRafCount > 1 && time - lastTime < 15)\n        return continuePolling;\n      lastTime = time;\n      const clientRect = element.getBoundingClientRect();\n      const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n      if (lastRect) {\n        const samePosition = rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;\n        if (!samePosition)\n          return false;\n        if (++stableRafCounter >= this._stableRafCount)\n          return true;\n      }\n      lastRect = rect;\n      return continuePolling;\n    };\n    let fulfill;\n    let reject;\n    const result = new Promise((f, r) => {\n      fulfill = f;\n      reject = r;\n    });\n    const raf = () => {\n      try {\n        const success = check();\n        if (success !== continuePolling)\n          fulfill(success);\n        else\n          this.builtinRequestAnimationFrame(raf);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    this.builtinRequestAnimationFrame(raf);\n    return result;\n  }\n  elementState(node, state) {\n    const element = this.retarget(node, ["stable", "visible", "hidden"].includes(state) ? "none" : "follow-label");\n    if (!element || !element.isConnected) {\n      if (state === "hidden")\n        return true;\n      return "error:notconnected";\n    }\n    if (state === "visible")\n      return isElementVisible(element);\n    if (state === "hidden")\n      return !isElementVisible(element);\n    const disabled = getAriaDisabled(element);\n    if (state === "disabled")\n      return disabled;\n    if (state === "enabled")\n      return !disabled;\n    const editable = !(["INPUT", "TEXTAREA", "SELECT"].includes(element.nodeName) && element.hasAttribute("readonly"));\n    if (state === "editable")\n      return !disabled && editable;\n    if (state === "checked" || state === "unchecked") {\n      const need = state === "checked";\n      const checked = getChecked(element, false);\n      if (checked === "error")\n        throw this.createStacklessError("Not a checkbox or radio button");\n      return need === checked;\n    }\n    throw this.createStacklessError(`Unexpected element state "${state}"`);\n  }\n  selectOptions(node, optionsToSelect) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() !== "select")\n      throw this.createStacklessError("Element is not a <select> element");\n    const select = element;\n    const options = [...select.options];\n    const selectedOptions = [];\n    let remainingOptionsToSelect = optionsToSelect.slice();\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index];\n      const filter = (optionToSelect) => {\n        if (optionToSelect instanceof Node)\n          return option === optionToSelect;\n        let matches = true;\n        if (optionToSelect.valueOrLabel !== void 0)\n          matches = matches && (optionToSelect.valueOrLabel === option.value || optionToSelect.valueOrLabel === option.label);\n        if (optionToSelect.value !== void 0)\n          matches = matches && optionToSelect.value === option.value;\n        if (optionToSelect.label !== void 0)\n          matches = matches && optionToSelect.label === option.label;\n        if (optionToSelect.index !== void 0)\n          matches = matches && optionToSelect.index === index;\n        return matches;\n      };\n      if (!remainingOptionsToSelect.some(filter))\n        continue;\n      selectedOptions.push(option);\n      if (select.multiple) {\n        remainingOptionsToSelect = remainingOptionsToSelect.filter((o) => !filter(o));\n      } else {\n        remainingOptionsToSelect = [];\n        break;\n      }\n    }\n    if (remainingOptionsToSelect.length)\n      return "error:optionsnotfound";\n    select.value = void 0;\n    selectedOptions.forEach((option) => option.selected = true);\n    select.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n    select.dispatchEvent(new Event("change", { bubbles: true }));\n    return selectedOptions.map((option) => option.value);\n  }\n  fill(node, value) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() === "input") {\n      const input = element;\n      const type = input.type.toLowerCase();\n      const kInputTypesToSetValue = /* @__PURE__ */ new Set(["color", "date", "time", "datetime-local", "month", "range", "week"]);\n      const kInputTypesToTypeInto = /* @__PURE__ */ new Set(["", "email", "number", "password", "search", "tel", "text", "url"]);\n      if (!kInputTypesToTypeInto.has(type) && !kInputTypesToSetValue.has(type))\n        throw this.createStacklessError(`Input of type "${type}" cannot be filled`);\n      if (type === "number") {\n        value = value.trim();\n        if (isNaN(Number(value)))\n          throw this.createStacklessError("Cannot type text into input[type=number]");\n      }\n      if (kInputTypesToSetValue.has(type)) {\n        value = value.trim();\n        input.focus();\n        input.value = value;\n        if (input.value !== value)\n          throw this.createStacklessError("Malformed value");\n        element.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n        element.dispatchEvent(new Event("change", { bubbles: true }));\n        return "done";\n      }\n    } else if (element.nodeName.toLowerCase() === "textarea") {\n    } else if (!element.isContentEditable) {\n      throw this.createStacklessError("Element is not an <input>, <textarea> or [contenteditable] element");\n    }\n    this.selectText(element);\n    return "needsinput";\n  }\n  selectText(node) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() === "input") {\n      const input = element;\n      input.select();\n      input.focus();\n      return "done";\n    }\n    if (element.nodeName.toLowerCase() === "textarea") {\n      const textarea = element;\n      textarea.selectionStart = 0;\n      textarea.selectionEnd = textarea.value.length;\n      textarea.focus();\n      return "done";\n    }\n    const range = element.ownerDocument.createRange();\n    range.selectNodeContents(element);\n    const selection = element.ownerDocument.defaultView.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n    element.focus();\n    return "done";\n  }\n  _activelyFocused(node) {\n    const activeElement = node.getRootNode().activeElement;\n    const isFocused = activeElement === node && !!node.ownerDocument && node.ownerDocument.hasFocus();\n    return { activeElement, isFocused };\n  }\n  focusNode(node, resetSelectionIfNotFocused) {\n    if (!node.isConnected)\n      return "error:notconnected";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Node is not an element");\n    const { activeElement, isFocused: wasFocused } = this._activelyFocused(node);\n    if (node.isContentEditable && !wasFocused && activeElement && activeElement.blur) {\n      activeElement.blur();\n    }\n    node.focus();\n    node.focus();\n    if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === "input") {\n      try {\n        const input = node;\n        input.setSelectionRange(0, 0);\n      } catch (e) {\n      }\n    }\n    return "done";\n  }\n  blurNode(node) {\n    if (!node.isConnected)\n      return "error:notconnected";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Node is not an element");\n    node.blur();\n    return "done";\n  }\n  setInputFiles(node, payloads) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return "Node is not of type HTMLElement";\n    const element = node;\n    if (element.nodeName !== "INPUT")\n      return "Not an <input> element";\n    const input = element;\n    const type = (input.getAttribute("type") || "").toLowerCase();\n    if (type !== "file")\n      return "Not an input[type=file] element";\n    const files = payloads.map((file) => {\n      const bytes = Uint8Array.from(atob(file.buffer), (c) => c.charCodeAt(0));\n      return new File([bytes], file.name, { type: file.mimeType, lastModified: file.lastModifiedMs });\n    });\n    const dt = new DataTransfer();\n    for (const file of files)\n      dt.items.add(file);\n    input.files = dt.files;\n    input.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n    input.dispatchEvent(new Event("change", { bubbles: true }));\n  }\n  expectHitTarget(hitPoint, targetElement) {\n    const roots = [];\n    let parentElement = targetElement;\n    while (parentElement) {\n      const root = enclosingShadowRootOrDocument(parentElement);\n      if (!root)\n        break;\n      roots.push(root);\n      if (root.nodeType === 9)\n        break;\n      parentElement = root.host;\n    }\n    let hitElement;\n    for (let index = roots.length - 1; index >= 0; index--) {\n      const root = roots[index];\n      const elements = root.elementsFromPoint(hitPoint.x, hitPoint.y);\n      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);\n      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {\n        const style = this.window.getComputedStyle(singleElement);\n        if ((style == null ? void 0 : style.display) === "contents") {\n          elements.unshift(singleElement);\n        }\n      }\n      if (elements[0] && elements[0].shadowRoot === root && elements[1] === singleElement) {\n        elements.shift();\n      }\n      const innerElement = elements[0];\n      if (!innerElement)\n        break;\n      hitElement = innerElement;\n      if (index && innerElement !== roots[index - 1].host)\n        break;\n    }\n    const hitParents = [];\n    while (hitElement && hitElement !== targetElement) {\n      hitParents.push(hitElement);\n      hitElement = parentElementOrShadowHost(hitElement);\n    }\n    if (hitElement === targetElement)\n      return "done";\n    const hitTargetDescription = this.previewNode(hitParents[0] || this.document.documentElement);\n    let rootHitTargetDescription;\n    let element = targetElement;\n    while (element) {\n      const index = hitParents.indexOf(element);\n      if (index !== -1) {\n        if (index > 1)\n          rootHitTargetDescription = this.previewNode(hitParents[index - 1]);\n        break;\n      }\n      element = parentElementOrShadowHost(element);\n    }\n    if (rootHitTargetDescription)\n      return { hitTargetDescription: `${hitTargetDescription} from ${rootHitTargetDescription} subtree` };\n    return { hitTargetDescription };\n  }\n  // Life of a pointer action, for example click.\n  //\n  // 0. Retry items 1 and 2 while action fails due to navigation or element being detached.\n  //   1. Resolve selector to an element.\n  //   2. Retry the following steps until the element is detached or frame navigates away.\n  //     2a. Wait for the element to be stable (not moving), visible and enabled.\n  //     2b. Scroll element into view. Scrolling alternates between:\n  //         - Built-in protocol scrolling.\n  //         - Anchoring to the top/left, bottom/right and center/center.\n  //         This is to scroll elements from under sticky headers/footers.\n  //     2c. Click point is calculated, either based on explicitly specified position,\n  //         or some visible point of the element based on protocol content quads.\n  //     2d. Click point relative to page viewport is converted relative to the target iframe\n  //         for the next hit-point check.\n  //     2e. (injected) Hit target at the click point must be a descendant of the target element.\n  //         This prevents mis-clicking in edge cases like <iframe> overlaying the target.\n  //     2f. (injected) Events specific for click (or some other action type) are intercepted on\n  //         the Window with capture:true. See 2i for details.\n  //         Note: this step is skipped for drag&drop (see inline comments for the reason).\n  //     2g. Necessary keyboard modifiers are pressed.\n  //     2h. Click event is issued (mousemove + mousedown + mouseup).\n  //     2i. (injected) For each event, we check that hit target at the event point\n  //         is a descendant of the target element.\n  //         This guarantees no race between issuing the event and handling it in the page,\n  //         for example due to layout shift.\n  //         When hit target check fails, we block all future events in the page.\n  //     2j. Keyboard modifiers are restored.\n  //     2k. (injected) Event interceptor is removed.\n  //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.\n  //     2m. If failed, wait for increasing amount of time before the next retry.\n  setupHitTargetInterceptor(node, action, hitPoint, blockAllEvents) {\n    const element = this.retarget(node, "button-link");\n    if (!element || !element.isConnected)\n      return "error:notconnected";\n    if (hitPoint) {\n      const preliminaryResult = this.expectHitTarget(hitPoint, element);\n      if (preliminaryResult !== "done")\n        return preliminaryResult.hitTargetDescription;\n    }\n    if (action === "drag")\n      return { stop: () => "done" };\n    const events = {\n      "hover": kHoverHitTargetInterceptorEvents,\n      "tap": kTapHitTargetInterceptorEvents,\n      "mouse": kMouseHitTargetInterceptorEvents\n    }[action];\n    let result;\n    const listener = (event) => {\n      if (!events.has(event.type))\n        return;\n      if (!event.isTrusted)\n        return;\n      const point = !!this.window.TouchEvent && event instanceof this.window.TouchEvent ? event.touches[0] : event;\n      if (result === void 0 && point)\n        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);\n      if (blockAllEvents || result !== "done" && result !== void 0) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n      }\n    };\n    const stop = () => {\n      if (this._hitTargetInterceptor === listener)\n        this._hitTargetInterceptor = void 0;\n      return result || "done";\n    };\n    this._hitTargetInterceptor = listener;\n    return { stop };\n  }\n  dispatchEvent(node, type, eventInit) {\n    let event;\n    eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInit };\n    switch (eventType.get(type)) {\n      case "mouse":\n        event = new MouseEvent(type, eventInit);\n        break;\n      case "keyboard":\n        event = new KeyboardEvent(type, eventInit);\n        break;\n      case "touch":\n        event = new TouchEvent(type, eventInit);\n        break;\n      case "pointer":\n        event = new PointerEvent(type, eventInit);\n        break;\n      case "focus":\n        event = new FocusEvent(type, eventInit);\n        break;\n      case "drag":\n        event = new DragEvent(type, eventInit);\n        break;\n      case "wheel":\n        event = new WheelEvent(type, eventInit);\n        break;\n      case "deviceorientation":\n        try {\n          event = new DeviceOrientationEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, alpha, beta, gamma, absolute } = eventInit;\n          event = this.document.createEvent("DeviceOrientationEvent");\n          event.initDeviceOrientationEvent(type, bubbles, cancelable, alpha, beta, gamma, absolute);\n        }\n        break;\n      case "devicemotion":\n        try {\n          event = new DeviceMotionEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval } = eventInit;\n          event = this.document.createEvent("DeviceMotionEvent");\n          event.initDeviceMotionEvent(type, bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval);\n        }\n        break;\n      default:\n        event = new Event(type, eventInit);\n        break;\n    }\n    node.dispatchEvent(event);\n  }\n  previewNode(node) {\n    if (node.nodeType === Node.TEXT_NODE)\n      return oneLine(`#text=${node.nodeValue || ""}`);\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return oneLine(`<${node.nodeName.toLowerCase()} />`);\n    const element = node;\n    const attrs = [];\n    for (let i = 0; i < element.attributes.length; i++) {\n      const { name, value } = element.attributes[i];\n      if (name === "style")\n        continue;\n      if (!value && booleanAttributes.has(name))\n        attrs.push(` ${name}`);\n      else\n        attrs.push(` ${name}="${value}"`);\n    }\n    attrs.sort((a, b) => a.length - b.length);\n    const attrText = trimStringWithEllipsis(attrs.join(""), 500);\n    if (autoClosingTags.has(element.nodeName))\n      return oneLine(`<${element.nodeName.toLowerCase()}${attrText}/>`);\n    const children = element.childNodes;\n    let onlyText = false;\n    if (children.length <= 5) {\n      onlyText = true;\n      for (let i = 0; i < children.length; i++)\n        onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;\n    }\n    const text = onlyText ? element.textContent || "" : children.length ? "\\u2026" : "";\n    return oneLine(`<${element.nodeName.toLowerCase()}${attrText}>${trimStringWithEllipsis(text, 50)}</${element.nodeName.toLowerCase()}>`);\n  }\n  strictModeViolationError(selector, matches) {\n    const infos = matches.slice(0, 10).map((m) => ({\n      preview: this.previewNode(m),\n      selector: this.generateSelectorSimple(m)\n    }));\n    const lines = infos.map((info, i) => `\n    ${i + 1}) ${info.preview} aka ${asLocator(this._sdkLanguage, info.selector)}`);\n    if (infos.length < matches.length)\n      lines.push("\\n    ...");\n    return this.createStacklessError(`strict mode violation: ${asLocator(this._sdkLanguage, stringifySelector(selector))} resolved to ${matches.length} elements:${lines.join("")}\n`);\n  }\n  createStacklessError(message) {\n    if (this._browserName === "firefox") {\n      const error2 = new Error("Error: " + message);\n      error2.stack = "";\n      return error2;\n    }\n    const error = new Error(message);\n    delete error.stack;\n    return error;\n  }\n  createHighlight() {\n    return new Highlight(this);\n  }\n  maskSelectors(selectors, color) {\n    if (this._highlight)\n      this.hideHighlight();\n    this._highlight = new Highlight(this);\n    this._highlight.install();\n    const elements = [];\n    for (const selector of selectors)\n      elements.push(this.querySelectorAll(selector, this.document.documentElement));\n    this._highlight.maskElements(elements.flat(), color);\n  }\n  highlight(selector) {\n    if (!this._highlight) {\n      this._highlight = new Highlight(this);\n      this._highlight.install();\n    }\n    this._highlight.runHighlightOnRaf(selector);\n  }\n  hideHighlight() {\n    if (this._highlight) {\n      this._highlight.uninstall();\n      delete this._highlight;\n    }\n  }\n  markTargetElements(markedElements, callId) {\n    const customEvent = new CustomEvent("__playwright_target__", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of markedElements)\n      element.dispatchEvent(customEvent);\n  }\n  _setupGlobalListenersRemovalDetection() {\n    const customEventName = "__playwright_global_listeners_check__";\n    let seenEvent = false;\n    const handleCustomEvent = () => seenEvent = true;\n    this.window.addEventListener(customEventName, handleCustomEvent);\n    new MutationObserver((entries) => {\n      const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(this.document.documentElement));\n      if (!newDocumentElement)\n        return;\n      seenEvent = false;\n      this.window.dispatchEvent(new CustomEvent(customEventName));\n      if (seenEvent)\n        return;\n      this.window.addEventListener(customEventName, handleCustomEvent);\n      for (const callback of this.onGlobalListenersRemoved)\n        callback();\n    }).observe(this.document, { childList: true });\n  }\n  _setupHitTargetInterceptors() {\n    const listener = (event) => {\n      var _a;\n      return (_a = this._hitTargetInterceptor) == null ? void 0 : _a.call(this, event);\n    };\n    const addHitTargetInterceptorListeners = () => {\n      for (const event of kAllHitTargetInterceptorEvents)\n        this.window.addEventListener(event, listener, { capture: true, passive: false });\n    };\n    addHitTargetInterceptorListeners();\n    this.onGlobalListenersRemoved.add(addHitTargetInterceptorListeners);\n  }\n  async expect(element, options, elements) {\n    const isArray = options.expression === "to.have.count" || options.expression.endsWith(".array");\n    if (isArray)\n      return this.expectArray(elements, options);\n    if (!element) {\n      if (!options.isNot && options.expression === "to.be.hidden")\n        return { matches: true };\n      if (options.isNot && options.expression === "to.be.visible")\n        return { matches: false };\n      if (!options.isNot && options.expression === "to.be.detached")\n        return { matches: true };\n      if (options.isNot && options.expression === "to.be.attached")\n        return { matches: false };\n      if (options.isNot && options.expression === "to.be.in.viewport")\n        return { matches: false };\n      return { matches: options.isNot, missingReceived: true };\n    }\n    return await this.expectSingleElement(element, options);\n  }\n  async expectSingleElement(element, options) {\n    var _a, _b;\n    const expression = options.expression;\n    {\n      let elementState;\n      if (expression === "to.have.attribute") {\n        elementState = element.hasAttribute(options.expressionArg);\n      } else if (expression === "to.be.checked") {\n        elementState = this.elementState(element, "checked");\n      } else if (expression === "to.be.unchecked") {\n        elementState = this.elementState(element, "unchecked");\n      } else if (expression === "to.be.disabled") {\n        elementState = this.elementState(element, "disabled");\n      } else if (expression === "to.be.editable") {\n        elementState = this.elementState(element, "editable");\n      } else if (expression === "to.be.readonly") {\n        elementState = !this.elementState(element, "editable");\n      } else if (expression === "to.be.empty") {\n        if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA")\n          elementState = !element.value;\n        else\n          elementState = !((_a = element.textContent) == null ? void 0 : _a.trim());\n      } else if (expression === "to.be.enabled") {\n        elementState = this.elementState(element, "enabled");\n      } else if (expression === "to.be.focused") {\n        elementState = this._activelyFocused(element).isFocused;\n      } else if (expression === "to.be.hidden") {\n        elementState = this.elementState(element, "hidden");\n      } else if (expression === "to.be.visible") {\n        elementState = this.elementState(element, "visible");\n      } else if (expression === "to.be.attached") {\n        elementState = true;\n      } else if (expression === "to.be.detached") {\n        elementState = false;\n      }\n      if (elementState !== void 0) {\n        if (elementState === "error:notcheckbox")\n          throw this.createStacklessError("Element is not a checkbox");\n        if (elementState === "error:notconnected")\n          throw this.createStacklessError("Element is not connected");\n        return { received: elementState, matches: elementState };\n      }\n    }\n    {\n      if (expression === "to.have.property") {\n        let target = element;\n        const properties = options.expressionArg.split(".");\n        for (let i = 0; i < properties.length - 1; i++) {\n          if (typeof target !== "object" || !(properties[i] in target))\n            return { received: void 0, matches: false };\n          target = target[properties[i]];\n        }\n        const received = target[properties[properties.length - 1]];\n        const matches = deepEquals(received, options.expectedValue);\n        return { received, matches };\n      }\n    }\n    {\n      if (expression === "to.be.in.viewport") {\n        const ratio = await this.viewportRatio(element);\n        return { received: `viewport ratio ${ratio}`, matches: ratio > 0 && ratio > ((_b = options.expectedNumber) != null ? _b : 0) - 1e-9 };\n      }\n    }\n    {\n      if (expression === "to.have.values") {\n        element = this.retarget(element, "follow-label");\n        if (element.nodeName !== "SELECT" || !element.multiple)\n          throw this.createStacklessError("Not a select element with a multiple attribute");\n        const received = [...element.selectedOptions].map((o) => o.value);\n        if (received.length !== options.expectedText.length)\n          return { received, matches: false };\n        return { received, matches: received.map((r, i) => new ExpectedTextMatcher(options.expectedText[i]).matches(r)).every(Boolean) };\n      }\n    }\n    {\n      let received;\n      if (expression === "to.have.attribute.value") {\n        const value = element.getAttribute(options.expressionArg);\n        if (value === null)\n          return { received: null, matches: false };\n        received = value;\n      } else if (expression === "to.have.class") {\n        received = element.classList.toString();\n      } else if (expression === "to.have.css") {\n        received = this.window.getComputedStyle(element).getPropertyValue(options.expressionArg);\n      } else if (expression === "to.have.id") {\n        received = element.id;\n      } else if (expression === "to.have.text") {\n        received = options.useInnerText ? element.innerText : elementText(/* @__PURE__ */ new Map(), element).full;\n      } else if (expression === "to.have.accessible.name") {\n        received = getElementAccessibleName(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === "to.have.accessible.description") {\n        received = getElementAccessibleDescription(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === "to.have.role") {\n        received = getAriaRole(element) || "";\n      } else if (expression === "to.have.title") {\n        received = this.document.title;\n      } else if (expression === "to.have.url") {\n        received = this.document.location.href;\n      } else if (expression === "to.have.value") {\n        element = this.retarget(element, "follow-label");\n        if (element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")\n          throw this.createStacklessError("Not an input element");\n        received = element.value;\n      }\n      if (received !== void 0 && options.expectedText) {\n        const matcher = new ExpectedTextMatcher(options.expectedText[0]);\n        return { received, matches: matcher.matches(received) };\n      }\n    }\n    throw this.createStacklessError("Unknown expect matcher: " + expression);\n  }\n  expectArray(elements, options) {\n    const expression = options.expression;\n    if (expression === "to.have.count") {\n      const received2 = elements.length;\n      const matches = received2 === options.expectedNumber;\n      return { received: received2, matches };\n    }\n    let received;\n    if (expression === "to.have.text.array" || expression === "to.contain.text.array")\n      received = elements.map((e) => options.useInnerText ? e.innerText : elementText(/* @__PURE__ */ new Map(), e).full);\n    else if (expression === "to.have.class.array")\n      received = elements.map((e) => e.classList.toString());\n    if (received && options.expectedText) {\n      const lengthShouldMatch = expression !== "to.contain.text.array";\n      const matchesLength = received.length === options.expectedText.length || !lengthShouldMatch;\n      if (!matchesLength)\n        return { received, matches: false };\n      const matchers = options.expectedText.map((e) => new ExpectedTextMatcher(e));\n      let mIndex = 0, rIndex = 0;\n      while (mIndex < matchers.length && rIndex < received.length) {\n        if (matchers[mIndex].matches(received[rIndex]))\n          ++mIndex;\n        ++rIndex;\n      }\n      return { received, matches: mIndex === matchers.length };\n    }\n    throw this.createStacklessError("Unknown expect matcher: " + expression);\n  }\n  generateSimpleDomNode(selector) {\n    const element = this.querySelector(this.parseSelector(selector), this.document.documentElement, true);\n    if (!element)\n      return;\n    return generateSimpleDomNode(this, element);\n  }\n  selectorForSimpleDomNodeId(nodeId) {\n    return selectorForSimpleDomNodeId(this, nodeId);\n  }\n};\nvar autoClosingTags = /* @__PURE__ */ new Set(["AREA", "BASE", "BR", "COL", "COMMAND", "EMBED", "HR", "IMG", "INPUT", "KEYGEN", "LINK", "MENUITEM", "META", "PARAM", "SOURCE", "TRACK", "WBR"]);\nvar booleanAttributes = /* @__PURE__ */ new Set(["checked", "selected", "disabled", "readonly", "multiple"]);\nfunction oneLine(s) {\n  return s.replace(/\\n/g, "\\u21B5").replace(/\\t/g, "\\u21C6");\n}\nvar eventType = /* @__PURE__ */ new Map([\n  ["auxclick", "mouse"],\n  ["click", "mouse"],\n  ["dblclick", "mouse"],\n  ["mousedown", "mouse"],\n  ["mouseeenter", "mouse"],\n  ["mouseleave", "mouse"],\n  ["mousemove", "mouse"],\n  ["mouseout", "mouse"],\n  ["mouseover", "mouse"],\n  ["mouseup", "mouse"],\n  ["mouseleave", "mouse"],\n  ["mousewheel", "mouse"],\n  ["keydown", "keyboard"],\n  ["keyup", "keyboard"],\n  ["keypress", "keyboard"],\n  ["textInput", "keyboard"],\n  ["touchstart", "touch"],\n  ["touchmove", "touch"],\n  ["touchend", "touch"],\n  ["touchcancel", "touch"],\n  ["pointerover", "pointer"],\n  ["pointerout", "pointer"],\n  ["pointerenter", "pointer"],\n  ["pointerleave", "pointer"],\n  ["pointerdown", "pointer"],\n  ["pointerup", "pointer"],\n  ["pointermove", "pointer"],\n  ["pointercancel", "pointer"],\n  ["gotpointercapture", "pointer"],\n  ["lostpointercapture", "pointer"],\n  ["focus", "focus"],\n  ["blur", "focus"],\n  ["drag", "drag"],\n  ["dragstart", "drag"],\n  ["dragend", "drag"],\n  ["dragover", "drag"],\n  ["dragenter", "drag"],\n  ["dragleave", "drag"],\n  ["dragexit", "drag"],\n  ["drop", "drag"],\n  ["wheel", "wheel"],\n  ["deviceorientation", "deviceorientation"],\n  ["deviceorientationabsolute", "deviceorientation"],\n  ["devicemotion", "devicemotion"]\n]);\nvar kHoverHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["mousemove"]);\nvar kTapHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["pointerdown", "pointerup", "touchstart", "touchend", "touchcancel"]);\nvar kMouseHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["mousedown", "mouseup", "pointerdown", "pointerup", "click", "auxclick", "dblclick", "contextmenu"]);\nvar kAllHitTargetInterceptorEvents = /* @__PURE__ */ new Set([...kHoverHitTargetInterceptorEvents, ...kTapHitTargetInterceptorEvents, ...kMouseHitTargetInterceptorEvents]);\nfunction cssUnquote(s) {\n  s = s.substring(1, s.length - 1);\n  if (!s.includes("\\\\"))\n    return s;\n  const r = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === "\\\\" && i + 1 < s.length)\n      i++;\n    r.push(s[i++]);\n  }\n  return r.join("");\n}\nfunction createTextMatcher(selector, internal) {\n  if (selector[0] === "/" && selector.lastIndexOf("/") > 0) {\n    const lastSlash = selector.lastIndexOf("/");\n    const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n    return { matcher: (elementText2) => re.test(elementText2.full), kind: "regex" };\n  }\n  const unquote = internal ? JSON.parse.bind(JSON) : cssUnquote;\n  let strict = false;\n  if (selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 1] === \'"\') {\n    selector = unquote(selector);\n    strict = true;\n  } else if (internal && selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 2] === \'"\' && selector[selector.length - 1] === "i") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = false;\n  } else if (internal && selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 2] === \'"\' && selector[selector.length - 1] === "s") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = true;\n  } else if (selector.length > 1 && selector[0] === "\'" && selector[selector.length - 1] === "\'") {\n    selector = unquote(selector);\n    strict = true;\n  }\n  selector = normalizeWhiteSpace(selector);\n  if (strict) {\n    if (internal)\n      return { kind: "strict", matcher: (elementText2) => elementText2.normalized === selector };\n    const strictTextNodeMatcher = (elementText2) => {\n      if (!selector && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === selector);\n    };\n    return { matcher: strictTextNodeMatcher, kind: "strict" };\n  }\n  selector = selector.toLowerCase();\n  return { kind: "lax", matcher: (elementText2) => elementText2.normalized.toLowerCase().includes(selector) };\n}\nvar ExpectedTextMatcher = class {\n  constructor(expected) {\n    this._normalizeWhiteSpace = expected.normalizeWhiteSpace;\n    this._ignoreCase = expected.ignoreCase;\n    this._string = expected.matchSubstring ? void 0 : this.normalize(expected.string);\n    this._substring = expected.matchSubstring ? this.normalize(expected.string) : void 0;\n    if (expected.regexSource) {\n      const flags = new Set((expected.regexFlags || "").split(""));\n      if (expected.ignoreCase === false)\n        flags.delete("i");\n      if (expected.ignoreCase === true)\n        flags.add("i");\n      this._regex = new RegExp(expected.regexSource, [...flags].join(""));\n    }\n  }\n  matches(text) {\n    if (!this._regex)\n      text = this.normalize(text);\n    if (this._string !== void 0)\n      return text === this._string;\n    if (this._substring !== void 0)\n      return text.includes(this._substring);\n    if (this._regex)\n      return !!this._regex.test(text);\n    return false;\n  }\n  normalize(s) {\n    if (!s)\n      return s;\n    if (this._normalizeWhiteSpace)\n      s = normalizeWhiteSpace(s);\n    if (this._ignoreCase)\n      s = s.toLocaleLowerCase();\n    return s;\n  }\n};\nfunction deepEquals(a, b) {\n  if (a === b)\n    return true;\n  if (a && b && typeof a === "object" && typeof b === "object") {\n    if (a.constructor !== b.constructor)\n      return false;\n    if (Array.isArray(a)) {\n      if (a.length !== b.length)\n        return false;\n      for (let i = 0; i < a.length; ++i) {\n        if (!deepEquals(a[i], b[i]))\n          return false;\n      }\n      return true;\n    }\n    if (a instanceof RegExp)\n      return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n    const keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length)\n      return false;\n    for (let i = 0; i < keys.length; ++i) {\n      if (!b.hasOwnProperty(keys[i]))\n        return false;\n    }\n    for (const key of keys) {\n      if (!deepEquals(a[key], b[key]))\n        return false;\n    }\n    return true;\n  }\n  if (typeof a === "number" && typeof b === "number")\n    return isNaN(a) && isNaN(b);\n  return false;\n}\n';
var javascript$1 = {};
var utilityScriptSource$1 = {};
Object.defineProperty(utilityScriptSource$1, "__esModule", {
  value: true
});
utilityScriptSource$1.source = void 0;
utilityScriptSource$1.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar utilityScript_exports = {};\n__export(utilityScript_exports, {\n  UtilityScript: () => UtilityScript\n});\nmodule.exports = __toCommonJS(utilityScript_exports);\n\n// packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts\nfunction source() {\n  function isRegExp(obj) {\n    try {\n      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isDate(obj) {\n    try {\n      return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isURL(obj) {\n    try {\n      return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isError(obj) {\n    var _a;\n    try {\n      return obj instanceof Error || obj && ((_a = Object.getPrototypeOf(obj)) == null ? void 0 : _a.name) === "Error";\n    } catch (error) {\n      return false;\n    }\n  }\n  function parseEvaluationResultValue2(value, handles = [], refs = /* @__PURE__ */ new Map()) {\n    if (Object.is(value, void 0))\n      return void 0;\n    if (typeof value === "object" && value) {\n      if ("ref" in value)\n        return refs.get(value.ref);\n      if ("v" in value) {\n        if (value.v === "undefined")\n          return void 0;\n        if (value.v === "null")\n          return null;\n        if (value.v === "NaN")\n          return NaN;\n        if (value.v === "Infinity")\n          return Infinity;\n        if (value.v === "-Infinity")\n          return -Infinity;\n        if (value.v === "-0")\n          return -0;\n        return void 0;\n      }\n      if ("d" in value)\n        return new Date(value.d);\n      if ("u" in value)\n        return new URL(value.u);\n      if ("bi" in value)\n        return BigInt(value.bi);\n      if ("e" in value) {\n        const error = new Error(value.e.m);\n        error.name = value.e.n;\n        error.stack = value.e.s;\n        return error;\n      }\n      if ("r" in value)\n        return new RegExp(value.r.p, value.r.f);\n      if ("a" in value) {\n        const result2 = [];\n        refs.set(value.id, result2);\n        for (const a of value.a)\n          result2.push(parseEvaluationResultValue2(a, handles, refs));\n        return result2;\n      }\n      if ("o" in value) {\n        const result2 = {};\n        refs.set(value.id, result2);\n        for (const { k, v } of value.o)\n          result2[k] = parseEvaluationResultValue2(v, handles, refs);\n        return result2;\n      }\n      if ("h" in value)\n        return handles[value.h];\n    }\n    return value;\n  }\n  function serializeAsCallArgument2(value, handleSerializer) {\n    return serialize(value, handleSerializer, { visited: /* @__PURE__ */ new Map(), lastId: 0 });\n  }\n  function serialize(value, handleSerializer, visitorInfo) {\n    if (value && typeof value === "object") {\n      if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)\n        return "ref: <Window>";\n      if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)\n        return "ref: <Document>";\n      if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)\n        return "ref: <Node>";\n    }\n    return innerSerialize(value, handleSerializer, visitorInfo);\n  }\n  function innerSerialize(value, handleSerializer, visitorInfo) {\n    var _a;\n    const result2 = handleSerializer(value);\n    if ("fallThrough" in result2)\n      value = result2.fallThrough;\n    else\n      return result2;\n    if (typeof value === "symbol")\n      return { v: "undefined" };\n    if (Object.is(value, void 0))\n      return { v: "undefined" };\n    if (Object.is(value, null))\n      return { v: "null" };\n    if (Object.is(value, NaN))\n      return { v: "NaN" };\n    if (Object.is(value, Infinity))\n      return { v: "Infinity" };\n    if (Object.is(value, -Infinity))\n      return { v: "-Infinity" };\n    if (Object.is(value, -0))\n      return { v: "-0" };\n    if (typeof value === "boolean")\n      return value;\n    if (typeof value === "number")\n      return value;\n    if (typeof value === "string")\n      return value;\n    if (typeof value === "bigint")\n      return { bi: value.toString() };\n    if (isError(value)) {\n      let stack;\n      if ((_a = value.stack) == null ? void 0 : _a.startsWith(value.name + ": " + value.message)) {\n        stack = value.stack;\n      } else {\n        stack = `${value.name}: ${value.message}\n${value.stack}`;\n      }\n      return { e: { n: value.name, m: value.message, s: stack } };\n    }\n    if (isDate(value))\n      return { d: value.toJSON() };\n    if (isURL(value))\n      return { u: value.toJSON() };\n    if (isRegExp(value))\n      return { r: { p: value.source, f: value.flags } };\n    const id = visitorInfo.visited.get(value);\n    if (id)\n      return { ref: id };\n    if (Array.isArray(value)) {\n      const a = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (let i = 0; i < value.length; ++i)\n        a.push(serialize(value[i], handleSerializer, visitorInfo));\n      return { a, id: id2 };\n    }\n    if (typeof value === "object") {\n      const o = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (const name of Object.keys(value)) {\n        let item;\n        try {\n          item = value[name];\n        } catch (e) {\n          continue;\n        }\n        if (name === "toJSON" && typeof item === "function")\n          o.push({ k: name, v: { o: [], id: 0 } });\n        else\n          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });\n      }\n      let jsonWrapper;\n      try {\n        if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")\n          jsonWrapper = { value: value.toJSON() };\n      } catch (e) {\n      }\n      if (jsonWrapper)\n        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);\n      return { o, id: id2 };\n    }\n  }\n  return { parseEvaluationResultValue: parseEvaluationResultValue2, serializeAsCallArgument: serializeAsCallArgument2 };\n}\nvar result = source();\nvar parseEvaluationResultValue = result.parseEvaluationResultValue;\nvar serializeAsCallArgument = result.serializeAsCallArgument;\n\n// packages/playwright-core/src/server/injected/utilityScript.ts\nvar UtilityScript = class {\n  constructor(isUnderTest) {\n    this.serializeAsCallArgument = serializeAsCallArgument;\n    this.parseEvaluationResultValue = parseEvaluationResultValue;\n    if (isUnderTest)\n      this._setBuiltins();\n  }\n  evaluate(isFunction, returnByValue, expression, argCount, ...argsAndHandles) {\n    const args = argsAndHandles.slice(0, argCount);\n    const handles = argsAndHandles.slice(argCount);\n    const parameters = [];\n    for (let i = 0; i < args.length; i++)\n      parameters[i] = this.parseEvaluationResultValue(args[i], handles);\n    let result2 = globalThis.eval(expression);\n    if (isFunction === true) {\n      result2 = result2(...parameters);\n    } else if (isFunction === false) {\n      result2 = result2;\n    } else {\n      if (typeof result2 === "function")\n        result2 = result2(...parameters);\n    }\n    return returnByValue ? this._promiseAwareJsonValueNoThrow(result2) : result2;\n  }\n  jsonValue(returnByValue, value) {\n    if (Object.is(value, void 0))\n      return void 0;\n    return serializeAsCallArgument(value, (value2) => ({ fallThrough: value2 }));\n  }\n  _promiseAwareJsonValueNoThrow(value) {\n    const safeJson = (value2) => {\n      try {\n        return this.jsonValue(true, value2);\n      } catch (e) {\n        return void 0;\n      }\n    };\n    if (value && typeof value === "object" && typeof value.then === "function") {\n      return (async () => {\n        const promiseValue = await value;\n        return safeJson(promiseValue);\n      })();\n    }\n    return safeJson(value);\n  }\n  _setBuiltins() {\n    var _a, _b;\n    const window = globalThis;\n    window.builtinSetTimeout = (callback, timeout) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.setTimeout(callback, timeout);\n      return setTimeout(callback, timeout);\n    };\n    window.builtinClearTimeout = (id) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.clearTimeout(id);\n      return clearTimeout(id);\n    };\n    window.builtinSetInterval = (callback, timeout) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.setInterval(callback, timeout);\n      return setInterval(callback, timeout);\n    };\n    window.builtinClearInterval = (id) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.clearInterval(id);\n      return clearInterval(id);\n    };\n    window.builtinRequestAnimationFrame = (callback) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.requestAnimationFrame(callback);\n      return requestAnimationFrame(callback);\n    };\n    window.builtinCancelAnimationFrame = (id) => {\n      var _a2;\n      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)\n        return window.__pwClock.builtin.cancelAnimationFrame(id);\n      return cancelAnimationFrame(id);\n    };\n    window.builtinDate = ((_a = window.__pwClock) == null ? void 0 : _a.builtin.Date) || Date;\n    window.builtinPerformance = ((_b = window.__pwClock) == null ? void 0 : _b.builtin.performance) || performance;\n  }\n};\n';
var utilityScriptSerializers = {};
Object.defineProperty(utilityScriptSerializers, "__esModule", {
  value: true
});
utilityScriptSerializers.serializeAsCallArgument = utilityScriptSerializers.parseEvaluationResultValue = void 0;
utilityScriptSerializers.source = source;
function source() {
  function isRegExp2(obj) {
    try {
      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
    } catch (error) {
      return false;
    }
  }
  function isDate2(obj) {
    try {
      return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
    } catch (error) {
      return false;
    }
  }
  function isURL2(obj) {
    try {
      return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
    } catch (error) {
      return false;
    }
  }
  function isError2(obj) {
    try {
      var _Object$getPrototypeO;
      return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.name) === "Error";
    } catch (error) {
      return false;
    }
  }
  function parseEvaluationResultValue(value, handles = [], refs = /* @__PURE__ */ new Map()) {
    if (Object.is(value, void 0)) return void 0;
    if (typeof value === "object" && value) {
      if ("ref" in value) return refs.get(value.ref);
      if ("v" in value) {
        if (value.v === "undefined") return void 0;
        if (value.v === "null") return null;
        if (value.v === "NaN") return NaN;
        if (value.v === "Infinity") return Infinity;
        if (value.v === "-Infinity") return -Infinity;
        if (value.v === "-0") return -0;
        return void 0;
      }
      if ("d" in value) return new Date(value.d);
      if ("u" in value) return new URL(value.u);
      if ("bi" in value) return BigInt(value.bi);
      if ("e" in value) {
        const error = new Error(value.e.m);
        error.name = value.e.n;
        error.stack = value.e.s;
        return error;
      }
      if ("r" in value) return new RegExp(value.r.p, value.r.f);
      if ("a" in value) {
        const result2 = [];
        refs.set(value.id, result2);
        for (const a of value.a) result2.push(parseEvaluationResultValue(a, handles, refs));
        return result2;
      }
      if ("o" in value) {
        const result2 = {};
        refs.set(value.id, result2);
        for (const {
          k,
          v
        } of value.o) result2[k] = parseEvaluationResultValue(v, handles, refs);
        return result2;
      }
      if ("h" in value) return handles[value.h];
    }
    return value;
  }
  function serializeAsCallArgument(value, handleSerializer) {
    return serialize(value, handleSerializer, {
      visited: /* @__PURE__ */ new Map(),
      lastId: 0
    });
  }
  function serialize(value, handleSerializer, visitorInfo) {
    if (value && typeof value === "object") {
      if (typeof globalThis.Window === "function" && value instanceof globalThis.Window) return "ref: <Window>";
      if (typeof globalThis.Document === "function" && value instanceof globalThis.Document) return "ref: <Document>";
      if (typeof globalThis.Node === "function" && value instanceof globalThis.Node) return "ref: <Node>";
    }
    return innerSerialize(value, handleSerializer, visitorInfo);
  }
  function innerSerialize(value, handleSerializer, visitorInfo) {
    const result2 = handleSerializer(value);
    if ("fallThrough" in result2) value = result2.fallThrough;
    else return result2;
    if (typeof value === "symbol") return {
      v: "undefined"
    };
    if (Object.is(value, void 0)) return {
      v: "undefined"
    };
    if (Object.is(value, null)) return {
      v: "null"
    };
    if (Object.is(value, NaN)) return {
      v: "NaN"
    };
    if (Object.is(value, Infinity)) return {
      v: "Infinity"
    };
    if (Object.is(value, -Infinity)) return {
      v: "-Infinity"
    };
    if (Object.is(value, -0)) return {
      v: "-0"
    };
    if (typeof value === "boolean") return value;
    if (typeof value === "number") return value;
    if (typeof value === "string") return value;
    if (typeof value === "bigint") return {
      bi: value.toString()
    };
    if (isError2(value)) {
      var _value$stack;
      let stack;
      if ((_value$stack = value.stack) !== null && _value$stack !== void 0 && _value$stack.startsWith(value.name + ": " + value.message)) {
        stack = value.stack;
      } else {
        stack = `${value.name}: ${value.message}
${value.stack}`;
      }
      return {
        e: {
          n: value.name,
          m: value.message,
          s: stack
        }
      };
    }
    if (isDate2(value)) return {
      d: value.toJSON()
    };
    if (isURL2(value)) return {
      u: value.toJSON()
    };
    if (isRegExp2(value)) return {
      r: {
        p: value.source,
        f: value.flags
      }
    };
    const id = visitorInfo.visited.get(value);
    if (id) return {
      ref: id
    };
    if (Array.isArray(value)) {
      const a = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (let i = 0; i < value.length; ++i) a.push(serialize(value[i], handleSerializer, visitorInfo));
      return {
        a,
        id: id2
      };
    }
    if (typeof value === "object") {
      const o = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (const name2 of Object.keys(value)) {
        let item;
        try {
          item = value[name2];
        } catch (e) {
          continue;
        }
        if (name2 === "toJSON" && typeof item === "function") o.push({
          k: name2,
          v: {
            o: [],
            id: 0
          }
        });
        else o.push({
          k: name2,
          v: serialize(item, handleSerializer, visitorInfo)
        });
      }
      let jsonWrapper;
      try {
        if (o.length === 0 && value.toJSON && typeof value.toJSON === "function") jsonWrapper = {
          value: value.toJSON()
        };
      } catch (e) {
      }
      if (jsonWrapper) return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
      return {
        o,
        id: id2
      };
    }
  }
  return {
    parseEvaluationResultValue,
    serializeAsCallArgument
  };
}
const result = source();
utilityScriptSerializers.parseEvaluationResultValue = result.parseEvaluationResultValue;
utilityScriptSerializers.serializeAsCallArgument = result.serializeAsCallArgument;
Object.defineProperty(javascript$1, "__esModule", {
  value: true
});
javascript$1.JavaScriptErrorInEvaluate = javascript$1.JSHandle = javascript$1.ExecutionContext = void 0;
javascript$1.evaluate = evaluate;
javascript$1.evaluateExpression = evaluateExpression;
javascript$1.isJavaScriptErrorInEvaluate = isJavaScriptErrorInEvaluate;
javascript$1.normalizeEvaluationExpression = normalizeEvaluationExpression;
javascript$1.parseUnserializableValue = parseUnserializableValue;
javascript$1.sparseArrayToString = sparseArrayToString;
var utilityScriptSource = _interopRequireWildcard$f(utilityScriptSource$1);
var _utilityScriptSerializers$4 = utilityScriptSerializers;
var _instrumentation$7 = instrumentation;
var _manualPromise$4 = requireManualPromise();
var _utils$O = requireUtils();
function _getRequireWildcardCache$f(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$f = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$f(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$f(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class ExecutionContext extends _instrumentation$7.SdkObject {
  constructor(parent, delegate, worldNameForTest) {
    super(parent, "execution-context");
    this._delegate = void 0;
    this._utilityScriptPromise = void 0;
    this._contextDestroyedScope = new _manualPromise$4.LongStandingScope();
    this.worldNameForTest = void 0;
    this.worldNameForTest = worldNameForTest;
    this._delegate = delegate;
  }
  contextDestroyed(reason) {
    this._contextDestroyedScope.close(new Error(reason));
  }
  async _raceAgainstContextDestroyed(promise) {
    return this._contextDestroyedScope.race(promise);
  }
  rawEvaluateJSON(expression) {
    return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateJSON(expression));
  }
  rawEvaluateHandle(expression) {
    return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(expression));
  }
  rawCallFunctionNoReply(func, ...args) {
    this._delegate.rawCallFunctionNoReply(func, ...args);
  }
  evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
    return this._raceAgainstContextDestroyed(this._delegate.evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds));
  }
  getProperties(context, objectId) {
    return this._raceAgainstContextDestroyed(this._delegate.getProperties(context, objectId));
  }
  createHandle(remoteObject) {
    return this._delegate.createHandle(this, remoteObject);
  }
  releaseHandle(objectId) {
    return this._delegate.releaseHandle(objectId);
  }
  adoptIfNeeded(handle) {
    return null;
  }
  utilityScript() {
    if (!this._utilityScriptPromise) {
      const source2 = `
      (() => {
        const module = {};
        ${utilityScriptSource.source}
        return new (module.exports.UtilityScript())(${(0, _utils$O.isUnderTest)()});
      })();`;
      this._utilityScriptPromise = this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(source2).then((objectId) => new JSHandle$1(this, "object", "UtilityScript", objectId)));
    }
    return this._utilityScriptPromise;
  }
  async doSlowMo() {
  }
}
javascript$1.ExecutionContext = ExecutionContext;
let JSHandle$1 = class JSHandle extends _instrumentation$7.SdkObject {
  constructor(context, type, preview, objectId, value) {
    super(context, "handle");
    this.__jshandle = true;
    this._context = void 0;
    this._disposed = false;
    this._objectId = void 0;
    this._value = void 0;
    this._objectType = void 0;
    this._preview = void 0;
    this._previewCallback = void 0;
    this._context = context;
    this._objectId = objectId;
    this._value = value;
    this._objectType = type;
    this._preview = this._objectId ? preview || `JSHandle@${this._objectType}` : String(value);
    if (this._objectId && globalThis.leakedJSHandles) globalThis.leakedJSHandles.set(this, new Error("Leaked JSHandle"));
  }
  callFunctionNoReply(func, arg) {
    this._context.rawCallFunctionNoReply(func, this, arg);
  }
  async evaluate(pageFunction, arg) {
    return evaluate(this._context, true, pageFunction, this, arg);
  }
  async evaluateHandle(pageFunction, arg) {
    return evaluate(this._context, false, pageFunction, this, arg);
  }
  async evaluateExpression(expression, options, arg) {
    const value = await evaluateExpression(this._context, expression, {
      ...options,
      returnByValue: true
    }, this, arg);
    await this._context.doSlowMo();
    return value;
  }
  async evaluateExpressionHandle(expression, options, arg) {
    const value = await evaluateExpression(this._context, expression, {
      ...options,
      returnByValue: false
    }, this, arg);
    await this._context.doSlowMo();
    return value;
  }
  async getProperty(propertyName) {
    const objectHandle = await this.evaluateHandle((object, propertyName2) => {
      const result3 = {
        __proto__: null
      };
      result3[propertyName2] = object[propertyName2];
      return result3;
    }, propertyName);
    const properties = await objectHandle.getProperties();
    const result2 = properties.get(propertyName);
    objectHandle.dispose();
    return result2;
  }
  async getProperties() {
    if (!this._objectId) return /* @__PURE__ */ new Map();
    return this._context.getProperties(this._context, this._objectId);
  }
  rawValue() {
    return this._value;
  }
  async jsonValue() {
    if (!this._objectId) return this._value;
    const utilityScript = await this._context.utilityScript();
    const script = `(utilityScript, ...args) => utilityScript.jsonValue(...args)`;
    return this._context.evaluateWithArguments(script, true, utilityScript, [true], [this._objectId]);
  }
  asElement() {
    return null;
  }
  dispose() {
    if (this._disposed) return;
    this._disposed = true;
    if (this._objectId) {
      this._context.releaseHandle(this._objectId).catch((e) => {
      });
      if (globalThis.leakedJSHandles) globalThis.leakedJSHandles.delete(this);
    }
  }
  toString() {
    return this._preview;
  }
  _setPreviewCallback(callback) {
    this._previewCallback = callback;
  }
  preview() {
    return this._preview;
  }
  worldNameForTest() {
    return this._context.worldNameForTest;
  }
  _setPreview(preview) {
    this._preview = preview;
    if (this._previewCallback) this._previewCallback(preview);
  }
};
javascript$1.JSHandle = JSHandle$1;
async function evaluate(context, returnByValue, pageFunction, ...args) {
  return evaluateExpression(context, String(pageFunction), {
    returnByValue,
    isFunction: typeof pageFunction === "function"
  }, ...args);
}
async function evaluateExpression(context, expression, options, ...args) {
  const utilityScript = await context.utilityScript();
  expression = normalizeEvaluationExpression(expression, options.isFunction);
  const handles = [];
  const toDispose = [];
  const pushHandle = (handle) => {
    handles.push(handle);
    return handles.length - 1;
  };
  args = args.map((arg) => (0, _utilityScriptSerializers$4.serializeAsCallArgument)(arg, (handle) => {
    if (handle instanceof JSHandle$1) {
      if (!handle._objectId) return {
        fallThrough: handle._value
      };
      if (handle._disposed) throw new JavaScriptErrorInEvaluate("JSHandle is disposed!");
      const adopted = context.adoptIfNeeded(handle);
      if (adopted === null) return {
        h: pushHandle(Promise.resolve(handle))
      };
      toDispose.push(adopted);
      return {
        h: pushHandle(adopted)
      };
    }
    return {
      fallThrough: handle
    };
  }));
  const utilityScriptObjectIds = [];
  for (const handle of await Promise.all(handles)) {
    if (handle._context !== context) throw new JavaScriptErrorInEvaluate("JSHandles can be evaluated only in the context they were created!");
    utilityScriptObjectIds.push(handle._objectId);
  }
  const utilityScriptValues = [options.isFunction, options.returnByValue, expression, args.length, ...args];
  const script = `(utilityScript, ...args) => utilityScript.evaluate(...args)`;
  try {
    return await context.evaluateWithArguments(script, options.returnByValue || false, utilityScript, utilityScriptValues, utilityScriptObjectIds);
  } finally {
    toDispose.map((handlePromise) => handlePromise.then((handle) => handle.dispose()));
  }
}
function parseUnserializableValue(unserializableValue) {
  if (unserializableValue === "NaN") return NaN;
  if (unserializableValue === "Infinity") return Infinity;
  if (unserializableValue === "-Infinity") return -Infinity;
  if (unserializableValue === "-0") return -0;
}
function normalizeEvaluationExpression(expression, isFunction) {
  expression = expression.trim();
  if (isFunction) {
    try {
      new Function("(" + expression + ")");
    } catch (e1) {
      if (expression.startsWith("async ")) expression = "async function " + expression.substring("async ".length);
      else expression = "function " + expression;
      try {
        new Function("(" + expression + ")");
      } catch (e2) {
        throw new Error("Passed function is not well-serializable!");
      }
    }
  }
  if (/^(async)?\s*function(\s|\()/.test(expression)) expression = "(" + expression + ")";
  return expression;
}
class JavaScriptErrorInEvaluate extends Error {
}
javascript$1.JavaScriptErrorInEvaluate = JavaScriptErrorInEvaluate;
function isJavaScriptErrorInEvaluate(error) {
  return error instanceof JavaScriptErrorInEvaluate;
}
function sparseArrayToString(entries) {
  const arrayEntries = [];
  for (const {
    name: name2,
    value
  } of entries) {
    const index = +name2;
    if (isNaN(index) || index < 0) continue;
    arrayEntries.push({
      index,
      value
    });
  }
  arrayEntries.sort((a, b) => a.index - b.index);
  let lastIndex = -1;
  const tokens = [];
  for (const {
    index,
    value
  } of arrayEntries) {
    const emptyItems = index - lastIndex - 1;
    if (emptyItems === 1) tokens.push(`empty`);
    else if (emptyItems > 1) tokens.push(`empty x ${emptyItems}`);
    tokens.push(String(value));
    lastIndex = index;
  }
  return "[" + tokens.join(", ") + "]";
}
var progress = {};
Object.defineProperty(progress, "__esModule", {
  value: true
});
progress.ProgressController = void 0;
var _errors$6 = errors$2;
var _utils$N = requireUtils();
var _manualPromise$3 = requireManualPromise();
class ProgressController {
  constructor(metadata, sdkObject) {
    this._forceAbortPromise = new _manualPromise$3.ManualPromise();
    this._cleanups = [];
    this._logName = "api";
    this._state = "before";
    this._deadline = 0;
    this._timeout = 0;
    this.metadata = void 0;
    this.instrumentation = void 0;
    this.sdkObject = void 0;
    this.metadata = metadata;
    this.sdkObject = sdkObject;
    this.instrumentation = sdkObject.instrumentation;
    this._forceAbortPromise.catch((e) => null);
  }
  setLogName(logName) {
    this._logName = logName;
  }
  abort(error) {
    this._forceAbortPromise.reject(error);
  }
  async run(task2, timeout) {
    var _this$sdkObject$attri;
    if (timeout) {
      this._timeout = timeout;
      this._deadline = timeout ? (0, _utils$N.monotonicTime)() + timeout : 0;
    }
    (0, _utils$N.assert)(this._state === "before");
    this._state = "running";
    (_this$sdkObject$attri = this.sdkObject.attribution.context) === null || _this$sdkObject$attri === void 0 || _this$sdkObject$attri._activeProgressControllers.add(this);
    const progress2 = {
      log: (message) => {
        if (this._state === "running") this.metadata.log.push(message);
        this.instrumentation.onCallLog(this.sdkObject, this.metadata, this._logName, message);
      },
      timeUntilDeadline: () => this._deadline ? this._deadline - (0, _utils$N.monotonicTime)() : 2147483647,
      // 2^31-1 safe setTimeout in Node.
      isRunning: () => this._state === "running",
      cleanupWhenAborted: (cleanup) => {
        if (this._state === "running") this._cleanups.push(cleanup);
        else runCleanup(cleanup);
      },
      throwIfAborted: () => {
        if (this._state === "aborted") throw new AbortedError();
      },
      beforeInputAction: async (element) => {
        await this.instrumentation.onBeforeInputAction(this.sdkObject, this.metadata, element);
      },
      metadata: this.metadata
    };
    const timeoutError = new _errors$6.TimeoutError(`Timeout ${this._timeout}ms exceeded.`);
    const timer = setTimeout(() => this._forceAbortPromise.reject(timeoutError), progress2.timeUntilDeadline());
    try {
      const promise = task2(progress2);
      const result2 = await Promise.race([promise, this._forceAbortPromise]);
      this._state = "finished";
      return result2;
    } catch (e) {
      this._state = "aborted";
      await Promise.all(this._cleanups.splice(0).map(runCleanup));
      throw e;
    } finally {
      var _this$sdkObject$attri2;
      (_this$sdkObject$attri2 = this.sdkObject.attribution.context) === null || _this$sdkObject$attri2 === void 0 || _this$sdkObject$attri2._activeProgressControllers.delete(this);
      clearTimeout(timer);
    }
  }
}
progress.ProgressController = ProgressController;
async function runCleanup(cleanup) {
  try {
    await cleanup();
  } catch (e) {
  }
}
class AbortedError extends Error {
}
var fileUploadUtils = {};
Object.defineProperty(fileUploadUtils, "__esModule", {
  value: true
});
fileUploadUtils.prepareFilesForUpload = prepareFilesForUpload;
var _fs$a = _interopRequireDefault$e(require$$0$2);
var _path$5 = _interopRequireDefault$e(require$$1);
var _utils$M = requireUtils();
var _utilsBundle$6 = utilsBundle;
function _interopRequireDefault$e(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
async function filesExceedUploadLimit(files) {
  const sizes = await Promise.all(files.map(async (file) => (await _fs$a.default.promises.stat(file)).size));
  return sizes.reduce((total, size) => total + size, 0) >= _utils$M.fileUploadSizeLimit;
}
async function prepareFilesForUpload(frame2, params) {
  var _fileBuffers;
  const {
    payloads,
    streams,
    directoryStream
  } = params;
  let {
    localPaths,
    localDirectory
  } = params;
  if ([payloads, localPaths, localDirectory, streams, directoryStream].filter(Boolean).length !== 1) throw new Error("Exactly one of payloads, localPaths and streams must be provided");
  if (streams) localPaths = streams.map((c) => c.path());
  if (directoryStream) localDirectory = directoryStream.path();
  if (localPaths) {
    for (const p of localPaths) (0, _utils$M.assert)(_path$5.default.isAbsolute(p) && _path$5.default.resolve(p) === p, "Paths provided to localPaths must be absolute and fully resolved.");
  }
  let fileBuffers = payloads;
  if (!frame2._page._browserContext._browser._isCollocatedWithServer) {
    if (localPaths) {
      if (await filesExceedUploadLimit(localPaths)) throw new Error("Cannot transfer files larger than 50Mb to a browser not co-located with the server");
      fileBuffers = await Promise.all(localPaths.map(async (item) => {
        return {
          name: _path$5.default.basename(item),
          buffer: await _fs$a.default.promises.readFile(item),
          lastModifiedMs: (await _fs$a.default.promises.stat(item)).mtimeMs
        };
      }));
      localPaths = void 0;
    }
  }
  const filePayloads = (_fileBuffers = fileBuffers) === null || _fileBuffers === void 0 ? void 0 : _fileBuffers.map((payload) => ({
    name: payload.name,
    mimeType: payload.mimeType || _utilsBundle$6.mime.getType(payload.name) || "application/octet-stream",
    buffer: payload.buffer.toString("base64"),
    lastModifiedMs: payload.lastModifiedMs
  }));
  return {
    localPaths,
    localDirectory,
    filePayloads
  };
}
Object.defineProperty(dom, "__esModule", {
  value: true
});
dom.NonRecoverableDOMError = dom.FrameExecutionContext = dom.ElementHandle = void 0;
dom.assertDone = assertDone;
dom.isNonRecoverableDOMError = isNonRecoverableDOMError;
dom.kUnableToAdoptErrorMessage = void 0;
dom.throwRetargetableDOMError = throwRetargetableDOMError;
var _fs$9 = _interopRequireDefault$d(require$$0$2);
var injectedScriptSource = _interopRequireWildcard$e(injectedScriptSource$1);
var _protocolError$7 = protocolError;
var js$4 = _interopRequireWildcard$e(javascript$1);
var _progress$2 = progress;
var _utils$L = requireUtils();
var _fileUploadUtils = fileUploadUtils;
function _getRequireWildcardCache$e(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$e = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$e(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$e(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function _interopRequireDefault$d(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
class NonRecoverableDOMError extends Error {
}
dom.NonRecoverableDOMError = NonRecoverableDOMError;
function isNonRecoverableDOMError(error) {
  return error instanceof NonRecoverableDOMError;
}
class FrameExecutionContext extends js$4.ExecutionContext {
  constructor(delegate, frame2, world) {
    super(frame2, delegate, world || "content-script");
    this.frame = void 0;
    this._injectedScriptPromise = void 0;
    this.world = void 0;
    this.frame = frame2;
    this.world = world;
  }
  adoptIfNeeded(handle) {
    if (handle instanceof ElementHandle && handle._context !== this) return this.frame._page._delegate.adoptElementHandle(handle, this);
    return null;
  }
  async evaluate(pageFunction, arg) {
    return js$4.evaluate(this, true, pageFunction, arg);
  }
  async evaluateHandle(pageFunction, arg) {
    return js$4.evaluate(this, false, pageFunction, arg);
  }
  async evaluateExpression(expression, options, arg) {
    return js$4.evaluateExpression(this, expression, {
      ...options,
      returnByValue: true
    }, arg);
  }
  async evaluateExpressionHandle(expression, options, arg) {
    return js$4.evaluateExpression(this, expression, {
      ...options,
      returnByValue: false
    }, arg);
  }
  createHandle(remoteObject) {
    if (this.frame._page._delegate.isElementHandle(remoteObject)) return new ElementHandle(this, remoteObject.objectId);
    return super.createHandle(remoteObject);
  }
  injectedScript() {
    if (!this._injectedScriptPromise) {
      const custom = [];
      const selectorsRegistry = this.frame._page.context().selectors();
      for (const [name2, {
        source: source3
      }] of selectorsRegistry._engines) custom.push(`{ name: '${name2}', engine: (${source3}) }`);
      const sdkLanguage = this.frame.attribution.playwright.options.sdkLanguage;
      const source2 = `
        (() => {
        const module = {};
        ${injectedScriptSource.source}
        return new (module.exports.InjectedScript())(
          globalThis,
          ${(0, _utils$L.isUnderTest)()},
          "${sdkLanguage}",
          ${JSON.stringify(selectorsRegistry.testIdAttributeName())},
          ${this.frame._page._delegate.rafCountForStablePosition()},
          "${this.frame._page._browserContext._browser.options.name}",
          [${custom.join(",\n")}]
        );
        })();
      `;
      this._injectedScriptPromise = this.rawEvaluateHandle(source2).then((objectId) => new js$4.JSHandle(this, "object", "InjectedScript", objectId));
    }
    return this._injectedScriptPromise;
  }
}
dom.FrameExecutionContext = FrameExecutionContext;
class ElementHandle extends js$4.JSHandle {
  constructor(context, objectId) {
    super(context, "node", void 0, objectId);
    this.__elementhandle = true;
    this._page = void 0;
    this._frame = void 0;
    this._page = context.frame._page;
    this._frame = context.frame;
    this._initializePreview().catch((e) => {
    });
  }
  async _initializePreview() {
    const utility = await this._context.injectedScript();
    this._setPreview(await utility.evaluate((injected, e) => "JSHandle@" + injected.previewNode(e), this));
  }
  asElement() {
    return this;
  }
  async evaluateInUtility(pageFunction, arg) {
    try {
      const utility = await this._frame._utilityContext();
      return await utility.evaluate(pageFunction, [await utility.injectedScript(), this, arg]);
    } catch (e) {
      if (js$4.isJavaScriptErrorInEvaluate(e) || (0, _protocolError$7.isSessionClosedError)(e)) throw e;
      return "error:notconnected";
    }
  }
  async evaluateHandleInUtility(pageFunction, arg) {
    try {
      const utility = await this._frame._utilityContext();
      return await utility.evaluateHandle(pageFunction, [await utility.injectedScript(), this, arg]);
    } catch (e) {
      if (js$4.isJavaScriptErrorInEvaluate(e) || (0, _protocolError$7.isSessionClosedError)(e)) throw e;
      return "error:notconnected";
    }
  }
  async ownerFrame() {
    const frameId = await this._page._delegate.getOwnerFrame(this);
    if (!frameId) return null;
    const frame2 = this._page._frameManager.frame(frameId);
    if (frame2) return frame2;
    for (const page2 of this._page._browserContext.pages()) {
      const frame3 = page2._frameManager.frame(frameId);
      if (frame3) return frame3;
    }
    return null;
  }
  async isIframeElement() {
    return this.evaluateInUtility(([injected, node]) => node && (node.nodeName === "IFRAME" || node.nodeName === "FRAME"), {});
  }
  async contentFrame() {
    const isFrameElement = throwRetargetableDOMError(await this.isIframeElement());
    if (!isFrameElement) return null;
    return this._page._delegate.getContentFrame(this);
  }
  async getAttribute(metadata, name2) {
    return this._frame.getAttribute(metadata, ":scope", name2, {}, this);
  }
  async inputValue(metadata) {
    return this._frame.inputValue(metadata, ":scope", {}, this);
  }
  async textContent(metadata) {
    return this._frame.textContent(metadata, ":scope", {}, this);
  }
  async innerText(metadata) {
    return this._frame.innerText(metadata, ":scope", {}, this);
  }
  async innerHTML(metadata) {
    return this._frame.innerHTML(metadata, ":scope", {}, this);
  }
  async dispatchEvent(metadata, type, eventInit = {}) {
    return this._frame.dispatchEvent(metadata, ":scope", type, eventInit, {}, this);
  }
  async _scrollRectIntoViewIfNeeded(rect) {
    return await this._page._delegate.scrollRectIntoViewIfNeeded(this, rect);
  }
  async _waitAndScrollIntoViewIfNeeded(progress2, waitForVisible) {
    const result2 = await this._retryAction(progress2, "scroll into view", async () => {
      progress2.log(`  waiting for element to be stable`);
      const waitResult = await this.evaluateInUtility(async ([injected, node, {
        waitForVisible: waitForVisible2
      }]) => {
        return await injected.checkElementStates(node, waitForVisible2 ? ["visible", "stable"] : ["stable"]);
      }, {
        waitForVisible
      });
      if (waitResult) return waitResult;
      return await this._scrollRectIntoViewIfNeeded();
    }, {});
    assertDone(throwRetargetableDOMError(result2));
  }
  async scrollIntoViewIfNeeded(metadata, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run((progress2) => this._waitAndScrollIntoViewIfNeeded(
      progress2,
      false
      /* waitForVisible */
    ), this._page._timeoutSettings.timeout(options));
  }
  async _clickablePoint() {
    const intersectQuadWithViewport = (quad) => {
      return quad.map((point) => ({
        x: Math.min(Math.max(point.x, 0), metrics.width),
        y: Math.min(Math.max(point.y, 0), metrics.height)
      }));
    };
    const computeQuadArea = (quad) => {
      let area = 0;
      for (let i = 0; i < quad.length; ++i) {
        const p1 = quad[i];
        const p2 = quad[(i + 1) % quad.length];
        area += (p1.x * p2.y - p2.x * p1.y) / 2;
      }
      return Math.abs(area);
    };
    const [quads, metrics] = await Promise.all([this._page._delegate.getContentQuads(this), this._page.mainFrame()._utilityContext().then((utility) => utility.evaluate(() => ({
      width: innerWidth,
      height: innerHeight
    })))]);
    if (quads === "error:notconnected") return quads;
    if (!quads || !quads.length) return "error:notvisible";
    const filtered = quads.map((quad) => intersectQuadWithViewport(quad)).filter((quad) => computeQuadArea(quad) > 0.99);
    if (!filtered.length) return "error:notinviewport";
    const result2 = {
      x: 0,
      y: 0
    };
    for (const point of filtered[0]) {
      result2.x += point.x / 4;
      result2.y += point.y / 4;
    }
    compensateHalfIntegerRoundingError(result2);
    return result2;
  }
  async _offsetPoint(offset) {
    const [box, border] = await Promise.all([this.boundingBox(), this.evaluateInUtility(([injected, node]) => injected.getElementBorderWidth(node), {}).catch((e) => {
    })]);
    if (!box || !border) return "error:notvisible";
    if (border === "error:notconnected") return border;
    return {
      x: box.x + border.left + offset.x,
      y: box.y + border.top + offset.y
    };
  }
  async _retryAction(progress2, actionName, action, options) {
    let retry = 0;
    const waitTime = [0, 20, 100, 100, 500];
    while (progress2.isRunning()) {
      if (retry) {
        progress2.log(`retrying ${actionName} action${options.trial ? " (trial run)" : ""}, attempt #${retry}`);
        const timeout = waitTime[Math.min(retry - 1, waitTime.length - 1)];
        if (timeout) {
          progress2.log(`  waiting ${timeout}ms`);
          const result3 = await this.evaluateInUtility(([injected, node, timeout2]) => new Promise((f) => setTimeout(f, timeout2)), timeout);
          if (result3 === "error:notconnected") return result3;
        }
      } else {
        progress2.log(`attempting ${actionName} action${options.trial ? " (trial run)" : ""}`);
      }
      if (!options.skipLocatorHandlersCheckpoint && !options.force) await this._frame._page.performLocatorHandlersCheckpoint(progress2);
      const result2 = await action(retry);
      ++retry;
      if (result2 === "error:notvisible") {
        if (options.force) throw new NonRecoverableDOMError("Element is not visible");
        progress2.log("  element is not visible");
        continue;
      }
      if (result2 === "error:notinviewport") {
        if (options.force) throw new NonRecoverableDOMError("Element is outside of the viewport");
        progress2.log("  element is outside of the viewport");
        continue;
      }
      if (result2 === "error:optionsnotfound") {
        progress2.log("  did not find some options");
        continue;
      }
      if (typeof result2 === "object" && "hitTargetDescription" in result2) {
        progress2.log(`  ${result2.hitTargetDescription} intercepts pointer events`);
        continue;
      }
      if (typeof result2 === "object" && "missingState" in result2) {
        progress2.log(`  element is not ${result2.missingState}`);
        continue;
      }
      return result2;
    }
    return "done";
  }
  async _retryPointerAction(progress2, actionName, waitForEnabled, action, options) {
    const skipLocatorHandlersCheckpoint = actionName === "move and up";
    return await this._retryAction(progress2, actionName, async (retry) => {
      const scrollOptions = [void 0, {
        block: "end",
        inline: "end"
      }, {
        block: "center",
        inline: "center"
      }, {
        block: "start",
        inline: "start"
      }];
      const forceScrollOptions = scrollOptions[retry % scrollOptions.length];
      return await this._performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options);
    }, {
      ...options,
      skipLocatorHandlersCheckpoint
    });
  }
  async _performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options) {
    const {
      force = false,
      position
    } = options;
    const doScrollIntoView = async () => {
      if (forceScrollOptions) {
        return await this.evaluateInUtility(([injected, node, options2]) => {
          if (node.nodeType === 1) node.scrollIntoView(options2);
          return "done";
        }, forceScrollOptions);
      }
      return await this._scrollRectIntoViewIfNeeded(position ? {
        x: position.x,
        y: position.y,
        width: 0,
        height: 0
      } : void 0);
    };
    if (this._frame.parentFrame()) {
      progress2.throwIfAborted();
      await doScrollIntoView().catch(() => {
      });
    }
    if (options.__testHookBeforeStable) await options.__testHookBeforeStable();
    if (!force) {
      const elementStates = waitForEnabled ? ["visible", "enabled", "stable"] : ["visible", "stable"];
      progress2.log(`  waiting for element to be ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
      const result2 = await this.evaluateInUtility(async ([injected, node, {
        elementStates: elementStates2
      }]) => {
        return await injected.checkElementStates(node, elementStates2);
      }, {
        elementStates
      });
      if (result2) return result2;
      progress2.log(`  element is ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
    }
    if (options.__testHookAfterStable) await options.__testHookAfterStable();
    progress2.log("  scrolling into view if needed");
    progress2.throwIfAborted();
    const scrolled = await doScrollIntoView();
    if (scrolled !== "done") return scrolled;
    progress2.log("  done scrolling");
    const maybePoint = position ? await this._offsetPoint(position) : await this._clickablePoint();
    if (typeof maybePoint === "string") return maybePoint;
    const point = roundPoint(maybePoint);
    progress2.metadata.point = point;
    await progress2.beforeInputAction(this);
    let hitTargetInterceptionHandle;
    if (force) {
      progress2.log(`  forcing action`);
    } else {
      if (options.__testHookBeforeHitTarget) await options.__testHookBeforeHitTarget();
      const frameCheckResult = await this._checkFrameIsHitTarget(point);
      if (frameCheckResult === "error:notconnected" || "hitTargetDescription" in frameCheckResult) return frameCheckResult;
      const hitPoint = frameCheckResult.framePoint;
      const actionType = actionName === "move and up" ? "drag" : actionName === "hover" || actionName === "tap" ? actionName : "mouse";
      const handle = await this.evaluateHandleInUtility(([injected, node, {
        actionType: actionType2,
        hitPoint: hitPoint2,
        trial
      }]) => injected.setupHitTargetInterceptor(node, actionType2, hitPoint2, trial), {
        actionType,
        hitPoint,
        trial: !!options.trial
      });
      if (handle === "error:notconnected") return handle;
      if (!handle._objectId) {
        const error = handle.rawValue();
        if (error === "error:notconnected") return error;
        return {
          hitTargetDescription: error
        };
      }
      hitTargetInterceptionHandle = handle;
      progress2.cleanupWhenAborted(() => {
        hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => {
        });
        hitTargetInterceptionHandle.dispose();
      });
    }
    const actionResult = await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.waitAfter === true, async () => {
      if (options.__testHookBeforePointerAction) await options.__testHookBeforePointerAction();
      progress2.throwIfAborted();
      let restoreModifiers;
      if (options && options.modifiers) restoreModifiers = await this._page.keyboard.ensureModifiers(options.modifiers);
      progress2.log(`  performing ${actionName} action`);
      await action(point);
      if (restoreModifiers) await this._page.keyboard.ensureModifiers(restoreModifiers);
      if (hitTargetInterceptionHandle) {
        const stopHitTargetInterception = this._frame.raceAgainstEvaluationStallingEvents(() => {
          return hitTargetInterceptionHandle.evaluate((h) => h.stop());
        }).catch((e) => "done").finally(() => {
          var _hitTargetInterceptio;
          (_hitTargetInterceptio = hitTargetInterceptionHandle) === null || _hitTargetInterceptio === void 0 || _hitTargetInterceptio.dispose();
        });
        if (options.waitAfter !== false) {
          const hitTargetResult = await stopHitTargetInterception;
          if (hitTargetResult !== "done") return hitTargetResult;
        }
      }
      progress2.log(`  ${options.trial ? "trial " : ""}${actionName} action done`);
      progress2.log("  waiting for scheduled navigations to finish");
      if (options.__testHookAfterPointerAction) await options.__testHookAfterPointerAction();
      return "done";
    });
    if (actionResult !== "done") return actionResult;
    progress2.log("  navigations have finished");
    return "done";
  }
  async hover(metadata, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._hover(progress2, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  _hover(progress2, options) {
    return this._retryPointerAction(progress2, "hover", false, (point) => this._page.mouse.move(point.x, point.y), {
      ...options,
      waitAfter: "disabled"
    });
  }
  async click(metadata, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._click(progress2, {
        ...options,
        waitAfter: !options.noWaitAfter
      });
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  _click(progress2, options) {
    return this._retryPointerAction(progress2, "click", true, (point) => this._page.mouse.click(point.x, point.y, options), options);
  }
  async dblclick(metadata, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._dblclick(progress2, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  _dblclick(progress2, options) {
    return this._retryPointerAction(progress2, "dblclick", true, (point) => this._page.mouse.dblclick(point.x, point.y, options), {
      ...options,
      waitAfter: "disabled"
    });
  }
  async tap(metadata, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._tap(progress2, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  _tap(progress2, options) {
    return this._retryPointerAction(progress2, "tap", true, (point) => this._page.touchscreen.tap(point.x, point.y), {
      ...options,
      waitAfter: "disabled"
    });
  }
  async selectOption(metadata, elements, values, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._selectOption(progress2, elements, values, options);
      return throwRetargetableDOMError(result2);
    }, this._page._timeoutSettings.timeout(options));
  }
  async _selectOption(progress2, elements, values, options) {
    let resultingOptions = [];
    await this._retryAction(progress2, "select option", async () => {
      await progress2.beforeInputAction(this);
      if (!options.force) progress2.log(`  waiting for element to be visible and enabled`);
      const optionsToSelect = [...elements, ...values];
      const result2 = await this.evaluateInUtility(async ([injected, node, {
        optionsToSelect: optionsToSelect2,
        force
      }]) => {
        if (!force) {
          const checkResult = await injected.checkElementStates(node, ["visible", "enabled"]);
          if (checkResult) return checkResult;
        }
        return injected.selectOptions(node, optionsToSelect2);
      }, {
        optionsToSelect,
        force: options.force
      });
      if (Array.isArray(result2)) {
        progress2.log("  selected specified option(s)");
        resultingOptions = result2;
        return "done";
      }
      return result2;
    }, options);
    return resultingOptions;
  }
  async fill(metadata, value, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._fill(progress2, value, options);
      assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async _fill(progress2, value, options) {
    progress2.log(`  fill("${value}")`);
    return await this._retryAction(progress2, "fill", async () => {
      await progress2.beforeInputAction(this);
      if (!options.force) progress2.log("  waiting for element to be visible, enabled and editable");
      const result2 = await this.evaluateInUtility(async ([injected, node, {
        value: value2,
        force
      }]) => {
        if (!force) {
          const checkResult = await injected.checkElementStates(node, ["visible", "enabled", "editable"]);
          if (checkResult) return checkResult;
        }
        return injected.fill(node, value2);
      }, {
        value,
        force: options.force
      });
      progress2.throwIfAborted();
      if (result2 === "needsinput") {
        if (value) await this._page.keyboard.insertText(value);
        else await this._page.keyboard.press("Delete");
        return "done";
      } else {
        return result2;
      }
    }, options);
  }
  async selectText(metadata, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._retryAction(progress2, "selectText", async () => {
        if (!options.force) progress2.log("  waiting for element to be visible");
        return await this.evaluateInUtility(async ([injected, node, {
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible"]);
            if (checkResult) return checkResult;
          }
          return injected.selectText(node);
        }, {
          force: options.force
        });
      }, options);
      assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async setInputFiles(metadata, params) {
    const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this._frame, params);
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._setInputFiles(progress2, inputFileItems);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(params));
  }
  async _setInputFiles(progress2, items) {
    const {
      filePayloads,
      localPaths,
      localDirectory
    } = items;
    const multiple = filePayloads && filePayloads.length > 1 || localPaths && localPaths.length > 1;
    const result2 = await this.evaluateHandleInUtility(([injected, node, {
      multiple: multiple2,
      directoryUpload
    }]) => {
      const element = injected.retarget(node, "follow-label");
      if (!element) return;
      if (element.tagName !== "INPUT") throw injected.createStacklessError("Node is not an HTMLInputElement");
      const inputElement = element;
      if (multiple2 && !inputElement.multiple && !inputElement.webkitdirectory) throw injected.createStacklessError("Non-multiple file input can only accept single file");
      if (directoryUpload && !inputElement.webkitdirectory) throw injected.createStacklessError("File input does not support directories, pass individual files instead");
      if (!directoryUpload && inputElement.webkitdirectory) throw injected.createStacklessError("[webkitdirectory] input requires passing a path to a directory");
      return inputElement;
    }, {
      multiple,
      directoryUpload: !!localDirectory
    });
    if (result2 === "error:notconnected" || !result2.asElement()) return "error:notconnected";
    const retargeted = result2.asElement();
    await progress2.beforeInputAction(this);
    progress2.throwIfAborted();
    if (localPaths || localDirectory) {
      const localPathsOrDirectory = localDirectory ? [localDirectory] : localPaths;
      await Promise.all(localPathsOrDirectory.map((localPath) => _fs$9.default.promises.access(localPath, _fs$9.default.constants.F_OK)));
      const waitForInputEvent = localDirectory ? this.evaluate((node) => new Promise((fulfill) => {
        node.addEventListener("input", fulfill, {
          once: true
        });
      })).catch(() => {
      }) : Promise.resolve();
      await this._page._delegate.setInputFilePaths(retargeted, localPathsOrDirectory);
      await waitForInputEvent;
    } else {
      await this._page._delegate.setInputFiles(retargeted, filePayloads);
    }
    return "done";
  }
  async focus(metadata) {
    const controller = new _progress$2.ProgressController(metadata, this);
    await controller.run(async (progress2) => {
      const result2 = await this._focus(progress2);
      return assertDone(throwRetargetableDOMError(result2));
    }, 0);
  }
  async _focus(progress2, resetSelectionIfNotFocused) {
    progress2.throwIfAborted();
    return await this.evaluateInUtility(([injected, node, resetSelectionIfNotFocused2]) => injected.focusNode(node, resetSelectionIfNotFocused2), resetSelectionIfNotFocused);
  }
  async _blur(progress2) {
    progress2.throwIfAborted();
    return await this.evaluateInUtility(([injected, node]) => injected.blurNode(node), {});
  }
  async type(metadata, text, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._type(progress2, text, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async _type(progress2, text, options) {
    progress2.log(`elementHandle.type("${text}")`);
    await progress2.beforeInputAction(this);
    const result2 = await this._focus(
      progress2,
      true
      /* resetSelectionIfNotFocused */
    );
    if (result2 !== "done") return result2;
    progress2.throwIfAborted();
    await this._page.keyboard.type(text, options);
    return "done";
  }
  async press(metadata, key, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._press(progress2, key, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async _press(progress2, key, options) {
    progress2.log(`elementHandle.press("${key}")`);
    await progress2.beforeInputAction(this);
    return this._page._frameManager.waitForSignalsCreatedBy(progress2, !options.noWaitAfter, async () => {
      const result2 = await this._focus(
        progress2,
        true
        /* resetSelectionIfNotFocused */
      );
      if (result2 !== "done") return result2;
      progress2.throwIfAborted();
      await this._page.keyboard.press(key, options);
      return "done";
    });
  }
  async check(metadata, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._setChecked(progress2, true, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async uncheck(metadata, options) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const result2 = await this._setChecked(progress2, false, options);
      return assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async _setChecked(progress2, state, options) {
    const isChecked = async () => {
      const result3 = await this.evaluateInUtility(([injected, node]) => injected.elementState(node, "checked"), {});
      return throwRetargetableDOMError(result3);
    };
    if (await isChecked() === state) return "done";
    const result2 = await this._click(progress2, {
      ...options,
      waitAfter: "disabled"
    });
    if (result2 !== "done") return result2;
    if (options.trial) return "done";
    if (await isChecked() !== state) throw new NonRecoverableDOMError("Clicking the checkbox did not change its state");
    return "done";
  }
  async boundingBox() {
    return this._page._delegate.getBoundingBox(this);
  }
  async screenshot(metadata, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run((progress2) => this._page._screenshotter.screenshotElement(progress2, this, options), this._page._timeoutSettings.timeout(options));
  }
  async querySelector(selector, options) {
    return this._frame.selectors.query(selector, options, this);
  }
  async querySelectorAll(selector) {
    return this._frame.selectors.queryAll(selector, this);
  }
  async evalOnSelector(selector, strict, expression, isFunction, arg) {
    return this._frame.evalOnSelector(selector, strict, expression, isFunction, arg, this);
  }
  async evalOnSelectorAll(selector, expression, isFunction, arg) {
    return this._frame.evalOnSelectorAll(selector, expression, isFunction, arg, this);
  }
  async isVisible(metadata) {
    return this._frame.isVisible(metadata, ":scope", {}, this);
  }
  async isHidden(metadata) {
    return this._frame.isHidden(metadata, ":scope", {}, this);
  }
  async isEnabled(metadata) {
    return this._frame.isEnabled(metadata, ":scope", {}, this);
  }
  async isDisabled(metadata) {
    return this._frame.isDisabled(metadata, ":scope", {}, this);
  }
  async isEditable(metadata) {
    return this._frame.isEditable(metadata, ":scope", {}, this);
  }
  async isChecked(metadata) {
    return this._frame.isChecked(metadata, ":scope", {}, this);
  }
  async waitForElementState(metadata, state, options = {}) {
    const controller = new _progress$2.ProgressController(metadata, this);
    return controller.run(async (progress2) => {
      const actionName = `wait for ${state}`;
      const result2 = await this._retryAction(progress2, actionName, async () => {
        return await this.evaluateInUtility(async ([injected, node, state2]) => {
          return await injected.checkElementStates(node, [state2]) || "done";
        }, state);
      }, {});
      assertDone(throwRetargetableDOMError(result2));
    }, this._page._timeoutSettings.timeout(options));
  }
  async waitForSelector(metadata, selector, options = {}) {
    return this._frame.waitForSelector(metadata, selector, options, this);
  }
  async _adoptTo(context) {
    if (this._context !== context) {
      const adopted = await this._page._delegate.adoptElementHandle(this, context);
      this.dispose();
      return adopted;
    }
    return this;
  }
  async _checkFrameIsHitTarget(point) {
    let frame2 = this._frame;
    const data = [];
    while (frame2.parentFrame()) {
      const frameElement = await frame2.frameElement();
      const box = await frameElement.boundingBox();
      const style = await frameElement.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
      if (!box || style === "error:notconnected") return "error:notconnected";
      if (style === "transformed") {
        return {
          framePoint: void 0
        };
      }
      const pointInFrame = {
        x: point.x - box.x - style.left,
        y: point.y - box.y - style.top
      };
      data.push({
        frame: frame2,
        frameElement,
        pointInFrame
      });
      frame2 = frame2.parentFrame();
    }
    data.push({
      frame: frame2,
      frameElement: null,
      pointInFrame: point
    });
    for (let i = data.length - 1; i > 0; i--) {
      const element = data[i - 1].frameElement;
      const point2 = data[i].pointInFrame;
      const hitTargetResult = await element.evaluateInUtility(([injected, element2, hitPoint]) => {
        return injected.expectHitTarget(hitPoint, element2);
      }, point2);
      if (hitTargetResult !== "done") return hitTargetResult;
    }
    return {
      framePoint: data[0].pointInFrame
    };
  }
}
dom.ElementHandle = ElementHandle;
function throwRetargetableDOMError(result2) {
  if (result2 === "error:notconnected") throw new Error("Element is not attached to the DOM");
  return result2;
}
function assertDone(result2) {
}
function roundPoint(point) {
  return {
    x: (point.x * 100 | 0) / 100,
    y: (point.y * 100 | 0) / 100
  };
}
function compensateHalfIntegerRoundingError(point) {
  const remainderX = point.x - Math.floor(point.x);
  if (remainderX > 0.49 && remainderX < 0.51) point.x -= 0.02;
  const remainderY = point.y - Math.floor(point.y);
  if (remainderY > 0.49 && remainderY < 0.51) point.y -= 0.02;
}
dom.kUnableToAdoptErrorMessage = "Unable to adopt element handle from a different document";
var types$1 = {};
Object.defineProperty(types$1, "__esModule", {
  value: true
});
types$1.kLifecycleEvents = void 0;
types$1.kLifecycleEvents = /* @__PURE__ */ new Set(["load", "domcontentloaded", "networkidle", "commit"]);
var frameSelectors = {};
Object.defineProperty(frameSelectors, "__esModule", {
  value: true
});
frameSelectors.FrameSelectors = void 0;
var _selectorParser$2 = selectorParser;
var _utils$K = requireUtils();
class FrameSelectors {
  constructor(frame2) {
    this.frame = void 0;
    this.frame = frame2;
  }
  _parseSelector(selector, options) {
    const strict = typeof (options === null || options === void 0 ? void 0 : options.strict) === "boolean" ? options.strict : !!this.frame._page.context()._options.strictSelectors;
    return this.frame._page.context().selectors().parseSelector(selector, strict);
  }
  async query(selector, options, scope) {
    const resolved = await this.resolveInjectedForSelector(selector, options, scope);
    if (!resolved) return null;
    const handle = await resolved.injected.evaluateHandle((injected, {
      info,
      scope: scope2
    }) => {
      return injected.querySelector(info.parsed, scope2 || document, info.strict);
    }, {
      info: resolved.info,
      scope: resolved.scope
    });
    const elementHandle2 = handle.asElement();
    if (!elementHandle2) {
      handle.dispose();
      return null;
    }
    return adoptIfNeeded(elementHandle2, await resolved.frame._mainContext());
  }
  async queryArrayInMainWorld(selector, scope) {
    const resolved = await this.resolveInjectedForSelector(selector, {
      mainWorld: true
    }, scope);
    if (!resolved) throw new Error(`Failed to find frame for selector "${selector}"`);
    return await resolved.injected.evaluateHandle((injected, {
      info,
      scope: scope2
    }) => {
      return injected.querySelectorAll(info.parsed, scope2 || document);
    }, {
      info: resolved.info,
      scope: resolved.scope
    });
  }
  async queryCount(selector) {
    const resolved = await this.resolveInjectedForSelector(selector);
    if (!resolved) throw new Error(`Failed to find frame for selector "${selector}"`);
    return await resolved.injected.evaluate((injected, {
      info
    }) => {
      return injected.querySelectorAll(info.parsed, document).length;
    }, {
      info: resolved.info
    });
  }
  async queryAll(selector, scope) {
    const resolved = await this.resolveInjectedForSelector(selector, {}, scope);
    if (!resolved) return [];
    const arrayHandle = await resolved.injected.evaluateHandle((injected, {
      info,
      scope: scope2
    }) => {
      return injected.querySelectorAll(info.parsed, scope2 || document);
    }, {
      info: resolved.info,
      scope: resolved.scope
    });
    const properties = await arrayHandle.getProperties();
    arrayHandle.dispose();
    const targetContext = await resolved.frame._mainContext();
    const result2 = [];
    for (const property of properties.values()) {
      const elementHandle2 = property.asElement();
      if (elementHandle2) result2.push(adoptIfNeeded(elementHandle2, targetContext));
      else property.dispose();
    }
    return Promise.all(result2);
  }
  async resolveFrameForSelector(selector, options = {}, scope) {
    let frame2 = this.frame;
    const frameChunks = (0, _selectorParser$2.splitSelectorByFrame)(selector);
    for (const chunk of frameChunks) {
      (0, _selectorParser$2.visitAllSelectorParts)(chunk, (part, nested) => {
        if (nested && part.name === "internal:control" && part.body === "enter-frame") {
          const locator2 = (0, _utils$K.asLocator)(this.frame._page.attribution.playwright.options.sdkLanguage, selector);
          throw new _selectorParser$2.InvalidSelectorError(`Frame locators are not allowed inside composite locators, while querying "${locator2}"`);
        }
      });
    }
    for (let i = 0; i < frameChunks.length - 1; ++i) {
      const info = this._parseSelector(frameChunks[i], options);
      const context = await frame2._context(info.world);
      const injectedScript = await context.injectedScript();
      const handle = await injectedScript.evaluateHandle((injected, {
        info: info2,
        scope: scope2,
        selectorString
      }) => {
        const element2 = injected.querySelector(info2.parsed, scope2 || document, info2.strict);
        if (element2 && element2.nodeName !== "IFRAME" && element2.nodeName !== "FRAME") throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element2)}, <iframe> was expected`);
        return element2;
      }, {
        info,
        scope: i === 0 ? scope : void 0,
        selectorString: (0, _selectorParser$2.stringifySelector)(info.parsed)
      });
      const element = handle.asElement();
      if (!element) return null;
      const maybeFrame = await frame2._page._delegate.getContentFrame(element);
      element.dispose();
      if (!maybeFrame) return null;
      frame2 = maybeFrame;
    }
    if (frame2 !== this.frame) scope = void 0;
    return {
      frame: frame2,
      info: frame2.selectors._parseSelector(frameChunks[frameChunks.length - 1], options),
      scope
    };
  }
  async resolveInjectedForSelector(selector, options, scope) {
    const resolved = await this.resolveFrameForSelector(selector, options, scope);
    if (!resolved) return;
    const context = await resolved.frame._context(options !== null && options !== void 0 && options.mainWorld ? "main" : resolved.info.world);
    const injected = await context.injectedScript();
    return {
      injected,
      info: resolved.info,
      frame: resolved.frame,
      scope: resolved.scope
    };
  }
}
frameSelectors.FrameSelectors = FrameSelectors;
async function adoptIfNeeded(handle, context) {
  if (handle._context === context) return handle;
  const adopted = await handle._page._delegate.adoptElementHandle(handle, context);
  handle.dispose();
  return adopted;
}
var hasRequiredFrames;
function requireFrames() {
  if (hasRequiredFrames) return frames;
  hasRequiredFrames = 1;
  Object.defineProperty(frames, "__esModule", {
    value: true
  });
  frames.NavigationAbortedError = frames.FrameManager = frames.Frame = void 0;
  var dom$1 = _interopRequireWildcard2(dom);
  var _helper2 = helper;
  var _eventsHelper2 = eventsHelper;
  var js2 = _interopRequireWildcard2(javascript$1);
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _page = requirePage$1();
  var types2 = _interopRequireWildcard2(types$1);
  var _browserContext2 = requireBrowserContext$1();
  var _progress2 = progress;
  var _utils2 = requireUtils();
  var _manualPromise2 = requireManualPromise();
  var _debugLogger2 = debugLogger;
  var _instrumentation2 = instrumentation;
  var _protocolError2 = protocolError;
  var _selectorParser2 = selectorParser;
  var _frameSelectors = frameSelectors;
  var _errors2 = errors$2;
  var _fileUploadUtils2 = fileUploadUtils;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class NavigationAbortedError extends Error {
    constructor(documentId, message) {
      super(message);
      this.documentId = void 0;
      this.documentId = documentId;
    }
  }
  frames.NavigationAbortedError = NavigationAbortedError;
  const kDummyFrameId = "<dummy>";
  class FrameManager {
    constructor(page2) {
      this._page = void 0;
      this._frames = /* @__PURE__ */ new Map();
      this._mainFrame = void 0;
      this._consoleMessageTags = /* @__PURE__ */ new Map();
      this._signalBarriers = /* @__PURE__ */ new Set();
      this._webSockets = /* @__PURE__ */ new Map();
      this._openedDialogs = /* @__PURE__ */ new Set();
      this._closeAllOpeningDialogs = false;
      this._page = page2;
      this._mainFrame = void 0;
    }
    createDummyMainFrameIfNeeded() {
      if (!this._mainFrame) this.frameAttached(kDummyFrameId, null);
    }
    dispose() {
      for (const frame2 of this._frames.values()) {
        frame2._stopNetworkIdleTimer();
        frame2._invalidateNonStallingEvaluations("Target crashed");
      }
    }
    mainFrame() {
      return this._mainFrame;
    }
    frames() {
      const frames2 = [];
      collect(this._mainFrame);
      return frames2;
      function collect(frame2) {
        frames2.push(frame2);
        for (const subframe of frame2.childFrames()) collect(subframe);
      }
    }
    frame(frameId) {
      return this._frames.get(frameId) || null;
    }
    frameAttached(frameId, parentFrameId) {
      const parentFrame = parentFrameId ? this._frames.get(parentFrameId) : null;
      if (!parentFrame) {
        if (this._mainFrame) {
          this._frames.delete(this._mainFrame._id);
          this._mainFrame._id = frameId;
        } else {
          (0, _utils2.assert)(!this._frames.has(frameId));
          this._mainFrame = new Frame(this._page, frameId, parentFrame);
        }
        this._frames.set(frameId, this._mainFrame);
        return this._mainFrame;
      } else {
        (0, _utils2.assert)(!this._frames.has(frameId));
        const frame2 = new Frame(this._page, frameId, parentFrame);
        this._frames.set(frameId, frame2);
        this._page.emit(_page.Page.Events.FrameAttached, frame2);
        return frame2;
      }
    }
    async waitForSignalsCreatedBy(progress2, waitAfter, action) {
      if (!waitAfter) return action();
      const barrier = new SignalBarrier(progress2);
      this._signalBarriers.add(barrier);
      if (progress2) progress2.cleanupWhenAborted(() => this._signalBarriers.delete(barrier));
      const result2 = await action();
      await this._page._delegate.inputActionEpilogue();
      await barrier.waitFor();
      this._signalBarriers.delete(barrier);
      await new Promise((0, _utils2.makeWaitForNextTask)());
      return result2;
    }
    frameWillPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers) barrier.retain();
    }
    frameDidPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers) barrier.release();
    }
    frameRequestedNavigation(frameId, documentId) {
      const frame2 = this._frames.get(frameId);
      if (!frame2) return;
      for (const barrier of this._signalBarriers) barrier.addFrameNavigation(frame2);
      if (frame2.pendingDocument() && frame2.pendingDocument().documentId === documentId) {
        return;
      }
      const request2 = documentId ? Array.from(frame2._inflightRequests).find((request3) => request3._documentId === documentId) : void 0;
      frame2.setPendingDocument({
        documentId,
        request: request2
      });
    }
    frameCommittedNewDocumentNavigation(frameId, url, name2, documentId, initial) {
      const frame2 = this._frames.get(frameId);
      this.removeChildFramesRecursively(frame2);
      this.clearWebSockets(frame2);
      frame2._url = url;
      frame2._name = name2;
      let keepPending;
      const pendingDocument = frame2.pendingDocument();
      if (pendingDocument) {
        if (pendingDocument.documentId === void 0) {
          pendingDocument.documentId = documentId;
        }
        if (pendingDocument.documentId === documentId) {
          frame2._currentDocument = pendingDocument;
        } else {
          keepPending = pendingDocument;
          frame2._currentDocument = {
            documentId,
            request: void 0
          };
        }
        frame2.setPendingDocument(void 0);
      } else {
        frame2._currentDocument = {
          documentId,
          request: void 0
        };
      }
      frame2._onClearLifecycle();
      const navigationEvent = {
        url,
        name: name2,
        newDocument: frame2._currentDocument,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame2, navigationEvent);
      if (!initial) {
        _debugLogger2.debugLogger.log("api", `  navigated to "${url}"`);
        this._page.frameNavigatedToNewDocument(frame2);
      }
      frame2.setPendingDocument(keepPending);
    }
    frameCommittedSameDocumentNavigation(frameId, url) {
      const frame2 = this._frames.get(frameId);
      if (!frame2) return;
      frame2._url = url;
      const navigationEvent = {
        url,
        name: frame2._name,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame2, navigationEvent);
      _debugLogger2.debugLogger.log("api", `  navigated to "${url}"`);
    }
    frameAbortedNavigation(frameId, errorText, documentId) {
      const frame2 = this._frames.get(frameId);
      if (!frame2 || !frame2.pendingDocument()) return;
      if (documentId !== void 0 && frame2.pendingDocument().documentId !== documentId) return;
      const navigationEvent = {
        url: frame2._url,
        name: frame2._name,
        newDocument: frame2.pendingDocument(),
        error: new NavigationAbortedError(documentId, errorText),
        isPublic: !(documentId && frame2._redirectedNavigations.has(documentId))
      };
      frame2.setPendingDocument(void 0);
      this._fireInternalFrameNavigation(frame2, navigationEvent);
    }
    frameDetached(frameId) {
      const frame2 = this._frames.get(frameId);
      if (frame2) {
        this._removeFramesRecursively(frame2);
        this._page.mainFrame()._recalculateNetworkIdle();
      }
    }
    frameLifecycleEvent(frameId, event) {
      const frame2 = this._frames.get(frameId);
      if (frame2) frame2._onLifecycleEvent(event);
    }
    requestStarted(request2, route) {
      const frame2 = request2.frame();
      this._inflightRequestStarted(request2);
      if (request2._documentId) frame2.setPendingDocument({
        documentId: request2._documentId,
        request: request2
      });
      if (request2._isFavicon) {
        route === null || route === void 0 || route.continue({
          isFallback: true
        }).catch(() => {
        });
        return;
      }
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.Request, request2);
      if (route) {
        var _this$_page$_serverRe, _this$_page, _this$_page$_clientRe, _this$_page2, _this$_page$_browserC, _this$_page$_browserC2;
        const r = new network2.Route(request2, route);
        if ((_this$_page$_serverRe = (_this$_page = this._page)._serverRequestInterceptor) !== null && _this$_page$_serverRe !== void 0 && _this$_page$_serverRe.call(_this$_page, r, request2)) return;
        if ((_this$_page$_clientRe = (_this$_page2 = this._page)._clientRequestInterceptor) !== null && _this$_page$_clientRe !== void 0 && _this$_page$_clientRe.call(_this$_page2, r, request2)) return;
        if ((_this$_page$_browserC = (_this$_page$_browserC2 = this._page._browserContext)._requestInterceptor) !== null && _this$_page$_browserC !== void 0 && _this$_page$_browserC.call(_this$_page$_browserC2, r, request2)) return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    requestReceivedResponse(response) {
      if (response.request()._isFavicon) return;
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.Response, response);
    }
    reportRequestFinished(request2, response) {
      this._inflightRequestFinished(request2);
      if (request2._isFavicon) return;
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.RequestFinished, {
        request: request2,
        response
      });
    }
    requestFailed(request2, canceled) {
      const frame2 = request2.frame();
      this._inflightRequestFinished(request2);
      if (frame2.pendingDocument() && frame2.pendingDocument().request === request2) {
        let errorText = request2.failure().errorText;
        if (canceled) errorText += "; maybe frame was detached?";
        this.frameAbortedNavigation(frame2._id, errorText, frame2.pendingDocument().documentId);
      }
      if (request2._isFavicon) return;
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.RequestFailed, request2);
    }
    dialogDidOpen(dialog2) {
      for (const frame2 of this._frames.values()) frame2._invalidateNonStallingEvaluations("JavaScript dialog interrupted evaluation");
      if (this._closeAllOpeningDialogs) dialog2.close().then(() => {
      });
      else this._openedDialogs.add(dialog2);
    }
    dialogWillClose(dialog2) {
      this._openedDialogs.delete(dialog2);
    }
    async closeOpenDialogs() {
      await Promise.all([...this._openedDialogs].map((dialog2) => dialog2.close())).catch(() => {
      });
      this._openedDialogs.clear();
    }
    setCloseAllOpeningDialogs(closeDialogs) {
      this._closeAllOpeningDialogs = closeDialogs;
    }
    removeChildFramesRecursively(frame2) {
      for (const child of frame2.childFrames()) this._removeFramesRecursively(child);
    }
    _removeFramesRecursively(frame2) {
      this.removeChildFramesRecursively(frame2);
      frame2._onDetached();
      this._frames.delete(frame2._id);
      if (!this._page.isClosed()) this._page.emit(_page.Page.Events.FrameDetached, frame2);
    }
    _inflightRequestFinished(request2) {
      const frame2 = request2.frame();
      if (request2._isFavicon) return;
      if (!frame2._inflightRequests.has(request2)) return;
      frame2._inflightRequests.delete(request2);
      if (frame2._inflightRequests.size === 0) frame2._startNetworkIdleTimer();
    }
    _inflightRequestStarted(request2) {
      const frame2 = request2.frame();
      if (request2._isFavicon) return;
      frame2._inflightRequests.add(request2);
      if (frame2._inflightRequests.size === 1) frame2._stopNetworkIdleTimer();
    }
    interceptConsoleMessage(message) {
      if (message.type() !== "debug") return false;
      const tag = message.text();
      const handler = this._consoleMessageTags.get(tag);
      if (!handler) return false;
      this._consoleMessageTags.delete(tag);
      handler();
      return true;
    }
    clearWebSockets(frame2) {
      if (frame2.parentFrame()) return;
      this._webSockets.clear();
    }
    onWebSocketCreated(requestId, url) {
      const ws2 = new network2.WebSocket(this._page, url);
      this._webSockets.set(requestId, ws2);
    }
    onWebSocketRequest(requestId) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2 && ws2.markAsNotified()) this._page.emit(_page.Page.Events.WebSocket, ws2);
    }
    onWebSocketResponse(requestId, status, statusText) {
      const ws2 = this._webSockets.get(requestId);
      if (status < 400) return;
      if (ws2) ws2.error(`${statusText}: ${status}`);
    }
    onWebSocketFrameSent(requestId, opcode, data) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2) ws2.frameSent(opcode, data);
    }
    webSocketFrameReceived(requestId, opcode, data) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2) ws2.frameReceived(opcode, data);
    }
    webSocketClosed(requestId) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2) ws2.closed();
      this._webSockets.delete(requestId);
    }
    webSocketError(requestId, errorMessage) {
      const ws2 = this._webSockets.get(requestId);
      if (ws2) ws2.error(errorMessage);
    }
    _fireInternalFrameNavigation(frame2, event) {
      frame2.emit(Frame.Events.InternalNavigation, event);
    }
  }
  frames.FrameManager = FrameManager;
  class Frame extends _instrumentation2.SdkObject {
    constructor(page2, id, parentFrame) {
      super(page2, "frame");
      this._id = void 0;
      this._firedLifecycleEvents = /* @__PURE__ */ new Set();
      this._firedNetworkIdleSelf = false;
      this._currentDocument = void 0;
      this._pendingDocument = void 0;
      this._page = void 0;
      this._parentFrame = void 0;
      this._url = "";
      this._contextData = /* @__PURE__ */ new Map();
      this._childFrames = /* @__PURE__ */ new Set();
      this._name = "";
      this._inflightRequests = /* @__PURE__ */ new Set();
      this._networkIdleTimer = void 0;
      this._setContentCounter = 0;
      this._detachedScope = new _utils2.LongStandingScope();
      this._raceAgainstEvaluationStallingEventsPromises = /* @__PURE__ */ new Set();
      this._redirectedNavigations = /* @__PURE__ */ new Map();
      this.selectors = void 0;
      this.attribution.frame = this;
      this._id = id;
      this._page = page2;
      this._parentFrame = parentFrame;
      this._currentDocument = {
        documentId: void 0,
        request: void 0
      };
      this.selectors = new _frameSelectors.FrameSelectors(this);
      this._contextData.set("main", {
        contextPromise: new _manualPromise2.ManualPromise(),
        context: null
      });
      this._contextData.set("utility", {
        contextPromise: new _manualPromise2.ManualPromise(),
        context: null
      });
      this._setContext("main", null);
      this._setContext("utility", null);
      if (this._parentFrame) this._parentFrame._childFrames.add(this);
      this._firedLifecycleEvents.add("commit");
      if (id !== kDummyFrameId) this._startNetworkIdleTimer();
    }
    isDetached() {
      return this._detachedScope.isClosed();
    }
    _onLifecycleEvent(event) {
      if (this._firedLifecycleEvents.has(event)) return;
      this._firedLifecycleEvents.add(event);
      this.emit(Frame.Events.AddLifecycle, event);
      if (this === this._page.mainFrame() && this._url !== "about:blank") _debugLogger2.debugLogger.log("api", `  "${event}" event fired`);
      this._page.mainFrame()._recalculateNetworkIdle();
    }
    _onClearLifecycle() {
      for (const event of this._firedLifecycleEvents) this.emit(Frame.Events.RemoveLifecycle, event);
      this._firedLifecycleEvents.clear();
      this._inflightRequests = new Set(Array.from(this._inflightRequests).filter((request2) => request2 === this._currentDocument.request));
      this._stopNetworkIdleTimer();
      if (this._inflightRequests.size === 0) this._startNetworkIdleTimer();
      this._page.mainFrame()._recalculateNetworkIdle(this);
      this._onLifecycleEvent("commit");
    }
    setPendingDocument(documentInfo) {
      this._pendingDocument = documentInfo;
      if (documentInfo) this._invalidateNonStallingEvaluations("Navigation interrupted the evaluation");
    }
    pendingDocument() {
      return this._pendingDocument;
    }
    _invalidateNonStallingEvaluations(message) {
      if (!this._raceAgainstEvaluationStallingEventsPromises.size) return;
      const error = new Error(message);
      for (const promise of this._raceAgainstEvaluationStallingEventsPromises) promise.reject(error);
    }
    async raceAgainstEvaluationStallingEvents(cb) {
      if (this._pendingDocument) throw new Error("Frame is currently attempting a navigation");
      if (this._page._frameManager._openedDialogs.size) throw new Error("Open JavaScript dialog prevents evaluation");
      const promise = new _manualPromise2.ManualPromise();
      this._raceAgainstEvaluationStallingEventsPromises.add(promise);
      try {
        return await Promise.race([cb(), promise]);
      } finally {
        this._raceAgainstEvaluationStallingEventsPromises.delete(promise);
      }
    }
    nonStallingRawEvaluateInExistingMainContext(expression) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        const context = this._existingMainContext();
        if (!context) throw new Error("Frame does not yet have a main execution context");
        return context.rawEvaluateJSON(expression);
      });
    }
    nonStallingEvaluateInExistingContext(expression, world) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        var _this$_contextData$ge;
        const context = (_this$_contextData$ge = this._contextData.get(world)) === null || _this$_contextData$ge === void 0 ? void 0 : _this$_contextData$ge.context;
        if (!context) throw new Error("Frame does not yet have the execution context");
        return context.evaluateExpression(expression, {
          isFunction: false
        });
      });
    }
    _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle) {
      let isNetworkIdle = this._firedNetworkIdleSelf;
      for (const child of this._childFrames) {
        child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
        if (!child._firedLifecycleEvents.has("networkidle")) isNetworkIdle = false;
      }
      if (isNetworkIdle && !this._firedLifecycleEvents.has("networkidle")) {
        this._firedLifecycleEvents.add("networkidle");
        this.emit(Frame.Events.AddLifecycle, "networkidle");
        if (this === this._page.mainFrame() && this._url !== "about:blank") _debugLogger2.debugLogger.log("api", `  "networkidle" event fired`);
      }
      if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has("networkidle") && !isNetworkIdle) {
        this._firedLifecycleEvents.delete("networkidle");
        this.emit(Frame.Events.RemoveLifecycle, "networkidle");
      }
    }
    async raceNavigationAction(progress2, options, action) {
      return _utils2.LongStandingScope.raceMultiple([this._detachedScope, this._page.openScope], action().catch((e) => {
        if (e instanceof NavigationAbortedError && e.documentId) {
          const data = this._redirectedNavigations.get(e.documentId);
          if (data) {
            progress2.log(`waiting for redirected navigation to "${data.url}"`);
            return data.gotoPromise;
          }
        }
        throw e;
      }));
    }
    redirectNavigation(url, documentId, referer) {
      const controller = new _progress2.ProgressController((0, _instrumentation2.serverSideCallMetadata)(), this);
      const data = {
        url,
        gotoPromise: controller.run((progress2) => this._gotoAction(progress2, url, {
          referer
        }), 0)
      };
      this._redirectedNavigations.set(documentId, data);
      data.gotoPromise.finally(() => this._redirectedNavigations.delete(documentId));
    }
    async goto(metadata, url, options = {}) {
      const constructedNavigationURL = (0, _utils2.constructURLBasedOnBaseURL)(this._page._browserContext._options.baseURL, url);
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run((progress2) => this._goto(progress2, constructedNavigationURL, options), this._page._timeoutSettings.navigationTimeout(options));
    }
    async _goto(progress2, url, options) {
      return this.raceNavigationAction(progress2, options, async () => this._gotoAction(progress2, url, options));
    }
    async _gotoAction(progress2, url, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      progress2.log(`navigating to "${url}", waiting until "${waitUntil}"`);
      const headers2 = this._page.extraHTTPHeaders() || [];
      const refererHeader = headers2.find((h) => h.name.toLowerCase() === "referer");
      let referer = refererHeader ? refererHeader.value : void 0;
      if (options.referer !== void 0) {
        if (referer !== void 0 && referer !== options.referer) throw new Error('"referer" is already specified as extra HTTP header');
        referer = options.referer;
      }
      url = _helper2.helper.completeUserURL(url);
      const navigationEvents = [];
      const collectNavigations = (arg) => navigationEvents.push(arg);
      this.on(Frame.Events.InternalNavigation, collectNavigations);
      const navigateResult = await this._page._delegate.navigateFrame(this, url, referer).finally(() => this.off(Frame.Events.InternalNavigation, collectNavigations));
      let event;
      if (navigateResult.newDocumentId) {
        const predicate = (event2) => {
          return event2.newDocument && (event2.newDocument.documentId === navigateResult.newDocumentId || !event2.error);
        };
        const events2 = navigationEvents.filter(predicate);
        if (events2.length) event = events2[0];
        else event = await _helper2.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, predicate).promise;
        if (event.newDocument.documentId !== navigateResult.newDocumentId) {
          throw new NavigationAbortedError(navigateResult.newDocumentId, `Navigation to "${url}" is interrupted by another navigation to "${event.url}"`);
        }
        if (event.error) throw event.error;
      } else {
        const predicate = (e) => !e.newDocument;
        const events2 = navigationEvents.filter(predicate);
        if (events2.length) event = events2[0];
        else event = await _helper2.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, predicate).promise;
      }
      if (!this._firedLifecycleEvents.has(waitUntil)) await _helper2.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request2 = event.newDocument ? event.newDocument.request : void 0;
      const response = request2 ? request2._finalRequest().response() : null;
      return response;
    }
    async _waitForNavigation(progress2, requiresNewDocument, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      progress2.log(`waiting for navigation until "${waitUntil}"`);
      const navigationEvent = await _helper2.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event) => {
        if (event.error) return true;
        if (requiresNewDocument && !event.newDocument) return false;
        progress2.log(`  navigated to "${this._url}"`);
        return true;
      }).promise;
      if (navigationEvent.error) throw navigationEvent.error;
      if (!this._firedLifecycleEvents.has(waitUntil)) await _helper2.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request2 = navigationEvent.newDocument ? navigationEvent.newDocument.request : void 0;
      return request2 ? request2._finalRequest().response() : null;
    }
    async _waitForLoadState(progress2, state) {
      const waitUntil = verifyLifecycle("state", state);
      if (!this._firedLifecycleEvents.has(waitUntil)) await _helper2.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
    }
    async frameElement() {
      return this._page._delegate.getFrameElement(this);
    }
    _context(world) {
      return this._contextData.get(world).contextPromise.then((contextOrDestroyedReason) => {
        if (contextOrDestroyedReason instanceof js2.ExecutionContext) return contextOrDestroyedReason;
        throw new Error(contextOrDestroyedReason.destroyedReason);
      });
    }
    _mainContext() {
      return this._context("main");
    }
    _existingMainContext() {
      var _this$_contextData$ge2;
      return ((_this$_contextData$ge2 = this._contextData.get("main")) === null || _this$_contextData$ge2 === void 0 ? void 0 : _this$_contextData$ge2.context) || null;
    }
    _utilityContext() {
      return this._context("utility");
    }
    async evaluateExpression(expression, options = {}, arg) {
      var _options$world;
      const context = await this._context((_options$world = options.world) !== null && _options$world !== void 0 ? _options$world : "main");
      const value = await context.evaluateExpression(expression, options, arg);
      return value;
    }
    async evaluateExpressionHandle(expression, options = {}, arg) {
      var _options$world2;
      const context = await this._context((_options$world2 = options.world) !== null && _options$world2 !== void 0 ? _options$world2 : "main");
      const value = await context.evaluateExpressionHandle(expression, options, arg);
      return value;
    }
    async querySelector(selector, options) {
      _debugLogger2.debugLogger.log("api", `    finding element using the selector "${selector}"`);
      return this.selectors.query(selector, options);
    }
    async waitForSelector(metadata, selector, options, scope) {
      const controller = new _progress2.ProgressController(metadata, this);
      if (options.visibility) throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible") throw new Error("options.waitFor is not supported, did you mean options.state?");
      const {
        state = "visible"
      } = options;
      if (!["attached", "detached", "visible", "hidden"].includes(state)) throw new Error(`state: expected one of (attached|detached|visible|hidden)`);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}${state === "attached" ? "" : " to be " + state}`);
        return await this.waitForSelectorInternal(progress2, selector, true, options, scope);
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelectorInternal(progress2, selector, performLocatorHandlersCheckpoint, options, scope) {
      const {
        state = "visible"
      } = options;
      const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performLocatorHandlersCheckpoint) await this._page.performLocatorHandlersCheckpoint(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        progress2.throwIfAborted();
        if (!resolved) {
          if (state === "hidden" || state === "detached") return null;
          return continuePolling;
        }
        const result2 = await resolved.injected.evaluateHandle((injected, {
          info,
          root
        }) => {
          const elements = injected.querySelectorAll(info.parsed, root || document);
          const element2 = elements[0];
          const visible2 = element2 ? injected.utils.isElementVisible(element2) : false;
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict) throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${visible2 ? "visible" : "hidden"} ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            element: element2,
            visible: visible2,
            attached: !!element2
          };
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : void 0
        });
        const {
          log,
          visible,
          attached
        } = await result2.evaluate((r) => ({
          log: r.log,
          visible: r.visible,
          attached: r.attached
        }));
        if (log) progress2.log(log);
        const success = {
          attached,
          detached: !attached,
          visible,
          hidden: !visible
        }[state];
        if (!success) {
          result2.dispose();
          return continuePolling;
        }
        if (options.omitReturnValue) {
          result2.dispose();
          return null;
        }
        const element = state === "attached" || state === "visible" ? await result2.evaluateHandle((r) => r.element) : null;
        result2.dispose();
        if (!element) return null;
        if (options.__testHookBeforeAdoptNode) await options.__testHookBeforeAdoptNode();
        try {
          return await element._adoptTo(await resolved.frame._mainContext());
        } catch (e) {
          return continuePolling;
        }
      });
      return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
    }
    async dispatchEvent(metadata, selector, type, eventInit = {}, options = {}, scope) {
      await this._callOnElementOnceMatches(metadata, selector, (injectedScript, element, data) => {
        injectedScript.dispatchEvent(element, data.type, data.eventInit);
      }, {
        type,
        eventInit
      }, {
        mainWorld: true,
        ...options
      }, scope);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg, scope) {
      const handle = await this.selectors.query(selector, {
        strict
      }, scope);
      if (!handle) throw new Error(`Failed to find element matching selector "${selector}"`);
      const result2 = await handle.evaluateExpression(expression, {
        isFunction
      }, arg);
      handle.dispose();
      return result2;
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg, scope) {
      const arrayHandle = await this.selectors.queryArrayInMainWorld(selector, scope);
      const result2 = await arrayHandle.evaluateExpression(expression, {
        isFunction
      }, arg);
      arrayHandle.dispose();
      return result2;
    }
    async maskSelectors(selectors2, color) {
      const context = await this._utilityContext();
      const injectedScript = await context.injectedScript();
      await injectedScript.evaluate((injected, {
        parsed,
        color: color2
      }) => {
        injected.maskSelectors(parsed, color2);
      }, {
        parsed: selectors2,
        color
      });
    }
    async querySelectorAll(selector) {
      return this.selectors.queryAll(selector);
    }
    async queryCount(selector) {
      return await this.selectors.queryCount(selector);
    }
    async content() {
      try {
        const context = await this._utilityContext();
        return await context.evaluate(() => {
          let retVal = "";
          if (document.doctype) retVal = new XMLSerializer().serializeToString(document.doctype);
          if (document.documentElement) retVal += document.documentElement.outerHTML;
          return retVal;
        });
      } catch (e) {
        if (js2.isJavaScriptErrorInEvaluate(e) || (0, _protocolError2.isSessionClosedError)(e)) throw e;
        throw new Error(`Unable to retrieve content because the page is navigating and changing the content.`);
      }
    }
    async setContent(metadata, html, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this.raceNavigationAction(progress2, options, async () => {
          const waitUntil = options.waitUntil === void 0 ? "load" : options.waitUntil;
          progress2.log(`setting frame content, waiting until "${waitUntil}"`);
          const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
          const context = await this._utilityContext();
          const lifecyclePromise = new Promise((resolve, reject) => {
            this._page._frameManager._consoleMessageTags.set(tag, () => {
              this._onClearLifecycle();
              this._waitForLoadState(progress2, waitUntil).then(resolve).catch(reject);
            });
          });
          const contentPromise = context.evaluate(({
            html: html2,
            tag: tag2
          }) => {
            document.open();
            console.debug(tag2);
            document.write(html2);
            document.close();
          }, {
            html,
            tag
          });
          await Promise.all([contentPromise, lifecyclePromise]);
          return null;
        });
      }, this._page._timeoutSettings.navigationTimeout(options));
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    origin() {
      var _network$parsedURL;
      if (!this._url.startsWith("http")) return;
      return (_network$parsedURL = network2.parsedURL(this._url)) === null || _network$parsedURL === void 0 ? void 0 : _network$parsedURL.origin;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    async addScriptTag(params) {
      const {
        url = null,
        content = null,
        type = ""
      } = params;
      if (!url && !content) throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null) return (await context.evaluateHandle(addScriptUrl, {
          url,
          type
        })).asElement();
        const result2 = (await context.evaluateHandle(addScriptContent, {
          content,
          type
        })).asElement();
        if (this._page._delegate.cspErrorsAsynchronousForInlineScripts) await context.evaluate(() => true);
        return result2;
      });
      async function addScriptUrl(params2) {
        const script = document.createElement("script");
        script.src = params2.url;
        if (params2.type) script.type = params2.type;
        const promise = new Promise((res, rej) => {
          script.onload = res;
          script.onerror = (e) => rej(typeof e === "string" ? new Error(e) : new Error(`Failed to load script at ${script.src}`));
        });
        document.head.appendChild(script);
        await promise;
        return script;
      }
      function addScriptContent(params2) {
        const script = document.createElement("script");
        script.type = params2.type || "text/javascript";
        script.text = params2.content;
        let error = null;
        script.onerror = (e) => error = e;
        document.head.appendChild(script);
        if (error) throw error;
        return script;
      }
    }
    async addStyleTag(params) {
      const {
        url = null,
        content = null
      } = params;
      if (!url && !content) throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null) return (await context.evaluateHandle(addStyleUrl, url)).asElement();
        return (await context.evaluateHandle(addStyleContent, content)).asElement();
      });
      async function addStyleUrl(url2) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = url2;
        const promise = new Promise((res, rej) => {
          link.onload = res;
          link.onerror = rej;
        });
        document.head.appendChild(link);
        await promise;
        return link;
      }
      async function addStyleContent(content2) {
        const style = document.createElement("style");
        style.type = "text/css";
        style.appendChild(document.createTextNode(content2));
        const promise = new Promise((res, rej) => {
          style.onload = res;
          style.onerror = rej;
        });
        document.head.appendChild(style);
        await promise;
        return style;
      }
    }
    async _raceWithCSPError(func) {
      const listeners = [];
      let result2;
      let error;
      let cspMessage;
      const actionPromise = func().then((r) => result2 = r).catch((e) => error = e);
      const errorPromise = new Promise((resolve) => {
        listeners.push(_eventsHelper2.eventsHelper.addEventListener(this._page._browserContext, _browserContext2.BrowserContext.Events.Console, (message) => {
          if (message.page() !== this._page || message.type() !== "error") return;
          if (message.text().includes("Content-Security-Policy") || message.text().includes("Content Security Policy")) {
            cspMessage = message;
            resolve();
          }
        }));
      });
      await Promise.race([actionPromise, errorPromise]);
      _eventsHelper2.eventsHelper.removeEventListeners(listeners);
      if (cspMessage) throw new Error(cspMessage.text());
      if (error) throw error;
      return result2;
    }
    async retryWithProgressAndTimeouts(progress2, timeouts, action) {
      const continuePolling = Symbol("continuePolling");
      timeouts = [0, ...timeouts];
      let timeoutIndex = 0;
      while (progress2.isRunning()) {
        const timeout = timeouts[Math.min(timeoutIndex++, timeouts.length - 1)];
        if (timeout) {
          const actionPromise = new Promise((f) => setTimeout(f, timeout));
          await _utils2.LongStandingScope.raceMultiple([this._page.openScope, this._detachedScope], actionPromise);
        }
        progress2.throwIfAborted();
        try {
          const result2 = await action(continuePolling);
          if (result2 === continuePolling) continue;
          return result2;
        } catch (e) {
          if (this._isErrorThatCannotBeRetried(e)) throw e;
          continue;
        }
      }
      progress2.throwIfAborted();
      return void 0;
    }
    _isErrorThatCannotBeRetried(e) {
      if (js2.isJavaScriptErrorInEvaluate(e) || (0, _protocolError2.isSessionClosedError)(e)) return true;
      if (dom$1.isNonRecoverableDOMError(e) || (0, _selectorParser2.isInvalidSelectorError)(e)) return true;
      if (this.isDetached()) return true;
      return false;
    }
    async _retryWithProgressIfNotConnected(progress2, selector, strict, performLocatorHandlersCheckpoint, action) {
      progress2.log(`waiting for ${this._asLocator(selector)}`);
      return this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performLocatorHandlersCheckpoint) await this._page.performLocatorHandlersCheckpoint(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, {
          strict
        });
        progress2.throwIfAborted();
        if (!resolved) return continuePolling;
        const result2 = await resolved.injected.evaluateHandle((injected, {
          info
        }) => {
          const elements = injected.querySelectorAll(info.parsed, document);
          const element2 = elements[0];
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict) throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            success: !!element2,
            element: element2
          };
        }, {
          info: resolved.info
        });
        const {
          log,
          success
        } = await result2.evaluate((r) => ({
          log: r.log,
          success: r.success
        }));
        if (log) progress2.log(log);
        if (!success) {
          result2.dispose();
          return continuePolling;
        }
        const element = await result2.evaluateHandle((r) => r.element);
        result2.dispose();
        try {
          const result3 = await action(element);
          if (result3 === "error:notconnected") {
            progress2.log("element was detached from the DOM, retrying");
            return continuePolling;
          }
          return result3;
        } finally {
          element === null || element === void 0 || element.dispose();
        }
      });
    }
    async rafrafTimeoutScreenshotElementWithProgress(progress2, selector, timeout, options) {
      return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, async (handle) => {
        await handle._frame.rafrafTimeout(timeout);
        return await this._page._screenshotter.screenshotElement(progress2, handle, options);
      });
    }
    async click(metadata, selector, options) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._click(progress2, {
          ...options,
          waitAfter: !options.noWaitAfter
        })));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dblclick(metadata, selector, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._dblclick(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dragAndDrop(metadata, source2, target, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, source2, options.strict, !options.force, async (handle) => {
          return handle._retryPointerAction(progress2, "move and down", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.down();
          }, {
            ...options,
            waitAfter: "disabled",
            position: options.sourcePosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
        dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, target, options.strict, false, async (handle) => {
          return handle._retryPointerAction(progress2, "move and up", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.up();
          }, {
            ...options,
            waitAfter: "disabled",
            position: options.targetPosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
      }, this._page._timeoutSettings.timeout(options));
    }
    async tap(metadata, selector, options) {
      if (!this._page._browserContext._options.hasTouch) throw new Error("The page does not support tap. Use hasTouch context option to enable touch support.");
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._tap(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async fill(metadata, selector, value, options) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._fill(progress2, value, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async focus(metadata, selector, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._focus(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async blur(metadata, selector, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._blur(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async textContent(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.textContent, void 0, options, scope);
    }
    async innerText(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, element) => {
        if (element.namespaceURI !== "http://www.w3.org/1999/xhtml") throw injectedScript.createStacklessError("Node is not an HTMLElement");
        return element.innerText;
      }, void 0, options, scope);
    }
    async innerHTML(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.innerHTML, void 0, options, scope);
    }
    async getAttribute(metadata, selector, name2, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => element.getAttribute(data.name), {
        name: name2
      }, options, scope);
    }
    async inputValue(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, node) => {
        const element = injectedScript.retarget(node, "follow-label");
        if (!element || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT") throw injectedScript.createStacklessError("Node is not an <input>, <textarea> or <select> element");
        return element.value;
      }, void 0, options, scope);
    }
    async highlight(selector) {
      const resolved = await this.selectors.resolveInjectedForSelector(selector);
      if (!resolved) return;
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.highlight(info.parsed);
      }, {
        info: resolved.info
      });
    }
    async hideHighlight() {
      return this.raceAgainstEvaluationStallingEvents(async () => {
        const context = await this._utilityContext();
        const injectedScript = await context.injectedScript();
        return await injectedScript.evaluate((injected) => {
          return injected.hideHighlight();
        });
      });
    }
    async _elementState(metadata, selector, state, options = {}, scope) {
      const result2 = await this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => {
        return injected.elementState(element, data.state);
      }, {
        state
      }, options, scope);
      return dom$1.throwRetargetableDOMError(result2);
    }
    async isVisible(metadata, selector, options = {}, scope) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`  checking visibility of ${this._asLocator(selector)}`);
        return await this.isVisibleInternal(selector, options, scope);
      }, this._page._timeoutSettings.timeout({}));
    }
    async isVisibleInternal(selector, options = {}, scope) {
      try {
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        if (!resolved) return false;
        return await resolved.injected.evaluate((injected, {
          info,
          root
        }) => {
          const element = injected.querySelector(info.parsed, root || document, info.strict);
          const state = element ? injected.elementState(element, "visible") : false;
          return state === "error:notconnected" ? false : state;
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : void 0
        });
      } catch (e) {
        if (js2.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser2.isInvalidSelectorError)(e) || (0, _protocolError2.isSessionClosedError)(e)) throw e;
        return false;
      }
    }
    async isHidden(metadata, selector, options = {}, scope) {
      return !await this.isVisible(metadata, selector, options, scope);
    }
    async isDisabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "disabled", options, scope);
    }
    async isEnabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "enabled", options, scope);
    }
    async isEditable(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "editable", options, scope);
    }
    async isChecked(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "checked", options, scope);
    }
    async hover(metadata, selector, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._hover(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async selectOption(metadata, selector, elements, values, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._selectOption(progress2, elements, values, options));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, selector, params) {
      const inputFileItems = await (0, _fileUploadUtils2.prepareFilesForUpload)(this, params);
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, params.strict, true, (handle) => handle._setInputFiles(progress2, inputFileItems)));
      }, this._page._timeoutSettings.timeout(params));
    }
    async type(metadata, selector, text, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._type(progress2, text, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async press(metadata, selector, key, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._press(progress2, key, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async check(metadata, selector, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, true, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, selector, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom$1.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, false, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForTimeout(metadata, timeout) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async () => {
        await new Promise((resolve) => setTimeout(resolve, timeout));
      });
    }
    async expect(metadata, selector, options) {
      const result2 = await this._expectImpl(metadata, selector, options);
      if (result2.matches === options.isNot) metadata.error = {
        error: {
          name: "Expect",
          message: "Expect failed"
        }
      };
      return result2;
    }
    async _expectImpl(metadata, selector, options) {
      const lastIntermediateResult = {
        isSet: false
      };
      try {
        let timeout = this._page._timeoutSettings.timeout(options);
        const start = timeout > 0 ? (0, _utils2.monotonicTime)() : 0;
        await new _progress2.ProgressController(metadata, this).run(async (progress2) => {
          progress2.log(`${metadata.apiName}${timeout ? ` with timeout ${timeout}ms` : ""}`);
          progress2.log(`waiting for ${this._asLocator(selector)}`);
          await this._page.performLocatorHandlersCheckpoint(progress2);
        }, timeout);
        try {
          const resultOneShot = await new _progress2.ProgressController(metadata, this).run(async (progress2) => {
            return await this._expectInternal(progress2, selector, options, lastIntermediateResult);
          });
          if (resultOneShot.matches !== options.isNot) return resultOneShot;
        } catch (e) {
          if (js2.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser2.isInvalidSelectorError)(e)) throw e;
        }
        if (timeout > 0) {
          const elapsed = (0, _utils2.monotonicTime)() - start;
          timeout -= elapsed;
        }
        if (timeout < 0) return {
          matches: options.isNot,
          log: metadata.log,
          timedOut: true,
          received: lastIntermediateResult.received
        };
        return await new _progress2.ProgressController(metadata, this).run(async (progress2) => {
          return await this.retryWithProgressAndTimeouts(progress2, [100, 250, 500, 1e3], async (continuePolling) => {
            await this._page.performLocatorHandlersCheckpoint(progress2);
            const {
              matches,
              received
            } = await this._expectInternal(progress2, selector, options, lastIntermediateResult);
            if (matches === options.isNot) {
              return continuePolling;
            }
            return {
              matches,
              received
            };
          });
        }, timeout);
      } catch (e) {
        if (js2.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser2.isInvalidSelectorError)(e)) throw e;
        const result2 = {
          matches: options.isNot,
          log: metadata.log
        };
        if (lastIntermediateResult.isSet) result2.received = lastIntermediateResult.received;
        if (e instanceof _errors2.TimeoutError) result2.timedOut = true;
        return result2;
      }
    }
    async _expectInternal(progress2, selector, options, lastIntermediateResult) {
      var _info$world;
      const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, {
        strict: true
      });
      progress2.throwIfAborted();
      const {
        frame: frame2,
        info
      } = selectorInFrame || {
        frame: this,
        info: void 0
      };
      const world = options.expression === "to.have.property" ? "main" : (_info$world = info === null || info === void 0 ? void 0 : info.world) !== null && _info$world !== void 0 ? _info$world : "utility";
      const context = await frame2._context(world);
      const injected = await context.injectedScript();
      progress2.throwIfAborted();
      const {
        log,
        matches,
        received,
        missingReceived
      } = await injected.evaluate(async (injected2, {
        info: info2,
        options: options2,
        callId
      }) => {
        const elements = info2 ? injected2.querySelectorAll(info2.parsed, document) : [];
        const isArray = options2.expression === "to.have.count" || options2.expression.endsWith(".array");
        let log2 = "";
        if (isArray) log2 = `  locator resolved to ${elements.length} element${elements.length === 1 ? "" : "s"}`;
        else if (elements.length > 1) throw injected2.strictModeViolationError(info2.parsed, elements);
        else if (elements.length) log2 = `  locator resolved to ${injected2.previewNode(elements[0])}`;
        if (callId) injected2.markTargetElements(new Set(elements), callId);
        return {
          log: log2,
          ...await injected2.expect(elements[0], options2, elements)
        };
      }, {
        info,
        options,
        callId: progress2.metadata.id
      });
      if (log) progress2.log(log);
      if (matches === options.isNot) {
        lastIntermediateResult.received = missingReceived ? "<element(s) not found>" : received;
        lastIntermediateResult.isSet = true;
        if (!missingReceived && !Array.isArray(received)) progress2.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
      }
      return {
        matches,
        received
      };
    }
    async _waitForFunctionExpression(metadata, expression, isFunction, arg, options, world = "main") {
      const controller = new _progress2.ProgressController(metadata, this);
      if (typeof options.pollingInterval === "number") (0, _utils2.assert)(options.pollingInterval > 0, "Cannot poll with non-positive interval: " + options.pollingInterval);
      expression = js2.normalizeEvaluationExpression(expression, isFunction);
      return controller.run(async (progress2) => {
        return this.retryWithProgressAndTimeouts(progress2, [100], async () => {
          const context = world === "main" ? await this._mainContext() : await this._utilityContext();
          const injectedScript = await context.injectedScript();
          const handle = await injectedScript.evaluateHandle((injected, {
            expression: expression2,
            isFunction: isFunction2,
            polling,
            arg: arg2
          }) => {
            const predicate = () => {
              let result3 = globalThis.eval(expression2);
              if (isFunction2 === true) {
                result3 = result3(arg2);
              } else if (isFunction2 === false) {
                result3 = result3;
              } else {
                if (typeof result3 === "function") result3 = result3(arg2);
              }
              return result3;
            };
            let fulfill;
            let reject;
            let aborted = false;
            const result2 = new Promise((f, r) => {
              fulfill = f;
              reject = r;
            });
            const next = () => {
              if (aborted) return;
              try {
                const success = predicate();
                if (success) {
                  fulfill(success);
                  return;
                }
                if (typeof polling !== "number") injected.builtinRequestAnimationFrame(next);
                else injected.builtinSetTimeout(next, polling);
              } catch (e) {
                reject(e);
              }
            };
            next();
            return {
              result: result2,
              abort: () => aborted = true
            };
          }, {
            expression,
            isFunction,
            polling: options.pollingInterval,
            arg
          });
          progress2.cleanupWhenAborted(() => handle.evaluate((h) => h.abort()).catch(() => {
          }));
          return handle.evaluateHandle((h) => h.result);
        });
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForFunctionValueInUtility(progress2, pageFunction) {
      const expression = `() => {
      const result = (${pageFunction})();
      if (!result)
        return result;
      return JSON.stringify(result);
    }`;
      const handle = await this._waitForFunctionExpression((0, _instrumentation2.serverSideCallMetadata)(), expression, true, void 0, {
        timeout: progress2.timeUntilDeadline()
      }, "utility");
      return JSON.parse(handle.rawValue());
    }
    async title() {
      const context = await this._utilityContext();
      return context.evaluate(() => document.title);
    }
    async rafrafTimeout(timeout) {
      if (timeout === 0) return;
      const context = await this._utilityContext();
      await Promise.all([
        // wait for double raf
        context.evaluate(() => new Promise((x) => {
          requestAnimationFrame(() => {
            requestAnimationFrame(x);
          });
        })),
        new Promise((fulfill) => setTimeout(fulfill, timeout))
      ]);
    }
    _onDetached() {
      this._stopNetworkIdleTimer();
      this._detachedScope.close(new Error("Frame was detached"));
      for (const data of this._contextData.values()) {
        if (data.context) data.context.contextDestroyed("Frame was detached");
        data.contextPromise.resolve({
          destroyedReason: "Frame was detached"
        });
      }
      if (this._parentFrame) this._parentFrame._childFrames.delete(this);
      this._parentFrame = null;
    }
    async _callOnElementOnceMatches(metadata, selector, body, taskData, options = {}, scope) {
      const callbackText = body.toString();
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}`);
        const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
          const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
          progress2.throwIfAborted();
          if (!resolved) return continuePolling;
          const {
            log,
            success,
            value
          } = await resolved.injected.evaluate((injected, {
            info,
            callbackText: callbackText2,
            taskData: taskData2,
            callId,
            root
          }) => {
            const callback = injected.eval(callbackText2);
            const element = injected.querySelector(info.parsed, root || document, info.strict);
            if (!element) return {
              success: false
            };
            const log2 = `  locator resolved to ${injected.previewNode(element)}`;
            if (callId) injected.markTargetElements(/* @__PURE__ */ new Set([element]), callId);
            return {
              log: log2,
              success: true,
              value: callback(injected, element, taskData2)
            };
          }, {
            info: resolved.info,
            callbackText,
            taskData,
            callId: progress2.metadata.id,
            root: resolved.frame === this ? scope : void 0
          });
          if (log) progress2.log(log);
          if (!success) return continuePolling;
          return value;
        });
        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
      }, this._page._timeoutSettings.timeout(options));
    }
    _setContext(world, context) {
      const data = this._contextData.get(world);
      data.context = context;
      if (context) data.contextPromise.resolve(context);
      else data.contextPromise = new _manualPromise2.ManualPromise();
    }
    _contextCreated(world, context) {
      const data = this._contextData.get(world);
      if (data.context) {
        data.context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
        this._setContext(world, null);
      }
      this._setContext(world, context);
    }
    _contextDestroyed(context) {
      if (this._detachedScope.isClosed()) return;
      context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
      for (const [world, data] of this._contextData) {
        if (data.context === context) this._setContext(world, null);
      }
    }
    _startNetworkIdleTimer() {
      (0, _utils2.assert)(!this._networkIdleTimer);
      if (this._firedLifecycleEvents.has("networkidle") || this._detachedScope.isClosed()) return;
      this._networkIdleTimer = setTimeout(() => {
        this._firedNetworkIdleSelf = true;
        this._page.mainFrame()._recalculateNetworkIdle();
      }, 500);
    }
    _stopNetworkIdleTimer() {
      if (this._networkIdleTimer) clearTimeout(this._networkIdleTimer);
      this._networkIdleTimer = void 0;
      this._firedNetworkIdleSelf = false;
    }
    async extendInjectedScript(source2, arg) {
      const context = await this._context("main");
      const injectedScriptHandle = await context.injectedScript();
      return injectedScriptHandle.evaluateHandle((injectedScript, {
        source: source3,
        arg: arg2
      }) => {
        return injectedScript.extend(source3, arg2);
      }, {
        source: source2,
        arg
      });
    }
    async resetStorageForCurrentOriginBestEffort(newStorage) {
      const context = await this._utilityContext();
      await context.evaluate(async ({
        ls
      }) => {
        sessionStorage.clear();
        localStorage.clear();
        for (const entry of ls || []) localStorage[entry.name] = entry.value;
        const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
        await Promise.all(registrations.map(async (r) => {
          if (!r.installing && !r.waiting && !r.active) r.unregister().catch(() => {
          });
          else await r.unregister().catch(() => {
          });
        }));
        for (const db of await ((_indexedDB$databases = (_indexedDB = indexedDB).databases) === null || _indexedDB$databases === void 0 ? void 0 : _indexedDB$databases.call(_indexedDB)) || []) {
          var _indexedDB$databases, _indexedDB;
          if (db.name) indexedDB.deleteDatabase(db.name);
        }
      }, {
        ls: newStorage === null || newStorage === void 0 ? void 0 : newStorage.localStorage
      }).catch(() => {
      });
    }
    _asLocator(selector) {
      return (0, _utils2.asLocator)(this._page.attribution.playwright.options.sdkLanguage, selector);
    }
  }
  frames.Frame = Frame;
  Frame.Events = {
    InternalNavigation: "internalnavigation",
    AddLifecycle: "addlifecycle",
    RemoveLifecycle: "removelifecycle"
  };
  class SignalBarrier {
    constructor(progress2) {
      this._progress = void 0;
      this._protectCount = 0;
      this._promise = new _manualPromise2.ManualPromise();
      this._progress = progress2;
      this.retain();
    }
    waitFor() {
      this.release();
      return this._promise;
    }
    async addFrameNavigation(frame2) {
      if (frame2.parentFrame()) return;
      this.retain();
      const waiter2 = _helper2.helper.waitForEvent(null, frame2, Frame.Events.InternalNavigation, (e) => {
        if (!e.isPublic) return false;
        if (!e.error && this._progress) this._progress.log(`  navigated to "${frame2._url}"`);
        return true;
      });
      await _utils2.LongStandingScope.raceMultiple([frame2._page.openScope, frame2._detachedScope], waiter2.promise).catch(() => {
      });
      waiter2.dispose();
      this.release();
    }
    retain() {
      ++this._protectCount;
    }
    release() {
      --this._protectCount;
      if (!this._protectCount) this._promise.resolve();
    }
  }
  function verifyLifecycle(name2, waitUntil) {
    if (waitUntil === "networkidle0") waitUntil = "networkidle";
    if (!types2.kLifecycleEvents.has(waitUntil)) throw new Error(`${name2}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  }
  function renderUnexpectedValue(expression, received) {
    if (expression === "to.be.checked") return received ? "checked" : "unchecked";
    if (expression === "to.be.unchecked") return received ? "unchecked" : "checked";
    if (expression === "to.be.visible") return received ? "visible" : "hidden";
    if (expression === "to.be.hidden") return received ? "hidden" : "visible";
    if (expression === "to.be.enabled") return received ? "enabled" : "disabled";
    if (expression === "to.be.disabled") return received ? "disabled" : "enabled";
    if (expression === "to.be.editable") return received ? "editable" : "readonly";
    if (expression === "to.be.readonly") return received ? "readonly" : "editable";
    if (expression === "to.be.empty") return received ? "empty" : "not empty";
    if (expression === "to.be.focused") return received ? "focused" : "not focused";
    return received;
  }
  return frames;
}
var input$3 = {};
var usKeyboardLayout$1 = {};
Object.defineProperty(usKeyboardLayout$1, "__esModule", {
  value: true
});
usKeyboardLayout$1.keypadLocation = usKeyboardLayout$1.USKeyboardLayout = void 0;
usKeyboardLayout$1.keypadLocation = 3;
usKeyboardLayout$1.USKeyboardLayout = {
  // Functions row
  "Escape": {
    "keyCode": 27,
    "key": "Escape"
  },
  "F1": {
    "keyCode": 112,
    "key": "F1"
  },
  "F2": {
    "keyCode": 113,
    "key": "F2"
  },
  "F3": {
    "keyCode": 114,
    "key": "F3"
  },
  "F4": {
    "keyCode": 115,
    "key": "F4"
  },
  "F5": {
    "keyCode": 116,
    "key": "F5"
  },
  "F6": {
    "keyCode": 117,
    "key": "F6"
  },
  "F7": {
    "keyCode": 118,
    "key": "F7"
  },
  "F8": {
    "keyCode": 119,
    "key": "F8"
  },
  "F9": {
    "keyCode": 120,
    "key": "F9"
  },
  "F10": {
    "keyCode": 121,
    "key": "F10"
  },
  "F11": {
    "keyCode": 122,
    "key": "F11"
  },
  "F12": {
    "keyCode": 123,
    "key": "F12"
  },
  // Numbers row
  "Backquote": {
    "keyCode": 192,
    "shiftKey": "~",
    "key": "`"
  },
  "Digit1": {
    "keyCode": 49,
    "shiftKey": "!",
    "key": "1"
  },
  "Digit2": {
    "keyCode": 50,
    "shiftKey": "@",
    "key": "2"
  },
  "Digit3": {
    "keyCode": 51,
    "shiftKey": "#",
    "key": "3"
  },
  "Digit4": {
    "keyCode": 52,
    "shiftKey": "$",
    "key": "4"
  },
  "Digit5": {
    "keyCode": 53,
    "shiftKey": "%",
    "key": "5"
  },
  "Digit6": {
    "keyCode": 54,
    "shiftKey": "^",
    "key": "6"
  },
  "Digit7": {
    "keyCode": 55,
    "shiftKey": "&",
    "key": "7"
  },
  "Digit8": {
    "keyCode": 56,
    "shiftKey": "*",
    "key": "8"
  },
  "Digit9": {
    "keyCode": 57,
    "shiftKey": "(",
    "key": "9"
  },
  "Digit0": {
    "keyCode": 48,
    "shiftKey": ")",
    "key": "0"
  },
  "Minus": {
    "keyCode": 189,
    "shiftKey": "_",
    "key": "-"
  },
  "Equal": {
    "keyCode": 187,
    "shiftKey": "+",
    "key": "="
  },
  "Backslash": {
    "keyCode": 220,
    "shiftKey": "|",
    "key": "\\"
  },
  "Backspace": {
    "keyCode": 8,
    "key": "Backspace"
  },
  // First row
  "Tab": {
    "keyCode": 9,
    "key": "Tab"
  },
  "KeyQ": {
    "keyCode": 81,
    "shiftKey": "Q",
    "key": "q"
  },
  "KeyW": {
    "keyCode": 87,
    "shiftKey": "W",
    "key": "w"
  },
  "KeyE": {
    "keyCode": 69,
    "shiftKey": "E",
    "key": "e"
  },
  "KeyR": {
    "keyCode": 82,
    "shiftKey": "R",
    "key": "r"
  },
  "KeyT": {
    "keyCode": 84,
    "shiftKey": "T",
    "key": "t"
  },
  "KeyY": {
    "keyCode": 89,
    "shiftKey": "Y",
    "key": "y"
  },
  "KeyU": {
    "keyCode": 85,
    "shiftKey": "U",
    "key": "u"
  },
  "KeyI": {
    "keyCode": 73,
    "shiftKey": "I",
    "key": "i"
  },
  "KeyO": {
    "keyCode": 79,
    "shiftKey": "O",
    "key": "o"
  },
  "KeyP": {
    "keyCode": 80,
    "shiftKey": "P",
    "key": "p"
  },
  "BracketLeft": {
    "keyCode": 219,
    "shiftKey": "{",
    "key": "["
  },
  "BracketRight": {
    "keyCode": 221,
    "shiftKey": "}",
    "key": "]"
  },
  // Second row
  "CapsLock": {
    "keyCode": 20,
    "key": "CapsLock"
  },
  "KeyA": {
    "keyCode": 65,
    "shiftKey": "A",
    "key": "a"
  },
  "KeyS": {
    "keyCode": 83,
    "shiftKey": "S",
    "key": "s"
  },
  "KeyD": {
    "keyCode": 68,
    "shiftKey": "D",
    "key": "d"
  },
  "KeyF": {
    "keyCode": 70,
    "shiftKey": "F",
    "key": "f"
  },
  "KeyG": {
    "keyCode": 71,
    "shiftKey": "G",
    "key": "g"
  },
  "KeyH": {
    "keyCode": 72,
    "shiftKey": "H",
    "key": "h"
  },
  "KeyJ": {
    "keyCode": 74,
    "shiftKey": "J",
    "key": "j"
  },
  "KeyK": {
    "keyCode": 75,
    "shiftKey": "K",
    "key": "k"
  },
  "KeyL": {
    "keyCode": 76,
    "shiftKey": "L",
    "key": "l"
  },
  "Semicolon": {
    "keyCode": 186,
    "shiftKey": ":",
    "key": ";"
  },
  "Quote": {
    "keyCode": 222,
    "shiftKey": '"',
    "key": "'"
  },
  "Enter": {
    "keyCode": 13,
    "key": "Enter",
    "text": "\r"
  },
  // Third row
  "ShiftLeft": {
    "keyCode": 160,
    "keyCodeWithoutLocation": 16,
    "key": "Shift",
    "location": 1
  },
  "KeyZ": {
    "keyCode": 90,
    "shiftKey": "Z",
    "key": "z"
  },
  "KeyX": {
    "keyCode": 88,
    "shiftKey": "X",
    "key": "x"
  },
  "KeyC": {
    "keyCode": 67,
    "shiftKey": "C",
    "key": "c"
  },
  "KeyV": {
    "keyCode": 86,
    "shiftKey": "V",
    "key": "v"
  },
  "KeyB": {
    "keyCode": 66,
    "shiftKey": "B",
    "key": "b"
  },
  "KeyN": {
    "keyCode": 78,
    "shiftKey": "N",
    "key": "n"
  },
  "KeyM": {
    "keyCode": 77,
    "shiftKey": "M",
    "key": "m"
  },
  "Comma": {
    "keyCode": 188,
    "shiftKey": "<",
    "key": ","
  },
  "Period": {
    "keyCode": 190,
    "shiftKey": ">",
    "key": "."
  },
  "Slash": {
    "keyCode": 191,
    "shiftKey": "?",
    "key": "/"
  },
  "ShiftRight": {
    "keyCode": 161,
    "keyCodeWithoutLocation": 16,
    "key": "Shift",
    "location": 2
  },
  // Last row
  "ControlLeft": {
    "keyCode": 162,
    "keyCodeWithoutLocation": 17,
    "key": "Control",
    "location": 1
  },
  "MetaLeft": {
    "keyCode": 91,
    "key": "Meta",
    "location": 1
  },
  "AltLeft": {
    "keyCode": 164,
    "keyCodeWithoutLocation": 18,
    "key": "Alt",
    "location": 1
  },
  "Space": {
    "keyCode": 32,
    "key": " "
  },
  "AltRight": {
    "keyCode": 165,
    "keyCodeWithoutLocation": 18,
    "key": "Alt",
    "location": 2
  },
  "AltGraph": {
    "keyCode": 225,
    "key": "AltGraph"
  },
  "MetaRight": {
    "keyCode": 92,
    "key": "Meta",
    "location": 2
  },
  "ContextMenu": {
    "keyCode": 93,
    "key": "ContextMenu"
  },
  "ControlRight": {
    "keyCode": 163,
    "keyCodeWithoutLocation": 17,
    "key": "Control",
    "location": 2
  },
  // Center block
  "PrintScreen": {
    "keyCode": 44,
    "key": "PrintScreen"
  },
  "ScrollLock": {
    "keyCode": 145,
    "key": "ScrollLock"
  },
  "Pause": {
    "keyCode": 19,
    "key": "Pause"
  },
  "PageUp": {
    "keyCode": 33,
    "key": "PageUp"
  },
  "PageDown": {
    "keyCode": 34,
    "key": "PageDown"
  },
  "Insert": {
    "keyCode": 45,
    "key": "Insert"
  },
  "Delete": {
    "keyCode": 46,
    "key": "Delete"
  },
  "Home": {
    "keyCode": 36,
    "key": "Home"
  },
  "End": {
    "keyCode": 35,
    "key": "End"
  },
  "ArrowLeft": {
    "keyCode": 37,
    "key": "ArrowLeft"
  },
  "ArrowUp": {
    "keyCode": 38,
    "key": "ArrowUp"
  },
  "ArrowRight": {
    "keyCode": 39,
    "key": "ArrowRight"
  },
  "ArrowDown": {
    "keyCode": 40,
    "key": "ArrowDown"
  },
  // Numpad
  "NumLock": {
    "keyCode": 144,
    "key": "NumLock"
  },
  "NumpadDivide": {
    "keyCode": 111,
    "key": "/",
    "location": 3
  },
  "NumpadMultiply": {
    "keyCode": 106,
    "key": "*",
    "location": 3
  },
  "NumpadSubtract": {
    "keyCode": 109,
    "key": "-",
    "location": 3
  },
  "Numpad7": {
    "keyCode": 36,
    "shiftKeyCode": 103,
    "key": "Home",
    "shiftKey": "7",
    "location": 3
  },
  "Numpad8": {
    "keyCode": 38,
    "shiftKeyCode": 104,
    "key": "ArrowUp",
    "shiftKey": "8",
    "location": 3
  },
  "Numpad9": {
    "keyCode": 33,
    "shiftKeyCode": 105,
    "key": "PageUp",
    "shiftKey": "9",
    "location": 3
  },
  "Numpad4": {
    "keyCode": 37,
    "shiftKeyCode": 100,
    "key": "ArrowLeft",
    "shiftKey": "4",
    "location": 3
  },
  "Numpad5": {
    "keyCode": 12,
    "shiftKeyCode": 101,
    "key": "Clear",
    "shiftKey": "5",
    "location": 3
  },
  "Numpad6": {
    "keyCode": 39,
    "shiftKeyCode": 102,
    "key": "ArrowRight",
    "shiftKey": "6",
    "location": 3
  },
  "NumpadAdd": {
    "keyCode": 107,
    "key": "+",
    "location": 3
  },
  "Numpad1": {
    "keyCode": 35,
    "shiftKeyCode": 97,
    "key": "End",
    "shiftKey": "1",
    "location": 3
  },
  "Numpad2": {
    "keyCode": 40,
    "shiftKeyCode": 98,
    "key": "ArrowDown",
    "shiftKey": "2",
    "location": 3
  },
  "Numpad3": {
    "keyCode": 34,
    "shiftKeyCode": 99,
    "key": "PageDown",
    "shiftKey": "3",
    "location": 3
  },
  "Numpad0": {
    "keyCode": 45,
    "shiftKeyCode": 96,
    "key": "Insert",
    "shiftKey": "0",
    "location": 3
  },
  "NumpadDecimal": {
    "keyCode": 46,
    "shiftKeyCode": 110,
    "key": "\0",
    "shiftKey": ".",
    "location": 3
  },
  "NumpadEnter": {
    "keyCode": 13,
    "key": "Enter",
    "text": "\r",
    "location": 3
  }
};
Object.defineProperty(input$3, "__esModule", {
  value: true
});
input$3.keypadLocation = input$3.Touchscreen = input$3.Mouse = input$3.Keyboard = void 0;
input$3.resolveSmartModifier = resolveSmartModifier;
input$3.resolveSmartModifierString = resolveSmartModifierString;
var _utils$J = requireUtils();
var keyboardLayout = _interopRequireWildcard$d(usKeyboardLayout$1);
function _getRequireWildcardCache$d(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$d = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$d(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$d(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
input$3.keypadLocation = keyboardLayout.keypadLocation;
const kModifiers = ["Alt", "Control", "Meta", "Shift"];
let Keyboard$1 = class Keyboard {
  constructor(raw) {
    this._pressedModifiers = /* @__PURE__ */ new Set();
    this._pressedKeys = /* @__PURE__ */ new Set();
    this._raw = void 0;
    this._raw = raw;
  }
  async down(key) {
    const description2 = this._keyDescriptionForString(key);
    const autoRepeat = this._pressedKeys.has(description2.code);
    this._pressedKeys.add(description2.code);
    if (kModifiers.includes(description2.key)) this._pressedModifiers.add(description2.key);
    const text = description2.text;
    await this._raw.keydown(this._pressedModifiers, description2.code, description2.keyCode, description2.keyCodeWithoutLocation, description2.key, description2.location, autoRepeat, text);
  }
  _keyDescriptionForString(str) {
    const keyString = resolveSmartModifierString(str);
    let description2 = usKeyboardLayout.get(keyString);
    (0, _utils$J.assert)(description2, `Unknown key: "${keyString}"`);
    const shift = this._pressedModifiers.has("Shift");
    description2 = shift && description2.shifted ? description2.shifted : description2;
    if (this._pressedModifiers.size > 1 || !this._pressedModifiers.has("Shift") && this._pressedModifiers.size === 1) return {
      ...description2,
      text: ""
    };
    return description2;
  }
  async up(key) {
    const description2 = this._keyDescriptionForString(key);
    if (kModifiers.includes(description2.key)) this._pressedModifiers.delete(description2.key);
    this._pressedKeys.delete(description2.code);
    await this._raw.keyup(this._pressedModifiers, description2.code, description2.keyCode, description2.keyCodeWithoutLocation, description2.key, description2.location);
  }
  async insertText(text) {
    await this._raw.sendText(text);
  }
  async type(text, options) {
    const delay = options && options.delay || void 0;
    for (const char of text) {
      if (usKeyboardLayout.has(char)) {
        await this.press(char, {
          delay
        });
      } else {
        if (delay) await new Promise((f) => setTimeout(f, delay));
        await this.insertText(char);
      }
    }
  }
  async press(key, options = {}) {
    function split(keyString) {
      const keys = [];
      let building = "";
      for (const char of keyString) {
        if (char === "+" && building) {
          keys.push(building);
          building = "";
        } else {
          building += char;
        }
      }
      keys.push(building);
      return keys;
    }
    const tokens = split(key);
    key = tokens[tokens.length - 1];
    for (let i = 0; i < tokens.length - 1; ++i) await this.down(tokens[i]);
    await this.down(key);
    if (options.delay) await new Promise((f) => setTimeout(f, options.delay));
    await this.up(key);
    for (let i = tokens.length - 2; i >= 0; --i) await this.up(tokens[i]);
  }
  async ensureModifiers(mm) {
    const modifiers = mm.map(resolveSmartModifier);
    for (const modifier of modifiers) {
      if (!kModifiers.includes(modifier)) throw new Error("Unknown modifier " + modifier);
    }
    const restore = Array.from(this._pressedModifiers);
    for (const key of kModifiers) {
      const needDown = modifiers.includes(key);
      const isDown = this._pressedModifiers.has(key);
      if (needDown && !isDown) await this.down(key);
      else if (!needDown && isDown) await this.up(key);
    }
    return restore;
  }
  _modifiers() {
    return this._pressedModifiers;
  }
};
input$3.Keyboard = Keyboard$1;
function resolveSmartModifierString(key) {
  if (key === "ControlOrMeta") return process.platform === "darwin" ? "Meta" : "Control";
  return key;
}
function resolveSmartModifier(m) {
  return resolveSmartModifierString(m);
}
let Mouse$1 = class Mouse {
  constructor(raw, page2) {
    this._keyboard = void 0;
    this._x = 0;
    this._y = 0;
    this._lastButton = "none";
    this._buttons = /* @__PURE__ */ new Set();
    this._raw = void 0;
    this._page = void 0;
    this._raw = raw;
    this._page = page2;
    this._keyboard = this._page.keyboard;
  }
  async move(x, y, options = {}, metadata) {
    if (metadata) metadata.point = {
      x,
      y
    };
    const {
      steps = 1
    } = options;
    const fromX = this._x;
    const fromY = this._y;
    this._x = x;
    this._y = y;
    for (let i = 1; i <= steps; i++) {
      const middleX = fromX + (x - fromX) * (i / steps);
      const middleY = fromY + (y - fromY) * (i / steps);
      await this._raw.move(middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);
    }
  }
  async down(options = {}, metadata) {
    if (metadata) metadata.point = {
      x: this._x,
      y: this._y
    };
    const {
      button = "left",
      clickCount = 1
    } = options;
    this._lastButton = button;
    this._buttons.add(button);
    await this._raw.down(this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);
  }
  async up(options = {}, metadata) {
    if (metadata) metadata.point = {
      x: this._x,
      y: this._y
    };
    const {
      button = "left",
      clickCount = 1
    } = options;
    this._lastButton = "none";
    this._buttons.delete(button);
    await this._raw.up(this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);
  }
  async click(x, y, options = {}, metadata) {
    if (metadata) metadata.point = {
      x,
      y
    };
    const {
      delay = null,
      clickCount = 1
    } = options;
    if (delay) {
      this.move(x, y, {
        forClick: true
      });
      for (let cc2 = 1; cc2 <= clickCount; ++cc2) {
        await this.down({
          ...options,
          clickCount: cc2
        });
        await new Promise((f) => setTimeout(f, delay));
        await this.up({
          ...options,
          clickCount: cc2
        });
        if (cc2 < clickCount) await new Promise((f) => setTimeout(f, delay));
      }
    } else {
      const promises = [];
      promises.push(this.move(x, y, {
        forClick: true
      }));
      for (let cc2 = 1; cc2 <= clickCount; ++cc2) {
        promises.push(this.down({
          ...options,
          clickCount: cc2
        }));
        promises.push(this.up({
          ...options,
          clickCount: cc2
        }));
      }
      await Promise.all(promises);
    }
  }
  async dblclick(x, y, options = {}) {
    await this.click(x, y, {
      ...options,
      clickCount: 2
    });
  }
  async wheel(deltaX, deltaY) {
    await this._raw.wheel(this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);
  }
};
input$3.Mouse = Mouse$1;
const aliases = /* @__PURE__ */ new Map([["ShiftLeft", ["Shift"]], ["ControlLeft", ["Control"]], ["AltLeft", ["Alt"]], ["MetaLeft", ["Meta"]], ["Enter", ["\n", "\r"]]]);
const usKeyboardLayout = buildLayoutClosure(keyboardLayout.USKeyboardLayout);
function buildLayoutClosure(layout) {
  const result2 = /* @__PURE__ */ new Map();
  for (const code in layout) {
    const definition = layout[code];
    const description2 = {
      key: definition.key || "",
      keyCode: definition.keyCode || 0,
      keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,
      code,
      text: definition.text || "",
      location: definition.location || 0
    };
    if (definition.key.length === 1) description2.text = description2.key;
    let shiftedDescription;
    if (definition.shiftKey) {
      (0, _utils$J.assert)(definition.shiftKey.length === 1);
      shiftedDescription = {
        ...description2
      };
      shiftedDescription.key = definition.shiftKey;
      shiftedDescription.text = definition.shiftKey;
      if (definition.shiftKeyCode) shiftedDescription.keyCode = definition.shiftKeyCode;
    }
    result2.set(code, {
      ...description2,
      shifted: shiftedDescription
    });
    if (aliases.has(code)) {
      for (const alias of aliases.get(code)) result2.set(alias, description2);
    }
    if (definition.location) continue;
    if (description2.key.length === 1) result2.set(description2.key, description2);
    if (shiftedDescription) result2.set(shiftedDescription.key, {
      ...shiftedDescription,
      shifted: void 0
    });
  }
  return result2;
}
let Touchscreen$1 = class Touchscreen {
  constructor(raw, page2) {
    this._raw = void 0;
    this._page = void 0;
    this._raw = raw;
    this._page = page2;
  }
  async tap(x, y, metadata) {
    if (metadata) metadata.point = {
      x,
      y
    };
    if (!this._page._browserContext._options.hasTouch) throw new Error("hasTouch must be enabled on the browser context before using the touchscreen.");
    await this._raw.tap(x, y, this._page.keyboard._modifiers());
  }
};
input$3.Touchscreen = Touchscreen$1;
var screenshotter = {};
Object.defineProperty(screenshotter, "__esModule", {
  value: true
});
screenshotter.Screenshotter = void 0;
screenshotter.validateScreenshotOptions = validateScreenshotOptions;
var _helper$5 = helper;
var _utils$I = requireUtils();
var _multimap = multimap;
function inPagePrepareForScreenshots(screenshotStyle, hideCaret, disableAnimations, syncAnimations) {
  if (syncAnimations) {
    const style = document.createElement("style");
    style.textContent = "body {}";
    document.head.appendChild(style);
    document.documentElement.getBoundingClientRect();
    style.remove();
  }
  if (!screenshotStyle && !hideCaret && !disableAnimations) return;
  const collectRoots = (root, roots2 = []) => {
    roots2.push(root);
    const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
    do {
      const node = walker.currentNode;
      const shadowRoot = node instanceof Element ? node.shadowRoot : null;
      if (shadowRoot) collectRoots(shadowRoot, roots2);
    } while (walker.nextNode());
    return roots2;
  };
  const roots = collectRoots(document);
  const cleanupCallbacks = [];
  if (screenshotStyle) {
    for (const root of roots) {
      const styleTag = document.createElement("style");
      styleTag.textContent = screenshotStyle;
      if (root === document) document.documentElement.append(styleTag);
      else root.append(styleTag);
      cleanupCallbacks.push(() => {
        styleTag.remove();
      });
    }
  }
  if (hideCaret) {
    const elements = /* @__PURE__ */ new Map();
    for (const root of roots) {
      root.querySelectorAll("input,textarea,[contenteditable]").forEach((element) => {
        elements.set(element, {
          value: element.style.getPropertyValue("caret-color"),
          priority: element.style.getPropertyPriority("caret-color")
        });
        element.style.setProperty("caret-color", "transparent", "important");
      });
    }
    cleanupCallbacks.push(() => {
      for (const [element, value] of elements) element.style.setProperty("caret-color", value.value, value.priority);
    });
  }
  if (disableAnimations) {
    const infiniteAnimationsToResume = /* @__PURE__ */ new Set();
    const handleAnimations = (root) => {
      for (const animation of root.getAnimations()) {
        if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation)) continue;
        const endTime = animation.effect.getComputedTiming().endTime;
        if (Number.isFinite(endTime)) {
          try {
            animation.finish();
          } catch (e) {
          }
        } else {
          try {
            animation.cancel();
            infiniteAnimationsToResume.add(animation);
          } catch (e) {
          }
        }
      }
    };
    for (const root of roots) {
      const handleRootAnimations = handleAnimations.bind(null, root);
      handleRootAnimations();
      root.addEventListener("transitionrun", handleRootAnimations);
      root.addEventListener("animationstart", handleRootAnimations);
      cleanupCallbacks.push(() => {
        root.removeEventListener("transitionrun", handleRootAnimations);
        root.removeEventListener("animationstart", handleRootAnimations);
      });
    }
    cleanupCallbacks.push(() => {
      for (const animation of infiniteAnimationsToResume) {
        try {
          animation.play();
        } catch (e) {
        }
      }
    });
  }
  window.__pwCleanupScreenshot = () => {
    for (const cleanupCallback of cleanupCallbacks) cleanupCallback();
    delete window.__pwCleanupScreenshot;
  };
}
class Screenshotter {
  constructor(page2) {
    this._queue = new TaskQueue();
    this._page = void 0;
    this._page = page2;
    this._queue = new TaskQueue();
  }
  async _originalViewportSize(progress2) {
    const originalViewportSize = this._page.viewportSize();
    let viewportSize = originalViewportSize;
    if (!viewportSize) viewportSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
      width: window.innerWidth,
      height: window.innerHeight
    }));
    return {
      viewportSize,
      originalViewportSize
    };
  }
  async _fullPageSize(progress2) {
    const fullPageSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => {
      if (!document.body || !document.documentElement) return null;
      return {
        width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clientWidth, document.documentElement.clientWidth),
        height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
      };
    });
    return fullPageSize;
  }
  async screenshotPage(progress2, options) {
    const format = validateScreenshotOptions(options);
    return this._queue.postTask(async () => {
      progress2.log("taking page screenshot");
      const {
        viewportSize
      } = await this._originalViewportSize(progress2);
      await this._preparePageForScreenshot(progress2, this._page.mainFrame(), options.style, options.caret !== "initial", options.animations === "disabled");
      progress2.throwIfAborted();
      if (options.fullPage) {
        const fullPageSize = await this._fullPageSize(progress2);
        let documentRect = {
          x: 0,
          y: 0,
          width: fullPageSize.width,
          height: fullPageSize.height
        };
        const fitsViewport = fullPageSize.width <= viewportSize.width && fullPageSize.height <= viewportSize.height;
        if (options.clip) documentRect = trimClipToSize(options.clip, documentRect);
        const buffer2 = await this._screenshot(progress2, format, documentRect, void 0, fitsViewport, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer2;
      }
      const viewportRect = options.clip ? trimClipToSize(options.clip, viewportSize) : {
        x: 0,
        y: 0,
        ...viewportSize
      };
      const buffer = await this._screenshot(progress2, format, void 0, viewportRect, true, options);
      progress2.throwIfAborted();
      await this._restorePageAfterScreenshot();
      return buffer;
    });
  }
  async screenshotElement(progress2, handle, options) {
    const format = validateScreenshotOptions(options);
    return this._queue.postTask(async () => {
      progress2.log("taking element screenshot");
      const {
        viewportSize
      } = await this._originalViewportSize(progress2);
      await this._preparePageForScreenshot(progress2, handle._frame, options.style, options.caret !== "initial", options.animations === "disabled");
      progress2.throwIfAborted();
      await handle._waitAndScrollIntoViewIfNeeded(
        progress2,
        true
        /* waitForVisible */
      );
      progress2.throwIfAborted();
      const boundingBox = await handle.boundingBox();
      (0, _utils$I.assert)(boundingBox, "Node is either not visible or not an HTMLElement");
      (0, _utils$I.assert)(boundingBox.width !== 0, "Node has 0 width.");
      (0, _utils$I.assert)(boundingBox.height !== 0, "Node has 0 height.");
      const fitsViewport = boundingBox.width <= viewportSize.width && boundingBox.height <= viewportSize.height;
      progress2.throwIfAborted();
      const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
        x: window.scrollX,
        y: window.scrollY
      }));
      const documentRect = {
        ...boundingBox
      };
      documentRect.x += scrollOffset.x;
      documentRect.y += scrollOffset.y;
      const buffer = await this._screenshot(progress2, format, _helper$5.helper.enclosingIntRect(documentRect), void 0, fitsViewport, options);
      progress2.throwIfAborted();
      await this._restorePageAfterScreenshot();
      return buffer;
    });
  }
  async _preparePageForScreenshot(progress2, frame2, screenshotStyle, hideCaret, disableAnimations) {
    if (disableAnimations) progress2.log("  disabled all CSS animations");
    const syncAnimations = this._page._delegate.shouldToggleStyleSheetToSyncAnimations();
    await this._page.safeNonStallingEvaluateInAllFrames("(" + inPagePrepareForScreenshots.toString() + `)(${JSON.stringify(screenshotStyle)}, ${hideCaret}, ${disableAnimations}, ${syncAnimations})`, "utility");
    if (!process.env.PW_TEST_SCREENSHOT_NO_FONTS_READY) {
      progress2.log("waiting for fonts to load...");
      await frame2.nonStallingEvaluateInExistingContext("document.fonts.ready", "utility").catch(() => {
      });
      progress2.log("fonts loaded");
    }
    progress2.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
  }
  async _restorePageAfterScreenshot() {
    await this._page.safeNonStallingEvaluateInAllFrames("window.__pwCleanupScreenshot && window.__pwCleanupScreenshot()", "utility");
  }
  async _maskElements(progress2, options) {
    const framesToParsedSelectors = new _multimap.MultiMap();
    const cleanup = async () => {
      await Promise.all([...framesToParsedSelectors.keys()].map(async (frame2) => {
        await frame2.hideHighlight();
      }));
    };
    if (!options.mask || !options.mask.length) return cleanup;
    await Promise.all((options.mask || []).map(async ({
      frame: frame2,
      selector
    }) => {
      const pair = await frame2.selectors.resolveFrameForSelector(selector);
      if (pair) framesToParsedSelectors.set(pair.frame, pair.info.parsed);
    }));
    progress2.throwIfAborted();
    await Promise.all([...framesToParsedSelectors.keys()].map(async (frame2) => {
      await frame2.maskSelectors(framesToParsedSelectors.get(frame2), options.maskColor || "#F0F");
    }));
    progress2.cleanupWhenAborted(cleanup);
    return cleanup;
  }
  async _screenshot(progress2, format, documentRect, viewportRect, fitsViewport, options) {
    var _options$quality;
    if (options.__testHookBeforeScreenshot) await options.__testHookBeforeScreenshot();
    progress2.throwIfAborted();
    const shouldSetDefaultBackground = options.omitBackground && format === "png";
    if (shouldSetDefaultBackground) {
      await this._page._delegate.setBackgroundColor({
        r: 0,
        g: 0,
        b: 0,
        a: 0
      });
      progress2.cleanupWhenAborted(() => this._page._delegate.setBackgroundColor());
    }
    progress2.throwIfAborted();
    const cleanupHighlight = await this._maskElements(progress2, options);
    progress2.throwIfAborted();
    const quality = format === "jpeg" ? (_options$quality = options.quality) !== null && _options$quality !== void 0 ? _options$quality : 80 : void 0;
    const buffer = await this._page._delegate.takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, options.scale || "device");
    progress2.throwIfAborted();
    await cleanupHighlight();
    progress2.throwIfAborted();
    if (shouldSetDefaultBackground) await this._page._delegate.setBackgroundColor();
    progress2.throwIfAborted();
    if (options.__testHookAfterScreenshot) await options.__testHookAfterScreenshot();
    return buffer;
  }
}
screenshotter.Screenshotter = Screenshotter;
class TaskQueue {
  constructor() {
    this._chain = void 0;
    this._chain = Promise.resolve();
  }
  postTask(task2) {
    const result2 = this._chain.then(task2);
    this._chain = result2.catch(() => {
    });
    return result2;
  }
}
function trimClipToSize(clip, size) {
  const p1 = {
    x: Math.max(0, Math.min(clip.x, size.width)),
    y: Math.max(0, Math.min(clip.y, size.height))
  };
  const p2 = {
    x: Math.max(0, Math.min(clip.x + clip.width, size.width)),
    y: Math.max(0, Math.min(clip.y + clip.height, size.height))
  };
  const result2 = {
    x: p1.x,
    y: p1.y,
    width: p2.x - p1.x,
    height: p2.y - p1.y
  };
  (0, _utils$I.assert)(result2.width && result2.height, "Clipped area is either empty or outside the resulting image");
  return result2;
}
function validateScreenshotOptions(options) {
  let format = null;
  if (options.type) {
    (0, _utils$I.assert)(options.type === "png" || options.type === "jpeg", "Unknown options.type value: " + options.type);
    format = options.type;
  }
  if (!format) format = "png";
  if (options.quality !== void 0) {
    (0, _utils$I.assert)(format === "jpeg", "options.quality is unsupported for the " + format + " screenshots");
    (0, _utils$I.assert)(typeof options.quality === "number", "Expected options.quality to be a number but found " + typeof options.quality);
    (0, _utils$I.assert)(Number.isInteger(options.quality), "Expected options.quality to be an integer");
    (0, _utils$I.assert)(options.quality >= 0 && options.quality <= 100, "Expected options.quality to be between 0 and 100 (inclusive), got " + options.quality);
  }
  if (options.clip) {
    (0, _utils$I.assert)(typeof options.clip.x === "number", "Expected options.clip.x to be a number but found " + typeof options.clip.x);
    (0, _utils$I.assert)(typeof options.clip.y === "number", "Expected options.clip.y to be a number but found " + typeof options.clip.y);
    (0, _utils$I.assert)(typeof options.clip.width === "number", "Expected options.clip.width to be a number but found " + typeof options.clip.width);
    (0, _utils$I.assert)(typeof options.clip.height === "number", "Expected options.clip.height to be a number but found " + typeof options.clip.height);
    (0, _utils$I.assert)(options.clip.width !== 0, "Expected options.clip.width not to be 0.");
    (0, _utils$I.assert)(options.clip.height !== 0, "Expected options.clip.height not to be 0.");
  }
  return format;
}
var console$1 = {};
Object.defineProperty(console$1, "__esModule", {
  value: true
});
console$1.ConsoleMessage = void 0;
class ConsoleMessage {
  constructor(page2, type, text, args, location2) {
    this._type = void 0;
    this._text = void 0;
    this._args = void 0;
    this._location = void 0;
    this._page = void 0;
    this._page = page2;
    this._type = type;
    this._text = text;
    this._args = args;
    this._location = location2 || {
      url: "",
      lineNumber: 0,
      columnNumber: 0
    };
  }
  page() {
    return this._page;
  }
  type() {
    return this._type;
  }
  text() {
    if (this._text === void 0) this._text = this._args.map((arg) => arg.preview()).join(" ");
    return this._text;
  }
  args() {
    return this._args;
  }
  location() {
    return this._location;
  }
}
console$1.ConsoleMessage = ConsoleMessage;
var accessibility$1 = {};
Object.defineProperty(accessibility$1, "__esModule", {
  value: true
});
accessibility$1.Accessibility = void 0;
let Accessibility$1 = class Accessibility {
  constructor(getAXTree) {
    this._getAXTree = void 0;
    this._getAXTree = getAXTree;
  }
  async snapshot(options = {}) {
    const {
      interestingOnly = true,
      root = null
    } = options;
    const {
      tree,
      needle
    } = await this._getAXTree(root || void 0);
    if (!interestingOnly) {
      if (root) return needle && serializeTree(needle)[0];
      return serializeTree(tree)[0];
    }
    const interestingNodes = /* @__PURE__ */ new Set();
    collectInterestingNodes(interestingNodes, tree, false);
    if (root && (!needle || !interestingNodes.has(needle))) return null;
    return serializeTree(needle || tree, interestingNodes)[0];
  }
};
accessibility$1.Accessibility = Accessibility$1;
function collectInterestingNodes(collection, node, insideControl) {
  if (node.isInteresting(insideControl)) collection.add(node);
  if (node.isLeafNode()) return;
  insideControl = insideControl || node.isControl();
  for (const child of node.children()) collectInterestingNodes(collection, child, insideControl);
}
function serializeTree(node, whitelistedNodes) {
  const children = [];
  for (const child of node.children()) children.push(...serializeTree(child, whitelistedNodes));
  if (whitelistedNodes && !whitelistedNodes.has(node)) return children;
  const serializedNode = node.serialize();
  if (children.length) serializedNode.children = children;
  return [serializedNode];
}
var fileChooser$1 = {};
Object.defineProperty(fileChooser$1, "__esModule", {
  value: true
});
fileChooser$1.FileChooser = void 0;
let FileChooser$1 = class FileChooser {
  constructor(page2, elementHandle2, isMultiple) {
    this._page = void 0;
    this._elementHandle = void 0;
    this._isMultiple = void 0;
    this._page = page2;
    this._elementHandle = elementHandle2;
    this._isMultiple = isMultiple;
  }
  element() {
    return this._elementHandle;
  }
  isMultiple() {
    return this._isMultiple;
  }
  page() {
    return this._page;
  }
};
fileChooser$1.FileChooser = FileChooser$1;
var hasRequiredPage$1;
function requirePage$1() {
  if (hasRequiredPage$1) return page$1;
  hasRequiredPage$1 = 1;
  Object.defineProperty(page$1, "__esModule", {
    value: true
  });
  page$1.Worker = page$1.PageBinding = page$1.Page = page$1.InitScript = void 0;
  var frames2 = _interopRequireWildcard2(requireFrames());
  var input2 = _interopRequireWildcard2(input$3);
  var js2 = _interopRequireWildcard2(javascript$1);
  var _screenshotter = screenshotter;
  var _timeoutSettings2 = timeoutSettings;
  var _browserContext2 = requireBrowserContext$1();
  var _console = console$1;
  var accessibility2 = _interopRequireWildcard2(accessibility$1);
  var _fileChooser = fileChooser$1;
  var _progress2 = progress;
  var _utils2 = requireUtils();
  var _manualPromise2 = requireManualPromise();
  var _debugLogger2 = debugLogger;
  var _comparators = comparators;
  var _instrumentation2 = instrumentation;
  var _selectorParser2 = selectorParser;
  var _utilityScriptSerializers2 = utilityScriptSerializers;
  var _errors2 = errors$2;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class Page extends _instrumentation2.SdkObject {
    constructor(delegate, browserContext2) {
      super(browserContext2, "page");
      this._closedState = "open";
      this._closedPromise = new _manualPromise2.ManualPromise();
      this._initialized = false;
      this._eventsToEmitAfterInitialized = [];
      this._crashed = false;
      this.openScope = new _utils2.LongStandingScope();
      this._browserContext = void 0;
      this.keyboard = void 0;
      this.mouse = void 0;
      this.touchscreen = void 0;
      this._timeoutSettings = void 0;
      this._delegate = void 0;
      this._emulatedSize = void 0;
      this._extraHTTPHeaders = void 0;
      this._emulatedMedia = {};
      this._interceptFileChooser = false;
      this._pageBindings = /* @__PURE__ */ new Map();
      this.initScripts = [];
      this._screenshotter = void 0;
      this._frameManager = void 0;
      this.accessibility = void 0;
      this._workers = /* @__PURE__ */ new Map();
      this.pdf = void 0;
      this.coverage = void 0;
      this._clientRequestInterceptor = void 0;
      this._serverRequestInterceptor = void 0;
      this._ownedContext = void 0;
      this._pageIsError = void 0;
      this._video = null;
      this._opener = void 0;
      this._isServerSideOnly = false;
      this._locatorHandlers = /* @__PURE__ */ new Map();
      this._lastLocatorHandlerUid = 0;
      this._locatorHandlerRunningCounter = 0;
      this._frameThrottler = new FrameThrottler(10, 35, 200);
      this._closeReason = void 0;
      this.attribution.page = this;
      this._delegate = delegate;
      this._browserContext = browserContext2;
      this.accessibility = new accessibility2.Accessibility(delegate.getAccessibilityTree.bind(delegate));
      this.keyboard = new input2.Keyboard(delegate.rawKeyboard);
      this.mouse = new input2.Mouse(delegate.rawMouse, this);
      this.touchscreen = new input2.Touchscreen(delegate.rawTouchscreen, this);
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings(browserContext2._timeoutSettings);
      this._screenshotter = new _screenshotter.Screenshotter(this);
      this._frameManager = new frames2.FrameManager(this);
      if (delegate.pdf) this.pdf = delegate.pdf.bind(delegate);
      this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    async initOpener(opener) {
      if (!opener) return;
      const openerPage = await opener.pageOrError();
      if (openerPage instanceof Page && !openerPage.isClosed()) this._opener = openerPage;
    }
    reportAsNew(error = void 0, contextEvent = _browserContext2.BrowserContext.Events.Page) {
      if (error) {
        if (this._browserContext.isClosingOrClosed()) return;
        this._setIsError(error);
      }
      this._initialized = true;
      this.emitOnContext(contextEvent, this);
      for (const {
        event,
        args
      } of this._eventsToEmitAfterInitialized) this._browserContext.emit(event, ...args);
      this._eventsToEmitAfterInitialized = [];
      if (this.isClosed()) this.emit(Page.Events.Close);
      else this.instrumentation.onPageOpen(this);
    }
    initializedOrUndefined() {
      return this._initialized ? this : void 0;
    }
    emitOnContext(event, ...args) {
      if (this._isServerSideOnly) return;
      this._browserContext.emit(event, ...args);
    }
    emitOnContextOnceInitialized(event, ...args) {
      if (this._isServerSideOnly) return;
      if (this._initialized) this._browserContext.emit(event, ...args);
      else this._eventsToEmitAfterInitialized.push({
        event,
        args
      });
    }
    async resetForReuse(metadata) {
      this.setDefaultNavigationTimeout(void 0);
      this.setDefaultTimeout(void 0);
      this._locatorHandlers.clear();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      await this.setClientRequestInterceptor(void 0);
      await this._setServerRequestInterceptor(void 0);
      await this.setFileChooserIntercepted(false);
      await this.mainFrame().goto(metadata, "about:blank");
      this._emulatedSize = void 0;
      this._emulatedMedia = {};
      this._extraHTTPHeaders = void 0;
      this._interceptFileChooser = false;
      await Promise.all([this._delegate.updateEmulatedViewportSize(), this._delegate.updateEmulateMedia(), this._delegate.updateFileChooserInterception()]);
      await this._delegate.resetForReuse();
    }
    _didClose() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      (0, _utils2.assert)(this._closedState !== "closed", "Page closed twice");
      this._closedState = "closed";
      this.emit(Page.Events.Close);
      this._closedPromise.resolve();
      this.instrumentation.onPageClose(this);
      this.openScope.close(new _errors2.TargetClosedError());
    }
    _didCrash() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      this.emit(Page.Events.Crash);
      this._crashed = true;
      this.instrumentation.onPageClose(this);
      this.openScope.close(new Error("Page crashed"));
    }
    async _onFileChooserOpened(handle) {
      let multiple;
      try {
        multiple = await handle.evaluate((element) => !!element.multiple);
      } catch (e) {
        return;
      }
      if (!this.listenerCount(Page.Events.FileChooser)) {
        handle.dispose();
        return;
      }
      const fileChooser2 = new _fileChooser.FileChooser(this, handle, multiple);
      this.emit(Page.Events.FileChooser, fileChooser2);
    }
    context() {
      return this._browserContext;
    }
    opener() {
      return this._opener;
    }
    mainFrame() {
      return this._frameManager.mainFrame();
    }
    frames() {
      return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async exposeBinding(name2, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name2)) throw new Error(`Function "${name2}" has been already registered`);
      if (this._browserContext._pageBindings.has(name2)) throw new Error(`Function "${name2}" has been already registered in the browser context`);
      const binding = new PageBinding(name2, playwrightBinding, needsHandle);
      this._pageBindings.set(name2, binding);
      await this._delegate.addInitScript(binding.initScript);
      await Promise.all(this.frames().map((frame2) => frame2.evaluateExpression(binding.initScript.source).catch((e) => {
      })));
    }
    async _removeExposedBindings() {
      for (const [key, binding] of this._pageBindings) {
        if (!binding.internal) this._pageBindings.delete(key);
      }
    }
    setExtraHTTPHeaders(headers2) {
      this._extraHTTPHeaders = headers2;
      return this._delegate.updateExtraHTTPHeaders();
    }
    extraHTTPHeaders() {
      return this._extraHTTPHeaders;
    }
    async _onBindingCalled(payload, context) {
      if (this._closedState === "closed") return;
      await PageBinding.dispatch(this, payload, context);
    }
    _addConsoleMessage(type, args, location2, text) {
      const message = new _console.ConsoleMessage(this, type, text, args, location2);
      const intercepted = this._frameManager.interceptConsoleMessage(message);
      if (intercepted) {
        args.forEach((arg) => arg.dispose());
        return;
      }
      this.emitOnContextOnceInitialized(_browserContext2.BrowserContext.Events.Console, message);
    }
    async reload(metadata, options) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        const [response] = await Promise.all([
          // Reload must be a new document, and should not be confused with a stray pushState.
          this.mainFrame()._waitForNavigation(progress2, true, options),
          this._delegate.reload()
        ]);
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goBack(metadata, options) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result2 = await this._delegate.goBack();
        if (!result2) return null;
        const response = await waitPromise;
        if (error) throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goForward(metadata, options) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result2 = await this._delegate.goForward();
        if (!result2) return null;
        const response = await waitPromise;
        if (error) throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    requestGC() {
      return this._delegate.requestGC();
    }
    registerLocatorHandler(selector, noWaitAfter) {
      const uid = ++this._lastLocatorHandlerUid;
      this._locatorHandlers.set(uid, {
        selector,
        noWaitAfter
      });
      return uid;
    }
    resolveLocatorHandler(uid, remove) {
      const handler = this._locatorHandlers.get(uid);
      if (remove) this._locatorHandlers.delete(uid);
      if (handler) {
        var _handler$resolved;
        (_handler$resolved = handler.resolved) === null || _handler$resolved === void 0 || _handler$resolved.resolve();
        handler.resolved = void 0;
      }
    }
    unregisterLocatorHandler(uid) {
      this._locatorHandlers.delete(uid);
    }
    async performLocatorHandlersCheckpoint(progress2) {
      if (this._locatorHandlerRunningCounter) return;
      for (const [uid, handler] of this._locatorHandlers) {
        if (!handler.resolved) {
          if (await this.mainFrame().isVisibleInternal(handler.selector, {
            strict: true
          })) {
            handler.resolved = new _manualPromise2.ManualPromise();
            this.emit(Page.Events.LocatorHandlerTriggered, uid);
          }
        }
        if (handler.resolved) {
          ++this._locatorHandlerRunningCounter;
          progress2.log(`  found ${(0, _utils2.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)}, intercepting action to run the handler`);
          const promise = handler.resolved.then(async () => {
            progress2.throwIfAborted();
            if (!handler.noWaitAfter) {
              progress2.log(`  locator handler has finished, waiting for ${(0, _utils2.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)} to be hidden`);
              await this.mainFrame().waitForSelectorInternal(progress2, handler.selector, false, {
                state: "hidden"
              });
            } else {
              progress2.log(`  locator handler has finished`);
            }
          });
          await this.openScope.race(promise).finally(() => --this._locatorHandlerRunningCounter);
          progress2.throwIfAborted();
          progress2.log(`  interception handler has finished, continuing`);
        }
      }
    }
    async emulateMedia(options) {
      if (options.media !== void 0) this._emulatedMedia.media = options.media;
      if (options.colorScheme !== void 0) this._emulatedMedia.colorScheme = options.colorScheme;
      if (options.reducedMotion !== void 0) this._emulatedMedia.reducedMotion = options.reducedMotion;
      if (options.forcedColors !== void 0) this._emulatedMedia.forcedColors = options.forcedColors;
      await this._delegate.updateEmulateMedia();
    }
    emulatedMedia() {
      var _contextOptions$color, _contextOptions$reduc, _contextOptions$force;
      const contextOptions = this._browserContext._options;
      return {
        media: this._emulatedMedia.media || "no-override",
        colorScheme: this._emulatedMedia.colorScheme !== void 0 ? this._emulatedMedia.colorScheme : (_contextOptions$color = contextOptions.colorScheme) !== null && _contextOptions$color !== void 0 ? _contextOptions$color : "light",
        reducedMotion: this._emulatedMedia.reducedMotion !== void 0 ? this._emulatedMedia.reducedMotion : (_contextOptions$reduc = contextOptions.reducedMotion) !== null && _contextOptions$reduc !== void 0 ? _contextOptions$reduc : "no-preference",
        forcedColors: this._emulatedMedia.forcedColors !== void 0 ? this._emulatedMedia.forcedColors : (_contextOptions$force = contextOptions.forcedColors) !== null && _contextOptions$force !== void 0 ? _contextOptions$force : "none"
      };
    }
    async setViewportSize(viewportSize) {
      this._emulatedSize = {
        viewport: {
          ...viewportSize
        },
        screen: {
          ...viewportSize
        }
      };
      await this._delegate.updateEmulatedViewportSize();
    }
    viewportSize() {
      var _this$emulatedSize;
      return ((_this$emulatedSize = this.emulatedSize()) === null || _this$emulatedSize === void 0 ? void 0 : _this$emulatedSize.viewport) || null;
    }
    emulatedSize() {
      if (this._emulatedSize) return this._emulatedSize;
      const contextOptions = this._browserContext._options;
      return contextOptions.viewport ? {
        viewport: contextOptions.viewport,
        screen: contextOptions.screen || contextOptions.viewport
      } : null;
    }
    async bringToFront() {
      await this._delegate.bringToFront();
    }
    async addInitScript(source2) {
      const initScript = new InitScript(source2);
      this.initScripts.push(initScript);
      await this._delegate.addInitScript(initScript);
    }
    async _removeInitScripts() {
      this.initScripts = this.initScripts.filter((script) => script.internal);
      await this._delegate.removeNonInternalInitScripts();
    }
    needsRequestInterception() {
      return !!this._clientRequestInterceptor || !!this._serverRequestInterceptor || !!this._browserContext._requestInterceptor;
    }
    async setClientRequestInterceptor(handler) {
      this._clientRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async _setServerRequestInterceptor(handler) {
      this._serverRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async expectScreenshot(metadata, options = {}) {
      const locator2 = options.locator;
      const rafrafScreenshot = locator2 ? async (progress2, timeout) => {
        return await locator2.frame.rafrafTimeoutScreenshotElementWithProgress(progress2, locator2.selector, timeout, options || {});
      } : async (progress2, timeout) => {
        await this.performLocatorHandlersCheckpoint(progress2);
        await this.mainFrame().rafrafTimeout(timeout);
        return await this._screenshotter.screenshotPage(progress2, options || {});
      };
      const comparator = (0, _comparators.getComparator)("image/png");
      const controller = new _progress2.ProgressController(metadata, this);
      if (!options.expected && options.isNot) return {
        errorMessage: '"not" matcher requires expected result'
      };
      try {
        const format = (0, _screenshotter.validateScreenshotOptions)(options || {});
        if (format !== "png") throw new Error("Only PNG screenshots are supported");
      } catch (error) {
        return {
          errorMessage: error.message
        };
      }
      let intermediateResult = void 0;
      const areEqualScreenshots = (actual, expected, previous) => {
        const comparatorResult = actual && expected ? comparator(actual, expected, options) : void 0;
        if (comparatorResult !== void 0 && !!comparatorResult === !!options.isNot) return true;
        if (comparatorResult) intermediateResult = {
          errorMessage: comparatorResult.errorMessage,
          diff: comparatorResult.diff,
          actual,
          previous
        };
        return false;
      };
      const callTimeout = this._timeoutSettings.timeout(options);
      return controller.run(async (progress2) => {
        let actual;
        let previous;
        const pollIntervals = [0, 100, 250, 500];
        progress2.log(`${metadata.apiName}${callTimeout ? ` with timeout ${callTimeout}ms` : ""}`);
        if (options.expected) progress2.log(`  verifying given screenshot expectation`);
        else progress2.log(`  generating new stable screenshot expectation`);
        let isFirstIteration = true;
        while (true) {
          var _pollIntervals$shift;
          progress2.throwIfAborted();
          if (this.isClosed()) throw new Error("The page has closed");
          const screenshotTimeout = (_pollIntervals$shift = pollIntervals.shift()) !== null && _pollIntervals$shift !== void 0 ? _pollIntervals$shift : 1e3;
          if (screenshotTimeout) progress2.log(`waiting ${screenshotTimeout}ms before taking screenshot`);
          previous = actual;
          actual = await rafrafScreenshot(progress2, screenshotTimeout).catch((e) => {
            progress2.log(`failed to take screenshot - ` + e.message);
            return void 0;
          });
          if (!actual) continue;
          const expectation = options.expected && isFirstIteration ? options.expected : previous;
          if (areEqualScreenshots(actual, expectation, previous)) break;
          if (intermediateResult) progress2.log(intermediateResult.errorMessage);
          isFirstIteration = false;
        }
        if (!isFirstIteration) progress2.log(`captured a stable screenshot`);
        if (!options.expected) return {
          actual
        };
        if (isFirstIteration) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        if (areEqualScreenshots(actual, options.expected, previous)) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        throw new Error(intermediateResult.errorMessage);
      }, callTimeout).catch((e) => {
        if (js2.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser2.isInvalidSelectorError)(e)) throw e;
        return {
          log: e.message ? [...metadata.log, e.message] : metadata.log,
          ...intermediateResult,
          errorMessage: e.message
        };
      });
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress2.ProgressController(metadata, this);
      return controller.run((progress2) => this._screenshotter.screenshotPage(progress2, options), this._timeoutSettings.timeout(options));
    }
    async close(metadata, options = {}) {
      if (this._closedState === "closed") return;
      if (options.reason) this._closeReason = options.reason;
      const runBeforeUnload = !!options.runBeforeUnload;
      if (this._closedState !== "closing") {
        this._closedState = "closing";
        await this._delegate.closePage(runBeforeUnload).catch((e) => _debugLogger2.debugLogger.log("error", e));
      }
      if (!runBeforeUnload) await this._closedPromise;
      if (this._ownedContext) await this._ownedContext.close(options);
    }
    _setIsError(error) {
      this._pageIsError = error;
      this._frameManager.createDummyMainFrameIfNeeded();
    }
    isClosed() {
      return this._closedState === "closed";
    }
    hasCrashed() {
      return this._crashed;
    }
    isClosedOrClosingOrCrashed() {
      return this._closedState !== "open" || this._crashed;
    }
    _addWorker(workerId, worker2) {
      this._workers.set(workerId, worker2);
      this.emit(Page.Events.Worker, worker2);
    }
    _removeWorker(workerId) {
      const worker2 = this._workers.get(workerId);
      if (!worker2) return;
      worker2.didClose();
      this._workers.delete(workerId);
    }
    _clearWorkers() {
      for (const [workerId, worker2] of this._workers) {
        worker2.didClose();
        this._workers.delete(workerId);
      }
    }
    async setFileChooserIntercepted(enabled) {
      this._interceptFileChooser = enabled;
      await this._delegate.updateFileChooserInterception();
    }
    fileChooserIntercepted() {
      return this._interceptFileChooser;
    }
    frameNavigatedToNewDocument(frame2) {
      this.emit(Page.Events.InternalFrameNavigatedToNewDocument, frame2);
      const origin = frame2.origin();
      if (origin) this._browserContext.addVisitedOrigin(origin);
    }
    allInitScripts() {
      const bindings = [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
      return [...bindings.map((binding) => binding.initScript), ...this._browserContext.initScripts, ...this.initScripts];
    }
    getBinding(name2) {
      return this._pageBindings.get(name2) || this._browserContext._pageBindings.get(name2);
    }
    setScreencastOptions(options) {
      this._delegate.setScreencastOptions(options).catch((e) => _debugLogger2.debugLogger.log("error", e));
      this._frameThrottler.setThrottlingEnabled(!!options);
    }
    throttleScreencastFrameAck(ack) {
      this._frameThrottler.ack(ack);
    }
    temporarilyDisableTracingScreencastThrottling() {
      this._frameThrottler.recharge();
    }
    async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
      await Promise.all(this.frames().map(async (frame2) => {
        try {
          await frame2.nonStallingEvaluateInExistingContext(expression, world);
        } catch (e) {
          if (options.throwOnJSErrors && js2.isJavaScriptErrorInEvaluate(e)) throw e;
        }
      }));
    }
    async hideHighlight() {
      await Promise.all(this.frames().map((frame2) => frame2.hideHighlight().catch(() => {
      })));
    }
    markAsServerSideOnly() {
      this._isServerSideOnly = true;
    }
  }
  page$1.Page = Page;
  Page.Events = {
    Close: "close",
    Crash: "crash",
    Download: "download",
    FileChooser: "filechooser",
    FrameAttached: "frameattached",
    FrameDetached: "framedetached",
    InternalFrameNavigatedToNewDocument: "internalframenavigatedtonewdocument",
    LocatorHandlerTriggered: "locatorhandlertriggered",
    ScreencastFrame: "screencastframe",
    Video: "video",
    WebSocket: "websocket",
    Worker: "worker"
  };
  class Worker2 extends _instrumentation2.SdkObject {
    constructor(parent, url) {
      super(parent, "worker");
      this._url = void 0;
      this._executionContextPromise = void 0;
      this._executionContextCallback = void 0;
      this._existingExecutionContext = null;
      this.openScope = new _utils2.LongStandingScope();
      this._url = url;
      this._executionContextCallback = () => {
      };
      this._executionContextPromise = new Promise((x) => this._executionContextCallback = x);
    }
    _createExecutionContext(delegate) {
      this._existingExecutionContext = new js2.ExecutionContext(this, delegate, "worker");
      this._executionContextCallback(this._existingExecutionContext);
    }
    url() {
      return this._url;
    }
    didClose() {
      if (this._existingExecutionContext) this._existingExecutionContext.contextDestroyed("Worker was closed");
      this.emit(Worker2.Events.Close, this);
      this.openScope.close(new Error("Worker closed"));
    }
    async evaluateExpression(expression, isFunction, arg) {
      return js2.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: true,
        isFunction
      }, arg);
    }
    async evaluateExpressionHandle(expression, isFunction, arg) {
      return js2.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: false,
        isFunction
      }, arg);
    }
  }
  page$1.Worker = Worker2;
  Worker2.Events = {
    Close: "close"
  };
  class PageBinding {
    constructor(name2, playwrightFunction, needsHandle) {
      this.name = void 0;
      this.playwrightFunction = void 0;
      this.initScript = void 0;
      this.needsHandle = void 0;
      this.internal = void 0;
      this.name = name2;
      this.playwrightFunction = playwrightFunction;
      this.initScript = new InitScript(
        `(${addPageBinding.toString()})(${JSON.stringify(PageBinding.kPlaywrightBinding)}, ${JSON.stringify(name2)}, ${needsHandle}, (${_utilityScriptSerializers2.source})())`,
        true
        /* internal */
      );
      this.needsHandle = needsHandle;
      this.internal = name2.startsWith("__pw");
    }
    static async dispatch(page2, payload, context) {
      const {
        name: name2,
        seq,
        serializedArgs
      } = JSON.parse(payload);
      try {
        (0, _utils2.assert)(context.world);
        const binding = page2.getBinding(name2);
        if (!binding) throw new Error(`Function "${name2}" is not exposed`);
        let result2;
        if (binding.needsHandle) {
          const handle = await context.evaluateHandle(takeHandle, {
            name: name2,
            seq
          }).catch((e) => null);
          result2 = await binding.playwrightFunction({
            frame: context.frame,
            page: page2,
            context: page2._browserContext
          }, handle);
        } else {
          if (!Array.isArray(serializedArgs)) throw new Error(`serializedArgs is not an array. This can happen when Array.prototype.toJSON is defined incorrectly`);
          const args = serializedArgs.map((a) => (0, _utilityScriptSerializers2.parseEvaluationResultValue)(a));
          result2 = await binding.playwrightFunction({
            frame: context.frame,
            page: page2,
            context: page2._browserContext
          }, ...args);
        }
        context.evaluate(deliverResult, {
          name: name2,
          seq,
          result: result2
        }).catch((e) => _debugLogger2.debugLogger.log("error", e));
      } catch (error) {
        context.evaluate(deliverResult, {
          name: name2,
          seq,
          error
        }).catch((e) => _debugLogger2.debugLogger.log("error", e));
      }
      function takeHandle(arg) {
        const handle = globalThis[arg.name]["handles"].get(arg.seq);
        globalThis[arg.name]["handles"].delete(arg.seq);
        return handle;
      }
      function deliverResult(arg) {
        const callbacks = globalThis[arg.name]["callbacks"];
        if ("error" in arg) callbacks.get(arg.seq).reject(arg.error);
        else callbacks.get(arg.seq).resolve(arg.result);
        callbacks.delete(arg.seq);
      }
    }
  }
  page$1.PageBinding = PageBinding;
  PageBinding.kPlaywrightBinding = "__playwright__binding__";
  function addPageBinding(playwrightBinding, bindingName, needsHandle, utilityScriptSerializers2) {
    const binding = globalThis[playwrightBinding];
    globalThis[bindingName] = (...args) => {
      const me = globalThis[bindingName];
      if (needsHandle && args.slice(1).some((arg) => arg !== void 0)) throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
      let callbacks = me["callbacks"];
      if (!callbacks) {
        callbacks = /* @__PURE__ */ new Map();
        me["callbacks"] = callbacks;
      }
      const seq = (me["lastSeq"] || 0) + 1;
      me["lastSeq"] = seq;
      let handles = me["handles"];
      if (!handles) {
        handles = /* @__PURE__ */ new Map();
        me["handles"] = handles;
      }
      const promise = new Promise((resolve, reject) => callbacks.set(seq, {
        resolve,
        reject
      }));
      let payload;
      if (needsHandle) {
        handles.set(seq, args[0]);
        payload = {
          name: bindingName,
          seq
        };
      } else {
        const serializedArgs = [];
        for (let i = 0; i < args.length; i++) {
          serializedArgs[i] = utilityScriptSerializers2.serializeAsCallArgument(args[i], (v) => {
            return {
              fallThrough: v
            };
          });
        }
        payload = {
          name: bindingName,
          seq,
          serializedArgs
        };
      }
      binding(JSON.stringify(payload));
      return promise;
    };
    globalThis[bindingName].__installed = true;
  }
  class InitScript {
    constructor(source2, internal) {
      this.source = void 0;
      this.internal = void 0;
      const guid = (0, _utils2.createGuid)();
      this.source = `(() => {
      globalThis.__pwInitScripts = globalThis.__pwInitScripts || {};
      const hasInitScript = globalThis.__pwInitScripts[${JSON.stringify(guid)}];
      if (hasInitScript)
        return;
      globalThis.__pwInitScripts[${JSON.stringify(guid)}] = true;
      ${source2}
    })();`;
      this.internal = !!internal;
    }
  }
  page$1.InitScript = InitScript;
  class FrameThrottler {
    constructor(nonThrottledFrames, defaultInterval, throttlingInterval) {
      this._acks = [];
      this._defaultInterval = void 0;
      this._throttlingInterval = void 0;
      this._nonThrottledFrames = void 0;
      this._budget = void 0;
      this._throttlingEnabled = false;
      this._timeoutId = void 0;
      this._nonThrottledFrames = nonThrottledFrames;
      this._budget = nonThrottledFrames;
      this._defaultInterval = defaultInterval;
      this._throttlingInterval = throttlingInterval;
      this._tick();
    }
    dispose() {
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._timeoutId = void 0;
      }
    }
    setThrottlingEnabled(enabled) {
      this._throttlingEnabled = enabled;
    }
    recharge() {
      for (const ack of this._acks) ack();
      this._acks = [];
      this._budget = this._nonThrottledFrames;
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._tick();
      }
    }
    ack(ack) {
      if (!this._timeoutId) {
        ack();
        return;
      }
      this._acks.push(ack);
    }
    _tick() {
      const ack = this._acks.shift();
      if (ack) {
        --this._budget;
        ack();
      }
      if (this._throttlingEnabled && this._budget <= 0) {
        this._timeoutId = setTimeout(() => this._tick(), this._throttlingInterval);
      } else {
        this._timeoutId = setTimeout(() => this._tick(), this._defaultInterval);
      }
    }
  }
  return page$1;
}
var _debugger = {};
var debug = {};
Object.defineProperty(debug, "__esModule", {
  value: true
});
debug.slowMoActions = debug.pausesBeforeInputActions = debug.commandsWithTracingSnapshots = void 0;
debug.slowMoActions = /* @__PURE__ */ new Set(["Page.goBack", "Page.goForward", "Page.reload", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.fill", "Frame.focus", "Frame.goto", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
debug.commandsWithTracingSnapshots = /* @__PURE__ */ new Set(["EventTarget.waitForEventInfo", "BrowserContext.waitForEventInfo", "Page.waitForEventInfo", "WebSocket.waitForEventInfo", "ElectronApplication.waitForEventInfo", "AndroidDevice.waitForEventInfo", "Page.emulateMedia", "Page.goBack", "Page.goForward", "Page.reload", "Page.expectScreenshot", "Page.screenshot", "Page.setViewportSize", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.evalOnSelector", "Frame.evalOnSelectorAll", "Frame.addScriptTag", "Frame.addStyleTag", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.evaluateExpression", "Frame.evaluateExpressionHandle", "Frame.fill", "Frame.focus", "Frame.getAttribute", "Frame.goto", "Frame.hover", "Frame.innerHTML", "Frame.innerText", "Frame.inputValue", "Frame.isChecked", "Frame.isDisabled", "Frame.isEnabled", "Frame.isHidden", "Frame.isVisible", "Frame.isEditable", "Frame.press", "Frame.selectOption", "Frame.setContent", "Frame.setInputFiles", "Frame.tap", "Frame.textContent", "Frame.type", "Frame.uncheck", "Frame.waitForTimeout", "Frame.waitForFunction", "Frame.waitForSelector", "Frame.expect", "JSHandle.evaluateExpression", "ElementHandle.evaluateExpression", "JSHandle.evaluateExpressionHandle", "ElementHandle.evaluateExpressionHandle", "ElementHandle.evalOnSelector", "ElementHandle.evalOnSelectorAll", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.innerHTML", "ElementHandle.innerText", "ElementHandle.inputValue", "ElementHandle.isChecked", "ElementHandle.isDisabled", "ElementHandle.isEditable", "ElementHandle.isEnabled", "ElementHandle.isHidden", "ElementHandle.isVisible", "ElementHandle.press", "ElementHandle.screenshot", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.textContent", "ElementHandle.type", "ElementHandle.uncheck", "ElementHandle.waitForElementState", "ElementHandle.waitForSelector"]);
debug.pausesBeforeInputActions = /* @__PURE__ */ new Set(["Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.fill", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.fill", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.selectOption", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
var hasRequired_debugger;
function require_debugger() {
  if (hasRequired_debugger) return _debugger;
  hasRequired_debugger = 1;
  Object.defineProperty(_debugger, "__esModule", {
    value: true
  });
  _debugger.Debugger = void 0;
  _debugger.shouldSlowMo = shouldSlowMo;
  var _events2 = require$$0$1;
  var _utils2 = requireUtils();
  var _browserContext2 = requireBrowserContext$1();
  var _debug2 = debug;
  const symbol = Symbol("Debugger");
  class Debugger extends _events2.EventEmitter {
    constructor(context) {
      super();
      this._pauseOnNextStatement = false;
      this._pausedCallsMetadata = /* @__PURE__ */ new Map();
      this._enabled = void 0;
      this._context = void 0;
      this._muted = false;
      this._slowMo = void 0;
      this._context = context;
      this._context[symbol] = this;
      this._enabled = (0, _utils2.debugMode)() === "inspector";
      if (this._enabled) this.pauseOnNextStatement();
      context.instrumentation.addListener(this, context);
      this._context.once(_browserContext2.BrowserContext.Events.Close, () => {
        this._context.instrumentation.removeListener(this);
      });
      this._slowMo = this._context._browser.options.slowMo;
    }
    async setMuted(muted) {
      this._muted = muted;
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._muted) return;
      if (shouldPauseOnCall(sdkObject, metadata) || this._pauseOnNextStatement && shouldPauseBeforeStep(metadata)) await this.pause(sdkObject, metadata);
    }
    async _doSlowMo() {
      await new Promise((f) => setTimeout(f, this._slowMo));
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._slowMo && shouldSlowMo(metadata)) await this._doSlowMo();
    }
    async onBeforeInputAction(sdkObject, metadata) {
      if (this._muted) return;
      if (this._enabled && this._pauseOnNextStatement) await this.pause(sdkObject, metadata);
    }
    async pause(sdkObject, metadata) {
      if (this._muted) return;
      this._enabled = true;
      metadata.pauseStartTime = (0, _utils2.monotonicTime)();
      const result2 = new Promise((resolve) => {
        this._pausedCallsMetadata.set(metadata, {
          resolve,
          sdkObject
        });
      });
      this.emit(Debugger.Events.PausedStateChanged);
      return result2;
    }
    resume(step) {
      if (!this.isPaused()) return;
      this._pauseOnNextStatement = step;
      const endTime = (0, _utils2.monotonicTime)();
      for (const [metadata, {
        resolve
      }] of this._pausedCallsMetadata) {
        metadata.pauseEndTime = endTime;
        resolve();
      }
      this._pausedCallsMetadata.clear();
      this.emit(Debugger.Events.PausedStateChanged);
    }
    pauseOnNextStatement() {
      this._pauseOnNextStatement = true;
    }
    isPaused(metadata) {
      if (metadata) return this._pausedCallsMetadata.has(metadata);
      return !!this._pausedCallsMetadata.size;
    }
    pausedDetails() {
      const result2 = [];
      for (const [metadata, {
        sdkObject
      }] of this._pausedCallsMetadata) result2.push({
        metadata,
        sdkObject
      });
      return result2;
    }
  }
  _debugger.Debugger = Debugger;
  Debugger.Events = {
    PausedStateChanged: "pausedstatechanged"
  };
  function shouldPauseOnCall(sdkObject, metadata) {
    var _sdkObject$attributio;
    if (sdkObject.attribution.playwright.options.isServer) return false;
    if (!((_sdkObject$attributio = sdkObject.attribution.browser) !== null && _sdkObject$attributio !== void 0 && _sdkObject$attributio.options.headful) && !(0, _utils2.isUnderTest)()) return false;
    return metadata.method === "pause";
  }
  function shouldPauseBeforeStep(metadata) {
    if (!metadata.apiName) return false;
    if (metadata.method === "close") return true;
    if (metadata.method === "waitForSelector" || metadata.method === "waitForEventInfo") return false;
    const step = metadata.type + "." + metadata.method;
    return _debug2.commandsWithTracingSnapshots.has(step) && !_debug2.pausesBeforeInputActions.has(metadata.type + "." + metadata.method);
  }
  function shouldSlowMo(metadata) {
    return _debug2.slowMoActions.has(metadata.type + "." + metadata.method);
  }
  return _debugger;
}
var tracing$1 = {};
var artifact$1 = {};
Object.defineProperty(artifact$1, "__esModule", {
  value: true
});
artifact$1.Artifact = void 0;
var _fs$8 = _interopRequireDefault$c(require$$0$2);
var _utils$H = requireUtils();
var _manualPromise$2 = requireManualPromise();
var _instrumentation$6 = instrumentation;
var _errors$5 = errors$2;
function _interopRequireDefault$c(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
let Artifact$1 = class Artifact extends _instrumentation$6.SdkObject {
  constructor(parent, localPath, unaccessibleErrorMessage, cancelCallback) {
    super(parent, "artifact");
    this._localPath = void 0;
    this._unaccessibleErrorMessage = void 0;
    this._cancelCallback = void 0;
    this._finishedPromise = new _manualPromise$2.ManualPromise();
    this._saveCallbacks = [];
    this._finished = false;
    this._deleted = false;
    this._failureError = void 0;
    this._localPath = localPath;
    this._unaccessibleErrorMessage = unaccessibleErrorMessage;
    this._cancelCallback = cancelCallback;
  }
  finishedPromise() {
    return this._finishedPromise;
  }
  localPath() {
    return this._localPath;
  }
  async localPathAfterFinished() {
    if (this._unaccessibleErrorMessage) throw new Error(this._unaccessibleErrorMessage);
    await this._finishedPromise;
    if (this._failureError) throw this._failureError;
    return this._localPath;
  }
  saveAs(saveCallback) {
    if (this._unaccessibleErrorMessage) throw new Error(this._unaccessibleErrorMessage);
    if (this._deleted) throw new Error(`File already deleted. Save before deleting.`);
    if (this._failureError) throw this._failureError;
    if (this._finished) {
      saveCallback(this._localPath).catch(() => {
      });
      return;
    }
    this._saveCallbacks.push(saveCallback);
  }
  async failureError() {
    var _this$_failureError;
    if (this._unaccessibleErrorMessage) return this._unaccessibleErrorMessage;
    await this._finishedPromise;
    return ((_this$_failureError = this._failureError) === null || _this$_failureError === void 0 ? void 0 : _this$_failureError.message) || null;
  }
  async cancel() {
    (0, _utils$H.assert)(this._cancelCallback !== void 0);
    return this._cancelCallback();
  }
  async delete() {
    if (this._unaccessibleErrorMessage) return;
    const fileName = await this.localPathAfterFinished();
    if (this._deleted) return;
    this._deleted = true;
    if (fileName) await _fs$8.default.promises.unlink(fileName).catch((e) => {
    });
  }
  async deleteOnContextClose() {
    if (this._deleted) return;
    this._deleted = true;
    if (!this._unaccessibleErrorMessage) await _fs$8.default.promises.unlink(this._localPath).catch((e) => {
    });
    await this.reportFinished(new _errors$5.TargetClosedError());
  }
  async reportFinished(error) {
    if (this._finished) return;
    this._finished = true;
    this._failureError = error;
    if (error) {
      for (const callback of this._saveCallbacks) await callback("", error);
    } else {
      for (const callback of this._saveCallbacks) await callback(this._localPath);
    }
    this._saveCallbacks = [];
    this._finishedPromise.resolve();
  }
};
artifact$1.Artifact = Artifact$1;
var harTracer = {};
var hasRequiredHarTracer;
function requireHarTracer() {
  if (hasRequiredHarTracer) return harTracer;
  hasRequiredHarTracer = 1;
  Object.defineProperty(harTracer, "__esModule", {
    value: true
  });
  harTracer.HarTracer = void 0;
  var _browserContext2 = requireBrowserContext$1();
  var _fetch2 = requireFetch$1();
  var _helper2 = helper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _utils2 = requireUtils();
  var _eventsHelper2 = eventsHelper;
  var _utilsBundle2 = utilsBundle;
  var _manualPromise2 = requireManualPromise();
  var _frames = requireFrames();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const FALLBACK_HTTP_VERSION = "HTTP/1.1";
  class HarTracer {
    constructor(context, page2, delegate, options) {
      this._context = void 0;
      this._barrierPromises = /* @__PURE__ */ new Set();
      this._delegate = void 0;
      this._options = void 0;
      this._pageEntries = /* @__PURE__ */ new Map();
      this._eventListeners = [];
      this._started = false;
      this._entrySymbol = void 0;
      this._baseURL = void 0;
      this._page = void 0;
      this._context = context;
      this._page = page2;
      this._delegate = delegate;
      this._options = options;
      if (options.slimMode) {
        options.omitSecurityDetails = true;
        options.omitCookies = true;
        options.omitTiming = true;
        options.omitServerIP = true;
        options.omitSizes = true;
        options.omitPages = true;
      }
      this._entrySymbol = Symbol("requestHarEntry");
      this._baseURL = context instanceof _fetch2.APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;
    }
    start(options) {
      if (this._started) return;
      this._options.omitScripts = options.omitScripts;
      this._started = true;
      const apiRequest = this._context instanceof _fetch2.APIRequestContext ? this._context : this._context.fetchRequest;
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(apiRequest, _fetch2.APIRequestContext.Events.Request, (event) => this._onAPIRequest(event)), _eventsHelper2.eventsHelper.addEventListener(apiRequest, _fetch2.APIRequestContext.Events.RequestFinished, (event) => this._onAPIRequestFinished(event))];
      if (this._context instanceof _browserContext2.BrowserContext) {
        this._eventListeners.push(_eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.Page, (page2) => this._createPageEntryIfNeeded(page2)), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.Request, (request2) => this._onRequest(request2)), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.RequestFinished, ({
          request: request2,
          response
        }) => this._onRequestFinished(request2, response).catch(() => {
        })), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.RequestFailed, (request2) => this._onRequestFailed(request2)), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.Response, (response) => this._onResponse(response)), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.RequestAborted, (request2) => this._onRequestAborted(request2)), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.RequestFulfilled, (request2) => this._onRequestFulfilled(request2)), _eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.RequestContinued, (request2) => this._onRequestContinued(request2)));
      }
    }
    _shouldIncludeEntryWithUrl(urlString) {
      return !this._options.urlFilter || (0, _utils2.urlMatches)(this._baseURL, urlString, this._options.urlFilter);
    }
    _entryForRequest(request2) {
      return request2[this._entrySymbol];
    }
    _createPageEntryIfNeeded(page2) {
      if (!page2) return;
      if (this._options.omitPages) return;
      if (this._page && page2 !== this._page) return;
      let pageEntry = this._pageEntries.get(page2);
      if (!pageEntry) {
        const date = /* @__PURE__ */ new Date();
        pageEntry = {
          startedDateTime: date.toISOString(),
          id: page2.guid,
          title: "",
          pageTimings: this._options.omitTiming ? {} : {
            onContentLoad: -1,
            onLoad: -1
          }
        };
        pageEntry[startedDateSymbol] = date;
        page2.mainFrame().on(_frames.Frame.Events.AddLifecycle, (event) => {
          if (event === "load") this._onLoad(page2, pageEntry);
          if (event === "domcontentloaded") this._onDOMContentLoaded(page2, pageEntry);
        });
        this._pageEntries.set(page2, pageEntry);
      }
      return pageEntry;
    }
    _onDOMContentLoaded(page2, pageEntry) {
      const promise = page2.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          domContentLoaded: performance.timing.domContentLoadedEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result2) => {
        pageEntry.title = result2.title;
        if (!this._options.omitTiming) pageEntry.pageTimings.onContentLoad = result2.domContentLoaded;
      }).catch(() => {
      });
      this._addBarrier(page2, promise);
    }
    _onLoad(page2, pageEntry) {
      const promise = page2.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          loaded: performance.timing.loadEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result2) => {
        pageEntry.title = result2.title;
        if (!this._options.omitTiming) pageEntry.pageTimings.onLoad = result2.loaded;
      }).catch(() => {
      });
      this._addBarrier(page2, promise);
    }
    _addBarrier(target, promise) {
      if (!target) return null;
      if (!this._options.waitForContentOnStop) return;
      const race = target.openScope.safeRace(promise);
      this._barrierPromises.add(race);
      race.then(() => this._barrierPromises.delete(race));
    }
    _onAPIRequest(event) {
      var _event$postData;
      if (!this._shouldIncludeEntryWithUrl(event.url.toString())) return;
      const harEntry = createHarEntry(event.method, event.url, void 0, this._options);
      harEntry._apiRequest = true;
      if (!this._options.omitCookies) harEntry.request.cookies = event.cookies;
      harEntry.request.headers = Object.entries(event.headers).map(([name2, value]) => ({
        name: name2,
        value
      }));
      harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers["content-type"], this._options.content);
      if (!this._options.omitSizes) harEntry.request.bodySize = ((_event$postData = event.postData) === null || _event$postData === void 0 ? void 0 : _event$postData.length) || 0;
      event[this._entrySymbol] = harEntry;
      if (this._started) this._delegate.onEntryStarted(harEntry);
    }
    _onAPIRequestFinished(event) {
      var _event$body$length, _event$body;
      const harEntry = this._entryForRequest(event.requestEvent);
      if (!harEntry) return;
      harEntry.response.status = event.statusCode;
      harEntry.response.statusText = event.statusMessage;
      harEntry.response.httpVersion = event.httpVersion;
      harEntry.response.redirectURL = event.headers.location || "";
      if (!this._options.omitServerIP) {
        harEntry.serverIPAddress = event.serverIPAddress;
        harEntry._serverPort = event.serverPort;
      }
      if (!this._options.omitTiming) {
        harEntry.timings = event.timings;
        this._computeHarEntryTotalTime(harEntry);
      }
      if (!this._options.omitSecurityDetails) harEntry._securityDetails = event.securityDetails;
      for (let i = 0; i < event.rawHeaders.length; i += 2) {
        harEntry.response.headers.push({
          name: event.rawHeaders[i],
          value: event.rawHeaders[i + 1]
        });
      }
      harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map((c) => {
        return {
          ...c,
          expires: c.expires === -1 ? void 0 : safeDateToISOString(c.expires)
        };
      });
      const content = harEntry.response.content;
      const contentType = event.headers["content-type"];
      if (contentType) content.mimeType = contentType;
      this._storeResponseContent(event.body, content, "other");
      if (!this._options.omitSizes) harEntry.response.bodySize = (_event$body$length = (_event$body = event.body) === null || _event$body === void 0 ? void 0 : _event$body.length) !== null && _event$body$length !== void 0 ? _event$body$length : 0;
      if (this._started) this._delegate.onEntryFinished(harEntry);
    }
    _onRequest(request2) {
      var _request$frame, _request$frame2;
      if (!this._shouldIncludeEntryWithUrl(request2.url())) return;
      const page2 = (_request$frame = request2.frame()) === null || _request$frame === void 0 ? void 0 : _request$frame._page;
      if (this._page && page2 !== this._page) return;
      const url = network2.parsedURL(request2.url());
      if (!url) return;
      const pageEntry = this._createPageEntryIfNeeded(page2);
      const harEntry = createHarEntry(request2.method(), url, (_request$frame2 = request2.frame()) === null || _request$frame2 === void 0 ? void 0 : _request$frame2.guid, this._options);
      if (pageEntry) harEntry.pageref = pageEntry.id;
      this._recordRequestHeadersAndCookies(harEntry, request2.headers());
      harEntry.request.postData = this._postDataForRequest(request2, this._options.content);
      if (!this._options.omitSizes) harEntry.request.bodySize = request2.bodySize();
      if (request2.redirectedFrom()) {
        const fromEntry = this._entryForRequest(request2.redirectedFrom());
        if (fromEntry) fromEntry.response.redirectURL = request2.url();
      }
      request2[this._entrySymbol] = harEntry;
      (0, _utils2.assert)(this._started);
      this._delegate.onEntryStarted(harEntry);
    }
    _recordRequestHeadersAndCookies(harEntry, headers2) {
      if (!this._options.omitCookies) {
        harEntry.request.cookies = [];
        for (const header of headers2.filter((header2) => header2.name.toLowerCase() === "cookie")) harEntry.request.cookies.push(...header.value.split(";").map(parseCookie));
      }
      harEntry.request.headers = headers2;
    }
    _recordRequestOverrides(harEntry, request2) {
      if (!request2._hasOverrides() || !this._options.recordRequestOverrides) return;
      harEntry.request.method = request2.method();
      harEntry.request.url = request2.url();
      harEntry.request.postData = this._postDataForRequest(request2, this._options.content);
      this._recordRequestHeadersAndCookies(harEntry, request2.headers());
    }
    async _onRequestFinished(request2, response) {
      var _request$frame3;
      if (!response) return;
      const harEntry = this._entryForRequest(request2);
      if (!harEntry) return;
      const page2 = (_request$frame3 = request2.frame()) === null || _request$frame3 === void 0 ? void 0 : _request$frame3._page;
      if (!this._options.omitServerIP) {
        this._addBarrier(page2 || request2.serviceWorker(), response.serverAddr().then((server2) => {
          if (server2 !== null && server2 !== void 0 && server2.ipAddress) harEntry.serverIPAddress = server2.ipAddress;
          if (server2 !== null && server2 !== void 0 && server2.port) harEntry._serverPort = server2.port;
        }));
      }
      if (!this._options.omitSecurityDetails) {
        this._addBarrier(page2 || request2.serviceWorker(), response.securityDetails().then((details) => {
          if (details) harEntry._securityDetails = details;
        }));
      }
      const httpVersion = response.httpVersion();
      harEntry.request.httpVersion = httpVersion;
      harEntry.response.httpVersion = httpVersion;
      const compressionCalculationBarrier = this._options.omitSizes ? void 0 : {
        _encodedBodySize: -1,
        _decodedBodySize: -1,
        barrier: new _manualPromise2.ManualPromise(),
        _check: function() {
          if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {
            harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);
            this.barrier.resolve();
          }
        },
        setEncodedBodySize: function(encodedBodySize) {
          this._encodedBodySize = encodedBodySize;
          this._check();
        },
        setDecodedBodySize: function(decodedBodySize) {
          this._decodedBodySize = decodedBodySize;
          this._check();
        }
      };
      if (compressionCalculationBarrier) this._addBarrier(page2 || request2.serviceWorker(), compressionCalculationBarrier.barrier);
      const promise = response.body().then((buffer) => {
        if (this._options.omitScripts && request2.resourceType() === "script") {
          compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setDecodedBodySize(0);
          return;
        }
        const content = harEntry.response.content;
        compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setDecodedBodySize(buffer.length);
        this._storeResponseContent(buffer, content, request2.resourceType());
      }).catch(() => {
        compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setDecodedBodySize(0);
      }).then(() => {
        if (this._started) this._delegate.onEntryFinished(harEntry);
      });
      this._addBarrier(page2 || request2.serviceWorker(), promise);
      const timing = response.timing();
      harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? _helper2.helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;
      this._computeHarEntryTotalTime(harEntry);
      if (!this._options.omitSizes) {
        this._addBarrier(page2 || request2.serviceWorker(), response.sizes().then((sizes) => {
          harEntry.response.bodySize = sizes.responseBodySize;
          harEntry.response.headersSize = sizes.responseHeadersSize;
          harEntry.response._transferSize = sizes.transferSize;
          harEntry.request.headersSize = sizes.requestHeadersSize;
          compressionCalculationBarrier === null || compressionCalculationBarrier === void 0 || compressionCalculationBarrier.setEncodedBodySize(sizes.responseBodySize);
        }));
      }
    }
    async _onRequestFailed(request2) {
      const harEntry = this._entryForRequest(request2);
      if (!harEntry) return;
      if (request2._failureText !== null) harEntry.response._failureText = request2._failureText;
      this._recordRequestOverrides(harEntry, request2);
      if (this._started) this._delegate.onEntryFinished(harEntry);
    }
    _onRequestAborted(request2) {
      const harEntry = this._entryForRequest(request2);
      if (harEntry) harEntry._wasAborted = true;
    }
    _onRequestFulfilled(request2) {
      const harEntry = this._entryForRequest(request2);
      if (harEntry) harEntry._wasFulfilled = true;
    }
    _onRequestContinued(request2) {
      const harEntry = this._entryForRequest(request2);
      if (harEntry) harEntry._wasContinued = true;
    }
    _storeResponseContent(buffer, content, resourceType) {
      if (!buffer) {
        content.size = 0;
        return;
      }
      if (!this._options.omitSizes) content.size = buffer.length;
      if (this._options.content === "embed") {
        if ((0, _utils2.isTextualMimeType)(content.mimeType) && resourceType !== "font") {
          content.text = buffer.toString();
        } else {
          content.text = buffer.toString("base64");
          content.encoding = "base64";
        }
      } else if (this._options.content === "attach") {
        const sha1 = (0, _utils2.calculateSha1)(buffer) + "." + (_utilsBundle2.mime.getExtension(content.mimeType) || "dat");
        if (this._options.includeTraceInfo) content._sha1 = sha1;
        else content._file = sha1;
        if (this._started) this._delegate.onContentBlob(sha1, buffer);
      }
    }
    _onResponse(response) {
      var _response$frame;
      const harEntry = this._entryForRequest(response.request());
      if (!harEntry) return;
      const page2 = (_response$frame = response.frame()) === null || _response$frame === void 0 ? void 0 : _response$frame._page;
      const pageEntry = this._createPageEntryIfNeeded(page2);
      const request2 = response.request();
      harEntry.response = {
        status: response.status(),
        statusText: response.statusText(),
        httpVersion: response.httpVersion(),
        // These are bad values that will be overwritten bellow.
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: this._options.omitSizes ? void 0 : -1
      };
      if (!this._options.omitTiming) {
        const startDateTime = pageEntry ? pageEntry[startedDateSymbol].valueOf() : 0;
        const timing = response.timing();
        if (pageEntry && startDateTime > timing.startTime) pageEntry.startedDateTime = new Date(timing.startTime).toISOString();
        const dns = timing.domainLookupEnd !== -1 ? _helper2.helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;
        const connect = timing.connectEnd !== -1 ? _helper2.helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;
        const ssl = timing.connectEnd !== -1 ? _helper2.helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;
        const wait = timing.responseStart !== -1 ? _helper2.helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;
        const receive = -1;
        harEntry.timings = {
          dns,
          connect,
          ssl,
          send: 0,
          wait,
          receive
        };
        this._computeHarEntryTotalTime(harEntry);
      }
      this._recordRequestOverrides(harEntry, request2);
      this._addBarrier(page2 || request2.serviceWorker(), request2.rawRequestHeaders().then((headers2) => {
        this._recordRequestHeadersAndCookies(harEntry, headers2);
      }));
      this._recordResponseHeaders(harEntry, response.headers());
      this._addBarrier(page2 || request2.serviceWorker(), response.rawResponseHeaders().then((headers2) => {
        this._recordResponseHeaders(harEntry, headers2);
      }));
    }
    _recordResponseHeaders(harEntry, headers2) {
      if (!this._options.omitCookies) {
        harEntry.response.cookies = headers2.filter((header) => header.name.toLowerCase() === "set-cookie").map((header) => parseCookie(header.value));
      }
      harEntry.response.headers = headers2;
      const contentType = headers2.find((header) => header.name.toLowerCase() === "content-type");
      if (contentType) harEntry.response.content.mimeType = contentType.value;
    }
    _computeHarEntryTotalTime(harEntry) {
      harEntry.time = [harEntry.timings.dns, harEntry.timings.connect, harEntry.timings.ssl, harEntry.timings.wait, harEntry.timings.receive].reduce((pre, cur) => (cur || -1) > 0 ? cur + pre : pre, 0);
    }
    async flush() {
      await Promise.all(this._barrierPromises);
    }
    stop() {
      this._started = false;
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
      this._barrierPromises.clear();
      const context = this._context instanceof _browserContext2.BrowserContext ? this._context : void 0;
      const log = {
        version: "1.2",
        creator: {
          name: "Playwright",
          version: (0, _utils2.getPlaywrightVersion)()
        },
        browser: {
          name: (context === null || context === void 0 ? void 0 : context._browser.options.name) || "",
          version: (context === null || context === void 0 ? void 0 : context._browser.version()) || ""
        },
        pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : void 0,
        entries: []
      };
      if (!this._options.omitTiming) {
        for (const pageEntry of log.pages || []) {
          const startDateTime = pageEntry[startedDateSymbol].valueOf();
          if (typeof pageEntry.pageTimings.onContentLoad === "number" && pageEntry.pageTimings.onContentLoad >= 0) pageEntry.pageTimings.onContentLoad -= startDateTime;
          else pageEntry.pageTimings.onContentLoad = -1;
          if (typeof pageEntry.pageTimings.onLoad === "number" && pageEntry.pageTimings.onLoad >= 0) pageEntry.pageTimings.onLoad -= startDateTime;
          else pageEntry.pageTimings.onLoad = -1;
        }
      }
      this._pageEntries.clear();
      return log;
    }
    _postDataForRequest(request2, content) {
      const postData = request2.postDataBuffer();
      if (!postData) return;
      const contentType = request2.headerValue("content-type");
      return this._postDataForBuffer(postData, contentType, content);
    }
    _postDataForBuffer(postData, contentType, content) {
      var _contentType;
      if (!postData) return;
      (_contentType = contentType) !== null && _contentType !== void 0 ? _contentType : contentType = "application/octet-stream";
      const result2 = {
        mimeType: contentType,
        text: "",
        params: []
      };
      if (content === "embed" && contentType !== "application/octet-stream") result2.text = postData.toString();
      if (content === "attach") {
        const sha1 = (0, _utils2.calculateSha1)(postData) + "." + (_utilsBundle2.mime.getExtension(contentType) || "dat");
        if (this._options.includeTraceInfo) result2._sha1 = sha1;
        else result2._file = sha1;
        this._delegate.onContentBlob(sha1, postData);
      }
      if (contentType === "application/x-www-form-urlencoded") {
        const parsed = new URLSearchParams(postData.toString());
        for (const [name2, value] of parsed.entries()) result2.params.push({
          name: name2,
          value
        });
      }
      return result2;
    }
  }
  harTracer.HarTracer = HarTracer;
  function createHarEntry(method, url, frameref, options) {
    const harEntry = {
      _frameref: options.includeTraceInfo ? frameref : void 0,
      _monotonicTime: options.includeTraceInfo ? (0, _utils2.monotonicTime)() : void 0,
      startedDateTime: (/* @__PURE__ */ new Date()).toISOString(),
      time: -1,
      request: {
        method,
        url: url.toString(),
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        queryString: [...url.searchParams].map((e) => ({
          name: e[0],
          value: e[1]
        })),
        headersSize: -1,
        bodySize: -1
      },
      response: {
        status: -1,
        statusText: "",
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: options.omitSizes ? void 0 : -1
      },
      cache: {},
      timings: {
        send: -1,
        wait: -1,
        receive: -1
      }
    };
    return harEntry;
  }
  function parseCookie(c) {
    const cookie = {
      name: "",
      value: ""
    };
    let first = true;
    for (const pair of c.split(/; */)) {
      const indexOfEquals = pair.indexOf("=");
      const name2 = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();
      const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : "";
      if (first) {
        first = false;
        cookie.name = name2;
        cookie.value = value;
        continue;
      }
      if (name2 === "Domain") cookie.domain = value;
      if (name2 === "Expires") cookie.expires = safeDateToISOString(value);
      if (name2 === "HttpOnly") cookie.httpOnly = true;
      if (name2 === "Max-Age") cookie.expires = safeDateToISOString(Date.now() + +value * 1e3);
      if (name2 === "Path") cookie.path = value;
      if (name2 === "SameSite") cookie.sameSite = value;
      if (name2 === "Secure") cookie.secure = true;
    }
    return cookie;
  }
  function safeDateToISOString(value) {
    try {
      return new Date(value).toISOString();
    } catch (e) {
    }
  }
  const startedDateSymbol = Symbol("startedDate");
  return harTracer;
}
var snapshotter = {};
var snapshotterInjected = {};
Object.defineProperty(snapshotterInjected, "__esModule", {
  value: true
});
snapshotterInjected.frameSnapshotStreamer = frameSnapshotStreamer;
function frameSnapshotStreamer(snapshotStreamer, removeNoScript) {
  if (window[snapshotStreamer]) return;
  const kShadowAttribute = "__playwright_shadow_root_";
  const kValueAttribute = "__playwright_value_";
  const kCheckedAttribute = "__playwright_checked_";
  const kSelectedAttribute = "__playwright_selected_";
  const kScrollTopAttribute = "__playwright_scroll_top_";
  const kScrollLeftAttribute = "__playwright_scroll_left_";
  const kStyleSheetAttribute = "__playwright_style_sheet_";
  const kTargetAttribute = "__playwright_target__";
  const kCustomElementsAttribute = "__playwright_custom_elements__";
  const kCurrentSrcAttribute = "__playwright_current_src__";
  const kSnapshotFrameId = Symbol("__playwright_snapshot_frameid_");
  const kCachedData = Symbol("__playwright_snapshot_cache_");
  const kEndOfList = Symbol("__playwright_end_of_list_");
  function resetCachedData(obj) {
    delete obj[kCachedData];
  }
  function ensureCachedData(obj) {
    if (!obj[kCachedData]) obj[kCachedData] = {};
    return obj[kCachedData];
  }
  function removeHash(url) {
    try {
      const u = new URL(url);
      u.hash = "";
      return u.toString();
    } catch (e) {
      return url;
    }
  }
  class Streamer {
    constructor() {
      this._lastSnapshotNumber = 0;
      this._staleStyleSheets = /* @__PURE__ */ new Set();
      this._readingStyleSheet = false;
      this._fakeBase = void 0;
      this._observer = void 0;
      const invalidateCSSGroupingRule = (rule) => {
        if (rule.parentStyleSheet) this._invalidateStyleSheet(rule.parentStyleSheet);
      };
      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "insertRule", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "deleteRule", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "addRule", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "removeRule", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeGetter(window.CSSStyleSheet.prototype, "rules", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeGetter(window.CSSStyleSheet.prototype, "cssRules", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "replaceSync", (sheet) => this._invalidateStyleSheet(sheet));
      this._interceptNativeMethod(window.CSSGroupingRule.prototype, "insertRule", invalidateCSSGroupingRule);
      this._interceptNativeMethod(window.CSSGroupingRule.prototype, "deleteRule", invalidateCSSGroupingRule);
      this._interceptNativeGetter(window.CSSGroupingRule.prototype, "cssRules", invalidateCSSGroupingRule);
      this._interceptNativeAsyncMethod(window.CSSStyleSheet.prototype, "replace", (sheet) => this._invalidateStyleSheet(sheet));
      this._fakeBase = document.createElement("base");
      this._observer = new MutationObserver((list) => this._handleMutations(list));
      const observerConfig = {
        attributes: true,
        subtree: true
      };
      this._observer.observe(document, observerConfig);
      this._refreshListenersWhenNeeded();
    }
    _refreshListenersWhenNeeded() {
      this._refreshListeners();
      const customEventName = "__playwright_snapshotter_global_listeners_check__";
      let seenEvent = false;
      const handleCustomEvent = () => seenEvent = true;
      window.addEventListener(customEventName, handleCustomEvent);
      const observer = new MutationObserver((entries) => {
        const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(document.documentElement));
        if (newDocumentElement) {
          seenEvent = false;
          window.dispatchEvent(new CustomEvent(customEventName));
          if (!seenEvent) {
            window.addEventListener(customEventName, handleCustomEvent);
            this._refreshListeners();
          }
        }
      });
      observer.observe(document, {
        childList: true
      });
    }
    _refreshListeners() {
      document.addEventListener("__playwright_target__", (event) => {
        if (!event.detail) return;
        const callId = event.detail;
        event.composedPath()[0].__playwright_target__ = callId;
      });
    }
    _interceptNativeMethod(obj, method, cb) {
      const native = obj[method];
      if (!native) return;
      obj[method] = function(...args) {
        const result2 = native.call(this, ...args);
        cb(this, result2);
        return result2;
      };
    }
    _interceptNativeAsyncMethod(obj, method, cb) {
      const native = obj[method];
      if (!native) return;
      obj[method] = async function(...args) {
        const result2 = await native.call(this, ...args);
        cb(this, result2);
        return result2;
      };
    }
    _interceptNativeGetter(obj, prop, cb) {
      const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
      Object.defineProperty(obj, prop, {
        ...descriptor,
        get: function() {
          const result2 = descriptor.get.call(this);
          cb(this, result2);
          return result2;
        }
      });
    }
    _handleMutations(list) {
      for (const mutation of list) ensureCachedData(mutation.target).attributesCached = void 0;
    }
    _invalidateStyleSheet(sheet) {
      if (this._readingStyleSheet) return;
      this._staleStyleSheets.add(sheet);
    }
    _updateStyleElementStyleSheetTextIfNeeded(sheet, forceText) {
      const data = ensureCachedData(sheet);
      if (this._staleStyleSheets.has(sheet) || forceText && data.cssText === void 0) {
        this._staleStyleSheets.delete(sheet);
        try {
          data.cssText = this._getSheetText(sheet);
        } catch (e) {
          data.cssText = "";
        }
      }
      return data.cssText;
    }
    // Returns either content, ref, or no override.
    _updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber) {
      const data = ensureCachedData(sheet);
      if (this._staleStyleSheets.has(sheet)) {
        this._staleStyleSheets.delete(sheet);
        try {
          data.cssText = this._getSheetText(sheet);
          data.cssRef = snapshotNumber;
          return data.cssText;
        } catch (e) {
        }
      }
      return data.cssRef === void 0 ? void 0 : snapshotNumber - data.cssRef;
    }
    markIframe(iframeElement, frameId) {
      iframeElement[kSnapshotFrameId] = frameId;
    }
    reset() {
      this._staleStyleSheets.clear();
      const visitNode = (node) => {
        resetCachedData(node);
        if (node.nodeType === Node.ELEMENT_NODE) {
          const element = node;
          if (element.shadowRoot) visitNode(element.shadowRoot);
        }
        for (let child = node.firstChild; child; child = child.nextSibling) visitNode(child);
      };
      visitNode(document.documentElement);
      visitNode(this._fakeBase);
    }
    __sanitizeMetaAttribute(name2, value, httpEquiv) {
      if (name2 === "charset") return "utf-8";
      if (httpEquiv.toLowerCase() !== "content-type" || name2 !== "content") return value;
      const [type, ...params] = value.split(";");
      if (type !== "text/html" || params.length <= 0) return value;
      const charsetParamIdx = params.findIndex((param) => param.trim().startsWith("charset="));
      if (charsetParamIdx > -1) params[charsetParamIdx] = "charset=utf-8";
      return `${type}; ${params.join("; ")}`;
    }
    _sanitizeUrl(url) {
      if (url.startsWith("javascript:") || url.startsWith("vbscript:")) return "";
      return url;
    }
    _sanitizeSrcSet(srcset) {
      return srcset.split(",").map((src) => {
        src = src.trim();
        const spaceIndex = src.lastIndexOf(" ");
        if (spaceIndex === -1) return this._sanitizeUrl(src);
        return this._sanitizeUrl(src.substring(0, spaceIndex).trim()) + src.substring(spaceIndex);
      }).join(", ");
    }
    _resolveUrl(base, url) {
      if (url === "") return "";
      try {
        return new URL(url, base).href;
      } catch (e) {
        return url;
      }
    }
    _getSheetBase(sheet) {
      let rootSheet = sheet;
      while (rootSheet.parentStyleSheet) rootSheet = rootSheet.parentStyleSheet;
      if (rootSheet.ownerNode) return rootSheet.ownerNode.baseURI;
      return document.baseURI;
    }
    _getSheetText(sheet) {
      this._readingStyleSheet = true;
      try {
        const rules = [];
        for (const rule of sheet.cssRules) rules.push(rule.cssText);
        return rules.join("\n");
      } finally {
        this._readingStyleSheet = false;
      }
    }
    captureSnapshot() {
      const timestamp = performance.now();
      const snapshotNumber = ++this._lastSnapshotNumber;
      let nodeCounter = 0;
      let shadowDomNesting = 0;
      let headNesting = 0;
      this._handleMutations(this._observer.takeRecords());
      const definedCustomElements = /* @__PURE__ */ new Set();
      const visitNode = (node) => {
        const nodeType = node.nodeType;
        const nodeName = nodeType === Node.DOCUMENT_FRAGMENT_NODE ? "template" : node.nodeName;
        if (nodeType !== Node.ELEMENT_NODE && nodeType !== Node.DOCUMENT_FRAGMENT_NODE && nodeType !== Node.TEXT_NODE) return;
        if (nodeName === "SCRIPT") return;
        if (nodeName === "LINK" && nodeType === Node.ELEMENT_NODE) {
          var _getAttribute;
          const rel = (_getAttribute = node.getAttribute("rel")) === null || _getAttribute === void 0 ? void 0 : _getAttribute.toLowerCase();
          if (rel === "preload" || rel === "prefetch") return;
        }
        if (removeNoScript && nodeName === "NOSCRIPT") return;
        if (nodeName === "META" && node.httpEquiv.toLowerCase() === "content-security-policy") return;
        if ((nodeName === "IFRAME" || nodeName === "FRAME") && headNesting) return;
        const data = ensureCachedData(node);
        const values = [];
        let equals = !!data.cached;
        let extraNodes = 0;
        const expectValue = (value) => {
          equals = equals && data.cached[values.length] === value;
          values.push(value);
        };
        const checkAndReturn = (n) => {
          data.attributesCached = true;
          if (equals) return {
            equals: true,
            n: [[snapshotNumber - data.ref[0], data.ref[1]]]
          };
          nodeCounter += extraNodes;
          data.ref = [snapshotNumber, nodeCounter++];
          data.cached = values;
          return {
            equals: false,
            n
          };
        };
        if (nodeType === Node.TEXT_NODE) {
          const value = node.nodeValue || "";
          expectValue(value);
          return checkAndReturn(value);
        }
        if (nodeName === "STYLE") {
          const sheet = node.sheet;
          let cssText;
          if (sheet) cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet);
          cssText = cssText || node.textContent || "";
          expectValue(cssText);
          extraNodes++;
          return checkAndReturn([nodeName, {}, cssText]);
        }
        const attrs = {};
        const result3 = [nodeName, attrs];
        const visitChild = (child) => {
          const snapshot = visitNode(child);
          if (snapshot) {
            result3.push(snapshot.n);
            expectValue(child);
            equals = equals && snapshot.equals;
          }
        };
        const visitChildStyleSheet = (child) => {
          const snapshot = visitStyleSheet(child);
          if (snapshot) {
            result3.push(snapshot.n);
            expectValue(child);
            equals = equals && snapshot.equals;
          }
        };
        if (nodeType === Node.DOCUMENT_FRAGMENT_NODE) attrs[kShadowAttribute] = "open";
        if (nodeType === Node.ELEMENT_NODE) {
          var _window$customElement;
          const element = node;
          if (element.localName.includes("-") && (_window$customElement = window.customElements) !== null && _window$customElement !== void 0 && _window$customElement.get(element.localName)) definedCustomElements.add(element.localName);
          if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
            const value = element.value;
            expectValue(kValueAttribute);
            expectValue(value);
            attrs[kValueAttribute] = value;
          }
          if (nodeName === "INPUT" && ["checkbox", "radio"].includes(element.type)) {
            const value = element.checked ? "true" : "false";
            expectValue(kCheckedAttribute);
            expectValue(value);
            attrs[kCheckedAttribute] = value;
          }
          if (nodeName === "OPTION") {
            const value = element.selected ? "true" : "false";
            expectValue(kSelectedAttribute);
            expectValue(value);
            attrs[kSelectedAttribute] = value;
          }
          if (element.scrollTop) {
            expectValue(kScrollTopAttribute);
            expectValue(element.scrollTop);
            attrs[kScrollTopAttribute] = "" + element.scrollTop;
          }
          if (element.scrollLeft) {
            expectValue(kScrollLeftAttribute);
            expectValue(element.scrollLeft);
            attrs[kScrollLeftAttribute] = "" + element.scrollLeft;
          }
          if (element.shadowRoot) {
            ++shadowDomNesting;
            visitChild(element.shadowRoot);
            --shadowDomNesting;
          }
          if ("__playwright_target__" in element) {
            expectValue(kTargetAttribute);
            expectValue(element["__playwright_target__"]);
            attrs[kTargetAttribute] = element["__playwright_target__"];
          }
        }
        if (nodeName === "HEAD") {
          ++headNesting;
          this._fakeBase.setAttribute("href", document.baseURI);
          visitChild(this._fakeBase);
        }
        for (let child = node.firstChild; child; child = child.nextSibling) visitChild(child);
        if (nodeName === "HEAD") --headNesting;
        expectValue(kEndOfList);
        let documentOrShadowRoot = null;
        if (node.ownerDocument.documentElement === node) documentOrShadowRoot = node.ownerDocument;
        else if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) documentOrShadowRoot = node;
        if (documentOrShadowRoot) {
          for (const sheet of documentOrShadowRoot.adoptedStyleSheets || []) visitChildStyleSheet(sheet);
          expectValue(kEndOfList);
        }
        if (nodeName === "IFRAME" || nodeName === "FRAME") {
          const element = node;
          const frameId = element[kSnapshotFrameId];
          const name2 = "src";
          const value = frameId ? `/snapshot/${frameId}` : "";
          expectValue(name2);
          expectValue(value);
          attrs[name2] = value;
        }
        if (nodeName === "BODY" && definedCustomElements.size) {
          const value = [...definedCustomElements].join(",");
          expectValue(kCustomElementsAttribute);
          expectValue(value);
          attrs[kCustomElementsAttribute] = value;
        }
        if (nodeName === "IMG" || nodeName === "PICTURE") {
          const value = nodeName === "PICTURE" ? "" : this._sanitizeUrl(node.currentSrc);
          expectValue(kCurrentSrcAttribute);
          expectValue(value);
          attrs[kCurrentSrcAttribute] = value;
        }
        if (equals && data.attributesCached && !shadowDomNesting) return checkAndReturn(result3);
        if (nodeType === Node.ELEMENT_NODE) {
          const element = node;
          for (let i = 0; i < element.attributes.length; i++) {
            const name2 = element.attributes[i].name;
            if (nodeName === "LINK" && name2 === "integrity") continue;
            if (nodeName === "IFRAME" && (name2 === "src" || name2 === "srcdoc" || name2 === "sandbox")) continue;
            if (nodeName === "FRAME" && name2 === "src") continue;
            let value = element.attributes[i].value;
            if (nodeName === "META") value = this.__sanitizeMetaAttribute(name2, value, node.httpEquiv);
            else if (name2 === "src" && nodeName === "IMG") value = this._sanitizeUrl(value);
            else if (name2 === "srcset" && nodeName === "IMG") value = this._sanitizeSrcSet(value);
            else if (name2 === "srcset" && nodeName === "SOURCE") value = this._sanitizeSrcSet(value);
            else if (name2 === "href" && nodeName === "LINK") value = this._sanitizeUrl(value);
            else if (name2.startsWith("on")) value = "";
            expectValue(name2);
            expectValue(value);
            attrs[name2] = value;
          }
          expectValue(kEndOfList);
        }
        if (result3.length === 2 && !Object.keys(attrs).length) result3.pop();
        return checkAndReturn(result3);
      };
      const visitStyleSheet = (sheet) => {
        const data = ensureCachedData(sheet);
        const oldCSSText = data.cssText;
        const cssText = this._updateStyleElementStyleSheetTextIfNeeded(
          sheet,
          true
          /* forceText */
        );
        if (cssText === oldCSSText) return {
          equals: true,
          n: [[snapshotNumber - data.ref[0], data.ref[1]]]
        };
        data.ref = [snapshotNumber, nodeCounter++];
        return {
          equals: false,
          n: ["template", {
            [kStyleSheetAttribute]: cssText
          }]
        };
      };
      let html;
      if (document.documentElement) {
        const {
          n
        } = visitNode(document.documentElement);
        html = n;
      } else {
        html = ["html"];
      }
      const result2 = {
        html,
        doctype: document.doctype ? document.doctype.name : void 0,
        resourceOverrides: [],
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight
        },
        url: location.href,
        wallTime: Date.now(),
        collectionTime: 0
      };
      for (const sheet of this._staleStyleSheets) {
        if (sheet.href === null) continue;
        const content = this._updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber);
        if (content === void 0) {
          continue;
        }
        const base = this._getSheetBase(sheet);
        const url = removeHash(this._resolveUrl(base, sheet.href));
        result2.resourceOverrides.push({
          url,
          content,
          contentType: "text/css"
        });
      }
      result2.collectionTime = performance.now() - timestamp;
      return result2;
    }
  }
  window[snapshotStreamer] = new Streamer();
}
var hasRequiredSnapshotter;
function requireSnapshotter() {
  if (hasRequiredSnapshotter) return snapshotter;
  hasRequiredSnapshotter = 1;
  Object.defineProperty(snapshotter, "__esModule", {
    value: true
  });
  snapshotter.Snapshotter = void 0;
  var _browserContext2 = requireBrowserContext$1();
  var _page = requirePage$1();
  var _eventsHelper2 = eventsHelper;
  var _debugLogger2 = debugLogger;
  var _snapshotterInjected = snapshotterInjected;
  var _utils2 = requireUtils();
  var _utilsBundle2 = utilsBundle;
  class Snapshotter {
    constructor(context, delegate) {
      this._context = void 0;
      this._delegate = void 0;
      this._eventListeners = [];
      this._snapshotStreamer = void 0;
      this._initialized = false;
      this._started = false;
      this._context = context;
      this._delegate = delegate;
      const guid = (0, _utils2.createGuid)();
      this._snapshotStreamer = "__playwright_snapshot_streamer_" + guid;
    }
    started() {
      return this._started;
    }
    async start() {
      this._started = true;
      if (!this._initialized) {
        this._initialized = true;
        await this._initialize();
      }
      await this.reset();
    }
    async reset() {
      if (this._started) await this._runInAllFrames(`window["${this._snapshotStreamer}"].reset()`);
    }
    async stop() {
      this._started = false;
    }
    resetForReuse() {
      this._initialized = false;
    }
    async _initialize() {
      for (const page2 of this._context.pages()) this._onPage(page2);
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.Page, this._onPage.bind(this))];
      const {
        javaScriptEnabled
      } = this._context._options;
      const initScript = `(${_snapshotterInjected.frameSnapshotStreamer})("${this._snapshotStreamer}", ${javaScriptEnabled || javaScriptEnabled === void 0})`;
      await this._context.addInitScript(initScript);
      await this._runInAllFrames(initScript);
    }
    async _runInAllFrames(expression) {
      const frames2 = [];
      for (const page2 of this._context.pages()) frames2.push(...page2.frames());
      await Promise.all(frames2.map((frame2) => {
        return frame2.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger2.debugLogger.log("error", e));
      }));
    }
    dispose() {
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async captureSnapshot(page2, callId, snapshotName, element) {
      const expression = `window["${this._snapshotStreamer}"].captureSnapshot(${JSON.stringify(snapshotName)})`;
      element === null || element === void 0 || element.callFunctionNoReply((element2, callId2) => {
        const customEvent = new CustomEvent("__playwright_target__", {
          bubbles: true,
          cancelable: true,
          detail: callId2,
          composed: true
        });
        element2.dispatchEvent(customEvent);
      }, callId);
      const snapshots = page2.frames().map(async (frame2) => {
        const data = await frame2.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger2.debugLogger.log("error", e));
        if (!data || !this._started) return;
        const snapshot = {
          callId,
          snapshotName,
          pageId: page2.guid,
          frameId: frame2.guid,
          frameUrl: data.url,
          doctype: data.doctype,
          html: data.html,
          viewport: data.viewport,
          timestamp: (0, _utils2.monotonicTime)(),
          wallTime: data.wallTime,
          collectionTime: data.collectionTime,
          resourceOverrides: [],
          isMainFrame: page2.mainFrame() === frame2
        };
        for (const {
          url,
          content,
          contentType
        } of data.resourceOverrides) {
          if (typeof content === "string") {
            const buffer = Buffer.from(content);
            const sha1 = (0, _utils2.calculateSha1)(buffer) + "." + (_utilsBundle2.mime.getExtension(contentType) || "dat");
            this._delegate.onSnapshotterBlob({
              sha1,
              buffer
            });
            snapshot.resourceOverrides.push({
              url,
              sha1
            });
          } else {
            snapshot.resourceOverrides.push({
              url,
              ref: content
            });
          }
        }
        this._delegate.onFrameSnapshot(snapshot);
      });
      await Promise.all(snapshots);
    }
    _onPage(page2) {
      for (const frame2 of page2.frames()) this._annotateFrameHierarchy(frame2);
      this._eventListeners.push(_eventsHelper2.eventsHelper.addEventListener(page2, _page.Page.Events.FrameAttached, (frame2) => this._annotateFrameHierarchy(frame2)));
    }
    async _annotateFrameHierarchy(frame2) {
      try {
        const frameElement = await frame2.frameElement();
        const parent = frame2.parentFrame();
        if (!parent) return;
        const context = await parent._mainContext();
        await (context === null || context === void 0 ? void 0 : context.evaluate(({
          snapshotStreamer,
          frameElement: frameElement2,
          frameId
        }) => {
          window[snapshotStreamer].markIframe(frameElement2, frameId);
        }, {
          snapshotStreamer: this._snapshotStreamer,
          frameElement,
          frameId: frame2.guid
        }));
        frameElement.dispose();
      } catch (e) {
      }
    }
  }
  snapshotter.Snapshotter = Snapshotter;
  return snapshotter;
}
var hasRequiredTracing;
function requireTracing() {
  if (hasRequiredTracing) return tracing$1;
  hasRequiredTracing = 1;
  Object.defineProperty(tracing$1, "__esModule", {
    value: true
  });
  tracing$1.Tracing = void 0;
  tracing$1.shouldCaptureSnapshot = shouldCaptureSnapshot;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _debug2 = debug;
  var _utils2 = requireUtils();
  var _artifact2 = artifact$1;
  var _browserContext2 = requireBrowserContext$1();
  var _instrumentation2 = instrumentation;
  var _page = requirePage$1();
  var _harTracer = requireHarTracer();
  var _snapshotter = requireSnapshotter();
  var _dispatcher2 = dispatcher;
  var _errors2 = errors$2;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const version2 = 7;
  const kScreencastOptions = {
    width: 800,
    height: 600,
    quality: 90
  };
  class Tracing2 extends _instrumentation2.SdkObject {
    constructor(context, tracesDir) {
      super(context, "tracing");
      this._fs = new _utils2.SerializedFS();
      this._snapshotter = void 0;
      this._harTracer = void 0;
      this._screencastListeners = [];
      this._eventListeners = [];
      this._context = void 0;
      this._state = void 0;
      this._isStopping = false;
      this._precreatedTracesDir = void 0;
      this._tracesTmpDir = void 0;
      this._allResources = /* @__PURE__ */ new Set();
      this._contextCreatedEvent = void 0;
      this._pendingHarEntries = /* @__PURE__ */ new Set();
      this._context = context;
      this._precreatedTracesDir = tracesDir;
      this._harTracer = new _harTracer.HarTracer(context, null, this, {
        content: "attach",
        includeTraceInfo: true,
        recordRequestOverrides: false,
        waitForContentOnStop: false
      });
      const testIdAttributeName = "selectors" in context ? context.selectors().testIdAttributeName() : void 0;
      this._contextCreatedEvent = {
        version: version2,
        type: "context-options",
        origin: "library",
        browserName: "",
        options: {},
        platform: process.platform,
        wallTime: 0,
        monotonicTime: 0,
        sdkLanguage: context.attribution.playwright.options.sdkLanguage,
        testIdAttributeName
      };
      if (context instanceof _browserContext2.BrowserContext) {
        this._snapshotter = new _snapshotter.Snapshotter(context, this);
        (0, _utils2.assert)(tracesDir, "tracesDir must be specified for BrowserContext");
        this._contextCreatedEvent.browserName = context._browser.options.name;
        this._contextCreatedEvent.channel = context._browser.options.channel;
        this._contextCreatedEvent.options = context._options;
      }
    }
    async resetForReuse() {
      var _this$_snapshotter;
      await this.stopChunk({
        mode: "discard"
      }).catch(() => {
      });
      await this.stop();
      (_this$_snapshotter = this._snapshotter) === null || _this$_snapshotter === void 0 || _this$_snapshotter.resetForReuse();
    }
    async start(options) {
      if (this._isStopping) throw new Error("Cannot start tracing while stopping");
      if (this._state) throw new Error("Tracing has been already started");
      this._contextCreatedEvent.sdkLanguage = this._context.attribution.playwright.options.sdkLanguage;
      const traceName = options.name || (0, _utils2.createGuid)();
      const tracesDir = this._createTracesDirIfNeeded();
      this._state = {
        options,
        traceName,
        tracesDir,
        traceFile: _path2.default.join(tracesDir, traceName + ".trace"),
        networkFile: _path2.default.join(tracesDir, traceName + ".network"),
        resourcesDir: _path2.default.join(tracesDir, "resources"),
        chunkOrdinal: 0,
        traceSha1s: /* @__PURE__ */ new Set(),
        networkSha1s: /* @__PURE__ */ new Set(),
        recording: false,
        callIds: /* @__PURE__ */ new Set()
      };
      this._fs.mkdir(this._state.resourcesDir);
      this._fs.writeFile(this._state.networkFile, "");
      if (options.snapshots) this._harTracer.start({
        omitScripts: !options.live
      });
    }
    async startChunk(options = {}) {
      var _this$_snapshotter2;
      if (this._state && this._state.recording) await this.stopChunk({
        mode: "discard"
      });
      if (!this._state) throw new Error("Must start tracing before starting a new chunk");
      if (this._isStopping) throw new Error("Cannot start a trace chunk while stopping");
      this._state.recording = true;
      this._state.callIds.clear();
      if (options.name && options.name !== this._state.traceName) this._changeTraceName(this._state, options.name);
      else this._allocateNewTraceFile(this._state);
      this._fs.mkdir(_path2.default.dirname(this._state.traceFile));
      const event = {
        ...this._contextCreatedEvent,
        title: options.title,
        wallTime: Date.now(),
        monotonicTime: (0, _utils2.monotonicTime)()
      };
      this._appendTraceEvent(event);
      this._context.instrumentation.addListener(this, this._context);
      this._eventListeners.push(_utils2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.Console, this._onConsoleMessage.bind(this)), _utils2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.PageError, this._onPageError.bind(this)));
      if (this._state.options.screenshots) this._startScreencast();
      if (this._state.options.snapshots) await ((_this$_snapshotter2 = this._snapshotter) === null || _this$_snapshotter2 === void 0 ? void 0 : _this$_snapshotter2.start());
      return {
        traceName: this._state.traceName
      };
    }
    _startScreencast() {
      if (!(this._context instanceof _browserContext2.BrowserContext)) return;
      for (const page2 of this._context.pages()) this._startScreencastInPage(page2);
      this._screencastListeners.push(_utils2.eventsHelper.addEventListener(this._context, _browserContext2.BrowserContext.Events.Page, this._startScreencastInPage.bind(this)));
    }
    _stopScreencast() {
      _utils2.eventsHelper.removeEventListeners(this._screencastListeners);
      if (!(this._context instanceof _browserContext2.BrowserContext)) return;
      for (const page2 of this._context.pages()) page2.setScreencastOptions(null);
    }
    _allocateNewTraceFile(state) {
      const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;
      state.chunkOrdinal++;
      state.traceFile = _path2.default.join(state.tracesDir, `${state.traceName}${suffix}.trace`);
    }
    _changeTraceName(state, name2) {
      state.traceName = name2;
      state.chunkOrdinal = 0;
      this._allocateNewTraceFile(state);
      const newNetworkFile = _path2.default.join(state.tracesDir, name2 + ".network");
      this._fs.copyFile(state.networkFile, newNetworkFile);
      state.networkFile = newNetworkFile;
    }
    async stop() {
      if (!this._state) return;
      if (this._isStopping) throw new Error(`Tracing is already stopping`);
      if (this._state.recording) throw new Error(`Must stop trace file before stopping tracing`);
      this._harTracer.stop();
      this.flushHarEntries();
      await this._fs.syncAndGetError();
      this._state = void 0;
    }
    async deleteTmpTracesDir() {
      if (this._tracesTmpDir) await (0, _utils2.removeFolders)([this._tracesTmpDir]);
    }
    _createTracesDirIfNeeded() {
      if (this._precreatedTracesDir) return this._precreatedTracesDir;
      this._tracesTmpDir = _fs2.default.mkdtempSync(_path2.default.join(_os2.default.tmpdir(), "playwright-tracing-"));
      return this._tracesTmpDir;
    }
    abort() {
      var _this$_snapshotter3;
      (_this$_snapshotter3 = this._snapshotter) === null || _this$_snapshotter3 === void 0 || _this$_snapshotter3.dispose();
      this._harTracer.stop();
    }
    async flush() {
      this.abort();
      await this._fs.syncAndGetError();
    }
    async stopChunk(params) {
      var _this$_snapshotter4;
      if (this._isStopping) throw new Error(`Tracing is already stopping`);
      this._isStopping = true;
      if (!this._state || !this._state.recording) {
        this._isStopping = false;
        if (params.mode !== "discard") throw new Error(`Must start tracing before stopping`);
        return {};
      }
      this._context.instrumentation.removeListener(this);
      _utils2.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._state.options.screenshots) this._stopScreencast();
      if (this._state.options.snapshots) await ((_this$_snapshotter4 = this._snapshotter) === null || _this$_snapshotter4 === void 0 ? void 0 : _this$_snapshotter4.stop());
      this.flushHarEntries();
      const newNetworkFile = _path2.default.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);
      const entries = [];
      entries.push({
        name: "trace.trace",
        value: this._state.traceFile
      });
      entries.push({
        name: "trace.network",
        value: newNetworkFile
      });
      for (const sha1 of /* @__PURE__ */ new Set([...this._state.traceSha1s, ...this._state.networkSha1s])) entries.push({
        name: _path2.default.join("resources", sha1),
        value: _path2.default.join(this._state.resourcesDir, sha1)
      });
      this._state.traceSha1s = /* @__PURE__ */ new Set();
      if (params.mode === "discard") {
        this._isStopping = false;
        this._state.recording = false;
        return {};
      }
      this._fs.copyFile(this._state.networkFile, newNetworkFile);
      const zipFileName = this._state.traceFile + ".zip";
      if (params.mode === "archive") this._fs.zip(entries, zipFileName);
      const error = await this._fs.syncAndGetError();
      this._isStopping = false;
      if (this._state) this._state.recording = false;
      if (error) {
        if (this._context instanceof _browserContext2.BrowserContext && !this._context._browser.isConnected()) return {};
        throw error;
      }
      if (params.mode === "entries") return {
        entries
      };
      const artifact2 = new _artifact2.Artifact(this._context, zipFileName);
      artifact2.reportFinished();
      return {
        artifact: artifact2
      };
    }
    async _captureSnapshot(snapshotName, sdkObject, metadata, element) {
      if (!this._snapshotter) return;
      if (!sdkObject.attribution.page) return;
      if (!this._snapshotter.started()) return;
      if (!shouldCaptureSnapshot(metadata)) return;
      await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName, element).catch(() => {
      });
    }
    onBeforeCall(sdkObject, metadata) {
      var _sdkObject$attributio, _this$_state;
      const event = createBeforeActionTraceEvent(metadata);
      if (!event) return Promise.resolve();
      (_sdkObject$attributio = sdkObject.attribution.page) === null || _sdkObject$attributio === void 0 || _sdkObject$attributio.temporarilyDisableTracingScreencastThrottling();
      event.beforeSnapshot = `before@${metadata.id}`;
      (_this$_state = this._state) === null || _this$_state === void 0 || _this$_state.callIds.add(metadata.id);
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);
    }
    onBeforeInputAction(sdkObject, metadata, element) {
      var _this$_state2, _sdkObject$attributio2;
      if (!((_this$_state2 = this._state) !== null && _this$_state2 !== void 0 && _this$_state2.callIds.has(metadata.id))) return Promise.resolve();
      const event = createInputActionTraceEvent(metadata);
      if (!event) return Promise.resolve();
      (_sdkObject$attributio2 = sdkObject.attribution.page) === null || _sdkObject$attributio2 === void 0 || _sdkObject$attributio2.temporarilyDisableTracingScreencastThrottling();
      event.inputSnapshot = `input@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata, element);
    }
    onCallLog(sdkObject, metadata, logName, message) {
      if (metadata.isServerSide || metadata.internal) return;
      if (logName !== "api") return;
      const event = createActionLogTraceEvent(metadata, message);
      if (event) this._appendTraceEvent(event);
    }
    async onAfterCall(sdkObject, metadata) {
      var _this$_state3, _this$_state4, _sdkObject$attributio3;
      if (!((_this$_state3 = this._state) !== null && _this$_state3 !== void 0 && _this$_state3.callIds.has(metadata.id))) return;
      (_this$_state4 = this._state) === null || _this$_state4 === void 0 || _this$_state4.callIds.delete(metadata.id);
      const event = createAfterActionTraceEvent(metadata);
      if (!event) return;
      (_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === void 0 || _sdkObject$attributio3.temporarilyDisableTracingScreencastThrottling();
      event.afterSnapshot = `after@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);
    }
    onEntryStarted(entry) {
      this._pendingHarEntries.add(entry);
    }
    onEntryFinished(entry) {
      this._pendingHarEntries.delete(entry);
      const event = {
        type: "resource-snapshot",
        snapshot: entry
      };
      const visited = visitTraceEvent(event, this._state.networkSha1s);
      this._fs.appendFile(
        this._state.networkFile,
        JSON.stringify(visited) + "\n",
        true
        /* flush */
      );
    }
    flushHarEntries() {
      const harLines = [];
      for (const entry of this._pendingHarEntries) {
        const event = {
          type: "resource-snapshot",
          snapshot: entry
        };
        const visited = visitTraceEvent(event, this._state.networkSha1s);
        harLines.push(JSON.stringify(visited));
      }
      this._pendingHarEntries.clear();
      if (harLines.length) this._fs.appendFile(
        this._state.networkFile,
        harLines.join("\n") + "\n",
        true
        /* flush */
      );
    }
    onContentBlob(sha1, buffer) {
      this._appendResource(sha1, buffer);
    }
    onSnapshotterBlob(blob) {
      this._appendResource(blob.sha1, blob.buffer);
    }
    onFrameSnapshot(snapshot) {
      this._appendTraceEvent({
        type: "frame-snapshot",
        snapshot
      });
    }
    _onConsoleMessage(message) {
      var _message$page;
      const event = {
        type: "console",
        messageType: message.type(),
        text: message.text(),
        args: message.args().map((a) => ({
          preview: a.toString(),
          value: a.rawValue()
        })),
        location: message.location(),
        time: (0, _utils2.monotonicTime)(),
        pageId: (_message$page = message.page()) === null || _message$page === void 0 ? void 0 : _message$page.guid
      };
      this._appendTraceEvent(event);
    }
    onDialog(dialog2) {
      const event = {
        type: "event",
        time: (0, _utils2.monotonicTime)(),
        class: "BrowserContext",
        method: "dialog",
        params: {
          pageId: dialog2.page().guid,
          type: dialog2.type(),
          message: dialog2.message(),
          defaultValue: dialog2.defaultValue()
        }
      };
      this._appendTraceEvent(event);
    }
    onDownload(page2, download2) {
      const event = {
        type: "event",
        time: (0, _utils2.monotonicTime)(),
        class: "BrowserContext",
        method: "download",
        params: {
          pageId: page2.guid,
          url: download2.url,
          suggestedFilename: download2.suggestedFilename()
        }
      };
      this._appendTraceEvent(event);
    }
    onPageOpen(page2) {
      var _page$opener;
      const event = {
        type: "event",
        time: (0, _utils2.monotonicTime)(),
        class: "BrowserContext",
        method: "page",
        params: {
          pageId: page2.guid,
          openerPageId: (_page$opener = page2.opener()) === null || _page$opener === void 0 ? void 0 : _page$opener.guid
        }
      };
      this._appendTraceEvent(event);
    }
    onPageClose(page2) {
      const event = {
        type: "event",
        time: (0, _utils2.monotonicTime)(),
        class: "BrowserContext",
        method: "pageClosed",
        params: {
          pageId: page2.guid
        }
      };
      this._appendTraceEvent(event);
    }
    _onPageError(error, page2) {
      const event = {
        type: "event",
        time: (0, _utils2.monotonicTime)(),
        class: "BrowserContext",
        method: "pageError",
        params: {
          error: (0, _errors2.serializeError)(error)
        },
        pageId: page2.guid
      };
      this._appendTraceEvent(event);
    }
    _startScreencastInPage(page2) {
      page2.setScreencastOptions(kScreencastOptions);
      const prefix = page2.guid;
      this._screencastListeners.push(_utils2.eventsHelper.addEventListener(page2, _page.Page.Events.ScreencastFrame, (params) => {
        const suffix = params.timestamp || Date.now();
        const sha1 = `${prefix}-${suffix}.jpeg`;
        const event = {
          type: "screencast-frame",
          pageId: page2.guid,
          sha1,
          width: params.width,
          height: params.height,
          timestamp: (0, _utils2.monotonicTime)(),
          frameSwapWallTime: params.frameSwapWallTime
        };
        this._appendResource(sha1, params.buffer);
        this._appendTraceEvent(event);
      }));
    }
    _appendTraceEvent(event) {
      const visited = visitTraceEvent(event, this._state.traceSha1s);
      const flush = this._state.options.live || event.type !== "event" && event.type !== "console" && event.type !== "log";
      this._fs.appendFile(this._state.traceFile, JSON.stringify(visited) + "\n", flush);
    }
    _appendResource(sha1, buffer) {
      if (this._allResources.has(sha1)) return;
      this._allResources.add(sha1);
      const resourcePath = _path2.default.join(this._state.resourcesDir, sha1);
      this._fs.writeFile(
        resourcePath,
        buffer,
        true
        /* skipIfExists */
      );
    }
  }
  tracing$1.Tracing = Tracing2;
  function visitTraceEvent(object, sha1s) {
    if (Array.isArray(object)) return object.map((o) => visitTraceEvent(o, sha1s));
    if (object instanceof _dispatcher2.Dispatcher) return `<${object._type}>`;
    if (object instanceof Buffer) return `<Buffer>`;
    if (object instanceof Date) return object;
    if (typeof object === "object") {
      const result2 = {};
      for (const key in object) {
        if (key === "sha1" || key === "_sha1" || key.endsWith("Sha1")) {
          const sha1 = object[key];
          if (sha1) sha1s.add(sha1);
        }
        result2[key] = visitTraceEvent(object[key], sha1s);
      }
      return result2;
    }
    return object;
  }
  function shouldCaptureSnapshot(metadata) {
    return _debug2.commandsWithTracingSnapshots.has(metadata.type + "." + metadata.method);
  }
  function createBeforeActionTraceEvent(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "before",
      callId: metadata.id,
      startTime: metadata.startTime,
      apiName: metadata.apiName || metadata.type + "." + metadata.method,
      class: metadata.type,
      method: metadata.method,
      params: metadata.params,
      stepId: metadata.stepId,
      pageId: metadata.pageId
    };
  }
  function createInputActionTraceEvent(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "input",
      callId: metadata.id,
      point: metadata.point
    };
  }
  function createActionLogTraceEvent(metadata, message) {
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "log",
      callId: metadata.id,
      time: (0, _utils2.monotonicTime)(),
      message
    };
  }
  function createAfterActionTraceEvent(metadata) {
    var _metadata$error;
    if (metadata.internal || metadata.method.startsWith("tracing")) return null;
    return {
      type: "after",
      callId: metadata.id,
      endTime: metadata.endTime,
      error: (_metadata$error = metadata.error) === null || _metadata$error === void 0 ? void 0 : _metadata$error.error,
      result: metadata.result,
      point: metadata.point
    };
  }
  return tracing$1;
}
var harRecorder = {};
var hasRequiredHarRecorder;
function requireHarRecorder() {
  if (hasRequiredHarRecorder) return harRecorder;
  hasRequiredHarRecorder = 1;
  Object.defineProperty(harRecorder, "__esModule", {
    value: true
  });
  harRecorder.HarRecorder = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var _artifact2 = artifact$1;
  var _harTracer = requireHarTracer();
  var _zipBundle2 = zipBundle;
  var _manualPromise2 = requireManualPromise();
  var _utils2 = requireUtils();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class HarRecorder {
    constructor(context, page2, options) {
      this._artifact = void 0;
      this._isFlushed = false;
      this._tracer = void 0;
      this._entries = [];
      this._zipFile = null;
      this._writtenZipEntries = /* @__PURE__ */ new Set();
      this._artifact = new _artifact2.Artifact(context, _path2.default.join(context._browser.options.artifactsDir, `${(0, _utils2.createGuid)()}.har`));
      const urlFilterRe = options.urlRegexSource !== void 0 && options.urlRegexFlags !== void 0 ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : void 0;
      const expectsZip = options.path.endsWith(".zip");
      const content = options.content || (expectsZip ? "attach" : "embed");
      this._tracer = new _harTracer.HarTracer(context, page2, this, {
        content,
        slimMode: options.mode === "minimal",
        includeTraceInfo: false,
        recordRequestOverrides: true,
        waitForContentOnStop: true,
        urlFilter: urlFilterRe !== null && urlFilterRe !== void 0 ? urlFilterRe : options.urlGlob
      });
      this._zipFile = content === "attach" || expectsZip ? new _zipBundle2.yazl.ZipFile() : null;
      this._tracer.start({
        omitScripts: false
      });
    }
    onEntryStarted(entry) {
      this._entries.push(entry);
    }
    onEntryFinished(entry) {
    }
    onContentBlob(sha1, buffer) {
      if (!this._zipFile || this._writtenZipEntries.has(sha1)) return;
      this._writtenZipEntries.add(sha1);
      this._zipFile.addBuffer(buffer, sha1);
    }
    async flush() {
      if (this._isFlushed) return;
      this._isFlushed = true;
      await this._tracer.flush();
      const log = this._tracer.stop();
      log.entries = this._entries;
      const harFileContent = jsonStringify({
        log
      });
      if (this._zipFile) {
        const result2 = new _manualPromise2.ManualPromise();
        this._zipFile.on("error", (error) => result2.reject(error));
        this._zipFile.addBuffer(Buffer.from(harFileContent, "utf-8"), "har.har");
        this._zipFile.end();
        this._zipFile.outputStream.pipe(_fs2.default.createWriteStream(this._artifact.localPath())).on("close", () => {
          result2.resolve();
        });
        await result2;
      } else {
        await _fs2.default.promises.writeFile(this._artifact.localPath(), harFileContent);
      }
    }
    async export() {
      await this.flush();
      this._artifact.reportFinished();
      return this._artifact;
    }
  }
  harRecorder.HarRecorder = HarRecorder;
  function jsonStringify(object) {
    const tokens = [];
    innerJsonStringify(object, tokens, "", false, void 0);
    return tokens.join("");
  }
  function innerJsonStringify(object, tokens, indent, flat, parentKey) {
    if (typeof object !== "object" || object === null) {
      tokens.push(JSON.stringify(object));
      return;
    }
    const isArray = Array.isArray(object);
    if (!isArray && object.constructor.name !== "Object") {
      tokens.push(JSON.stringify(object));
      return;
    }
    const entries = isArray ? object : Object.entries(object).filter((e) => e[1] !== void 0);
    if (!entries.length) {
      tokens.push(isArray ? `[]` : `{}`);
      return;
    }
    const childIndent = `${indent}  `;
    let brackets;
    if (isArray) brackets = flat ? {
      open: "[",
      close: "]"
    } : {
      open: `[
${childIndent}`,
      close: `
${indent}]`
    };
    else brackets = flat ? {
      open: "{ ",
      close: " }"
    } : {
      open: `{
${childIndent}`,
      close: `
${indent}}`
    };
    tokens.push(brackets.open);
    for (let i = 0; i < entries.length; ++i) {
      const entry = entries[i];
      if (i) tokens.push(flat ? `, ` : `,
${childIndent}`);
      if (!isArray) tokens.push(`${JSON.stringify(entry[0])}: `);
      const key = isArray ? void 0 : entry[0];
      const flatten = flat || key === "timings" || parentKey === "headers";
      innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);
    }
    tokens.push(brackets.close);
  }
  return harRecorder;
}
var recorder = {};
var consoleApiSource = {};
Object.defineProperty(consoleApiSource, "__esModule", {
  value: true
});
consoleApiSource.source = void 0;
consoleApiSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar consoleApi_exports = {};\n__export(consoleApi_exports, {\n  default: () => consoleApi_default\n});\nmodule.exports = __toCommonJS(consoleApi_exports);\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = "\'") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, \'"\');\n  if (char === "\'")\n    return char + escapedText.replace(/[\']/g, "\\\\\'") + char;\n  if (char === \'"\')\n    return char + escapedText.replace(/["]/g, \'\\\\"\') + char;\n  if (char === "`")\n    return char + escapedText.replace(/[`]/g, "`") + char;\n  throw new Error("Invalid escape char");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\([\'"`])/g, "$1$2$3");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["\'`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== "string")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== "string")\n    return escapeRegexForSelector(value);\n  return `"${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, \'\\\\"\')}"${exact ? "s" : "i"}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorUtils.ts\nfunction getByAttributeTextSelector(attrName, text, options) {\n  return `internal:attr=[${attrName}=${escapeForAttributeSelector(text, (options == null ? void 0 : options.exact) || false)}]`;\n}\nfunction getByTestIdSelector(testIdAttributeName, testId) {\n  return `internal:testid=[${testIdAttributeName}=${escapeForAttributeSelector(testId, true)}]`;\n}\nfunction getByLabelSelector(text, options) {\n  return "internal:label=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByAltTextSelector(text, options) {\n  return getByAttributeTextSelector("alt", text, options);\n}\nfunction getByTitleSelector(text, options) {\n  return getByAttributeTextSelector("title", text, options);\n}\nfunction getByPlaceholderSelector(text, options) {\n  return getByAttributeTextSelector("placeholder", text, options);\n}\nfunction getByTextSelector(text, options) {\n  return "internal:text=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByRoleSelector(role, options = {}) {\n  const props = [];\n  if (options.checked !== void 0)\n    props.push(["checked", String(options.checked)]);\n  if (options.disabled !== void 0)\n    props.push(["disabled", String(options.disabled)]);\n  if (options.selected !== void 0)\n    props.push(["selected", String(options.selected)]);\n  if (options.expanded !== void 0)\n    props.push(["expanded", String(options.expanded)]);\n  if (options.includeHidden !== void 0)\n    props.push(["include-hidden", String(options.includeHidden)]);\n  if (options.level !== void 0)\n    props.push(["level", String(options.level)]);\n  if (options.name !== void 0)\n    props.push(["name", escapeForAttributeSelector(options.name, !!options.exact)]);\n  if (options.pressed !== void 0)\n    props.push(["pressed", String(options.pressed)]);\n  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "InvalidCharacterError";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw "Spec Error: no more than three codepoints of lookahead.";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken("");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = "id";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === "url" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = "";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken("");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(""), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = "";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error("Internal parse error");\n  };\n  const consumeANumber = function() {\n    let repr = "";\n    let type = "integer";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error("I\'m infinite-looping!");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = "";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return "" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADSTRING";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADURL";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "WHITESPACE";\n  }\n  toString() {\n    return "WS";\n  }\n  toSource() {\n    return " ";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDO";\n  }\n  toSource() {\n    return "<!--";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDC";\n  }\n  toSource() {\n    return "-->";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ":";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ";";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ",";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n    this.mirror = "";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "{";\n    this.value = "{";\n    this.mirror = "}";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "}";\n    this.value = "}";\n    this.mirror = "{";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "[";\n    this.value = "[";\n    this.mirror = "]";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "]";\n    this.value = "]";\n    this.mirror = "[";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "(";\n    this.value = "(";\n    this.mirror = ")";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = ")";\n    this.value = ")";\n    this.mirror = "(";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "~=";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "|=";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "^=";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "$=";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "*=";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "||";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "EOF";\n  }\n  toSource() {\n    return "";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = "DELIM";\n    this.value = "";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return "DELIM(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === "\\\\")\n      return "\\\\\\n";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "IDENT";\n    this.value = val;\n  }\n  toString() {\n    return "IDENT(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "FUNCTION";\n    this.value = val;\n    this.mirror = ")";\n  }\n  toString() {\n    return "FUNCTION(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value) + "(";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "AT-KEYWORD";\n    this.value = val;\n  }\n  toString() {\n    return "AT(" + this.value + ")";\n  }\n  toSource() {\n    return "@" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "HASH";\n    this.value = val;\n    this.type = "unrestricted";\n  }\n  toString() {\n    return "HASH(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === "id")\n      return "#" + escapeIdent(this.value);\n    else\n      return "#" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "STRING";\n    this.value = val;\n  }\n  toString() {\n    return \'"\' + escapeString(this.value) + \'"\';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "URL";\n    this.value = val;\n  }\n  toString() {\n    return "URL(" + this.value + ")";\n  }\n  toSource() {\n    return \'url("\' + escapeString(this.value) + \'")\';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "NUMBER";\n    this.type = "integer";\n    this.repr = "";\n  }\n  toString() {\n    if (this.type === "integer")\n      return "INT(" + this.value + ")";\n    return "NUMBER(" + this.value + ")";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "PERCENTAGE";\n    this.repr = "";\n  }\n  toString() {\n    return "PERCENTAGE(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + "%";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "DIMENSION";\n    this.type = "integer";\n    this.repr = "";\n    this.unit = "";\n  }\n  toString() {\n    return "DIM(" + this.value + "," + this.unit + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = "\\\\65 " + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = "" + string;\n  let result = "";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + code.toString(16) + " ";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code === 34 || code === 92)\n      result += "\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing selector "${selector}"`;\n    const index = (e.stack || "").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here("hello")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing selector "${selector}"`);\n  let pos = 0;\n  const names = /* @__PURE__ */ new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing selector "${selector}"`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === "*";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = "";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {\n        pos++;\n        if (isIdent())\n          rawCSSString += "." + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += ":" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += "[";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += "]";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = "";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))\n    throw new InvalidSelectorError(`Error while parsing selector "${selector}"`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);\nvar kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);\nvar customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === "css" || part.name === "css:light") {\n      if (part.name === "css:light")\n        part.body = ":light(" + part.body + ")";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: "css",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse("[" + part.body + "]");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === "string")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === "css")\n        includeEngine = false;\n      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + "=" : "";\n    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;\n  }).join(" >> ");\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf("=");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === \'"\' && part[part.length - 1] === \'"\') {\n      name = "text";\n      body = part;\n    } else if (part.length > 1 && part[0] === "\'" && part[part.length - 1] === "\'") {\n      name = "text";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {\n      name = "xpath";\n      body = part;\n    } else {\n      name = "css";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === "*") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(">>")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === "\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === \'"\' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === ">" && selector[index + 1] === ">") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || "";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";\n  }\n  function readIdentifier() {\n    let result2 = "";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError("parsing quoted string");\n    while (!EOL && next() !== quote) {\n      if (next() === "\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError("parsing quoted string");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let source = "";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === "\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError("parsing regular expression");\n      } else if (inClass && next() === "]") {\n        inClass = false;\n      } else if (!inClass && next() === "[") {\n        inClass = true;\n      } else if (!inClass && next() === "/") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let flags = "";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = "";\n    skipSpaces();\n    if (next() === `\'` || next() === `"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError("parsing property path");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = "";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== "=")\n      op += eat1();\n    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))\n      syntaxError("parsing operator");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === ".") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === "]") {\n      eat1();\n      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === "/") {\n      if (operator !== "=")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `\'` || next() === `"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === "i" || next() === "I") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === "s" || next() === "S") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = "";\n      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))\n        value += eat1();\n      if (value === "true") {\n        value = true;\n      } else if (value === "false") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError("parsing attribute value");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== "]")\n      syntaxError("parsing attribute value");\n    eat1();\n    if (operator !== "=" && typeof value !== "string")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: "",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === "[") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  const tokens = [];\n  let nextBase = isFrameLocator ? "frame-locator" : "page";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = "locator";\n    if (part.name === "nth") {\n      if (part.body === "0")\n        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);\n      else if (part.body === "-1")\n        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);\n      else\n        tokens.push([factory.generateLocator(base, "nth", part.body)]);\n      continue;\n    }\n    if (part.name === "internal:text") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "text", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:has-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has-not-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));\n      continue;\n    }\n    if (part.name === "internal:has-not") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));\n      continue;\n    }\n    if (part.name === "internal:and") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));\n      continue;\n    }\n    if (part.name === "internal:or") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));\n      continue;\n    }\n    if (part.name === "internal:chain") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));\n      continue;\n    }\n    if (part.name === "internal:label") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "label", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:role") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === "name") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === "level" && typeof attr.value === "string")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === "internal:testid") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, "test-id", value)]);\n      continue;\n    }\n    if (part.name === "internal:attr") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === "placeholder") {\n        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);\n        continue;\n      }\n      if (name === "alt") {\n        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);\n        continue;\n      }\n      if (name === "title") {\n        tokens.push([factory.generateLocator(base, "title", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:control" && part.body === "enter-frame") {\n      tokens.push([factory.generateLocator(base, "frame", "")]);\n      nextBase = "frame-locator";\n      continue;\n    }\n    let locatorType = "default";\n    const nextPart = parts[index + 1];\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, locatorType, selectorPart);\n    if (locatorType === "default" && nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });\n        const options = {};\n        if (nextPart.name === "internal:has-text")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if (["xpath", "css"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, locatorType, selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => "");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return currentTokens.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith(\'"\')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith(\'"s\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith(\'"i\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case "has":\n        return `filter({ has: ${body} })`;\n      case "hasNot":\n        return `filter({ hasNot: ${body} })`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "\'");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case "frame":\n        return `content_frame`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first`;\n      case "last":\n        return `last`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === "string" ? this.quote(value) : value;\n          if (typeof value === "boolean")\n            valueString = value ? "True" : "False";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case "has-not-text":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case "has":\n        return `filter(has=${body})`;\n      case "hasNot":\n        return `filter(has_not=${body})`;\n      case "and":\n        return `and_(${body})`;\n      case "or":\n        return `or_(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("get_by_text", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("get_by_label", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("get_by_title", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";\n    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, \'\\\\"\')}"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case "page":\n        clazz = "Page";\n        break;\n      case "frame-locator":\n        clazz = "FrameLocator";\n        break;\n      case "locator":\n        clazz = "Locator";\n        break;\n    }\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case "has-text":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case "has-not-text":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case "has":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case "hasNot":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case "frame":\n        return `ContentFrame`;\n      case "nth":\n        return `Nth(${body})`;\n      case "first":\n        return `First`;\n      case "last":\n        return `Last`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case "has-text":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case "has":\n        return `Filter(new() { Has = ${body} })`;\n      case "hasNot":\n        return `Filter(new() { HasNot = ${body} })`;\n      case "and":\n        return `And(${body})`;\n      case "or":\n        return `Or(${body})`;\n      case "chain":\n        return `Locator(${body})`;\n      case "test-id":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("GetByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("GetByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("GetByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("GetByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/server/injected/consoleApi.ts\nvar selectorSymbol = Symbol("selector");\nvar _Locator = class _Locator {\n  constructor(injectedScript, selector, options) {\n    if (options == null ? void 0 : options.hasText)\n      selector += ` >> internal:has-text=${escapeForTextSelector(options.hasText, false)}`;\n    if (options == null ? void 0 : options.hasNotText)\n      selector += ` >> internal:has-not-text=${escapeForTextSelector(options.hasNotText, false)}`;\n    if (options == null ? void 0 : options.has)\n      selector += ` >> internal:has=` + JSON.stringify(options.has[selectorSymbol]);\n    if (options == null ? void 0 : options.hasNot)\n      selector += ` >> internal:has-not=` + JSON.stringify(options.hasNot[selectorSymbol]);\n    this[selectorSymbol] = selector;\n    if (selector) {\n      const parsed = injectedScript.parseSelector(selector);\n      this.element = injectedScript.querySelector(parsed, injectedScript.document, false);\n      this.elements = injectedScript.querySelectorAll(parsed, injectedScript.document);\n    }\n    const selectorBase = selector;\n    const self = this;\n    self.locator = (selector2, options2) => {\n      return new _Locator(injectedScript, selectorBase ? selectorBase + " >> " + selector2 : selector2, options2);\n    };\n    self.getByTestId = (testId) => self.locator(getByTestIdSelector(injectedScript.testIdAttributeNameForStrictErrorAndConsoleCodegen(), testId));\n    self.getByAltText = (text, options2) => self.locator(getByAltTextSelector(text, options2));\n    self.getByLabel = (text, options2) => self.locator(getByLabelSelector(text, options2));\n    self.getByPlaceholder = (text, options2) => self.locator(getByPlaceholderSelector(text, options2));\n    self.getByText = (text, options2) => self.locator(getByTextSelector(text, options2));\n    self.getByTitle = (text, options2) => self.locator(getByTitleSelector(text, options2));\n    self.getByRole = (role, options2 = {}) => self.locator(getByRoleSelector(role, options2));\n    self.filter = (options2) => new _Locator(injectedScript, selector, options2);\n    self.first = () => self.locator("nth=0");\n    self.last = () => self.locator("nth=-1");\n    self.nth = (index) => self.locator(`nth=${index}`);\n    self.and = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:and=` + JSON.stringify(locator[selectorSymbol]));\n    self.or = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:or=` + JSON.stringify(locator[selectorSymbol]));\n  }\n};\nselectorSymbol;\nvar Locator = _Locator;\nvar ConsoleAPI = class {\n  constructor(injectedScript) {\n    this._injectedScript = injectedScript;\n    if (this._injectedScript.window.playwright)\n      return;\n    this._injectedScript.window.playwright = {\n      $: (selector, strict) => this._querySelector(selector, !!strict),\n      $$: (selector) => this._querySelectorAll(selector),\n      inspect: (selector) => this._inspect(selector),\n      selector: (element) => this._selector(element),\n      generateLocator: (element, language) => this._generateLocator(element, language),\n      resume: () => this._resume(),\n      ...new Locator(injectedScript, "")\n    };\n    delete this._injectedScript.window.playwright.filter;\n    delete this._injectedScript.window.playwright.first;\n    delete this._injectedScript.window.playwright.last;\n    delete this._injectedScript.window.playwright.nth;\n    delete this._injectedScript.window.playwright.and;\n    delete this._injectedScript.window.playwright.or;\n  }\n  _querySelector(selector, strict) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.query(\'Playwright >> selector\').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelector(parsed, this._injectedScript.document, strict);\n  }\n  _querySelectorAll(selector) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.$$(\'Playwright >> selector\').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelectorAll(parsed, this._injectedScript.document);\n  }\n  _inspect(selector) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.inspect(\'Playwright >> selector\').`);\n    this._injectedScript.window.inspect(this._querySelector(selector, false));\n  }\n  _selector(element) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.selector(element).`);\n    return this._injectedScript.generateSelectorSimple(element);\n  }\n  _generateLocator(element, language) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.locator(element).`);\n    const selector = this._injectedScript.generateSelectorSimple(element);\n    return asLocator(language || "javascript", selector);\n  }\n  _resume() {\n    this._injectedScript.window.__pw_resume().catch(() => {\n    });\n  }\n};\nvar consoleApi_default = ConsoleAPI;\n';
var locatorParser = {};
Object.defineProperty(locatorParser, "__esModule", {
  value: true
});
locatorParser.locatorOrSelectorAsSelector = locatorOrSelectorAsSelector;
var _stringUtils$1 = stringUtils;
var _locatorGenerators = locatorGenerators;
var _selectorParser$1 = selectorParser;
function parseLocator(locator2, testIdAttributeName) {
  locator2 = locator2.replace(/AriaRole\s*\.\s*([\w]+)/g, (_, group) => group.toLowerCase()).replace(/(get_by_role|getByRole)\s*\(\s*(?:["'`])([^'"`]+)['"`]/g, (_, group1, group2) => `${group1}(${group2.toLowerCase()}`);
  const params = [];
  let template = "";
  for (let i = 0; i < locator2.length; ++i) {
    const quote2 = locator2[i];
    if (quote2 !== '"' && quote2 !== "'" && quote2 !== "`" && quote2 !== "/") {
      template += quote2;
      continue;
    }
    const isRegexEscaping = locator2[i - 1] === "r" || locator2[i] === "/";
    ++i;
    let text = "";
    while (i < locator2.length) {
      if (locator2[i] === "\\") {
        if (isRegexEscaping) {
          if (locator2[i + 1] !== quote2) text += locator2[i];
          ++i;
          text += locator2[i];
        } else {
          ++i;
          if (locator2[i] === "n") text += "\n";
          else if (locator2[i] === "r") text += "\r";
          else if (locator2[i] === "t") text += "	";
          else text += locator2[i];
        }
        ++i;
        continue;
      }
      if (locator2[i] !== quote2) {
        text += locator2[i++];
        continue;
      }
      break;
    }
    params.push({
      quote: quote2,
      text
    });
    template += (quote2 === "/" ? "r" : "") + "$" + params.length;
  }
  template = template.toLowerCase().replace(/get_by_alt_text/g, "getbyalttext").replace(/get_by_test_id/g, "getbytestid").replace(/get_by_([\w]+)/g, "getby$1").replace(/has_not_text/g, "hasnottext").replace(/has_text/g, "hastext").replace(/has_not/g, "hasnot").replace(/frame_locator/g, "framelocator").replace(/content_frame/g, "contentframe").replace(/[{}\s]/g, "").replace(/new\(\)/g, "").replace(/new[\w]+\.[\w]+options\(\)/g, "").replace(/\.set/g, ",set").replace(/\.or_\(/g, "or(").replace(/\.and_\(/g, "and(").replace(/:/g, "=").replace(/,re\.ignorecase/g, "i").replace(/,pattern.case_insensitive/g, "i").replace(/,regexoptions.ignorecase/g, "i").replace(/re.compile\(([^)]+)\)/g, "$1").replace(/pattern.compile\(([^)]+)\)/g, "r$1").replace(/newregex\(([^)]+)\)/g, "r$1").replace(/string=/g, "=").replace(/regex=/g, "=").replace(/,,/g, ",");
  const preferredQuote = params.map((p) => p.quote).filter((quote2) => "'\"`".includes(quote2))[0];
  return {
    selector: transform(template, params, testIdAttributeName),
    preferredQuote
  };
}
function countParams(template) {
  return [...template.matchAll(/\$\d+/g)].length;
}
function shiftParams(template, sub) {
  return template.replace(/\$(\d+)/g, (_, ordinal) => `$${ordinal - sub}`);
}
function transform(template, params, testIdAttributeName) {
  while (true) {
    const hasMatch = template.match(/filter\(,?(has=|hasnot=|sethas\(|sethasnot\()/);
    if (!hasMatch) break;
    const start = hasMatch.index + hasMatch[0].length;
    let balance = 0;
    let end = start;
    for (; end < template.length; end++) {
      if (template[end] === "(") balance++;
      else if (template[end] === ")") balance--;
      if (balance < 0) break;
    }
    let prefix = template.substring(0, start);
    let extraSymbol = 0;
    if (["sethas(", "sethasnot("].includes(hasMatch[1])) {
      extraSymbol = 1;
      prefix = prefix.replace(/sethas\($/, "has=").replace(/sethasnot\($/, "hasnot=");
    }
    const paramsCountBeforeHas = countParams(template.substring(0, start));
    const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);
    const paramsCountInHas = countParams(hasTemplate);
    const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);
    const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));
    template = prefix.replace(/=$/, "2=") + `$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);
    const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);
    const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);
    params = paramsBeforeHas.concat([{
      quote: '"',
      text: hasSelector
    }]).concat(paramsAfterHas);
  }
  template = template.replace(/\,set([\w]+)\(([^)]+)\)/g, (_, group1, group2) => "," + group1.toLowerCase() + "=" + group2.toLowerCase()).replace(/framelocator\(([^)]+)\)/g, "$1.internal:control=enter-frame").replace(/contentframe(\(\))?/g, "internal:control=enter-frame").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+),hasnottext=([^),]+)\)/g, "locator($1).internal:has-not-text=$2").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+)\)/g, "$1").replace(/getbyrole\(([^)]+)\)/g, "internal:role=$1").replace(/getbytext\(([^)]+)\)/g, "internal:text=$1").replace(/getbylabel\(([^)]+)\)/g, "internal:label=$1").replace(/getbytestid\(([^)]+)\)/g, `internal:testid=[${testIdAttributeName}=$1]`).replace(/getby(placeholder|alt|title)(?:text)?\(([^)]+)\)/g, "internal:attr=[$1=$2]").replace(/first(\(\))?/g, "nth=0").replace(/last(\(\))?/g, "nth=-1").replace(/nth\(([^)]+)\)/g, "nth=$1").replace(/filter\(,?hastext=([^)]+)\)/g, "internal:has-text=$1").replace(/filter\(,?hasnottext=([^)]+)\)/g, "internal:has-not-text=$1").replace(/filter\(,?has2=([^)]+)\)/g, "internal:has=$1").replace(/filter\(,?hasnot2=([^)]+)\)/g, "internal:has-not=$1").replace(/,exact=false/g, "").replace(/,exact=true/g, "s").replace(/\,/g, "][");
  const parts = template.split(".");
  for (let index = 0; index < parts.length - 1; index++) {
    if (parts[index] === "internal:control=enter-frame" && parts[index + 1].startsWith("nth=")) {
      const [nth] = parts.splice(index, 1);
      parts.splice(index + 1, 0, nth);
    }
  }
  return parts.map((t) => {
    if (!t.startsWith("internal:") || t === "internal:control") return t.replace(/\$(\d+)/g, (_, ordinal) => {
      const param = params[+ordinal - 1];
      return param.text;
    });
    t = t.includes("[") ? t.replace(/\]/, "") + "]" : t;
    t = t.replace(/(?:r)\$(\d+)(i)?/g, (_, ordinal, suffix) => {
      const param = params[+ordinal - 1];
      if (t.startsWith("internal:attr") || t.startsWith("internal:testid") || t.startsWith("internal:role")) return (0, _stringUtils$1.escapeForAttributeSelector)(new RegExp(param.text), false) + (suffix || "");
      return (0, _stringUtils$1.escapeForTextSelector)(new RegExp(param.text, suffix), false);
    }).replace(/\$(\d+)(i|s)?/g, (_, ordinal, suffix) => {
      const param = params[+ordinal - 1];
      if (t.startsWith("internal:has=") || t.startsWith("internal:has-not=")) return param.text;
      if (t.startsWith("internal:testid")) return (0, _stringUtils$1.escapeForAttributeSelector)(param.text, true);
      if (t.startsWith("internal:attr") || t.startsWith("internal:role")) return (0, _stringUtils$1.escapeForAttributeSelector)(param.text, suffix === "s");
      return (0, _stringUtils$1.escapeForTextSelector)(param.text, suffix === "s");
    });
    return t;
  }).join(" >> ");
}
function locatorOrSelectorAsSelector(language2, locator2, testIdAttributeName) {
  try {
    (0, _selectorParser$1.parseSelector)(locator2);
    return locator2;
  } catch (e) {
  }
  try {
    const {
      selector,
      preferredQuote
    } = parseLocator(locator2, testIdAttributeName);
    const locators = (0, _locatorGenerators.asLocators)(language2, selector, void 0, void 0, preferredQuote);
    const digest = digestForComparison(language2, locator2);
    if (locators.some((candidate) => digestForComparison(language2, candidate) === digest)) return selector;
  } catch (e) {
  }
  return "";
}
function digestForComparison(language2, locator2) {
  locator2 = locator2.replace(/\s/g, "");
  if (language2 === "javascript") locator2 = locator2.replace(/\\?["`]/g, "'");
  return locator2;
}
var contextRecorder = {};
var pollingRecorderSource = {};
Object.defineProperty(pollingRecorderSource, "__esModule", {
  value: true
});
pollingRecorderSource.source = void 0;
pollingRecorderSource.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/recorder/pollingRecorder.ts\nvar pollingRecorder_exports = {};\n__export(pollingRecorder_exports, {\n  PollingRecorder: () => PollingRecorder,\n  default: () => pollingRecorder_default\n});\nmodule.exports = __toCommonJS(pollingRecorder_exports);\n\n// packages/playwright-core/src/server/injected/recorder/clipPaths.ts\nvar svgJson = { "tagName": "svg", "children": [{ "tagName": "defs", "children": [{ "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gripper" }, "children": [{ "tagName": "path", "attrs": { "d": "M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-circle-large-filled" }, "children": [{ "tagName": "path", "attrs": { "d": "M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-inspect" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-whole-word" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M0 11H1V13H15V11H16V14H15H1H0V11Z" } }, { "tagName": "path", "attrs": { "d": "M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z" } }, { "tagName": "path", "attrs": { "d": "M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-eye" }, "children": [{ "tagName": "path", "attrs": { "d": "M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-symbol-constant" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M4 6h8v1H4V6zm8 3H4v1h8V9z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-check" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-close" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-pass" }, "children": [{ "tagName": "path", "attrs": { "d": "M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z" } }] }] }] };\nvar clipPaths_default = svgJson;\n\n// packages/playwright-core/src/server/injected/recorder/recorder.ts\nvar NoneTool = class {\n  cursor() {\n    return "default";\n  }\n};\nvar InspectTool = class {\n  constructor(recorder, assertVisibility) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n    this._recorder = recorder;\n    this._assertVisibility = assertVisibility;\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._hoveredSelectors = null;\n  }\n  onClick(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.button !== 0)\n      return;\n    if ((_a = this._hoveredModel) == null ? void 0 : _a.selector)\n      this._commit(this._hoveredModel.selector);\n  }\n  onContextMenu(event) {\n    if (this._hoveredModel && !this._hoveredModel.tooltipListItemSelected && this._hoveredSelectors && this._hoveredSelectors.length > 1) {\n      consumeEvent(event);\n      const selectors = this._hoveredSelectors;\n      this._hoveredModel.tooltipFooter = void 0;\n      this._hoveredModel.tooltipList = selectors.map((selector) => this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, selector));\n      this._hoveredModel.tooltipListItemSelected = (index) => {\n        if (index === void 0)\n          this._reset(true);\n        else\n          this._commit(selectors[index]);\n      };\n      this._recorder.updateHighlight(this._hoveredModel, true);\n    }\n  }\n  onPointerDown(event) {\n    consumeEvent(event);\n  }\n  onPointerUp(event) {\n    consumeEvent(event);\n  }\n  onMouseDown(event) {\n    consumeEvent(event);\n  }\n  onMouseUp(event) {\n    consumeEvent(event);\n  }\n  onMouseMove(event) {\n    var _a;\n    consumeEvent(event);\n    let target = this._recorder.deepEventTarget(event);\n    if (!target.isConnected)\n      target = null;\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    let model = null;\n    let selectors = [];\n    if (this._hoveredElement) {\n      const generated = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName, multiple: false });\n      selectors = generated.selectors;\n      model = {\n        selector: generated.selector,\n        elements: generated.elements,\n        tooltipText: this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, generated.selector),\n        tooltipFooter: selectors.length > 1 ? `Click to select, right-click for more options` : void 0,\n        color: this._assertVisibility ? "#8acae480" : void 0\n      };\n    }\n    if (((_a = this._hoveredModel) == null ? void 0 : _a.selector) === (model == null ? void 0 : model.selector))\n      return;\n    this._hoveredModel = model;\n    this._hoveredSelectors = selectors;\n    this._recorder.updateHighlight(model, true);\n  }\n  onMouseEnter(event) {\n    consumeEvent(event);\n  }\n  onMouseLeave(event) {\n    consumeEvent(event);\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE)\n      this._reset(true);\n  }\n  onKeyDown(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.key === "Escape") {\n      if ((_a = this._hoveredModel) == null ? void 0 : _a.tooltipListItemSelected)\n        this._reset(true);\n      else if (this._assertVisibility)\n        this._recorder.setMode("recording");\n    }\n  }\n  onKeyUp(event) {\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._reset(false);\n  }\n  _commit(selector) {\n    var _a;\n    if (this._assertVisibility) {\n      this._recorder.recordAction({\n        name: "assertVisible",\n        selector,\n        signals: []\n      });\n      this._recorder.setMode("recording");\n      (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingVisibility");\n    } else {\n      this._recorder.setSelector(selector);\n    }\n  }\n  _reset(userGesture) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._hoveredSelectors = null;\n    this._recorder.updateHighlight(null, userGesture);\n  }\n};\nvar RecordActionTool = class {\n  constructor(recorder) {\n    this._performingActions = /* @__PURE__ */ new Set();\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n    this._recorder = recorder;\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n  }\n  onClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (event.button === 2 && event.type === "auxclick")\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n    if (checkbox) {\n      this._performAction({\n        name: checkbox.checked ? "check" : "uncheck",\n        selector: this._hoveredModel.selector,\n        signals: []\n      });\n      return;\n    }\n    this._cancelPendingClickAction();\n    if (event.detail === 1) {\n      this._pendingClickAction = {\n        action: {\n          name: "click",\n          selector: this._hoveredModel.selector,\n          position: positionForEvent(event),\n          signals: [],\n          button: buttonForEvent(event),\n          modifiers: modifiersForEvent(event),\n          clickCount: event.detail\n        },\n        timeout: this._recorder.injectedScript.builtinSetTimeout(() => this._commitPendingClickAction(), 200)\n      };\n    }\n  }\n  onDblClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    this._cancelPendingClickAction();\n    this._performAction({\n      name: "click",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: buttonForEvent(event),\n      modifiers: modifiersForEvent(event),\n      clickCount: event.detail\n    });\n  }\n  _commitPendingClickAction() {\n    if (this._pendingClickAction)\n      this._performAction(this._pendingClickAction.action);\n    this._cancelPendingClickAction();\n  }\n  _cancelPendingClickAction() {\n    if (this._pendingClickAction)\n      clearTimeout(this._pendingClickAction.timeout);\n    this._pendingClickAction = void 0;\n  }\n  onContextMenu(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    this._performAction({\n      name: "click",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: "right",\n      modifiers: 0,\n      clickCount: 0\n    });\n  }\n  onPointerDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onPointerUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onMouseDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n    this._activeModel = this._hoveredModel;\n  }\n  onMouseUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onMouseMove(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    this._updateModelForHoveredElement();\n  }\n  onMouseLeave(event) {\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE) {\n      this._hoveredElement = null;\n      this._updateModelForHoveredElement();\n    }\n  }\n  onFocus(event) {\n    this._onFocus(true);\n  }\n  onInput(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (target.nodeName === "INPUT" && target.type.toLowerCase() === "file") {\n      this._recorder.recordAction({\n        name: "setInputFiles",\n        selector: this._activeModel.selector,\n        signals: [],\n        files: [...target.files || []].map((file) => file.name)\n      });\n      return;\n    }\n    if (isRangeInput(target)) {\n      this._recorder.recordAction({\n        name: "fill",\n        // must use hoveredModel instead of activeModel for it to work in webkit\n        selector: this._hoveredModel.selector,\n        signals: [],\n        text: target.value\n      });\n      return;\n    }\n    if (["INPUT", "TEXTAREA"].includes(target.nodeName) || target.isContentEditable) {\n      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {\n        return;\n      }\n      if (this._consumedDueWrongTarget(event))\n        return;\n      this._recorder.recordAction({\n        name: "fill",\n        selector: this._activeModel.selector,\n        signals: [],\n        text: target.isContentEditable ? target.innerText : target.value\n      });\n    }\n    if (target.nodeName === "SELECT") {\n      const selectElement = target;\n      if (this._actionInProgress(event))\n        return;\n      this._performAction({\n        name: "select",\n        selector: this._activeModel.selector,\n        options: [...selectElement.selectedOptions].map((option) => option.value),\n        signals: []\n      });\n    }\n  }\n  onKeyDown(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (this._actionInProgress(event)) {\n      this._expectProgrammaticKeyUp = true;\n      return;\n    }\n    if (this._consumedDueWrongTarget(event))\n      return;\n    if (event.key === " ") {\n      const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n      if (checkbox) {\n        this._performAction({\n          name: checkbox.checked ? "uncheck" : "check",\n          selector: this._activeModel.selector,\n          signals: []\n        });\n        return;\n      }\n    }\n    this._performAction({\n      name: "press",\n      selector: this._activeModel.selector,\n      signals: [],\n      key: event.key,\n      modifiers: modifiersForEvent(event)\n    });\n  }\n  onKeyUp(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (!this._expectProgrammaticKeyUp) {\n      consumeEvent(event);\n      return;\n    }\n    this._expectProgrammaticKeyUp = false;\n  }\n  onScroll(event) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._recorder.updateHighlight(null, false);\n  }\n  _onFocus(userGesture) {\n    const activeElement = deepActiveElement(this._recorder.document);\n    if (userGesture && activeElement === this._recorder.document.body)\n      return;\n    const result = activeElement ? this._recorder.injectedScript.generateSelector(activeElement, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    this._activeModel = result && result.selector ? result : null;\n    if (userGesture)\n      this._hoveredElement = activeElement;\n    this._updateModelForHoveredElement();\n  }\n  _shouldIgnoreMouseEvent(event) {\n    const target = this._recorder.deepEventTarget(event);\n    const nodeName = target.nodeName;\n    if (nodeName === "SELECT" || nodeName === "OPTION")\n      return true;\n    if (nodeName === "INPUT" && ["date", "range"].includes(target.type))\n      return true;\n    return false;\n  }\n  _actionInProgress(event) {\n    const isKeyEvent = event instanceof KeyboardEvent;\n    const isMouseOrPointerEvent = event instanceof MouseEvent || event instanceof PointerEvent;\n    for (const action of this._performingActions) {\n      if (isKeyEvent && action.name === "press" && event.key === action.key)\n        return true;\n      if (isMouseOrPointerEvent && (action.name === "click" || action.name === "check" || action.name === "uncheck"))\n        return true;\n    }\n    consumeEvent(event);\n    return false;\n  }\n  _consumedDueToNoModel(event, model) {\n    if (model)\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _consumedDueWrongTarget(event) {\n    if (this._activeModel && this._activeModel.elements[0] === this._recorder.deepEventTarget(event))\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _performAction(action) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._activeModel = null;\n    this._recorder.updateHighlight(null, false);\n    this._performingActions.add(action);\n    void this._recorder.performAction(action).then(() => {\n      this._performingActions.delete(action);\n      this._onFocus(false);\n      if (this._recorder.injectedScript.isUnderTest) {\n        console.error("Action performed for test: " + JSON.stringify({\n          // eslint-disable-line no-console\n          hovered: this._hoveredModel ? this._hoveredModel.selector : null,\n          active: this._activeModel ? this._activeModel.selector : null\n        }));\n      }\n    });\n  }\n  _shouldGenerateKeyPressFor(event) {\n    if (event.key === "Enter" && (this._recorder.deepEventTarget(event).nodeName === "TEXTAREA" || this._recorder.deepEventTarget(event).isContentEditable))\n      return false;\n    if (["Backspace", "Delete", "AltGraph"].includes(event.key))\n      return false;\n    if (event.key === "@" && event.code === "KeyL")\n      return false;\n    if (navigator.platform.includes("Mac")) {\n      if (event.key === "v" && event.metaKey)\n        return false;\n    } else {\n      if (event.key === "v" && event.ctrlKey)\n        return false;\n      if (event.key === "Insert" && event.shiftKey)\n        return false;\n    }\n    if (["Shift", "Control", "Meta", "Alt", "Process"].includes(event.key))\n      return false;\n    const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n    if (event.key.length === 1 && !hasModifier)\n      return !!asCheckbox(this._recorder.deepEventTarget(event));\n    return true;\n  }\n  _updateModelForHoveredElement() {\n    if (!this._hoveredElement || !this._hoveredElement.isConnected) {\n      this._hoveredModel = null;\n      this._hoveredElement = null;\n      this._recorder.updateHighlight(null, true);\n      return;\n    }\n    const { selector, elements } = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n    if (this._hoveredModel && this._hoveredModel.selector === selector)\n      return;\n    this._hoveredModel = selector ? { selector, elements, color: "#dc6f6f7f" } : null;\n    this._recorder.updateHighlight(this._hoveredModel, true);\n  }\n};\nvar TextAssertionTool = class {\n  constructor(recorder, kind) {\n    this._hoverHighlight = null;\n    this._action = null;\n    this._textCache = /* @__PURE__ */ new Map();\n    this._recorder = recorder;\n    this._kind = kind;\n    this._dialog = new Dialog(recorder);\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._dialog.close();\n    this._hoverHighlight = null;\n  }\n  onClick(event) {\n    consumeEvent(event);\n    if (this._kind === "value") {\n      this._commitAssertValue();\n    } else {\n      if (!this._dialog.isShowing())\n        this._showDialog();\n    }\n  }\n  onMouseDown(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._elementHasValue(target))\n      event.preventDefault();\n  }\n  onPointerUp(event) {\n    var _a;\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (this._kind === "value" && target && (target.nodeName === "INPUT" || target.nodeName === "SELECT") && target.disabled) {\n      this._commitAssertValue();\n    }\n  }\n  onMouseMove(event) {\n    var _a;\n    if (this._dialog.isShowing())\n      return;\n    const target = this._recorder.deepEventTarget(event);\n    if (((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]) === target)\n      return;\n    if (this._kind === "text")\n      this._hoverHighlight = this._recorder.injectedScript.utils.elementText(this._textCache, target).full ? { elements: [target], selector: "" } : null;\n    else\n      this._hoverHighlight = this._elementHasValue(target) ? this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    if (this._hoverHighlight)\n      this._hoverHighlight.color = "#8acae480";\n    this._recorder.updateHighlight(this._hoverHighlight, true);\n  }\n  onKeyDown(event) {\n    if (event.key === "Escape")\n      this._recorder.setMode("recording");\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._recorder.updateHighlight(this._hoverHighlight, false);\n  }\n  _elementHasValue(element) {\n    return element.nodeName === "TEXTAREA" || element.nodeName === "SELECT" || element.nodeName === "INPUT" && !["button", "image", "reset", "submit"].includes(element.type);\n  }\n  _generateAction() {\n    var _a;\n    this._textCache.clear();\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (!target)\n      return null;\n    if (this._kind === "value") {\n      if (!this._elementHasValue(target))\n        return null;\n      const { selector } = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {\n        return {\n          name: "assertChecked",\n          selector,\n          signals: [],\n          // Interestingly, inputElement.checked is reversed inside this event handler.\n          checked: !target.checked\n        };\n      } else {\n        return {\n          name: "assertValue",\n          selector,\n          signals: [],\n          value: target.value\n        };\n      }\n    } else {\n      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight.color = "#8acae480";\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: "assertText",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        text: this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized,\n        substring: true\n      };\n    }\n  }\n  _renderValue(action) {\n    if ((action == null ? void 0 : action.name) === "assertText")\n      return this._recorder.injectedScript.utils.normalizeWhiteSpace(action.text);\n    if ((action == null ? void 0 : action.name) === "assertChecked")\n      return String(action.checked);\n    if ((action == null ? void 0 : action.name) === "assertValue")\n      return action.value;\n    return "";\n  }\n  _commit() {\n    if (!this._action || !this._dialog.isShowing())\n      return;\n    this._dialog.close();\n    this._recorder.recordAction(this._action);\n    this._recorder.setMode("recording");\n  }\n  _showDialog() {\n    var _a;\n    if (!((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]))\n      return;\n    this._action = this._generateAction();\n    if (!this._action || this._action.name !== "assertText")\n      return;\n    const action = this._action;\n    const textElement = this._recorder.document.createElement("textarea");\n    textElement.setAttribute("spellcheck", "false");\n    textElement.value = this._renderValue(this._action);\n    textElement.classList.add("text-editor");\n    const updateAndValidate = () => {\n      var _a2;\n      const newValue = this._recorder.injectedScript.utils.normalizeWhiteSpace(textElement.value);\n      const target = (_a2 = this._hoverHighlight) == null ? void 0 : _a2.elements[0];\n      if (!target)\n        return;\n      action.text = newValue;\n      const targetText = this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized;\n      const matches = newValue && targetText.includes(newValue);\n      textElement.classList.toggle("does-not-match", !matches);\n    };\n    textElement.addEventListener("input", updateAndValidate);\n    const label = "Assert that element contains text";\n    const dialogElement = this._dialog.show({\n      label,\n      body: textElement,\n      onCommit: () => this._commit()\n    });\n    const position = this._recorder.highlight.tooltipPosition(this._recorder.highlight.firstBox(), dialogElement);\n    this._dialog.moveTo(position.anchorTop, position.anchorLeft);\n    textElement.focus();\n  }\n  _commitAssertValue() {\n    var _a;\n    if (this._kind !== "value")\n      return;\n    const action = this._generateAction();\n    if (!action)\n      return;\n    this._recorder.recordAction(action);\n    this._recorder.setMode("recording");\n    (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingValue");\n  }\n};\nvar Overlay = class {\n  constructor(recorder) {\n    this._listeners = [];\n    this._offsetX = 0;\n    this._measure = { width: 0, height: 0 };\n    this._recorder = recorder;\n    const document = this._recorder.document;\n    this._overlayElement = document.createElement("x-pw-overlay");\n    this._overlayElement.appendChild(createSvgElement(this._recorder.document, clipPaths_default));\n    const toolsListElement = document.createElement("x-pw-tools-list");\n    this._overlayElement.appendChild(toolsListElement);\n    this._dragHandle = document.createElement("x-pw-tool-gripper");\n    this._dragHandle.appendChild(document.createElement("x-div"));\n    toolsListElement.appendChild(this._dragHandle);\n    this._recordToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._recordToggle.title = "Record";\n    this._recordToggle.classList.add("record");\n    this._recordToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._recordToggle);\n    this._pickLocatorToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._pickLocatorToggle.title = "Pick locator";\n    this._pickLocatorToggle.classList.add("pick-locator");\n    this._pickLocatorToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._pickLocatorToggle);\n    this._assertVisibilityToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertVisibilityToggle.title = "Assert visibility";\n    this._assertVisibilityToggle.classList.add("visibility");\n    this._assertVisibilityToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertVisibilityToggle);\n    this._assertTextToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertTextToggle.title = "Assert text";\n    this._assertTextToggle.classList.add("text");\n    this._assertTextToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertTextToggle);\n    this._assertValuesToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertValuesToggle.title = "Assert value";\n    this._assertValuesToggle.classList.add("value");\n    this._assertValuesToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertValuesToggle);\n    this._updateVisualPosition();\n    this._refreshListeners();\n  }\n  _refreshListeners() {\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this._dragHandle, "mousedown", (event) => {\n        this._dragState = { offsetX: this._offsetX, dragStart: { x: event.clientX, y: 0 } };\n      }),\n      addEventListener(this._recordToggle, "click", () => {\n        this._recorder.setMode(this._recorder.state.mode === "none" || this._recorder.state.mode === "standby" || this._recorder.state.mode === "inspecting" ? "recording" : "standby");\n      }),\n      addEventListener(this._pickLocatorToggle, "click", () => {\n        const newMode = {\n          "inspecting": "standby",\n          "none": "inspecting",\n          "standby": "inspecting",\n          "recording": "recording-inspecting",\n          "recording-inspecting": "recording",\n          "assertingText": "recording-inspecting",\n          "assertingVisibility": "recording-inspecting",\n          "assertingValue": "recording-inspecting"\n        };\n        this._recorder.setMode(newMode[this._recorder.state.mode]);\n      }),\n      addEventListener(this._assertVisibilityToggle, "click", () => {\n        if (!this._assertVisibilityToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingVisibility" ? "recording" : "assertingVisibility");\n      }),\n      addEventListener(this._assertTextToggle, "click", () => {\n        if (!this._assertTextToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingText" ? "recording" : "assertingText");\n      }),\n      addEventListener(this._assertValuesToggle, "click", () => {\n        if (!this._assertValuesToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingValue" ? "recording" : "assertingValue");\n      })\n    ];\n  }\n  install() {\n    this._recorder.highlight.appendChild(this._overlayElement);\n    this._refreshListeners();\n    this._updateVisualPosition();\n  }\n  contains(element) {\n    return this._recorder.injectedScript.utils.isInsideScope(this._overlayElement, element);\n  }\n  setUIState(state) {\n    this._recordToggle.classList.toggle("active", state.mode === "recording" || state.mode === "assertingText" || state.mode === "assertingVisibility" || state.mode === "assertingValue" || state.mode === "recording-inspecting");\n    this._pickLocatorToggle.classList.toggle("active", state.mode === "inspecting" || state.mode === "recording-inspecting");\n    this._assertVisibilityToggle.classList.toggle("active", state.mode === "assertingVisibility");\n    this._assertVisibilityToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertTextToggle.classList.toggle("active", state.mode === "assertingText");\n    this._assertTextToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertValuesToggle.classList.toggle("active", state.mode === "assertingValue");\n    this._assertValuesToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    if (this._offsetX !== state.overlay.offsetX) {\n      this._offsetX = state.overlay.offsetX;\n      this._updateVisualPosition();\n    }\n    if (state.mode === "none")\n      this._hideOverlay();\n    else\n      this._showOverlay();\n  }\n  flashToolSucceeded(tool) {\n    const element = tool === "assertingVisibility" ? this._assertVisibilityToggle : this._assertValuesToggle;\n    element.classList.add("succeeded");\n    this._recorder.injectedScript.builtinSetTimeout(() => element.classList.remove("succeeded"), 2e3);\n  }\n  _hideOverlay() {\n    this._overlayElement.setAttribute("hidden", "true");\n  }\n  _showOverlay() {\n    if (!this._overlayElement.hasAttribute("hidden"))\n      return;\n    this._overlayElement.removeAttribute("hidden");\n    this._updateVisualPosition();\n  }\n  _updateVisualPosition() {\n    this._measure = this._overlayElement.getBoundingClientRect();\n    this._overlayElement.style.left = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 + this._offsetX + "px";\n  }\n  onMouseMove(event) {\n    if (!event.buttons) {\n      this._dragState = void 0;\n      return false;\n    }\n    if (this._dragState) {\n      this._offsetX = this._dragState.offsetX + event.clientX - this._dragState.dragStart.x;\n      const halfGapSize = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 - 10;\n      this._offsetX = Math.max(-halfGapSize, Math.min(halfGapSize, this._offsetX));\n      this._updateVisualPosition();\n      this._recorder.setOverlayState({ offsetX: this._offsetX });\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onMouseUp(event) {\n    if (this._dragState) {\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onClick(event) {\n    if (this._dragState) {\n      this._dragState = void 0;\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onDblClick(event) {\n    return false;\n  }\n};\nvar Recorder = class {\n  constructor(injectedScript) {\n    this._listeners = [];\n    this._actionSelectorModel = null;\n    this.state = {\n      mode: "none",\n      testIdAttributeName: "data-testid",\n      language: "javascript",\n      overlay: { offsetX: 0 }\n    };\n    this._delegate = {};\n    this.document = injectedScript.document;\n    this.injectedScript = injectedScript;\n    this.highlight = injectedScript.createHighlight();\n    this._tools = {\n      "none": new NoneTool(),\n      "standby": new NoneTool(),\n      "inspecting": new InspectTool(this, false),\n      "recording": new RecordActionTool(this),\n      "recording-inspecting": new InspectTool(this, false),\n      "assertingText": new TextAssertionTool(this, "text"),\n      "assertingVisibility": new InspectTool(this, true),\n      "assertingValue": new TextAssertionTool(this, "value")\n    };\n    this._currentTool = this._tools.none;\n    if (injectedScript.window.top === injectedScript.window) {\n      this.overlay = new Overlay(this);\n      this.overlay.setUIState(this.state);\n    }\n    this._stylesheet = new injectedScript.window.CSSStyleSheet();\n    this._stylesheet.replaceSync(`\n      body[data-pw-cursor=pointer] *, body[data-pw-cursor=pointer] *::after { cursor: pointer !important; }\n      body[data-pw-cursor=text] *, body[data-pw-cursor=text] *::after { cursor: text !important; }\n    `);\n    this.installListeners();\n    injectedScript.utils.cacheNormalizedWhitespaces();\n    if (injectedScript.isUnderTest)\n      console.error("Recorder script ready for test");\n  }\n  installListeners() {\n    var _a;\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this.document, "click", (event) => this._onClick(event), true),\n      addEventListener(this.document, "auxclick", (event) => this._onClick(event), true),\n      addEventListener(this.document, "dblclick", (event) => this._onDblClick(event), true),\n      addEventListener(this.document, "contextmenu", (event) => this._onContextMenu(event), true),\n      addEventListener(this.document, "dragstart", (event) => this._onDragStart(event), true),\n      addEventListener(this.document, "input", (event) => this._onInput(event), true),\n      addEventListener(this.document, "keydown", (event) => this._onKeyDown(event), true),\n      addEventListener(this.document, "keyup", (event) => this._onKeyUp(event), true),\n      addEventListener(this.document, "pointerdown", (event) => this._onPointerDown(event), true),\n      addEventListener(this.document, "pointerup", (event) => this._onPointerUp(event), true),\n      addEventListener(this.document, "mousedown", (event) => this._onMouseDown(event), true),\n      addEventListener(this.document, "mouseup", (event) => this._onMouseUp(event), true),\n      addEventListener(this.document, "mousemove", (event) => this._onMouseMove(event), true),\n      addEventListener(this.document, "mouseleave", (event) => this._onMouseLeave(event), true),\n      addEventListener(this.document, "mouseenter", (event) => this._onMouseEnter(event), true),\n      addEventListener(this.document, "focus", (event) => this._onFocus(event), true),\n      addEventListener(this.document, "scroll", (event) => this._onScroll(event), true)\n    ];\n    this.highlight.install();\n    let recreationInterval;\n    const recreate = () => {\n      this.highlight.install();\n      recreationInterval = this.injectedScript.builtinSetTimeout(recreate, 500);\n    };\n    recreationInterval = this.injectedScript.builtinSetTimeout(recreate, 500);\n    this._listeners.push(() => this.injectedScript.builtinClearTimeout(recreationInterval));\n    (_a = this.overlay) == null ? void 0 : _a.install();\n    this.document.adoptedStyleSheets.push(this._stylesheet);\n  }\n  _switchCurrentTool() {\n    var _a, _b, _c;\n    const newTool = this._tools[this.state.mode];\n    if (newTool === this._currentTool)\n      return;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.clearHighlight();\n    this._currentTool = newTool;\n    (_c = this.injectedScript.document.body) == null ? void 0 : _c.setAttribute("data-pw-cursor", newTool.cursor());\n  }\n  setUIState(state, delegate) {\n    var _a, _b, _c, _d;\n    this._delegate = delegate;\n    if (state.actionPoint && this.state.actionPoint && state.actionPoint.x === this.state.actionPoint.x && state.actionPoint.y === this.state.actionPoint.y) {\n    } else if (!state.actionPoint && !this.state.actionPoint) {\n    } else {\n      if (state.actionPoint)\n        this.highlight.showActionPoint(state.actionPoint.x, state.actionPoint.y);\n      else\n        this.highlight.hideActionPoint();\n    }\n    this.state = state;\n    this.highlight.setLanguage(state.language);\n    this._switchCurrentTool();\n    (_a = this.overlay) == null ? void 0 : _a.setUIState(state);\n    if (((_b = this._actionSelectorModel) == null ? void 0 : _b.selector) && !((_c = this._actionSelectorModel) == null ? void 0 : _c.elements.length))\n      this._actionSelectorModel = null;\n    if (state.actionSelector !== ((_d = this._actionSelectorModel) == null ? void 0 : _d.selector))\n      this._actionSelectorModel = state.actionSelector ? querySelector(this.injectedScript, state.actionSelector, this.document) : null;\n    if (this.state.mode === "none" || this.state.mode === "standby")\n      this.updateHighlight(this._actionSelectorModel, false);\n  }\n  clearHighlight() {\n    var _a, _b;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.updateHighlight(null, false);\n  }\n  _onClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onDblClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onDblClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onDblClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onContextMenu(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onContextMenu) == null ? void 0 : _b.call(_a, event);\n  }\n  _onDragStart(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onDragStart) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerUp) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseUp(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseUp(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseUp) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseMove(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseMove(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseMove) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseEnter(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseEnter) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseLeave(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseLeave) == null ? void 0 : _b.call(_a, event);\n  }\n  _onFocus(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onFocus) == null ? void 0 : _b.call(_a, event);\n  }\n  _onScroll(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    this.highlight.hideActionPoint();\n    (_b = (_a = this._currentTool).onScroll) == null ? void 0 : _b.call(_a, event);\n  }\n  _onInput(event) {\n    var _a, _b;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onInput) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyUp) == null ? void 0 : _b.call(_a, event);\n  }\n  updateHighlight(model, userGesture) {\n    var _a, _b;\n    let tooltipText = model == null ? void 0 : model.tooltipText;\n    if (tooltipText === void 0 && !(model == null ? void 0 : model.tooltipList) && (model == null ? void 0 : model.selector))\n      tooltipText = this.injectedScript.utils.asLocator(this.state.language, model.selector);\n    this.highlight.updateHighlight((model == null ? void 0 : model.elements) || [], { ...model, tooltipText });\n    if (userGesture)\n      (_b = (_a = this._delegate).highlightUpdated) == null ? void 0 : _b.call(_a);\n  }\n  _ignoreOverlayEvent(event) {\n    return event.composedPath().some((e) => {\n      const nodeName = e.nodeName || "";\n      return nodeName.toLowerCase() === "x-pw-glass";\n    });\n  }\n  deepEventTarget(event) {\n    var _a;\n    for (const element of event.composedPath()) {\n      if (!((_a = this.overlay) == null ? void 0 : _a.contains(element)))\n        return element;\n    }\n    return event.composedPath()[0];\n  }\n  setMode(mode) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setMode) == null ? void 0 : _b.call(_a, mode));\n  }\n  async performAction(action) {\n    var _a, _b;\n    await ((_b = (_a = this._delegate).performAction) == null ? void 0 : _b.call(_a, action).catch(() => {\n    }));\n  }\n  recordAction(action) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).recordAction) == null ? void 0 : _b.call(_a, action));\n  }\n  setOverlayState(state) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setOverlayState) == null ? void 0 : _b.call(_a, state));\n  }\n  setSelector(selector) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setSelector) == null ? void 0 : _b.call(_a, selector));\n  }\n};\nvar Dialog = class {\n  constructor(recorder) {\n    this._dialogElement = null;\n    this._recorder = recorder;\n  }\n  isShowing() {\n    return !!this._dialogElement;\n  }\n  show(options) {\n    const acceptButton = this._recorder.document.createElement("x-pw-tool-item");\n    acceptButton.title = "Accept";\n    acceptButton.classList.add("accept");\n    acceptButton.appendChild(this._recorder.document.createElement("x-div"));\n    acceptButton.addEventListener("click", () => options.onCommit());\n    const cancelButton = this._recorder.document.createElement("x-pw-tool-item");\n    cancelButton.title = "Close";\n    cancelButton.classList.add("cancel");\n    cancelButton.appendChild(this._recorder.document.createElement("x-div"));\n    cancelButton.addEventListener("click", () => {\n      var _a;\n      this.close();\n      (_a = options.onCancel) == null ? void 0 : _a.call(options);\n    });\n    this._dialogElement = this._recorder.document.createElement("x-pw-dialog");\n    this._keyboardListener = (event) => {\n      var _a;\n      if (event.key === "Escape") {\n        this.close();\n        (_a = options.onCancel) == null ? void 0 : _a.call(options);\n        return;\n      }\n      if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {\n        if (this._dialogElement)\n          options.onCommit();\n        return;\n      }\n    };\n    this._recorder.document.addEventListener("keydown", this._keyboardListener, true);\n    const toolbarElement = this._recorder.document.createElement("x-pw-tools-list");\n    const labelElement = this._recorder.document.createElement("label");\n    labelElement.textContent = options.label;\n    toolbarElement.appendChild(labelElement);\n    toolbarElement.appendChild(this._recorder.document.createElement("x-spacer"));\n    toolbarElement.appendChild(acceptButton);\n    toolbarElement.appendChild(cancelButton);\n    this._dialogElement.appendChild(toolbarElement);\n    const bodyElement = this._recorder.document.createElement("x-pw-dialog-body");\n    bodyElement.appendChild(options.body);\n    this._dialogElement.appendChild(bodyElement);\n    this._recorder.highlight.appendChild(this._dialogElement);\n    return this._dialogElement;\n  }\n  moveTo(top, left) {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.style.top = top + "px";\n    this._dialogElement.style.left = left + "px";\n  }\n  close() {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.remove();\n    this._recorder.document.removeEventListener("keydown", this._keyboardListener);\n    this._dialogElement = null;\n  }\n};\nfunction deepActiveElement(document) {\n  let activeElement = document.activeElement;\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement)\n    activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n}\nfunction modifiersForEvent(event) {\n  return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);\n}\nfunction buttonForEvent(event) {\n  switch (event.which) {\n    case 1:\n      return "left";\n    case 2:\n      return "middle";\n    case 3:\n      return "right";\n  }\n  return "left";\n}\nfunction positionForEvent(event) {\n  const targetElement = event.target;\n  if (targetElement.nodeName !== "CANVAS")\n    return;\n  return {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n}\nfunction consumeEvent(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.stopImmediatePropagation();\n}\nfunction asCheckbox(node) {\n  if (!node || node.nodeName !== "INPUT")\n    return null;\n  const inputElement = node;\n  return ["checkbox", "radio"].includes(inputElement.type) ? inputElement : null;\n}\nfunction isRangeInput(node) {\n  if (!node || node.nodeName !== "INPUT")\n    return false;\n  const inputElement = node;\n  return inputElement.type.toLowerCase() === "range";\n}\nfunction addEventListener(target, eventName, listener, useCapture) {\n  target.addEventListener(eventName, listener, useCapture);\n  const remove = () => {\n    target.removeEventListener(eventName, listener, useCapture);\n  };\n  return remove;\n}\nfunction removeEventListeners(listeners) {\n  for (const listener of listeners)\n    listener();\n  listeners.splice(0, listeners.length);\n}\nfunction querySelector(injectedScript, selector, ownerDocument) {\n  try {\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      elements: injectedScript.querySelectorAll(parsedSelector, ownerDocument)\n    };\n  } catch (e) {\n    return {\n      selector,\n      elements: []\n    };\n  }\n}\nfunction createSvgElement(doc, { tagName, attrs, children }) {\n  const elem = doc.createElementNS("http://www.w3.org/2000/svg", tagName);\n  if (attrs) {\n    for (const [k, v] of Object.entries(attrs))\n      elem.setAttribute(k, v);\n  }\n  if (children) {\n    for (const c of children)\n      elem.appendChild(createSvgElement(doc, c));\n  }\n  return elem;\n}\n\n// packages/playwright-core/src/server/injected/recorder/pollingRecorder.ts\nvar PollingRecorder = class {\n  constructor(injectedScript) {\n    this._recorder = new Recorder(injectedScript);\n    this._embedder = injectedScript.window;\n    injectedScript.onGlobalListenersRemoved.add(() => this._recorder.installListeners());\n    const refreshOverlay = () => {\n      this._pollRecorderMode().catch((e) => console.log(e));\n    };\n    this._embedder.__pw_refreshOverlay = refreshOverlay;\n    refreshOverlay();\n  }\n  async _pollRecorderMode() {\n    const pollPeriod = 1e3;\n    if (this._pollRecorderModeTimer)\n      clearTimeout(this._pollRecorderModeTimer);\n    const state = await this._embedder.__pw_recorderState().catch(() => {\n    });\n    if (!state) {\n      this._pollRecorderModeTimer = this._recorder.injectedScript.builtinSetTimeout(() => this._pollRecorderMode(), pollPeriod);\n      return;\n    }\n    const win = this._recorder.document.defaultView;\n    if (win.top !== win) {\n      state.actionPoint = void 0;\n    }\n    this._recorder.setUIState(state, this);\n    this._pollRecorderModeTimer = this._recorder.injectedScript.builtinSetTimeout(() => this._pollRecorderMode(), pollPeriod);\n  }\n  async performAction(action) {\n    await this._embedder.__pw_recorderPerformAction(action);\n  }\n  async recordAction(action) {\n    await this._embedder.__pw_recorderRecordAction(action);\n  }\n  async setSelector(selector) {\n    await this._embedder.__pw_recorderSetSelector(selector);\n  }\n  async setMode(mode) {\n    await this._embedder.__pw_recorderSetMode(mode);\n  }\n  async setOverlayState(state) {\n    await this._embedder.__pw_recorderSetOverlayState(state);\n  }\n};\nvar pollingRecorder_default = PollingRecorder;\n';
var languages = {};
var java = {};
var language = {};
Object.defineProperty(language, "__esModule", {
  value: true
});
language.fromKeyboardModifiers = fromKeyboardModifiers;
language.generateCode = generateCode;
language.sanitizeDeviceOptions = sanitizeDeviceOptions;
language.toClickOptionsForSourceCode = toClickOptionsForSourceCode;
language.toKeyboardModifiers = toKeyboardModifiers$1;
language.toSignalMap = toSignalMap;
function generateCode(actions, languageGenerator, options) {
  const header = languageGenerator.generateHeader(options);
  const footer = languageGenerator.generateFooter(options.saveStorage);
  const actionTexts = actions.map((a) => languageGenerator.generateAction(a)).filter(Boolean);
  const text = [header, ...actionTexts, footer].join("\n");
  return {
    header,
    footer,
    actionTexts,
    text
  };
}
function sanitizeDeviceOptions(device, options) {
  const cleanedOptions = {};
  for (const property in options) {
    if (JSON.stringify(device[property]) !== JSON.stringify(options[property])) cleanedOptions[property] = options[property];
  }
  return cleanedOptions;
}
function toSignalMap(action) {
  let popup;
  let download2;
  let dialog2;
  for (const signal of action.signals) {
    if (signal.name === "popup") popup = signal;
    else if (signal.name === "download") download2 = signal;
    else if (signal.name === "dialog") dialog2 = signal;
  }
  return {
    popup,
    download: download2,
    dialog: dialog2
  };
}
function toKeyboardModifiers$1(modifiers) {
  const result2 = [];
  if (modifiers & 1) result2.push("Alt");
  if (modifiers & 2) result2.push("ControlOrMeta");
  if (modifiers & 4) result2.push("ControlOrMeta");
  if (modifiers & 8) result2.push("Shift");
  return result2;
}
function fromKeyboardModifiers(modifiers) {
  let result2 = 0;
  if (!modifiers) return result2;
  if (modifiers.includes("Alt")) result2 |= 1;
  if (modifiers.includes("Control")) result2 |= 2;
  if (modifiers.includes("ControlOrMeta")) result2 |= 2;
  if (modifiers.includes("Meta")) result2 |= 4;
  if (modifiers.includes("Shift")) result2 |= 8;
  return result2;
}
function toClickOptionsForSourceCode(action) {
  const modifiers = toKeyboardModifiers$1(action.modifiers);
  const options = {};
  if (action.button !== "left") options.button = action.button;
  if (modifiers.length) options.modifiers = modifiers;
  if (action.clickCount > 2) options.clickCount = action.clickCount;
  if (action.position) options.position = action.position;
  return options;
}
var deviceDescriptors = {};
const require$$0 = {
  "Blackberry PlayBook": {
    userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.0 Safari/536.2+",
    viewport: {
      width: 600,
      height: 1024
    },
    deviceScaleFactor: 1,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Blackberry PlayBook landscape": {
    userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.0 Safari/536.2+",
    viewport: {
      width: 1024,
      height: 600
    },
    deviceScaleFactor: 1,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "BlackBerry Z30": {
    userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.0 Mobile Safari/537.10+",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "BlackBerry Z30 landscape": {
    userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.0 Mobile Safari/537.10+",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy Note 3": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.0 Mobile Safari/534.30",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy Note 3 landscape": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.0 Mobile Safari/534.30",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy Note II": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.0 Mobile Safari/534.30",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy Note II landscape": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.0 Mobile Safari/534.30",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy S III": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.0 Mobile Safari/534.30",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy S III landscape": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.0 Mobile Safari/534.30",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Galaxy S5": {
    userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy S5 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy S8": {
    userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 360,
      height: 740
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy S8 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 740,
      height: 360
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy S9+": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 320,
      height: 658
    },
    deviceScaleFactor: 4.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy S9+ landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 658,
      height: 320
    },
    deviceScaleFactor: 4.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy Tab S4": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    viewport: {
      width: 712,
      height: 1138
    },
    deviceScaleFactor: 2.25,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Galaxy Tab S4 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    viewport: {
      width: 1138,
      height: 712
    },
    deviceScaleFactor: 2.25,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "iPad (gen 5)": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 768,
      height: 1024
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad (gen 5) landscape": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 1024,
      height: 768
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad (gen 6)": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 768,
      height: 1024
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad (gen 6) landscape": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 1024,
      height: 768
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad (gen 7)": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 810,
      height: 1080
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad (gen 7) landscape": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 1080,
      height: 810
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad Mini": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 768,
      height: 1024
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad Mini landscape": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 1024,
      height: 768
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad Pro 11": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 834,
      height: 1194
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPad Pro 11 landscape": {
    userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 1194,
      height: 834
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 6": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 375,
      height: 667
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 6 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 667,
      height: 375
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 6 Plus": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 414,
      height: 736
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 6 Plus landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 736,
      height: 414
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 7": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 375,
      height: 667
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 7 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 667,
      height: 375
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 7 Plus": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 414,
      height: 736
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 7 Plus landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 736,
      height: 414
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 8": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 375,
      height: 667
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 8 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 667,
      height: 375
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 8 Plus": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 414,
      height: 736
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 8 Plus landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 736,
      height: 414
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone SE": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.0 Mobile/14E304 Safari/602.1",
    viewport: {
      width: 320,
      height: 568
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone SE landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.0 Mobile/14E304 Safari/602.1",
    viewport: {
      width: 568,
      height: 320
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone X": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 375,
      height: 812
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone X landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.0 Mobile/15A372 Safari/604.1",
    viewport: {
      width: 812,
      height: 375
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone XR": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 414,
      height: 896
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone XR landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    viewport: {
      width: 896,
      height: 414
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 11": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 414,
      height: 896
    },
    viewport: {
      width: 414,
      height: 715
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 11 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 414,
      height: 896
    },
    viewport: {
      width: 800,
      height: 364
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 11 Pro": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 375,
      height: 812
    },
    viewport: {
      width: 375,
      height: 635
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 11 Pro landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 375,
      height: 812
    },
    viewport: {
      width: 724,
      height: 325
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 11 Pro Max": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 414,
      height: 896
    },
    viewport: {
      width: 414,
      height: 715
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 11 Pro Max landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 414,
      height: 896
    },
    viewport: {
      width: 808,
      height: 364
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 390,
      height: 664
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 750,
      height: 340
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 Pro": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 390,
      height: 664
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 Pro landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 750,
      height: 340
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 Pro Max": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 428,
      height: 926
    },
    viewport: {
      width: 428,
      height: 746
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 Pro Max landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 428,
      height: 926
    },
    viewport: {
      width: 832,
      height: 378
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 Mini": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 375,
      height: 812
    },
    viewport: {
      width: 375,
      height: 629
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 12 Mini landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 375,
      height: 812
    },
    viewport: {
      width: 712,
      height: 325
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 390,
      height: 664
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 750,
      height: 342
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 Pro": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 390,
      height: 664
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 Pro landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 750,
      height: 342
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 Pro Max": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 428,
      height: 926
    },
    viewport: {
      width: 428,
      height: 746
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 Pro Max landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 428,
      height: 926
    },
    viewport: {
      width: 832,
      height: 380
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 Mini": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 375,
      height: 812
    },
    viewport: {
      width: 375,
      height: 629
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 13 Mini landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 375,
      height: 812
    },
    viewport: {
      width: 712,
      height: 327
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 390,
      height: 664
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 390,
      height: 844
    },
    viewport: {
      width: 750,
      height: 340
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 Plus": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 428,
      height: 926
    },
    viewport: {
      width: 428,
      height: 746
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 Plus landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 428,
      height: 926
    },
    viewport: {
      width: 832,
      height: 378
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 Pro": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 393,
      height: 852
    },
    viewport: {
      width: 393,
      height: 660
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 Pro landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 393,
      height: 852
    },
    viewport: {
      width: 734,
      height: 343
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 Pro Max": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 430,
      height: 932
    },
    viewport: {
      width: 430,
      height: 740
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 14 Pro Max landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 430,
      height: 932
    },
    viewport: {
      width: 814,
      height: 380
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 393,
      height: 852
    },
    viewport: {
      width: 393,
      height: 659
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 393,
      height: 852
    },
    viewport: {
      width: 734,
      height: 343
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 Plus": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 430,
      height: 932
    },
    viewport: {
      width: 430,
      height: 739
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 Plus landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 430,
      height: 932
    },
    viewport: {
      width: 814,
      height: 380
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 Pro": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 393,
      height: 852
    },
    viewport: {
      width: 393,
      height: 659
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 Pro landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 393,
      height: 852
    },
    viewport: {
      width: 734,
      height: 343
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 Pro Max": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 430,
      height: 932
    },
    viewport: {
      width: 430,
      height: 739
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "iPhone 15 Pro Max landscape": {
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
    screen: {
      width: 430,
      height: 932
    },
    viewport: {
      width: 814,
      height: 380
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Kindle Fire HDX": {
    userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
    viewport: {
      width: 800,
      height: 1280
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Kindle Fire HDX landscape": {
    userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
    viewport: {
      width: 1280,
      height: 800
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "LG Optimus L70": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 384,
      height: 640
    },
    deviceScaleFactor: 1.25,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "LG Optimus L70 landscape": {
    userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 640,
      height: 384
    },
    deviceScaleFactor: 1.25,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Microsoft Lumia 550": {
    userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36 Edge/14.14263",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Microsoft Lumia 550 landscape": {
    userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36 Edge/14.14263",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Microsoft Lumia 950": {
    userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36 Edge/14.14263",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 4,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Microsoft Lumia 950 landscape": {
    userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36 Edge/14.14263",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 4,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 10": {
    userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    viewport: {
      width: 800,
      height: 1280
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 10 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    viewport: {
      width: 1280,
      height: 800
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 4": {
    userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 384,
      height: 640
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 4 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 640,
      height: 384
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 5": {
    userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 5 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 5X": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 412,
      height: 732
    },
    deviceScaleFactor: 2.625,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 5X landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 732,
      height: 412
    },
    deviceScaleFactor: 2.625,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 6": {
    userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 412,
      height: 732
    },
    deviceScaleFactor: 3.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 6 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 732,
      height: 412
    },
    deviceScaleFactor: 3.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 6P": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 412,
      height: 732
    },
    deviceScaleFactor: 3.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 6P landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 732,
      height: 412
    },
    deviceScaleFactor: 3.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 7": {
    userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    viewport: {
      width: 600,
      height: 960
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nexus 7 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    viewport: {
      width: 960,
      height: 600
    },
    deviceScaleFactor: 2,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nokia Lumia 520": {
    userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
    viewport: {
      width: 320,
      height: 533
    },
    deviceScaleFactor: 1.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nokia Lumia 520 landscape": {
    userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
    viewport: {
      width: 533,
      height: 320
    },
    deviceScaleFactor: 1.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Nokia N9": {
    userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
    viewport: {
      width: 480,
      height: 854
    },
    deviceScaleFactor: 1,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Nokia N9 landscape": {
    userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
    viewport: {
      width: 854,
      height: 480
    },
    deviceScaleFactor: 1,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "webkit"
  },
  "Pixel 2": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 411,
      height: 731
    },
    deviceScaleFactor: 2.625,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 2 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 731,
      height: 411
    },
    deviceScaleFactor: 2.625,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 2 XL": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 411,
      height: 823
    },
    deviceScaleFactor: 3.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 2 XL landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 823,
      height: 411
    },
    deviceScaleFactor: 3.5,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 3": {
    userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 393,
      height: 786
    },
    deviceScaleFactor: 2.75,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 3 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 786,
      height: 393
    },
    deviceScaleFactor: 2.75,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 4": {
    userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 353,
      height: 745
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 4 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 745,
      height: 353
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 4a (5G)": {
    userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    screen: {
      width: 412,
      height: 892
    },
    viewport: {
      width: 412,
      height: 765
    },
    deviceScaleFactor: 2.63,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 4a (5G) landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    screen: {
      height: 892,
      width: 412
    },
    viewport: {
      width: 840,
      height: 312
    },
    deviceScaleFactor: 2.63,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 5": {
    userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    screen: {
      width: 393,
      height: 851
    },
    viewport: {
      width: 393,
      height: 727
    },
    deviceScaleFactor: 2.75,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 5 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    screen: {
      width: 851,
      height: 393
    },
    viewport: {
      width: 802,
      height: 293
    },
    deviceScaleFactor: 2.75,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 7": {
    userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    screen: {
      width: 412,
      height: 915
    },
    viewport: {
      width: 412,
      height: 839
    },
    deviceScaleFactor: 2.625,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Pixel 7 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    screen: {
      width: 915,
      height: 412
    },
    viewport: {
      width: 863,
      height: 360
    },
    deviceScaleFactor: 2.625,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Moto G4": {
    userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 360,
      height: 640
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Moto G4 landscape": {
    userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Mobile Safari/537.36",
    viewport: {
      width: 640,
      height: 360
    },
    deviceScaleFactor: 3,
    isMobile: true,
    hasTouch: true,
    defaultBrowserType: "chromium"
  },
  "Desktop Chrome HiDPI": {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    screen: {
      width: 1792,
      height: 1120
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 2,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "chromium"
  },
  "Desktop Edge HiDPI": {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36 Edg/130.0.6723.31",
    screen: {
      width: 1792,
      height: 1120
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 2,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "chromium"
  },
  "Desktop Firefox HiDPI": {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0",
    screen: {
      width: 1792,
      height: 1120
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 2,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "firefox"
  },
  "Desktop Safari": {
    userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Safari/605.1.15",
    screen: {
      width: 1792,
      height: 1120
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 2,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "webkit"
  },
  "Desktop Chrome": {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36",
    screen: {
      width: 1920,
      height: 1080
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 1,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "chromium"
  },
  "Desktop Edge": {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.31 Safari/537.36 Edg/130.0.6723.31",
    screen: {
      width: 1920,
      height: 1080
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 1,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "chromium"
  },
  "Desktop Firefox": {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0",
    screen: {
      width: 1920,
      height: 1080
    },
    viewport: {
      width: 1280,
      height: 720
    },
    deviceScaleFactor: 1,
    isMobile: false,
    hasTouch: false,
    defaultBrowserType: "firefox"
  }
};
Object.defineProperty(deviceDescriptors, "__esModule", {
  value: true
});
deviceDescriptors.deviceDescriptors = void 0;
var _deviceDescriptorsSource = _interopRequireDefault$b(require$$0);
function _interopRequireDefault$b(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
deviceDescriptors.deviceDescriptors = _deviceDescriptorsSource.default;
var javascript = {};
Object.defineProperty(javascript, "__esModule", {
  value: true
});
javascript.JavaScriptLanguageGenerator = javascript.JavaScriptFormatter = void 0;
var _language$4 = language;
var _deviceDescriptors$4 = deviceDescriptors;
var _utils$G = requireUtils();
class JavaScriptLanguageGenerator {
  constructor(isTest) {
    this.id = void 0;
    this.groupName = "Node.js";
    this.name = void 0;
    this.highlighter = "javascript";
    this._isTest = void 0;
    this.id = isTest ? "playwright-test" : "javascript";
    this.name = isTest ? "Test Runner" : "Library";
    this._isTest = isTest;
  }
  generateAction(actionInContext) {
    const action = actionInContext.action;
    if (this._isTest && (action.name === "openPage" || action.name === "closePage")) return "";
    const pageAlias = actionInContext.frame.pageAlias;
    const formatter = new JavaScriptFormatter(2);
    if (action.name === "openPage") {
      formatter.add(`const ${pageAlias} = await context.newPage();`);
      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`await ${pageAlias}.goto(${quote$3(action.url)});`);
      return formatter.format();
    }
    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.contentFrame()`);
    const subject = `${pageAlias}${locators.join("")}`;
    const signals = (0, _language$4.toSignalMap)(action);
    if (signals.dialog) {
      formatter.add(`  ${pageAlias}.once('dialog', dialog => {
    console.log(\`Dialog message: \${dialog.message()}\`);
    dialog.dismiss().catch(() => {});
  });`);
    }
    if (signals.popup) formatter.add(`const ${signals.popup.popupAlias}Promise = ${pageAlias}.waitForEvent('popup');`);
    if (signals.download) formatter.add(`const download${signals.download.downloadAlias}Promise = ${pageAlias}.waitForEvent('download');`);
    formatter.add(wrapWithStep(actionInContext.description, this._generateActionCall(subject, actionInContext)));
    if (signals.popup) formatter.add(`const ${signals.popup.popupAlias} = await ${signals.popup.popupAlias}Promise;`);
    if (signals.download) formatter.add(`const download${signals.download.downloadAlias} = await download${signals.download.downloadAlias}Promise;`);
    return formatter.format();
  }
  _generateActionCall(subject, actionInContext) {
    const action = actionInContext.action;
    switch (action.name) {
      case "openPage":
        throw Error("Not reached");
      case "closePage":
        return `await ${subject}.close();`;
      case "click": {
        let method = "click";
        if (action.clickCount === 2) method = "dblclick";
        const options = (0, _language$4.toClickOptionsForSourceCode)(action);
        const optionsString = formatOptions$1(options);
        return `await ${subject}.${this._asLocator(action.selector)}.${method}(${optionsString});`;
      }
      case "check":
        return `await ${subject}.${this._asLocator(action.selector)}.check();`;
      case "uncheck":
        return `await ${subject}.${this._asLocator(action.selector)}.uncheck();`;
      case "fill":
        return `await ${subject}.${this._asLocator(action.selector)}.fill(${quote$3(action.text)});`;
      case "setInputFiles":
        return `await ${subject}.${this._asLocator(action.selector)}.setInputFiles(${formatObject$1(action.files.length === 1 ? action.files[0] : action.files)});`;
      case "press": {
        const modifiers = (0, _language$4.toKeyboardModifiers)(action.modifiers);
        const shortcut = [...modifiers, action.key].join("+");
        return `await ${subject}.${this._asLocator(action.selector)}.press(${quote$3(shortcut)});`;
      }
      case "navigate":
        return `await ${subject}.goto(${quote$3(action.url)});`;
      case "select":
        return `await ${subject}.${this._asLocator(action.selector)}.selectOption(${formatObject$1(action.options.length > 1 ? action.options : action.options[0])});`;
      case "assertText":
        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "toContainText" : "toHaveText"}(${quote$3(action.text)});`;
      case "assertChecked":
        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".not"}.toBeChecked();`;
      case "assertVisible":
        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toBeVisible();`;
      case "assertValue": {
        const assertion = action.value ? `toHaveValue(${quote$3(action.value)})` : `toBeEmpty()`;
        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
      }
    }
  }
  _asLocator(selector) {
    return (0, _utils$G.asLocator)("javascript", selector);
  }
  generateHeader(options) {
    if (this._isTest) return this.generateTestHeader(options);
    return this.generateStandaloneHeader(options);
  }
  generateFooter(saveStorage) {
    if (this._isTest) return this.generateTestFooter(saveStorage);
    return this.generateStandaloneFooter(saveStorage);
  }
  generateTestHeader(options) {
    const formatter = new JavaScriptFormatter();
    const useText = formatContextOptions$3(options.contextOptions, options.deviceName);
    formatter.add(`
      import { test, expect${options.deviceName ? ", devices" : ""} } from '@playwright/test';
${useText ? "\ntest.use(" + useText + ");\n" : ""}
      test('test', async ({ page }) => {`);
    return formatter.format();
  }
  generateTestFooter(saveStorage) {
    return `});`;
  }
  generateStandaloneHeader(options) {
    const formatter = new JavaScriptFormatter();
    formatter.add(`
      const { ${options.browserName}${options.deviceName ? ", devices" : ""} } = require('playwright');

      (async () => {
        const browser = await ${options.browserName}.launch(${formatObjectOrVoid(options.launchOptions)});
        const context = await browser.newContext(${formatContextOptions$3(options.contextOptions, options.deviceName)});`);
    return formatter.format();
  }
  generateStandaloneFooter(saveStorage) {
    const storageStateLine = saveStorage ? `
  await context.storageState({ path: ${quote$3(saveStorage)} });` : "";
    return `
  // ---------------------${storageStateLine}
  await context.close();
  await browser.close();
})();`;
  }
}
javascript.JavaScriptLanguageGenerator = JavaScriptLanguageGenerator;
function formatOptions$1(value, hasArguments) {
  const keys = Object.keys(value);
  if (!keys.length) return "";
  return "" + formatObject$1(value);
}
function formatObject$1(value, indent = "  ") {
  if (typeof value === "string") return quote$3(value);
  if (Array.isArray(value)) return `[${value.map((o) => formatObject$1(o)).join(", ")}]`;
  if (typeof value === "object") {
    const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
    if (!keys.length) return "{}";
    const tokens = [];
    for (const key of keys) tokens.push(`${key}: ${formatObject$1(value[key])}`);
    return `{
${indent}${tokens.join(`,
${indent}`)}
}`;
  }
  return String(value);
}
function formatObjectOrVoid(value, indent = "  ") {
  const result2 = formatObject$1(value, indent);
  return result2 === "{}" ? "" : result2;
}
function formatContextOptions$3(options, deviceName) {
  const device = deviceName && _deviceDescriptors$4.deviceDescriptors[deviceName];
  if (!device) return formatObjectOrVoid(options);
  let serializedObject = formatObjectOrVoid((0, _language$4.sanitizeDeviceOptions)(device, options));
  if (!serializedObject) serializedObject = "{\n}";
  const lines = serializedObject.split("\n");
  lines.splice(1, 0, `...devices[${quote$3(deviceName)}],`);
  return lines.join("\n");
}
class JavaScriptFormatter {
  constructor(offset = 0) {
    this._baseIndent = void 0;
    this._baseOffset = void 0;
    this._lines = [];
    this._baseIndent = " ".repeat(2);
    this._baseOffset = " ".repeat(offset);
  }
  prepend(text) {
    this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
  }
  add(text) {
    this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
  }
  newLine() {
    this._lines.push("");
  }
  format() {
    let spaces = "";
    let previousLine = "";
    return this._lines.map((line) => {
      if (line === "") return line;
      if (line.startsWith("}") || line.startsWith("]")) spaces = spaces.substring(this._baseIndent.length);
      const extraSpaces = /^(for|while|if|try).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
      previousLine = line;
      const callCarryOver = line.startsWith(".set");
      line = spaces + extraSpaces + (callCarryOver ? this._baseIndent : "") + line;
      if (line.endsWith("{") || line.endsWith("[")) spaces += this._baseIndent;
      return this._baseOffset + line;
    }).join("\n");
  }
}
javascript.JavaScriptFormatter = JavaScriptFormatter;
function quote$3(text) {
  return (0, _utils$G.escapeWithQuotes)(text, "'");
}
function wrapWithStep(description2, body) {
  return description2 ? `await test.step(\`${description2}\`, async () => {
${body}
});` : body;
}
Object.defineProperty(java, "__esModule", {
  value: true
});
java.JavaLanguageGenerator = void 0;
var _language$3 = language;
var _deviceDescriptors$3 = deviceDescriptors;
var _javascript$1 = javascript;
var _utils$F = requireUtils();
class JavaLanguageGenerator {
  constructor(mode) {
    this.id = void 0;
    this.groupName = "Java";
    this.name = void 0;
    this.highlighter = "java";
    this._mode = void 0;
    if (mode === "library") {
      this.name = "Library";
      this.id = "java";
    } else if (mode === "junit") {
      this.name = "JUnit";
      this.id = "java-junit";
    } else {
      throw new Error(`Unknown Java language mode: ${mode}`);
    }
    this._mode = mode;
  }
  generateAction(actionInContext) {
    const action = actionInContext.action;
    const pageAlias = actionInContext.frame.pageAlias;
    const offset = this._mode === "junit" ? 4 : 6;
    const formatter = new _javascript$1.JavaScriptFormatter(offset);
    if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage")) return "";
    if (action.name === "openPage") {
      formatter.add(`Page ${pageAlias} = context.newPage();`);
      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`${pageAlias}.navigate(${quote$2(action.url)});`);
      return formatter.format();
    }
    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector, false)}.contentFrame()`);
    const subject = `${pageAlias}${locators.join("")}`;
    const signals = (0, _language$3.toSignalMap)(action);
    if (signals.dialog) {
      formatter.add(`  ${pageAlias}.onceDialog(dialog -> {
        System.out.println(String.format("Dialog message: %s", dialog.message()));
        dialog.dismiss();
      });`);
    }
    let code = this._generateActionCall(subject, actionInContext, !!actionInContext.frame.framePath.length);
    if (signals.popup) {
      code = `Page ${signals.popup.popupAlias} = ${pageAlias}.waitForPopup(() -> {
        ${code}
      });`;
    }
    if (signals.download) {
      code = `Download download${signals.download.downloadAlias} = ${pageAlias}.waitForDownload(() -> {
        ${code}
      });`;
    }
    formatter.add(code);
    return formatter.format();
  }
  _generateActionCall(subject, actionInContext, inFrameLocator) {
    const action = actionInContext.action;
    switch (action.name) {
      case "openPage":
        throw Error("Not reached");
      case "closePage":
        return `${subject}.close();`;
      case "click": {
        let method = "click";
        if (action.clickCount === 2) method = "dblclick";
        const options = (0, _language$3.toClickOptionsForSourceCode)(action);
        const optionsText = formatClickOptions(options);
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.${method}(${optionsText});`;
      }
      case "check":
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.check();`;
      case "uncheck":
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.uncheck();`;
      case "fill":
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.fill(${quote$2(action.text)});`;
      case "setInputFiles":
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.setInputFiles(${formatPath(action.files.length === 1 ? action.files[0] : action.files)});`;
      case "press": {
        const modifiers = (0, _language$3.toKeyboardModifiers)(action.modifiers);
        const shortcut = [...modifiers, action.key].join("+");
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.press(${quote$2(shortcut)});`;
      }
      case "navigate":
        return `${subject}.navigate(${quote$2(action.url)});`;
      case "select":
        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.selectOption(${formatSelectOption(action.options.length > 1 ? action.options : action.options[0])});`;
      case "assertText":
        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${action.substring ? "containsText" : "hasText"}(${quote$2(action.text)});`;
      case "assertChecked":
        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)})${action.checked ? "" : ".not()"}.isChecked();`;
      case "assertVisible":
        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).isVisible();`;
      case "assertValue": {
        const assertion = action.value ? `hasValue(${quote$2(action.value)})` : `isEmpty()`;
        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${assertion};`;
      }
    }
  }
  _asLocator(selector, inFrameLocator) {
    return (0, _utils$F.asLocator)("java", selector, inFrameLocator);
  }
  generateHeader(options) {
    const formatter = new _javascript$1.JavaScriptFormatter();
    if (this._mode === "junit") {
      formatter.add(`
      import com.microsoft.playwright.junit.UsePlaywright;
      import com.microsoft.playwright.Page;
      import com.microsoft.playwright.options.*;

      import org.junit.jupiter.api.*;
      import static com.microsoft.playwright.assertions.PlaywrightAssertions.*;

      @UsePlaywright
      public class TestExample {
        @Test
        void test(Page page) {`);
      return formatter.format();
    }
    formatter.add(`
    import com.microsoft.playwright.*;
    import com.microsoft.playwright.options.*;
    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    import java.util.*;

    public class Example {
      public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
          Browser browser = playwright.${options.browserName}().launch(${formatLaunchOptions(options.launchOptions)});
          BrowserContext context = browser.newContext(${formatContextOptions$2(options.contextOptions, options.deviceName)});`);
    return formatter.format();
  }
  generateFooter(saveStorage) {
    const storageStateLine = saveStorage ? `
      context.storageState(new BrowserContext.StorageStateOptions().setPath(${quote$2(saveStorage)}));
` : "";
    if (this._mode === "junit") {
      return `${storageStateLine}  }
}`;
    }
    return `${storageStateLine}    }
  }
}`;
  }
}
java.JavaLanguageGenerator = JavaLanguageGenerator;
function formatPath(files) {
  if (Array.isArray(files)) {
    if (files.length === 0) return "new Path[0]";
    return `new Path[] {${files.map((s) => "Paths.get(" + quote$2(s) + ")").join(", ")}}`;
  }
  return `Paths.get(${quote$2(files)})`;
}
function formatSelectOption(options) {
  if (Array.isArray(options)) {
    if (options.length === 0) return "new String[0]";
    return `new String[] {${options.map((s) => quote$2(s)).join(", ")}}`;
  }
  return quote$2(options);
}
function formatLaunchOptions(options) {
  const lines = [];
  if (!Object.keys(options).filter((key) => options[key] !== void 0).length) return "";
  lines.push("new BrowserType.LaunchOptions()");
  if (options.channel) lines.push(`  .setChannel(${quote$2(options.channel)})`);
  if (typeof options.headless === "boolean") lines.push(`  .setHeadless(false)`);
  return lines.join("\n");
}
function formatContextOptions$2(contextOptions, deviceName) {
  var _options$recordHar, _options$recordHar2, _options$recordHar3, _options$recordHar4, _options$recordHar5, _options$recordHar6, _options$recordHar7;
  const lines = [];
  if (!Object.keys(contextOptions).length && !deviceName) return "";
  const device = deviceName ? _deviceDescriptors$3.deviceDescriptors[deviceName] : {};
  const options = {
    ...device,
    ...contextOptions
  };
  lines.push("new Browser.NewContextOptions()");
  if (options.acceptDownloads) lines.push(`  .setAcceptDownloads(true)`);
  if (options.bypassCSP) lines.push(`  .setBypassCSP(true)`);
  if (options.colorScheme) lines.push(`  .setColorScheme(ColorScheme.${options.colorScheme.toUpperCase()})`);
  if (options.deviceScaleFactor) lines.push(`  .setDeviceScaleFactor(${options.deviceScaleFactor})`);
  if (options.geolocation) lines.push(`  .setGeolocation(${options.geolocation.latitude}, ${options.geolocation.longitude})`);
  if (options.hasTouch) lines.push(`  .setHasTouch(${options.hasTouch})`);
  if (options.isMobile) lines.push(`  .setIsMobile(${options.isMobile})`);
  if (options.locale) lines.push(`  .setLocale(${quote$2(options.locale)})`);
  if (options.proxy) lines.push(`  .setProxy(new Proxy(${quote$2(options.proxy.server)}))`);
  if ((_options$recordHar = options.recordHar) !== null && _options$recordHar !== void 0 && _options$recordHar.content) lines.push(`  .setRecordHarContent(HarContentPolicy.${(_options$recordHar2 = options.recordHar) === null || _options$recordHar2 === void 0 ? void 0 : _options$recordHar2.content.toUpperCase()})`);
  if ((_options$recordHar3 = options.recordHar) !== null && _options$recordHar3 !== void 0 && _options$recordHar3.mode) lines.push(`  .setRecordHarMode(HarMode.${(_options$recordHar4 = options.recordHar) === null || _options$recordHar4 === void 0 ? void 0 : _options$recordHar4.mode.toUpperCase()})`);
  if ((_options$recordHar5 = options.recordHar) !== null && _options$recordHar5 !== void 0 && _options$recordHar5.omitContent) lines.push(`  .setRecordHarOmitContent(true)`);
  if ((_options$recordHar6 = options.recordHar) !== null && _options$recordHar6 !== void 0 && _options$recordHar6.path) lines.push(`  .setRecordHarPath(Paths.get(${quote$2(options.recordHar.path)}))`);
  if ((_options$recordHar7 = options.recordHar) !== null && _options$recordHar7 !== void 0 && _options$recordHar7.urlFilter) lines.push(`  .setRecordHarUrlFilter(${quote$2(options.recordHar.urlFilter)})`);
  if (options.serviceWorkers) lines.push(`  .setServiceWorkers(ServiceWorkerPolicy.${options.serviceWorkers.toUpperCase()})`);
  if (options.storageState) lines.push(`  .setStorageStatePath(Paths.get(${quote$2(options.storageState)}))`);
  if (options.timezoneId) lines.push(`  .setTimezoneId(${quote$2(options.timezoneId)})`);
  if (options.userAgent) lines.push(`  .setUserAgent(${quote$2(options.userAgent)})`);
  if (options.viewport) lines.push(`  .setViewportSize(${options.viewport.width}, ${options.viewport.height})`);
  return lines.join("\n");
}
function formatClickOptions(options) {
  const lines = [];
  if (options.button) lines.push(`  .setButton(MouseButton.${options.button.toUpperCase()})`);
  if (options.modifiers) lines.push(`  .setModifiers(Arrays.asList(${options.modifiers.map((m) => `KeyboardModifier.${m.toUpperCase()}`).join(", ")}))`);
  if (options.clickCount) lines.push(`  .setClickCount(${options.clickCount})`);
  if (options.position) lines.push(`  .setPosition(${options.position.x}, ${options.position.y})`);
  if (!lines.length) return "";
  lines.unshift(`new Locator.ClickOptions()`);
  return lines.join("\n");
}
function quote$2(text) {
  return (0, _utils$F.escapeWithQuotes)(text, '"');
}
var jsonl = {};
Object.defineProperty(jsonl, "__esModule", {
  value: true
});
jsonl.JsonlLanguageGenerator = void 0;
var _utils$E = requireUtils();
class JsonlLanguageGenerator {
  constructor() {
    this.id = "jsonl";
    this.groupName = "";
    this.name = "JSONL";
    this.highlighter = "javascript";
  }
  generateAction(actionInContext) {
    const locator2 = actionInContext.action.selector ? JSON.parse((0, _utils$E.asLocator)("jsonl", actionInContext.action.selector)) : void 0;
    const entry = {
      ...actionInContext.action,
      pageAlias: actionInContext.frame.pageAlias,
      locator: locator2
    };
    return JSON.stringify(entry);
  }
  generateHeader(options) {
    return JSON.stringify(options);
  }
  generateFooter(saveStorage) {
    return "";
  }
}
jsonl.JsonlLanguageGenerator = JsonlLanguageGenerator;
var csharp = {};
Object.defineProperty(csharp, "__esModule", {
  value: true
});
csharp.CSharpLanguageGenerator = void 0;
var _language$2 = language;
var _utils$D = requireUtils();
var _deviceDescriptors$2 = deviceDescriptors;
class CSharpLanguageGenerator {
  constructor(mode) {
    this.id = void 0;
    this.groupName = ".NET C#";
    this.name = void 0;
    this.highlighter = "csharp";
    this._mode = void 0;
    if (mode === "library") {
      this.name = "Library";
      this.id = "csharp";
    } else if (mode === "mstest") {
      this.name = "MSTest";
      this.id = "csharp-mstest";
    } else if (mode === "nunit") {
      this.name = "NUnit";
      this.id = "csharp-nunit";
    } else {
      throw new Error(`Unknown C# language mode: ${mode}`);
    }
    this._mode = mode;
  }
  generateAction(actionInContext) {
    const action = this._generateActionInner(actionInContext);
    if (action) return action;
    return "";
  }
  _generateActionInner(actionInContext) {
    const action = actionInContext.action;
    if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage")) return "";
    let pageAlias = actionInContext.frame.pageAlias;
    if (this._mode !== "library") pageAlias = pageAlias.replace("page", "Page");
    const formatter = new CSharpFormatter(this._mode === "library" ? 0 : 8);
    if (action.name === "openPage") {
      formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);
      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`await ${pageAlias}.GotoAsync(${quote$1(action.url)});`);
      return formatter.format();
    }
    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.ContentFrame`);
    const subject = `${pageAlias}${locators.join("")}`;
    const signals = (0, _language$2.toSignalMap)(action);
    if (signals.dialog) {
      formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)
      {
          Console.WriteLine($"Dialog message: {dialog.Message}");
          dialog.DismissAsync();
          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;
      }
      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);
    }
    const lines = [];
    lines.push(this._generateActionCall(subject, actionInContext));
    if (signals.download) {
      lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>
{`);
      lines.push(`});`);
    }
    if (signals.popup) {
      lines.unshift(`var ${signals.popup.popupAlias} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>
{`);
      lines.push(`});`);
    }
    for (const line of lines) formatter.add(line);
    return formatter.format();
  }
  _generateActionCall(subject, actionInContext) {
    const action = actionInContext.action;
    switch (action.name) {
      case "openPage":
        throw Error("Not reached");
      case "closePage":
        return `await ${subject}.CloseAsync();`;
      case "click": {
        let method = "Click";
        if (action.clickCount === 2) method = "DblClick";
        const options = (0, _language$2.toClickOptionsForSourceCode)(action);
        if (!Object.entries(options).length) return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;
        const optionsString = formatObject(options, "    ", "Locator" + method + "Options");
        return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;
      }
      case "check":
        return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;
      case "uncheck":
        return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;
      case "fill":
        return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote$1(action.text)});`;
      case "setInputFiles":
        return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;
      case "press": {
        const modifiers = (0, _language$2.toKeyboardModifiers)(action.modifiers);
        const shortcut = [...modifiers, action.key].join("+");
        return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote$1(shortcut)});`;
      }
      case "navigate":
        return `await ${subject}.GotoAsync(${quote$1(action.url)});`;
      case "select":
        return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;
      case "assertText":
        return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "ToContainTextAsync" : "ToHaveTextAsync"}(${quote$1(action.text)});`;
      case "assertChecked":
        return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".Not"}.ToBeCheckedAsync();`;
      case "assertVisible":
        return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;
      case "assertValue": {
        const assertion = action.value ? `ToHaveValueAsync(${quote$1(action.value)})` : `ToBeEmptyAsync()`;
        return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
      }
    }
  }
  _asLocator(selector) {
    return (0, _utils$D.asLocator)("csharp", selector);
  }
  generateHeader(options) {
    if (this._mode === "library") return this.generateStandaloneHeader(options);
    return this.generateTestRunnerHeader(options);
  }
  generateStandaloneHeader(options) {
    const formatter = new CSharpFormatter(0);
    formatter.add(`
      using Microsoft.Playwright;
      using System;
      using System.Threading.Tasks;

      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, "    ", "BrowserTypeLaunchOptions")});
      var context = await browser.NewContextAsync(${formatContextOptions$1(options.contextOptions, options.deviceName)});`);
    formatter.newLine();
    return formatter.format();
  }
  generateTestRunnerHeader(options) {
    const formatter = new CSharpFormatter(0);
    formatter.add(`
      using Microsoft.Playwright.${this._mode === "nunit" ? "NUnit" : "MSTest"};
      using Microsoft.Playwright;

      ${this._mode === "nunit" ? `[Parallelizable(ParallelScope.Self)]
      [TestFixture]` : "[TestClass]"}
      public class Tests : PageTest
      {`);
    const formattedContextOptions = formatContextOptions$1(options.contextOptions, options.deviceName);
    if (formattedContextOptions) {
      formatter.add(`public override BrowserNewContextOptions ContextOptions()
      {
          return ${formattedContextOptions};
      }`);
      formatter.newLine();
    }
    formatter.add(`    [${this._mode === "nunit" ? "Test" : "TestMethod"}]
    public async Task MyTest()
    {`);
    return formatter.format();
  }
  generateFooter(saveStorage) {
    const offset = this._mode === "library" ? "" : "        ";
    let storageStateLine = saveStorage ? `
${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions
${offset}{
${offset}    Path = ${quote$1(saveStorage)}
${offset}});
` : "";
    if (this._mode !== "library") storageStateLine += `    }
}
`;
    return storageStateLine;
  }
}
csharp.CSharpLanguageGenerator = CSharpLanguageGenerator;
function formatObject(value, indent = "    ", name2 = "") {
  if (typeof value === "string") {
    if (["permissions", "colorScheme", "modifiers", "button", "recordHarContent", "recordHarMode", "serviceWorkers"].includes(name2)) return `${getClassName(name2)}.${toPascal(value)}`;
    return quote$1(value);
  }
  if (Array.isArray(value)) return `new[] { ${value.map((o) => formatObject(o, indent, name2)).join(", ")} }`;
  if (typeof value === "object") {
    const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
    if (!keys.length) return name2 ? `new ${getClassName(name2)}` : "";
    const tokens = [];
    for (const key of keys) {
      const property = getPropertyName(key);
      tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);
    }
    if (name2) return `new ${getClassName(name2)}
{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
    return `{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
  }
  if (name2 === "latitude" || name2 === "longitude") return String(value) + "m";
  return String(value);
}
function getClassName(value) {
  switch (value) {
    case "viewport":
      return "ViewportSize";
    case "proxy":
      return "ProxySettings";
    case "permissions":
      return "ContextPermission";
    case "modifiers":
      return "KeyboardModifier";
    case "button":
      return "MouseButton";
    case "recordHarMode":
      return "HarMode";
    case "recordHarContent":
      return "HarContentPolicy";
    case "serviceWorkers":
      return "ServiceWorkerPolicy";
    default:
      return toPascal(value);
  }
}
function getPropertyName(key) {
  switch (key) {
    case "storageState":
      return "StorageStatePath";
    case "viewport":
      return "ViewportSize";
    default:
      return toPascal(key);
  }
}
function toPascal(value) {
  return value[0].toUpperCase() + value.slice(1);
}
function convertContextOptions$1(options) {
  const result2 = {
    ...options
  };
  if (options.recordHar) {
    result2["recordHarPath"] = options.recordHar.path;
    result2["recordHarContent"] = options.recordHar.content;
    result2["recordHarMode"] = options.recordHar.mode;
    result2["recordHarOmitContent"] = options.recordHar.omitContent;
    result2["recordHarUrlFilter"] = options.recordHar.urlFilter;
    delete result2.recordHar;
  }
  return result2;
}
function formatContextOptions$1(options, deviceName) {
  const device = deviceName && _deviceDescriptors$2.deviceDescriptors[deviceName];
  if (!device) {
    if (!Object.entries(options).length) return "";
    return formatObject(convertContextOptions$1(options), "    ", "BrowserNewContextOptions");
  }
  options = (0, _language$2.sanitizeDeviceOptions)(device, options);
  if (!Object.entries(options).length) return `playwright.Devices[${quote$1(deviceName)}]`;
  return formatObject(convertContextOptions$1(options), "    ", `BrowserNewContextOptions(playwright.Devices[${quote$1(deviceName)}])`);
}
class CSharpFormatter {
  constructor(offset = 0) {
    this._baseIndent = void 0;
    this._baseOffset = void 0;
    this._lines = [];
    this._baseIndent = " ".repeat(4);
    this._baseOffset = " ".repeat(offset);
  }
  prepend(text) {
    this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
  }
  add(text) {
    this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
  }
  newLine() {
    this._lines.push("");
  }
  format() {
    let spaces = "";
    let previousLine = "";
    return this._lines.map((line) => {
      if (line === "") return line;
      if (line.startsWith("}") || line.startsWith("]") || line.includes("});") || line === ");") spaces = spaces.substring(this._baseIndent.length);
      const extraSpaces = /^(for|while|if).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
      previousLine = line;
      line = spaces + extraSpaces + line;
      if (line.endsWith("{") || line.endsWith("[") || line.endsWith("(")) spaces += this._baseIndent;
      if (line.endsWith("));")) spaces = spaces.substring(this._baseIndent.length);
      return this._baseOffset + line;
    }).join("\n");
  }
}
function quote$1(text) {
  return (0, _utils$D.escapeWithQuotes)(text, '"');
}
var python = {};
Object.defineProperty(python, "__esModule", {
  value: true
});
python.PythonLanguageGenerator = void 0;
var _language$1 = language;
var _utils$C = requireUtils();
var _deviceDescriptors$1 = deviceDescriptors;
class PythonLanguageGenerator {
  constructor(isAsync, isPyTest) {
    this.id = void 0;
    this.groupName = "Python";
    this.name = void 0;
    this.highlighter = "python";
    this._awaitPrefix = void 0;
    this._asyncPrefix = void 0;
    this._isAsync = void 0;
    this._isPyTest = void 0;
    this.id = isPyTest ? "python-pytest" : isAsync ? "python-async" : "python";
    this.name = isPyTest ? "Pytest" : isAsync ? "Library Async" : "Library";
    this._isAsync = isAsync;
    this._isPyTest = isPyTest;
    this._awaitPrefix = isAsync ? "await " : "";
    this._asyncPrefix = isAsync ? "async " : "";
  }
  generateAction(actionInContext) {
    const action = actionInContext.action;
    if (this._isPyTest && (action.name === "openPage" || action.name === "closePage")) return "";
    const pageAlias = actionInContext.frame.pageAlias;
    const formatter = new PythonFormatter(4);
    if (action.name === "openPage") {
      formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);
      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/") formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);
      return formatter.format();
    }
    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.content_frame`);
    const subject = `${pageAlias}${locators.join("")}`;
    const signals = (0, _language$1.toSignalMap)(action);
    if (signals.dialog) formatter.add(`  ${pageAlias}.once("dialog", lambda dialog: dialog.dismiss())`);
    let code = `${this._awaitPrefix}${this._generateActionCall(subject, actionInContext)}`;
    if (signals.popup) {
      code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {
        ${code}
      }
      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;
    }
    if (signals.download) {
      code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {
        ${code}
      }
      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;
    }
    formatter.add(code);
    return formatter.format();
  }
  _generateActionCall(subject, actionInContext) {
    const action = actionInContext.action;
    switch (action.name) {
      case "openPage":
        throw Error("Not reached");
      case "closePage":
        return `${subject}.close()`;
      case "click": {
        let method = "click";
        if (action.clickCount === 2) method = "dblclick";
        const options = (0, _language$1.toClickOptionsForSourceCode)(action);
        const optionsString = formatOptions(options, false);
        return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;
      }
      case "check":
        return `${subject}.${this._asLocator(action.selector)}.check()`;
      case "uncheck":
        return `${subject}.${this._asLocator(action.selector)}.uncheck()`;
      case "fill":
        return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;
      case "setInputFiles":
        return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;
      case "press": {
        const modifiers = (0, _language$1.toKeyboardModifiers)(action.modifiers);
        const shortcut = [...modifiers, action.key].join("+");
        return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;
      }
      case "navigate":
        return `${subject}.goto(${quote(action.url)})`;
      case "select":
        return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;
      case "assertText":
        return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "to_contain_text" : "to_have_text"}(${quote(action.text)})`;
      case "assertChecked":
        return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? "to_be_checked()" : "not_to_be_checked()"}`;
      case "assertVisible":
        return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;
      case "assertValue": {
        const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;
        return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
      }
    }
  }
  _asLocator(selector) {
    return (0, _utils$C.asLocator)("python", selector);
  }
  generateHeader(options) {
    const formatter = new PythonFormatter();
    if (this._isPyTest) {
      const contextOptions = formatContextOptions(
        options.contextOptions,
        options.deviceName,
        true
        /* asDict */
      );
      const fixture = contextOptions ? `

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright) {
    return {${contextOptions}}
}
` : "";
      formatter.add(`${options.deviceName ? "import pytest\n" : ""}import re
from playwright.sync_api import Page, expect
${fixture}

def test_example(page: Page) -> None {`);
    } else if (this._isAsync) {
      formatter.add(`
import asyncio
import re
from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None {
    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
    } else {
      formatter.add(`
import re
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None {
    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
    }
    return formatter.format();
  }
  generateFooter(saveStorage) {
    if (this._isPyTest) {
      return "";
    } else if (this._isAsync) {
      const storageStateLine = saveStorage ? `
    await context.storage_state(path=${quote(saveStorage)})` : "";
      return `
    # ---------------------${storageStateLine}
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
`;
    } else {
      const storageStateLine = saveStorage ? `
    context.storage_state(path=${quote(saveStorage)})` : "";
      return `
    # ---------------------${storageStateLine}
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
`;
    }
  }
}
python.PythonLanguageGenerator = PythonLanguageGenerator;
function formatValue(value) {
  if (value === false) return "False";
  if (value === true) return "True";
  if (value === void 0) return "None";
  if (Array.isArray(value)) return `[${value.map(formatValue).join(", ")}]`;
  if (typeof value === "string") return quote(value);
  if (typeof value === "object") return JSON.stringify(value);
  return String(value);
}
function formatOptions(value, hasArguments, asDict) {
  const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
  if (!keys.length) return "";
  return (hasArguments ? ", " : "") + keys.map((key) => {
    if (asDict) return `"${(0, _utils$C.toSnakeCase)(key)}": ${formatValue(value[key])}`;
    return `${(0, _utils$C.toSnakeCase)(key)}=${formatValue(value[key])}`;
  }).join(", ");
}
function convertContextOptions(options) {
  const result2 = {
    ...options
  };
  if (options.recordHar) {
    result2["record_har_path"] = options.recordHar.path;
    result2["record_har_content"] = options.recordHar.content;
    result2["record_har_mode"] = options.recordHar.mode;
    result2["record_har_omit_content"] = options.recordHar.omitContent;
    result2["record_har_url_filter"] = options.recordHar.urlFilter;
    delete result2.recordHar;
  }
  return result2;
}
function formatContextOptions(options, deviceName, asDict) {
  const device = deviceName && _deviceDescriptors$1.deviceDescriptors[deviceName];
  if (!device) return formatOptions(convertContextOptions(options), false, asDict);
  return `**playwright.devices[${quote(deviceName)}]` + formatOptions(convertContextOptions((0, _language$1.sanitizeDeviceOptions)(device, options)), true, asDict);
}
class PythonFormatter {
  constructor(offset = 0) {
    this._baseIndent = void 0;
    this._baseOffset = void 0;
    this._lines = [];
    this._baseIndent = " ".repeat(4);
    this._baseOffset = " ".repeat(offset);
  }
  prepend(text) {
    this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
  }
  add(text) {
    this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
  }
  newLine() {
    this._lines.push("");
  }
  format() {
    let spaces = "";
    const lines = [];
    this._lines.forEach((line) => {
      if (line === "") return lines.push(line);
      if (line === "}") {
        spaces = spaces.substring(this._baseIndent.length);
        return;
      }
      line = spaces + line;
      if (line.endsWith("{")) {
        spaces += this._baseIndent;
        line = line.substring(0, line.length - 1).trimEnd() + ":";
      }
      return lines.push(this._baseOffset + line);
    });
    return lines.join("\n");
  }
}
function quote(text) {
  return (0, _utils$C.escapeWithQuotes)(text, '"');
}
Object.defineProperty(languages, "__esModule", {
  value: true
});
languages.languageSet = languageSet;
var _java = java;
var _javascript = javascript;
var _jsonl = jsonl;
var _csharp = csharp;
var _python = python;
function languageSet() {
  return /* @__PURE__ */ new Set([new _java.JavaLanguageGenerator("junit"), new _java.JavaLanguageGenerator("library"), new _javascript.JavaScriptLanguageGenerator(
    /* isPlaywrightTest */
    false
  ), new _javascript.JavaScriptLanguageGenerator(
    /* isPlaywrightTest */
    true
  ), new _python.PythonLanguageGenerator(
    /* isAsync */
    false,
    /* isPytest */
    true
  ), new _python.PythonLanguageGenerator(
    /* isAsync */
    false,
    /* isPytest */
    false
  ), new _python.PythonLanguageGenerator(
    /* isAsync */
    true,
    /* isPytest */
    false
  ), new _csharp.CSharpLanguageGenerator("mstest"), new _csharp.CSharpLanguageGenerator("nunit"), new _csharp.CSharpLanguageGenerator("library"), new _jsonl.JsonlLanguageGenerator()]);
}
var throttledFile = {};
Object.defineProperty(throttledFile, "__esModule", {
  value: true
});
throttledFile.ThrottledFile = void 0;
var fs$2 = _interopRequireWildcard$c(require$$0$2);
function _getRequireWildcardCache$c(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$c = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$c(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$c(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class ThrottledFile {
  constructor(file) {
    this._file = void 0;
    this._timer = void 0;
    this._text = void 0;
    this._file = file;
  }
  setContent(text) {
    this._text = text;
    if (!this._timer) this._timer = setTimeout(() => this.flush(), 250);
  }
  flush() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = void 0;
    }
    if (this._text) fs$2.writeFileSync(this._file, this._text);
    this._text = void 0;
  }
}
throttledFile.ThrottledFile = ThrottledFile;
var recorderCollection = {};
var recorderUtils$1 = {};
var recorderUtils = {};
Object.defineProperty(recorderUtils, "__esModule", {
  value: true
});
recorderUtils.buildFullSelector = buildFullSelector;
recorderUtils.toKeyboardModifiers = toKeyboardModifiers;
recorderUtils.traceParamsForAction = traceParamsForAction;
function buildFullSelector(framePath, selector) {
  return [...framePath, selector].join(" >> internal:control=enter-frame >> ");
}
function traceParamsForAction(actionInContext) {
  const {
    action
  } = actionInContext;
  switch (action.name) {
    case "navigate": {
      const params = {
        url: action.url
      };
      return {
        method: "goto",
        params
      };
    }
    case "openPage":
    case "closePage":
      throw new Error("Not reached");
  }
  const selector = buildFullSelector(actionInContext.frame.framePath, action.selector);
  switch (action.name) {
    case "click": {
      const params = {
        selector,
        strict: true,
        modifiers: toKeyboardModifiers(action.modifiers),
        button: action.button,
        clickCount: action.clickCount,
        position: action.position
      };
      return {
        method: "click",
        params
      };
    }
    case "press": {
      const params = {
        selector,
        strict: true,
        key: [...toKeyboardModifiers(action.modifiers), action.key].join("+")
      };
      return {
        method: "press",
        params
      };
    }
    case "fill": {
      const params = {
        selector,
        strict: true,
        value: action.text
      };
      return {
        method: "fill",
        params
      };
    }
    case "setInputFiles": {
      const params = {
        selector,
        strict: true,
        localPaths: action.files
      };
      return {
        method: "setInputFiles",
        params
      };
    }
    case "check": {
      const params = {
        selector,
        strict: true
      };
      return {
        method: "check",
        params
      };
    }
    case "uncheck": {
      const params = {
        selector,
        strict: true
      };
      return {
        method: "uncheck",
        params
      };
    }
    case "select": {
      const params = {
        selector,
        strict: true,
        options: action.options.map((option) => ({
          value: option
        }))
      };
      return {
        method: "selectOption",
        params
      };
    }
    case "assertChecked": {
      const params = {
        selector: action.selector,
        expression: "to.be.checked",
        isNot: !action.checked
      };
      return {
        method: "expect",
        params
      };
    }
    case "assertText": {
      const params = {
        selector,
        expression: "to.have.text",
        expectedText: [],
        isNot: false
      };
      return {
        method: "expect",
        params
      };
    }
    case "assertValue": {
      const params = {
        selector,
        expression: "to.have.value",
        expectedValue: void 0,
        isNot: false
      };
      return {
        method: "expect",
        params
      };
    }
    case "assertVisible": {
      const params = {
        selector,
        expression: "to.be.visible",
        isNot: false
      };
      return {
        method: "expect",
        params
      };
    }
  }
}
function toKeyboardModifiers(modifiers) {
  const result2 = [];
  if (modifiers & 1) result2.push("Alt");
  if (modifiers & 2) result2.push("ControlOrMeta");
  if (modifiers & 4) result2.push("ControlOrMeta");
  if (modifiers & 8) result2.push("Shift");
  return result2;
}
Object.defineProperty(recorderUtils$1, "__esModule", {
  value: true
});
recorderUtils$1.callMetadataForAction = callMetadataForAction;
recorderUtils$1.collapseActions = collapseActions;
recorderUtils$1.frameForAction = frameForAction;
recorderUtils$1.mainFrameForAction = mainFrameForAction;
recorderUtils$1.metadataToCallLog = metadataToCallLog;
var _utils$B = requireUtils();
var _recorderUtils$2 = recorderUtils;
function metadataToCallLog(metadata, status) {
  var _metadata$params, _metadata$params2, _metadata$error;
  let title = metadata.apiName || metadata.method;
  if (metadata.method === "waitForEventInfo") title += `(${metadata.params.info.event})`;
  title = title.replace("object.expect", "expect");
  if (metadata.error) status = "error";
  const params = {
    url: (_metadata$params = metadata.params) === null || _metadata$params === void 0 ? void 0 : _metadata$params.url,
    selector: (_metadata$params2 = metadata.params) === null || _metadata$params2 === void 0 ? void 0 : _metadata$params2.selector
  };
  let duration = metadata.endTime ? metadata.endTime - metadata.startTime : void 0;
  if (typeof duration === "number" && metadata.pauseStartTime && metadata.pauseEndTime) {
    duration -= metadata.pauseEndTime - metadata.pauseStartTime;
    duration = Math.max(duration, 0);
  }
  const callLog = {
    id: metadata.id,
    messages: metadata.log,
    title,
    status,
    error: (_metadata$error = metadata.error) === null || _metadata$error === void 0 || (_metadata$error = _metadata$error.error) === null || _metadata$error === void 0 ? void 0 : _metadata$error.message,
    params,
    duration
  };
  return callLog;
}
function mainFrameForAction(pageAliases, actionInContext) {
  var _find;
  const pageAlias = actionInContext.frame.pageAlias;
  const page2 = (_find = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)) === null || _find === void 0 ? void 0 : _find[0];
  if (!page2) throw new Error(`Internal error: page ${pageAlias} not found in [${[...pageAliases.values()]}]`);
  return page2.mainFrame();
}
async function frameForAction(pageAliases, actionInContext, action) {
  var _find2;
  const pageAlias = actionInContext.frame.pageAlias;
  const page2 = (_find2 = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)) === null || _find2 === void 0 ? void 0 : _find2[0];
  if (!page2) throw new Error("Internal error: page not found");
  const fullSelector = (0, _recorderUtils$2.buildFullSelector)(actionInContext.frame.framePath, action.selector);
  const result2 = await page2.mainFrame().selectors.resolveFrameForSelector(fullSelector);
  if (!result2) throw new Error("Internal error: frame not found");
  return result2.frame;
}
function callMetadataForAction(pageAliases, actionInContext) {
  const mainFrame = mainFrameForAction(pageAliases, actionInContext);
  const {
    method,
    params
  } = (0, _recorderUtils$2.traceParamsForAction)(actionInContext);
  const callMetadata = {
    id: `call@${(0, _utils$B.createGuid)()}`,
    apiName: "page." + method,
    objectId: mainFrame.guid,
    pageId: mainFrame._page.guid,
    frameId: mainFrame.guid,
    startTime: actionInContext.startTime,
    endTime: 0,
    type: "Frame",
    method,
    params,
    log: []
  };
  return {
    callMetadata,
    mainFrame
  };
}
function collapseActions(actions) {
  const result2 = [];
  for (const action of actions) {
    const lastAction = result2[result2.length - 1];
    const isSameAction = lastAction && lastAction.action.name === action.action.name && lastAction.frame.pageAlias === action.frame.pageAlias && lastAction.frame.framePath.join("|") === action.frame.framePath.join("|");
    const isSameSelector = lastAction && "selector" in lastAction.action && "selector" in action.action && action.action.selector === lastAction.action.selector;
    const shouldMerge = isSameAction && (action.action.name === "navigate" || action.action.name === "fill" && isSameSelector);
    if (!shouldMerge) {
      result2.push(action);
      continue;
    }
    const startTime = result2[result2.length - 1].startTime;
    result2[result2.length - 1] = action;
    result2[result2.length - 1].startTime = startTime;
  }
  return result2;
}
var recorderRunner = {};
Object.defineProperty(recorderRunner, "__esModule", {
  value: true
});
recorderRunner.performAction = performAction;
recorderRunner.toClickOptions = toClickOptions;
var _utils$A = requireUtils();
var _language = language;
var _recorderUtils$1 = recorderUtils$1;
var _recorderUtils2 = recorderUtils;
async function performAction(callMetadata, pageAliases, actionInContext) {
  const mainFrame = (0, _recorderUtils$1.mainFrameForAction)(pageAliases, actionInContext);
  const {
    action
  } = actionInContext;
  const kActionTimeout = 5e3;
  if (action.name === "navigate") {
    await mainFrame.goto(callMetadata, action.url, {
      timeout: kActionTimeout
    });
    return;
  }
  if (action.name === "openPage") throw Error("Not reached");
  if (action.name === "closePage") {
    await mainFrame._page.close(callMetadata);
    return;
  }
  const selector = (0, _recorderUtils2.buildFullSelector)(actionInContext.frame.framePath, action.selector);
  if (action.name === "click") {
    const options = toClickOptions(action);
    await mainFrame.click(callMetadata, selector, {
      ...options,
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "press") {
    const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
    const shortcut = [...modifiers, action.key].join("+");
    await mainFrame.press(callMetadata, selector, shortcut, {
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "fill") {
    await mainFrame.fill(callMetadata, selector, action.text, {
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "setInputFiles") {
    await mainFrame.setInputFiles(callMetadata, selector, {
      selector,
      payloads: [],
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "check") {
    await mainFrame.check(callMetadata, selector, {
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "uncheck") {
    await mainFrame.uncheck(callMetadata, selector, {
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "select") {
    const values = action.options.map((value) => ({
      value
    }));
    await mainFrame.selectOption(callMetadata, selector, [], values, {
      timeout: kActionTimeout,
      strict: true
    });
    return;
  }
  if (action.name === "assertChecked") {
    await mainFrame.expect(callMetadata, selector, {
      selector,
      expression: "to.be.checked",
      isNot: !action.checked,
      timeout: kActionTimeout
    });
    return;
  }
  if (action.name === "assertText") {
    await mainFrame.expect(callMetadata, selector, {
      selector,
      expression: "to.have.text",
      expectedText: (0, _utils$A.serializeExpectedTextValues)([action.text], {
        matchSubstring: true,
        normalizeWhiteSpace: true
      }),
      isNot: false,
      timeout: kActionTimeout
    });
    return;
  }
  if (action.name === "assertValue") {
    await mainFrame.expect(callMetadata, selector, {
      selector,
      expression: "to.have.value",
      expectedValue: action.value,
      isNot: false,
      timeout: kActionTimeout
    });
    return;
  }
  if (action.name === "assertVisible") {
    await mainFrame.expect(callMetadata, selector, {
      selector,
      expression: "to.be.visible",
      isNot: false,
      timeout: kActionTimeout
    });
    return;
  }
  throw new Error("Internal error: unexpected action " + action.name);
}
function toClickOptions(action) {
  const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
  const options = {};
  if (action.button !== "left") options.button = action.button;
  if (modifiers.length) options.modifiers = modifiers;
  if (action.clickCount > 1) options.clickCount = action.clickCount;
  if (action.position) options.position = action.position;
  return options;
}
Object.defineProperty(recorderCollection, "__esModule", {
  value: true
});
recorderCollection.RecorderCollection = void 0;
var _events$b = require$$0$1;
var _time = time;
var _recorderUtils = recorderUtils$1;
var _errors$4 = errors$2;
var _recorderRunner = recorderRunner;
var _debug = debug$1;
class RecorderCollection extends _events$b.EventEmitter {
  constructor(pageAliases) {
    super();
    this._actions = [];
    this._enabled = false;
    this._pageAliases = void 0;
    this._pageAliases = pageAliases;
  }
  restart() {
    this._actions = [];
    this._fireChange();
  }
  setEnabled(enabled) {
    this._enabled = enabled;
  }
  async performAction(actionInContext) {
    await this._addAction(actionInContext, async (callMetadata) => {
      await (0, _recorderRunner.performAction)(callMetadata, this._pageAliases, actionInContext);
    });
  }
  addRecordedAction(actionInContext) {
    if (["openPage", "closePage"].includes(actionInContext.action.name)) {
      this._actions.push(actionInContext);
      this._fireChange();
      return;
    }
    this._addAction(actionInContext).catch(() => {
    });
  }
  async _addAction(actionInContext, callback) {
    if (!this._enabled) return;
    if (actionInContext.action.name === "openPage" || actionInContext.action.name === "closePage") {
      this._actions.push(actionInContext);
      this._fireChange();
      return;
    }
    const {
      callMetadata,
      mainFrame
    } = (0, _recorderUtils.callMetadataForAction)(this._pageAliases, actionInContext);
    await mainFrame.instrumentation.onBeforeCall(mainFrame, callMetadata);
    this._actions.push(actionInContext);
    this._fireChange();
    const error = await (callback === null || callback === void 0 ? void 0 : callback(callMetadata).catch((e) => e));
    callMetadata.endTime = (0, _time.monotonicTime)();
    actionInContext.endTime = callMetadata.endTime;
    callMetadata.error = error ? (0, _errors$4.serializeError)(error) : void 0;
    mainFrame.instrumentation.onAfterCall(mainFrame, callMetadata).then(() => {
      this._fireChange();
    }).catch(() => {
    });
  }
  signal(pageAlias, frame2, signal) {
    if (!this._enabled) return;
    if (signal.name === "navigation" && frame2._page.mainFrame() === frame2) {
      const timestamp = (0, _time.monotonicTime)();
      const lastAction = this._actions[this._actions.length - 1];
      const signalThreshold = (0, _debug.isUnderTest)() ? 500 : 5e3;
      let generateGoto = false;
      if (!lastAction) generateGoto = true;
      else if (lastAction.action.name !== "click" && lastAction.action.name !== "press") generateGoto = true;
      else if (timestamp - lastAction.startTime > signalThreshold) generateGoto = true;
      if (generateGoto) {
        this.addRecordedAction({
          frame: {
            pageAlias,
            framePath: []
          },
          action: {
            name: "navigate",
            url: frame2.url(),
            signals: []
          },
          startTime: timestamp,
          endTime: timestamp
        });
      }
      return;
    }
    if (this._actions.length) {
      this._actions[this._actions.length - 1].action.signals.push(signal);
      this._fireChange();
      return;
    }
  }
  _fireChange() {
    if (!this._enabled) return;
    this.emit("change", (0, _recorderUtils.collapseActions)(this._actions));
  }
}
recorderCollection.RecorderCollection = RecorderCollection;
var hasRequiredContextRecorder;
function requireContextRecorder() {
  if (hasRequiredContextRecorder) return contextRecorder;
  hasRequiredContextRecorder = 1;
  Object.defineProperty(contextRecorder, "__esModule", {
    value: true
  });
  contextRecorder.ContextRecorder = void 0;
  contextRecorder.generateFrameSelector = generateFrameSelector;
  var _events2 = require$$0$1;
  var recorderSource = _interopRequireWildcard2(pollingRecorderSource);
  var _utils2 = requireUtils();
  var _timeoutRunner = requireTimeoutRunner();
  var _browserContext2 = requireBrowserContext$1();
  var _languages = languages;
  var _frames = requireFrames();
  var _page = requirePage$1();
  var _throttledFile = throttledFile;
  var _recorderCollection = recorderCollection;
  var _language2 = language;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class ContextRecorder extends _events2.EventEmitter {
    constructor(codegenMode, context, params, delegate) {
      super();
      this._collection = void 0;
      this._pageAliases = /* @__PURE__ */ new Map();
      this._lastPopupOrdinal = 0;
      this._lastDialogOrdinal = -1;
      this._lastDownloadOrdinal = -1;
      this._context = void 0;
      this._params = void 0;
      this._delegate = void 0;
      this._recorderSources = void 0;
      this._throttledOutputFile = null;
      this._orderedLanguages = [];
      this._listeners = [];
      this._codegenMode = void 0;
      this._codegenMode = codegenMode;
      this._context = context;
      this._params = params;
      this._delegate = delegate;
      this._recorderSources = [];
      const language2 = params.language || context.attribution.playwright.options.sdkLanguage;
      this.setOutput(language2, params.outputFile);
      const languageGeneratorOptions = {
        browserName: context._browser.options.name,
        launchOptions: {
          headless: false,
          ...params.launchOptions,
          tracesDir: void 0
        },
        contextOptions: {
          ...params.contextOptions
        },
        deviceName: params.device,
        saveStorage: params.saveStorage
      };
      this._collection = new _recorderCollection.RecorderCollection(this._pageAliases);
      this._collection.on("change", (actions) => {
        this._recorderSources = [];
        for (const languageGenerator of this._orderedLanguages) {
          var _this$_throttledOutpu;
          const {
            header,
            footer,
            actionTexts,
            text
          } = (0, _language2.generateCode)(actions, languageGenerator, languageGeneratorOptions);
          const source2 = {
            isRecorded: true,
            label: languageGenerator.name,
            group: languageGenerator.groupName,
            id: languageGenerator.id,
            text,
            header,
            footer,
            actions: actionTexts,
            language: languageGenerator.highlighter,
            highlight: []
          };
          source2.revealLine = text.split("\n").length - 1;
          this._recorderSources.push(source2);
          if (languageGenerator === this._orderedLanguages[0]) (_this$_throttledOutpu = this._throttledOutputFile) === null || _this$_throttledOutpu === void 0 || _this$_throttledOutpu.setContent(source2.text);
        }
        this.emit(ContextRecorder.Events.Change, {
          sources: this._recorderSources,
          actions
        });
      });
      context.on(_browserContext2.BrowserContext.Events.BeforeClose, () => {
        var _this$_throttledOutpu2;
        (_this$_throttledOutpu2 = this._throttledOutputFile) === null || _this$_throttledOutpu2 === void 0 || _this$_throttledOutpu2.flush();
      });
      this._listeners.push(_utils2.eventsHelper.addEventListener(process, "exit", () => {
        var _this$_throttledOutpu3;
        (_this$_throttledOutpu3 = this._throttledOutputFile) === null || _this$_throttledOutpu3 === void 0 || _this$_throttledOutpu3.flush();
      }));
      this.setEnabled(true);
    }
    setOutput(codegenId, outputFile) {
      var _this$_collection;
      const languages2 = (0, _languages.languageSet)();
      const primaryLanguage = [...languages2].find((l) => l.id === codegenId);
      if (!primaryLanguage) throw new Error(`
===============================
Unsupported language: '${codegenId}'
===============================
`);
      languages2.delete(primaryLanguage);
      this._orderedLanguages = [primaryLanguage, ...languages2];
      this._throttledOutputFile = outputFile ? new _throttledFile.ThrottledFile(outputFile) : null;
      (_this$_collection = this._collection) === null || _this$_collection === void 0 || _this$_collection.restart();
    }
    languageName(id) {
      for (const lang of this._orderedLanguages) {
        if (!id || lang.id === id) return lang.highlighter;
      }
      return "javascript";
    }
    async install() {
      this._context.on(_browserContext2.BrowserContext.Events.Page, (page2) => this._onPage(page2));
      for (const page2 of this._context.pages()) this._onPage(page2);
      this._context.on(_browserContext2.BrowserContext.Events.Dialog, (dialog2) => this._onDialog(dialog2.page()));
      await this._context.exposeBinding("__pw_recorderPerformAction", false, (source2, action) => this._performAction(source2.frame, action));
      await this._context.exposeBinding("__pw_recorderRecordAction", false, (source2, action) => this._recordAction(source2.frame, action));
      await this._context.extendInjectedScript(recorderSource.source);
    }
    setEnabled(enabled) {
      this._collection.setEnabled(enabled);
      if (this._codegenMode === "trace-events") {
        if (enabled) this._context.tracing.startChunk({
          name: "trace",
          title: "trace"
        }).catch(() => {
        });
        else this._context.tracing.stopChunk({
          mode: "discard"
        }).catch(() => {
        });
      }
    }
    dispose() {
      _utils2.eventsHelper.removeEventListeners(this._listeners);
    }
    async _onPage(page2) {
      const frame2 = page2.mainFrame();
      page2.on("close", () => {
        this._collection.addRecordedAction({
          frame: this._describeMainFrame(page2),
          action: {
            name: "closePage",
            signals: []
          },
          startTime: (0, _utils2.monotonicTime)()
        });
        this._pageAliases.delete(page2);
      });
      frame2.on(_frames.Frame.Events.InternalNavigation, (event) => {
        if (event.isPublic) this._onFrameNavigated(frame2, page2);
      });
      page2.on(_page.Page.Events.Download, () => this._onDownload(page2));
      const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : "";
      const pageAlias = "page" + suffix;
      this._pageAliases.set(page2, pageAlias);
      if (page2.opener()) {
        this._onPopup(page2.opener(), page2);
      } else {
        this._collection.addRecordedAction({
          frame: this._describeMainFrame(page2),
          action: {
            name: "openPage",
            url: page2.mainFrame().url(),
            signals: []
          },
          startTime: (0, _utils2.monotonicTime)()
        });
      }
    }
    clearScript() {
      this._collection.restart();
      if (this._params.mode === "recording") {
        for (const page2 of this._context.pages()) this._onFrameNavigated(page2.mainFrame(), page2);
      }
    }
    _describeMainFrame(page2) {
      return {
        pageAlias: this._pageAliases.get(page2),
        framePath: []
      };
    }
    async _describeFrame(frame2) {
      return {
        pageAlias: this._pageAliases.get(frame2._page),
        framePath: await generateFrameSelector(frame2)
      };
    }
    testIdAttributeName() {
      return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || "data-testid";
    }
    async _createActionInContext(frame2, action) {
      var _this$_delegate$rewri, _this$_delegate;
      const frameDescription = await this._describeFrame(frame2);
      const actionInContext = {
        frame: frameDescription,
        action,
        description: void 0,
        startTime: (0, _utils2.monotonicTime)()
      };
      await ((_this$_delegate$rewri = (_this$_delegate = this._delegate).rewriteActionInContext) === null || _this$_delegate$rewri === void 0 ? void 0 : _this$_delegate$rewri.call(_this$_delegate, this._pageAliases, actionInContext));
      return actionInContext;
    }
    async _performAction(frame2, action) {
      await this._collection.performAction(await this._createActionInContext(frame2, action));
    }
    async _recordAction(frame2, action) {
      this._collection.addRecordedAction(await this._createActionInContext(frame2, action));
    }
    _onFrameNavigated(frame2, page2) {
      const pageAlias = this._pageAliases.get(page2);
      this._collection.signal(pageAlias, frame2, {
        name: "navigation",
        url: frame2.url()
      });
    }
    _onPopup(page2, popup) {
      const pageAlias = this._pageAliases.get(page2);
      const popupAlias = this._pageAliases.get(popup);
      this._collection.signal(pageAlias, page2.mainFrame(), {
        name: "popup",
        popupAlias
      });
    }
    _onDownload(page2) {
      const pageAlias = this._pageAliases.get(page2);
      ++this._lastDownloadOrdinal;
      this._collection.signal(pageAlias, page2.mainFrame(), {
        name: "download",
        downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : ""
      });
    }
    _onDialog(page2) {
      const pageAlias = this._pageAliases.get(page2);
      ++this._lastDialogOrdinal;
      this._collection.signal(pageAlias, page2.mainFrame(), {
        name: "dialog",
        dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : ""
      });
    }
  }
  contextRecorder.ContextRecorder = ContextRecorder;
  ContextRecorder.Events = {
    Change: "change"
  };
  async function generateFrameSelector(frame2) {
    const selectorPromises = [];
    while (frame2) {
      const parent = frame2.parentFrame();
      if (!parent) break;
      selectorPromises.push(generateFrameSelectorInParent(parent, frame2));
      frame2 = parent;
    }
    const result2 = await Promise.all(selectorPromises);
    return result2.reverse();
  }
  async function generateFrameSelectorInParent(parent, frame2) {
    const result2 = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
      try {
        const frameElement = await frame2.frameElement();
        if (!frameElement || !parent) return;
        const utility = await parent._utilityContext();
        const injected = await utility.injectedScript();
        const selector = await injected.evaluate((injected2, element) => {
          return injected2.generateSelectorSimple(element);
        }, frameElement);
        return selector;
      } catch (e) {
        return e.toString();
      }
    }, (0, _utils2.monotonicTime)() + 2e3);
    if (!result2.timedOut && result2.result) return result2.result;
    if (frame2.name()) return `iframe[name=${(0, _utils2.quoteCSSAttributeValue)(frame2.name())}]`;
    return `iframe[src=${(0, _utils2.quoteCSSAttributeValue)(frame2.url())}]`;
  }
  return contextRecorder;
}
var hasRequiredRecorder;
function requireRecorder() {
  if (hasRequiredRecorder) return recorder;
  hasRequiredRecorder = 1;
  Object.defineProperty(recorder, "__esModule", {
    value: true
  });
  recorder.Recorder = void 0;
  var fs2 = _interopRequireWildcard2(require$$0$2);
  var consoleApiSource$1 = _interopRequireWildcard2(consoleApiSource);
  var _utils2 = requireUtils();
  var _locatorParser = locatorParser;
  var _browserContext2 = requireBrowserContext$1();
  var _debugger2 = require_debugger();
  var _contextRecorder = requireContextRecorder();
  var _recorderUtils3 = recorderUtils$1;
  var _recorderUtils22 = recorderUtils;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const recorderSymbol = Symbol("recorderSymbol");
  class Recorder {
    static async showInspector(context, params, recorderAppFactory) {
      if ((0, _utils2.isUnderTest)()) params.language = process.env.TEST_INSPECTOR_LANGUAGE;
      return await Recorder.show("actions", context, recorderAppFactory, params);
    }
    static showInspectorNoReply(context, recorderAppFactory) {
      Recorder.showInspector(context, {}, recorderAppFactory).catch(() => {
      });
    }
    static show(codegenMode, context, recorderAppFactory, params) {
      let recorderPromise = context[recorderSymbol];
      if (!recorderPromise) {
        recorderPromise = Recorder._create(codegenMode, context, recorderAppFactory, params);
        context[recorderSymbol] = recorderPromise;
      }
      return recorderPromise;
    }
    static async _create(codegenMode, context, recorderAppFactory, params = {}) {
      const recorder2 = new Recorder(codegenMode, context, params);
      const recorderApp2 = await recorderAppFactory(recorder2);
      await recorder2._install(recorderApp2);
      return recorder2;
    }
    constructor(codegenMode, context, params) {
      this.handleSIGINT = void 0;
      this._context = void 0;
      this._mode = void 0;
      this._highlightedSelector = "";
      this._overlayState = {
        offsetX: 0
      };
      this._recorderApp = null;
      this._currentCallsMetadata = /* @__PURE__ */ new Map();
      this._recorderSources = [];
      this._userSources = /* @__PURE__ */ new Map();
      this._debugger = void 0;
      this._contextRecorder = void 0;
      this._omitCallTracking = false;
      this._currentLanguage = void 0;
      this._mode = params.mode || "none";
      this.handleSIGINT = params.handleSIGINT;
      this._contextRecorder = new _contextRecorder.ContextRecorder(codegenMode, context, params, {});
      this._context = context;
      this._omitCallTracking = !!params.omitCallTracking;
      this._debugger = context.debugger();
      context.instrumentation.addListener(this, context);
      this._currentLanguage = this._contextRecorder.languageName();
      if ((0, _utils2.isUnderTest)()) {
        this._overlayState.offsetX = 200;
      }
    }
    async _install(recorderApp2) {
      this._recorderApp = recorderApp2;
      recorderApp2.once("close", () => {
        this._debugger.resume(false);
        this._recorderApp = null;
      });
      recorderApp2.on("event", (data) => {
        if (data.event === "setMode") {
          this.setMode(data.params.mode);
          return;
        }
        if (data.event === "selectorUpdated") {
          this.setHighlightedSelector(this._currentLanguage, data.params.selector);
          return;
        }
        if (data.event === "step") {
          this._debugger.resume(true);
          return;
        }
        if (data.event === "fileChanged") {
          this._currentLanguage = this._contextRecorder.languageName(data.params.file);
          this._refreshOverlay();
          return;
        }
        if (data.event === "resume") {
          this._debugger.resume(false);
          return;
        }
        if (data.event === "pause") {
          this._debugger.pauseOnNextStatement();
          return;
        }
        if (data.event === "clear") {
          this._contextRecorder.clearScript();
          return;
        }
      });
      await Promise.all([recorderApp2.setMode(this._mode), recorderApp2.setPaused(this._debugger.isPaused()), this._pushAllSources()]);
      this._context.once(_browserContext2.BrowserContext.Events.Close, () => {
        var _this$_recorderApp;
        this._contextRecorder.dispose();
        this._context.instrumentation.removeListener(this);
        (_this$_recorderApp = this._recorderApp) === null || _this$_recorderApp === void 0 || _this$_recorderApp.close().catch(() => {
        });
      });
      this._contextRecorder.on(_contextRecorder.ContextRecorder.Events.Change, (data) => {
        this._recorderSources = data.sources;
        recorderApp2.setActions(data.actions, data.sources);
        recorderApp2.setRunningFile(void 0);
        this._pushAllSources();
      });
      await this._context.exposeBinding("__pw_recorderState", false, (source2) => {
        let actionSelector = "";
        let actionPoint;
        const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);
        if (!hasActiveScreenshotCommand) {
          actionSelector = this._highlightedSelector;
          for (const [metadata, sdkObject] of this._currentCallsMetadata) {
            if (source2.page === sdkObject.attribution.page) {
              actionPoint = metadata.point || actionPoint;
              actionSelector = actionSelector || metadata.params.selector;
            }
          }
        }
        const uiState = {
          mode: this._mode,
          actionPoint,
          actionSelector,
          language: this._currentLanguage,
          testIdAttributeName: this._contextRecorder.testIdAttributeName(),
          overlay: this._overlayState
        };
        return uiState;
      });
      await this._context.exposeBinding("__pw_recorderSetSelector", false, async ({
        frame: frame2
      }, selector) => {
        var _this$_recorderApp2;
        const selectorChain = await (0, _contextRecorder.generateFrameSelector)(frame2);
        await ((_this$_recorderApp2 = this._recorderApp) === null || _this$_recorderApp2 === void 0 ? void 0 : _this$_recorderApp2.setSelector((0, _recorderUtils22.buildFullSelector)(selectorChain, selector), true));
      });
      await this._context.exposeBinding("__pw_recorderSetMode", false, async ({
        frame: frame2
      }, mode) => {
        if (frame2.parentFrame()) return;
        this.setMode(mode);
      });
      await this._context.exposeBinding("__pw_recorderSetOverlayState", false, async ({
        frame: frame2
      }, state) => {
        if (frame2.parentFrame()) return;
        this._overlayState = state;
      });
      await this._context.exposeBinding("__pw_resume", false, () => {
        this._debugger.resume(false);
      });
      await this._context.extendInjectedScript(consoleApiSource$1.source);
      await this._contextRecorder.install();
      if (this._debugger.isPaused()) this._pausedStateChanged();
      this._debugger.on(_debugger2.Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());
      this._context.recorderAppForTest = this._recorderApp;
    }
    _pausedStateChanged() {
      var _this$_recorderApp3;
      for (const {
        metadata,
        sdkObject
      } of this._debugger.pausedDetails()) {
        if (!this._currentCallsMetadata.has(metadata)) this.onBeforeCall(sdkObject, metadata);
      }
      (_this$_recorderApp3 = this._recorderApp) === null || _this$_recorderApp3 === void 0 || _this$_recorderApp3.setPaused(this._debugger.isPaused());
      this._updateUserSources();
      this.updateCallLog([...this._currentCallsMetadata.keys()]);
    }
    setMode(mode) {
      var _this$_recorderApp4;
      if (this._mode === mode) return;
      this._highlightedSelector = "";
      this._mode = mode;
      (_this$_recorderApp4 = this._recorderApp) === null || _this$_recorderApp4 === void 0 || _this$_recorderApp4.setMode(this._mode);
      this._contextRecorder.setEnabled(this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue");
      this._debugger.setMuted(this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue");
      if (this._mode !== "none" && this._mode !== "standby" && this._context.pages().length === 1) this._context.pages()[0].bringToFront().catch(() => {
      });
      this._refreshOverlay();
    }
    resume() {
      this._debugger.resume(false);
    }
    mode() {
      return this._mode;
    }
    setHighlightedSelector(language2, selector) {
      this._highlightedSelector = (0, _locatorParser.locatorOrSelectorAsSelector)(language2, selector, this._context.selectors().testIdAttributeName());
      this._refreshOverlay();
    }
    hideHighlightedSelector() {
      this._highlightedSelector = "";
      this._refreshOverlay();
    }
    setOutput(codegenId, outputFile) {
      this._contextRecorder.setOutput(codegenId, outputFile);
    }
    _refreshOverlay() {
      for (const page2 of this._context.pages()) page2.mainFrame().evaluateExpression("window.__pw_refreshOverlay()").catch(() => {
      });
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue") return;
      this._currentCallsMetadata.set(metadata, sdkObject);
      this._updateUserSources();
      this.updateCallLog([metadata]);
      if (isScreenshotCommand(metadata)) {
        this.hideHighlightedSelector();
      } else if (metadata.params && metadata.params.selector) {
        var _this$_recorderApp5;
        this._highlightedSelector = metadata.params.selector;
        (_this$_recorderApp5 = this._recorderApp) === null || _this$_recorderApp5 === void 0 || _this$_recorderApp5.setSelector(this._highlightedSelector).catch(() => {
        });
      }
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue") return;
      if (!metadata.error) this._currentCallsMetadata.delete(metadata);
      this._updateUserSources();
      this.updateCallLog([metadata]);
    }
    _updateUserSources() {
      var _this$_recorderApp6;
      for (const source2 of this._userSources.values()) {
        source2.highlight = [];
        source2.revealLine = void 0;
      }
      let fileToSelect = void 0;
      for (const metadata of this._currentCallsMetadata.keys()) {
        if (!metadata.location) continue;
        const {
          file,
          line
        } = metadata.location;
        let source2 = this._userSources.get(file);
        if (!source2) {
          source2 = {
            isRecorded: false,
            label: file,
            id: file,
            text: this._readSource(file),
            highlight: [],
            language: languageForFile(file)
          };
          this._userSources.set(file, source2);
        }
        if (line) {
          const paused = this._debugger.isPaused(metadata);
          source2.highlight.push({
            line,
            type: metadata.error ? "error" : paused ? "paused" : "running"
          });
          source2.revealLine = line;
          fileToSelect = source2.id;
        }
      }
      this._pushAllSources();
      if (fileToSelect) (_this$_recorderApp6 = this._recorderApp) === null || _this$_recorderApp6 === void 0 || _this$_recorderApp6.setRunningFile(fileToSelect);
    }
    _pushAllSources() {
      var _this$_recorderApp7;
      (_this$_recorderApp7 = this._recorderApp) === null || _this$_recorderApp7 === void 0 || _this$_recorderApp7.setSources([...this._recorderSources, ...this._userSources.values()]);
    }
    async onBeforeInputAction(sdkObject, metadata) {
    }
    async onCallLog(sdkObject, metadata, logName, message) {
      this.updateCallLog([metadata]);
    }
    updateCallLog(metadatas) {
      var _this$_recorderApp8;
      if (this._mode === "recording" || this._mode === "assertingText" || this._mode === "assertingVisibility" || this._mode === "assertingValue") return;
      const logs = [];
      for (const metadata of metadatas) {
        if (!metadata.method || metadata.internal) continue;
        let status = "done";
        if (this._currentCallsMetadata.has(metadata)) status = "in-progress";
        if (this._debugger.isPaused(metadata)) status = "paused";
        logs.push((0, _recorderUtils3.metadataToCallLog)(metadata, status));
      }
      (_this$_recorderApp8 = this._recorderApp) === null || _this$_recorderApp8 === void 0 || _this$_recorderApp8.updateCallLogs(logs);
    }
    _readSource(fileName) {
      try {
        return fs2.readFileSync(fileName, "utf-8");
      } catch (e) {
        return "// No source available";
      }
    }
  }
  recorder.Recorder = Recorder;
  function isScreenshotCommand(metadata) {
    return metadata.method.toLowerCase().includes("screenshot");
  }
  function languageForFile(file) {
    if (file.endsWith(".py")) return "python";
    if (file.endsWith(".java")) return "java";
    if (file.endsWith(".cs")) return "csharp";
    return "javascript";
  }
  return recorder;
}
var clock$1 = {};
var clockSource$1 = {};
Object.defineProperty(clockSource$1, "__esModule", {
  value: true
});
clockSource$1.source = void 0;
clockSource$1.source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/playwright-core/src/server/injected/clock.ts\nvar clock_exports = {};\n__export(clock_exports, {\n  ClockController: () => ClockController,\n  createClock: () => createClock,\n  inject: () => inject,\n  install: () => install\n});\nmodule.exports = __toCommonJS(clock_exports);\nvar ClockController = class {\n  constructor(embedder) {\n    this._duringTick = false;\n    this._timers = /* @__PURE__ */ new Map();\n    this._uniqueTimerId = idCounterStart;\n    this.disposables = [];\n    this._log = [];\n    this._now = { time: asWallTime(0), isFixedTime: false, ticks: 0, origin: asWallTime(-1) };\n    this._embedder = embedder;\n  }\n  uninstall() {\n    this.disposables.forEach((dispose) => dispose());\n    this.disposables.length = 0;\n  }\n  now() {\n    this._replayLogOnce();\n    return this._now.time;\n  }\n  install(time) {\n    this._replayLogOnce();\n    this._innerSetTime(asWallTime(time));\n  }\n  setSystemTime(time) {\n    this._replayLogOnce();\n    this._innerSetTime(asWallTime(time));\n  }\n  setFixedTime(time) {\n    this._replayLogOnce();\n    this._innerSetFixedTime(asWallTime(time));\n  }\n  performanceNow() {\n    this._replayLogOnce();\n    return this._now.ticks;\n  }\n  _innerSetTime(time) {\n    this._now.time = time;\n    this._now.isFixedTime = false;\n    if (this._now.origin < 0)\n      this._now.origin = this._now.time;\n  }\n  _innerSetFixedTime(time) {\n    this._innerSetTime(time);\n    this._now.isFixedTime = true;\n  }\n  _advanceNow(to) {\n    if (!this._now.isFixedTime)\n      this._now.time = asWallTime(this._now.time + to - this._now.ticks);\n    this._now.ticks = to;\n  }\n  async log(type, time, param) {\n    this._log.push({ type, time, param });\n  }\n  async runFor(ticks) {\n    this._replayLogOnce();\n    if (ticks < 0)\n      throw new TypeError("Negative ticks are not supported");\n    await this._runTo(shiftTicks(this._now.ticks, ticks));\n  }\n  async _runTo(to) {\n    to = Math.ceil(to);\n    if (this._now.ticks > to)\n      return;\n    let firstException;\n    while (true) {\n      const result = await this._callFirstTimer(to);\n      if (!result.timerFound)\n        break;\n      firstException = firstException || result.error;\n    }\n    this._advanceNow(to);\n    if (firstException)\n      throw firstException;\n  }\n  async pauseAt(time) {\n    this._replayLogOnce();\n    this._innerPause();\n    const toConsume = time - this._now.time;\n    await this._innerFastForwardTo(shiftTicks(this._now.ticks, toConsume));\n    return toConsume;\n  }\n  _innerPause() {\n    this._realTime = void 0;\n    this._updateRealTimeTimer();\n  }\n  resume() {\n    this._replayLogOnce();\n    this._innerResume();\n  }\n  _innerResume() {\n    const now = this._embedder.performanceNow();\n    this._realTime = { startTicks: now, lastSyncTicks: now };\n    this._updateRealTimeTimer();\n  }\n  _updateRealTimeTimer() {\n    var _a;\n    if (!this._realTime) {\n      (_a = this._currentRealTimeTimer) == null ? void 0 : _a.dispose();\n      this._currentRealTimeTimer = void 0;\n      return;\n    }\n    const firstTimer = this._firstTimer();\n    const callAt = Math.min(firstTimer ? firstTimer.callAt : this._now.ticks + maxTimeout, this._now.ticks + 100);\n    if (this._currentRealTimeTimer && this._currentRealTimeTimer.callAt < callAt)\n      return;\n    if (this._currentRealTimeTimer) {\n      this._currentRealTimeTimer.dispose();\n      this._currentRealTimeTimer = void 0;\n    }\n    this._currentRealTimeTimer = {\n      callAt,\n      dispose: this._embedder.setTimeout(() => {\n        const now = this._embedder.performanceNow();\n        this._currentRealTimeTimer = void 0;\n        const sinceLastSync = now - this._realTime.lastSyncTicks;\n        this._realTime.lastSyncTicks = now;\n        void this._runTo(shiftTicks(this._now.ticks, sinceLastSync)).catch((e) => console.error(e)).then(() => this._updateRealTimeTimer());\n      }, callAt - this._now.ticks)\n    };\n  }\n  async fastForward(ticks) {\n    this._replayLogOnce();\n    await this._innerFastForwardTo(shiftTicks(this._now.ticks, ticks | 0));\n  }\n  async _innerFastForwardTo(to) {\n    if (to < this._now.ticks)\n      throw new Error("Cannot fast-forward to the past");\n    for (const timer of this._timers.values()) {\n      if (to > timer.callAt)\n        timer.callAt = to;\n    }\n    await this._runTo(to);\n  }\n  addTimer(options) {\n    this._replayLogOnce();\n    if (options.type === "AnimationFrame" /* AnimationFrame */ && !options.func)\n      throw new Error("Callback must be provided to requestAnimationFrame calls");\n    if (options.type === "IdleCallback" /* IdleCallback */ && !options.func)\n      throw new Error("Callback must be provided to requestIdleCallback calls");\n    if (["Timeout" /* Timeout */, "Interval" /* Interval */].includes(options.type) && !options.func && options.delay === void 0)\n      throw new Error("Callback must be provided to timer calls");\n    let delay = options.delay ? +options.delay : 0;\n    if (!Number.isFinite(delay))\n      delay = 0;\n    delay = delay > maxTimeout ? 1 : delay;\n    delay = Math.max(0, delay);\n    const timer = {\n      type: options.type,\n      func: options.func,\n      args: options.args || [],\n      delay,\n      callAt: shiftTicks(this._now.ticks, delay || (this._duringTick ? 1 : 0)),\n      createdAt: this._now.ticks,\n      id: this._uniqueTimerId++,\n      error: new Error()\n    };\n    this._timers.set(timer.id, timer);\n    if (this._realTime)\n      this._updateRealTimeTimer();\n    return timer.id;\n  }\n  countTimers() {\n    return this._timers.size;\n  }\n  _firstTimer(beforeTick) {\n    let firstTimer = null;\n    for (const timer of this._timers.values()) {\n      const isInRange = beforeTick === void 0 || timer.callAt <= beforeTick;\n      if (isInRange && (!firstTimer || compareTimers(firstTimer, timer) === 1))\n        firstTimer = timer;\n    }\n    return firstTimer;\n  }\n  _takeFirstTimer(beforeTick) {\n    const timer = this._firstTimer(beforeTick);\n    if (!timer)\n      return null;\n    this._advanceNow(timer.callAt);\n    if (timer.type === "Interval" /* Interval */)\n      timer.callAt = shiftTicks(timer.callAt, timer.delay);\n    else\n      this._timers.delete(timer.id);\n    return timer;\n  }\n  async _callFirstTimer(beforeTick) {\n    const timer = this._takeFirstTimer(beforeTick);\n    if (!timer)\n      return { timerFound: false };\n    this._duringTick = true;\n    try {\n      if (typeof timer.func !== "function") {\n        let error2;\n        try {\n          (() => {\n            globalThis.eval(timer.func);\n          })();\n        } catch (e) {\n          error2 = e;\n        }\n        await new Promise((f) => this._embedder.setTimeout(f));\n        return { timerFound: true, error: error2 };\n      }\n      let args = timer.args;\n      if (timer.type === "AnimationFrame" /* AnimationFrame */)\n        args = [this._now.ticks];\n      else if (timer.type === "IdleCallback" /* IdleCallback */)\n        args = [{ didTimeout: false, timeRemaining: () => 0 }];\n      let error;\n      try {\n        timer.func.apply(null, args);\n      } catch (e) {\n        error = e;\n      }\n      await new Promise((f) => this._embedder.setTimeout(f));\n      return { timerFound: true, error };\n    } finally {\n      this._duringTick = false;\n    }\n  }\n  getTimeToNextFrame() {\n    return 16 - this._now.ticks % 16;\n  }\n  clearTimer(timerId, type) {\n    this._replayLogOnce();\n    if (!timerId) {\n      return;\n    }\n    const id = Number(timerId);\n    if (Number.isNaN(id) || id < idCounterStart) {\n      const handlerName = getClearHandler(type);\n      new Error(`Clock: ${handlerName} was invoked to clear a native timer instead of one created by the clock library.`);\n    }\n    const timer = this._timers.get(id);\n    if (timer) {\n      if (timer.type === type || timer.type === "Timeout" && type === "Interval" || timer.type === "Interval" && type === "Timeout") {\n        this._timers.delete(id);\n      } else {\n        const clear = getClearHandler(type);\n        const schedule = getScheduleHandler(timer.type);\n        throw new Error(\n          `Cannot clear timer: timer created with ${schedule}() but cleared with ${clear}()`\n        );\n      }\n    }\n  }\n  _replayLogOnce() {\n    if (!this._log.length)\n      return;\n    let lastLogTime = -1;\n    let isPaused = false;\n    for (const { type, time, param } of this._log) {\n      if (!isPaused && lastLogTime !== -1)\n        this._advanceNow(shiftTicks(this._now.ticks, time - lastLogTime));\n      lastLogTime = time;\n      if (type === "install") {\n        this._innerSetTime(asWallTime(param));\n      } else if (type === "fastForward" || type === "runFor") {\n        this._advanceNow(shiftTicks(this._now.ticks, param));\n      } else if (type === "pauseAt") {\n        isPaused = true;\n        this._innerPause();\n        this._innerSetTime(asWallTime(param));\n      } else if (type === "resume") {\n        this._innerResume();\n        isPaused = false;\n      } else if (type === "setFixedTime") {\n        this._innerSetFixedTime(asWallTime(param));\n      } else if (type === "setSystemTime") {\n        this._innerSetTime(asWallTime(param));\n      }\n    }\n    if (!isPaused && lastLogTime > 0)\n      this._advanceNow(shiftTicks(this._now.ticks, this._embedder.dateNow() - lastLogTime));\n    this._log.length = 0;\n  }\n};\nfunction mirrorDateProperties(target, source) {\n  for (const prop in source) {\n    if (source.hasOwnProperty(prop))\n      target[prop] = source[prop];\n  }\n  target.toString = () => source.toString();\n  target.prototype = source.prototype;\n  target.parse = source.parse;\n  target.UTC = source.UTC;\n  target.prototype.toUTCString = source.prototype.toUTCString;\n  target.isFake = true;\n  return target;\n}\nfunction createDate(clock, NativeDate) {\n  function ClockDate(year, month, date, hour, minute, second, ms) {\n    if (!(this instanceof ClockDate))\n      return new NativeDate(clock.now()).toString();\n    switch (arguments.length) {\n      case 0:\n        return new NativeDate(clock.now());\n      case 1:\n        return new NativeDate(year);\n      case 2:\n        return new NativeDate(year, month);\n      case 3:\n        return new NativeDate(year, month, date);\n      case 4:\n        return new NativeDate(year, month, date, hour);\n      case 5:\n        return new NativeDate(year, month, date, hour, minute);\n      case 6:\n        return new NativeDate(\n          year,\n          month,\n          date,\n          hour,\n          minute,\n          second\n        );\n      default:\n        return new NativeDate(\n          year,\n          month,\n          date,\n          hour,\n          minute,\n          second,\n          ms\n        );\n    }\n  }\n  ClockDate.now = () => clock.now();\n  return mirrorDateProperties(ClockDate, NativeDate);\n}\nfunction createIntl(clock, NativeIntl) {\n  const ClockIntl = {};\n  for (const key of Object.getOwnPropertyNames(NativeIntl))\n    ClockIntl[key] = NativeIntl[key];\n  ClockIntl.DateTimeFormat = function(...args) {\n    const realFormatter = new NativeIntl.DateTimeFormat(...args);\n    const formatter = {\n      formatRange: realFormatter.formatRange.bind(realFormatter),\n      formatRangeToParts: realFormatter.formatRangeToParts.bind(realFormatter),\n      resolvedOptions: realFormatter.resolvedOptions.bind(realFormatter),\n      format: (date) => realFormatter.format(date || clock.now()),\n      formatToParts: (date) => realFormatter.formatToParts(date || clock.now())\n    };\n    return formatter;\n  };\n  ClockIntl.DateTimeFormat.prototype = Object.create(\n    NativeIntl.DateTimeFormat.prototype\n  );\n  ClockIntl.DateTimeFormat.supportedLocalesOf = NativeIntl.DateTimeFormat.supportedLocalesOf;\n  return ClockIntl;\n}\nfunction compareTimers(a, b) {\n  if (a.callAt < b.callAt)\n    return -1;\n  if (a.callAt > b.callAt)\n    return 1;\n  if (a.type === "Immediate" /* Immediate */ && b.type !== "Immediate" /* Immediate */)\n    return -1;\n  if (a.type !== "Immediate" /* Immediate */ && b.type === "Immediate" /* Immediate */)\n    return 1;\n  if (a.createdAt < b.createdAt)\n    return -1;\n  if (a.createdAt > b.createdAt)\n    return 1;\n  if (a.id < b.id)\n    return -1;\n  if (a.id > b.id)\n    return 1;\n}\nvar maxTimeout = Math.pow(2, 31) - 1;\nvar idCounterStart = 1e12;\nfunction platformOriginals(globalObject) {\n  const raw = {\n    setTimeout: globalObject.setTimeout,\n    clearTimeout: globalObject.clearTimeout,\n    setInterval: globalObject.setInterval,\n    clearInterval: globalObject.clearInterval,\n    requestAnimationFrame: globalObject.requestAnimationFrame ? globalObject.requestAnimationFrame : void 0,\n    cancelAnimationFrame: globalObject.cancelAnimationFrame ? globalObject.cancelAnimationFrame : void 0,\n    requestIdleCallback: globalObject.requestIdleCallback ? globalObject.requestIdleCallback : void 0,\n    cancelIdleCallback: globalObject.cancelIdleCallback ? globalObject.cancelIdleCallback : void 0,\n    Date: globalObject.Date,\n    performance: globalObject.performance,\n    Intl: globalObject.Intl\n  };\n  const bound = { ...raw };\n  for (const key of Object.keys(bound)) {\n    if (key !== "Date" && typeof bound[key] === "function")\n      bound[key] = bound[key].bind(globalObject);\n  }\n  return { raw, bound };\n}\nfunction getScheduleHandler(type) {\n  if (type === "IdleCallback" || type === "AnimationFrame")\n    return `request${type}`;\n  return `set${type}`;\n}\nfunction createApi(clock, originals) {\n  return {\n    setTimeout: (func, timeout, ...args) => {\n      const delay = timeout ? +timeout : timeout;\n      return clock.addTimer({\n        type: "Timeout" /* Timeout */,\n        func,\n        args,\n        delay\n      });\n    },\n    clearTimeout: (timerId) => {\n      if (timerId)\n        clock.clearTimer(timerId, "Timeout" /* Timeout */);\n    },\n    setInterval: (func, timeout, ...args) => {\n      const delay = timeout ? +timeout : timeout;\n      return clock.addTimer({\n        type: "Interval" /* Interval */,\n        func,\n        args,\n        delay\n      });\n    },\n    clearInterval: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "Interval" /* Interval */);\n    },\n    requestAnimationFrame: (callback) => {\n      return clock.addTimer({\n        type: "AnimationFrame" /* AnimationFrame */,\n        func: callback,\n        delay: clock.getTimeToNextFrame()\n      });\n    },\n    cancelAnimationFrame: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "AnimationFrame" /* AnimationFrame */);\n    },\n    requestIdleCallback: (callback, options) => {\n      let timeToNextIdlePeriod = 0;\n      if (clock.countTimers() > 0)\n        timeToNextIdlePeriod = 50;\n      return clock.addTimer({\n        type: "IdleCallback" /* IdleCallback */,\n        func: callback,\n        delay: (options == null ? void 0 : options.timeout) ? Math.min(options == null ? void 0 : options.timeout, timeToNextIdlePeriod) : timeToNextIdlePeriod\n      });\n    },\n    cancelIdleCallback: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "IdleCallback" /* IdleCallback */);\n    },\n    Intl: originals.Intl ? createIntl(clock, originals.Intl) : void 0,\n    Date: createDate(clock, originals.Date),\n    performance: originals.performance ? fakePerformance(clock, originals.performance) : void 0\n  };\n}\nfunction getClearHandler(type) {\n  if (type === "IdleCallback" || type === "AnimationFrame")\n    return `cancel${type}`;\n  return `clear${type}`;\n}\nfunction fakePerformance(clock, performance) {\n  const result = {\n    now: () => clock.performanceNow()\n  };\n  result.__defineGetter__("timeOrigin", () => clock._now.origin || 0);\n  for (const key of Object.keys(performance.__proto__)) {\n    if (key === "now" || key === "timeOrigin")\n      continue;\n    if (key === "getEntries" || key === "getEntriesByName" || key === "getEntriesByType")\n      result[key] = () => [];\n    else\n      result[key] = () => {\n      };\n  }\n  return result;\n}\nfunction createClock(globalObject) {\n  const originals = platformOriginals(globalObject);\n  const embedder = {\n    dateNow: () => originals.raw.Date.now(),\n    performanceNow: () => Math.ceil(originals.raw.performance.now()),\n    setTimeout: (task, timeout) => {\n      const timerId = originals.bound.setTimeout(task, timeout);\n      return () => originals.bound.clearTimeout(timerId);\n    },\n    setInterval: (task, delay) => {\n      const intervalId = originals.bound.setInterval(task, delay);\n      return () => originals.bound.clearInterval(intervalId);\n    }\n  };\n  const clock = new ClockController(embedder);\n  const api = createApi(clock, originals.bound);\n  return { clock, api, originals: originals.raw };\n}\nfunction install(globalObject, config = {}) {\n  var _a, _b;\n  if ((_a = globalObject.Date) == null ? void 0 : _a.isFake) {\n    throw new TypeError(`Can\'t install fake timers twice on the same global object.`);\n  }\n  const { clock, api, originals } = createClock(globalObject);\n  const toFake = ((_b = config.toFake) == null ? void 0 : _b.length) ? config.toFake : Object.keys(originals);\n  for (const method of toFake) {\n    if (method === "Date") {\n      globalObject.Date = mirrorDateProperties(api.Date, globalObject.Date);\n    } else if (method === "Intl") {\n      globalObject.Intl = api[method];\n    } else if (method === "performance") {\n      globalObject.performance = api[method];\n      const kEventTimeStamp = Symbol("playwrightEventTimeStamp");\n      Object.defineProperty(Event.prototype, "timeStamp", {\n        get() {\n          var _a2;\n          if (!this[kEventTimeStamp])\n            this[kEventTimeStamp] = (_a2 = api.performance) == null ? void 0 : _a2.now();\n          return this[kEventTimeStamp];\n        }\n      });\n    } else {\n      globalObject[method] = (...args) => {\n        return api[method].apply(api, args);\n      };\n    }\n    clock.disposables.push(() => {\n      globalObject[method] = originals[method];\n    });\n  }\n  return { clock, api, originals };\n}\nfunction inject(globalObject) {\n  const builtin = platformOriginals(globalObject).bound;\n  const { clock: controller } = install(globalObject);\n  controller.resume();\n  return {\n    controller,\n    builtin\n  };\n}\nfunction asWallTime(n) {\n  return n;\n}\nfunction shiftTicks(ticks, ms) {\n  return ticks + ms;\n}\n';
Object.defineProperty(clock$1, "__esModule", {
  value: true
});
clock$1.Clock = void 0;
var clockSource = _interopRequireWildcard$b(clockSource$1);
function _getRequireWildcardCache$b(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$b = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$b(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$b(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
let Clock$1 = class Clock {
  constructor(browserContext2) {
    this._browserContext = void 0;
    this._scriptInstalled = false;
    this._browserContext = browserContext2;
  }
  markAsUninstalled() {
    this._scriptInstalled = false;
  }
  async fastForward(ticks) {
    await this._installIfNeeded();
    const ticksMillis = parseTicks$1(ticks);
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('fastForward', ${Date.now()}, ${ticksMillis})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.fastForward(${ticksMillis})`);
  }
  async install(time2) {
    await this._installIfNeeded();
    const timeMillis = time2 !== void 0 ? parseTime$1(time2) : Date.now();
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('install', ${Date.now()}, ${timeMillis})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.install(${timeMillis})`);
  }
  async pauseAt(ticks) {
    await this._installIfNeeded();
    const timeMillis = parseTime$1(ticks);
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('pauseAt', ${Date.now()}, ${timeMillis})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.pauseAt(${timeMillis})`);
  }
  async resume() {
    await this._installIfNeeded();
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('resume', ${Date.now()})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.resume()`);
  }
  async setFixedTime(time2) {
    await this._installIfNeeded();
    const timeMillis = parseTime$1(time2);
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setFixedTime', ${Date.now()}, ${timeMillis})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.setFixedTime(${timeMillis})`);
  }
  async setSystemTime(time2) {
    await this._installIfNeeded();
    const timeMillis = parseTime$1(time2);
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setSystemTime', ${Date.now()}, ${timeMillis})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.setSystemTime(${timeMillis})`);
  }
  async runFor(ticks) {
    await this._installIfNeeded();
    const ticksMillis = parseTicks$1(ticks);
    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('runFor', ${Date.now()}, ${ticksMillis})`);
    await this._evaluateInFrames(`globalThis.__pwClock.controller.runFor(${ticksMillis})`);
  }
  async _installIfNeeded() {
    if (this._scriptInstalled) return;
    this._scriptInstalled = true;
    const script = `(() => {
      const module = {};
      ${clockSource.source}
      globalThis.__pwClock = (module.exports.inject())(globalThis);
    })();`;
    await this._browserContext.addInitScript(script);
    await this._evaluateInFrames(script);
  }
  async _evaluateInFrames(script) {
    await this._browserContext.safeNonStallingEvaluateInAllFrames(script, "main", {
      throwOnJSErrors: true
    });
  }
};
clock$1.Clock = Clock$1;
function parseTicks$1(value) {
  if (typeof value === "number") return value;
  if (!value) return 0;
  const str = value;
  const strings = str.split(":");
  const l = strings.length;
  let i = l;
  let ms2 = 0;
  let parsed;
  if (l > 3 || !/^(\d\d:){0,2}\d\d?$/.test(str)) {
    throw new Error(`Clock only understands numbers, 'mm:ss' and 'hh:mm:ss'`);
  }
  while (i--) {
    parsed = parseInt(strings[i], 10);
    if (parsed >= 60) throw new Error(`Invalid time ${str}`);
    ms2 += parsed * Math.pow(60, l - i - 1);
  }
  return ms2 * 1e3;
}
function parseTime$1(epoch) {
  if (!epoch) return 0;
  if (typeof epoch === "number") return epoch;
  const parsed = new Date(epoch);
  if (!isFinite(parsed.getTime())) throw new Error(`Invalid date: ${epoch}`);
  return parsed.getTime();
}
var recorderApp = {};
var launchApp$1 = {};
Object.defineProperty(launchApp$1, "__esModule", {
  value: true
});
launchApp$1.launchApp = launchApp;
launchApp$1.syncLocalStorageWithSettings = syncLocalStorageWithSettings;
var _fs$7 = _interopRequireDefault$a(require$$0$2);
var _path$4 = _interopRequireDefault$a(require$$1);
var _registry = requireRegistry();
var _utils$z = requireUtils();
var _instrumentation$5 = instrumentation;
function _interopRequireDefault$a(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
async function launchApp(browserType2, options) {
  var _options$persistentCo, _options$persistentCo2, _options$persistentCo3;
  const args = [...(_options$persistentCo = (_options$persistentCo2 = options.persistentContextOptions) === null || _options$persistentCo2 === void 0 ? void 0 : _options$persistentCo2.args) !== null && _options$persistentCo !== void 0 ? _options$persistentCo : []];
  if (browserType2.name() === "chromium") {
    args.push("--app=data:text/html,", `--window-size=${options.windowSize.width},${options.windowSize.height}`, ...options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : [], "--test-type=");
  }
  const context = await browserType2.launchPersistentContext((0, _instrumentation$5.serverSideCallMetadata)(), "", {
    channel: !((_options$persistentCo3 = options.persistentContextOptions) !== null && _options$persistentCo3 !== void 0 && _options$persistentCo3.executablePath) ? (0, _registry.findChromiumChannel)(options.sdkLanguage) : void 0,
    noDefaultViewport: true,
    ignoreDefaultArgs: ["--enable-automation"],
    colorScheme: "no-override",
    acceptDownloads: (0, _utils$z.isUnderTest)() ? "accept" : "internal-browser-default",
    ...options === null || options === void 0 ? void 0 : options.persistentContextOptions,
    args
  });
  const [page2] = context.pages();
  if (browserType2.name() === "chromium" && process.platform === "darwin") {
    context.on("page", async (newPage) => {
      if (newPage.mainFrame().url() === "chrome://new-tab-page/") {
        await page2.bringToFront();
        await newPage.close((0, _instrumentation$5.serverSideCallMetadata)());
      }
    });
  }
  if (browserType2.name() === "chromium") await installAppIcon(page2);
  return {
    context,
    page: page2
  };
}
async function installAppIcon(page2) {
  const icon = await _fs$7.default.promises.readFile(require.resolve("./chromium/appIcon.png"));
  const crPage2 = page2._delegate;
  await crPage2._mainFrameSession._client.send("Browser.setDockTile", {
    image: icon.toString("base64")
  });
}
async function syncLocalStorageWithSettings(page2, appName) {
  if ((0, _utils$z.isUnderTest)()) return;
  const settingsFile = _path$4.default.join(_registry.registryDirectory, ".settings", `${appName}.json`);
  await page2.exposeBinding("_saveSerializedSettings", false, (_, settings2) => {
    _fs$7.default.mkdirSync(_path$4.default.dirname(settingsFile), {
      recursive: true
    });
    _fs$7.default.writeFileSync(settingsFile, settings2);
  });
  const settings = await _fs$7.default.promises.readFile(settingsFile, "utf-8").catch(() => "{}");
  await page2.addInitScript(`(${String((settings2) => {
    if (location && location.protocol === "data:") return;
    if (window.top !== window) return;
    Object.entries(settings2).map(([k, v]) => localStorage[k] = v);
    window.saveSettings = () => {
      window._saveSerializedSettings(JSON.stringify({
        ...localStorage
      }));
    };
  })})(${settings});
  `);
}
var playwright$2 = {};
var android$1 = {};
var crBrowser = {};
var browser$1 = {};
var download$1 = {};
var hasRequiredDownload;
function requireDownload() {
  if (hasRequiredDownload) return download$1;
  hasRequiredDownload = 1;
  Object.defineProperty(download$1, "__esModule", {
    value: true
  });
  download$1.Download = void 0;
  var _path2 = _interopRequireDefault2(require$$1);
  var _page = requirePage$1();
  var _utils2 = requireUtils();
  var _artifact2 = artifact$1;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class Download2 {
    constructor(page2, downloadsPath, uuid, url, suggestedFilename) {
      this.artifact = void 0;
      this.url = void 0;
      this._page = void 0;
      this._suggestedFilename = void 0;
      const unaccessibleErrorMessage = page2._browserContext._options.acceptDownloads === "deny" ? "Pass { acceptDownloads: true } when you are creating your browser context." : void 0;
      this.artifact = new _artifact2.Artifact(page2, _path2.default.join(downloadsPath, uuid), unaccessibleErrorMessage, () => {
        return this._page._browserContext.cancelDownload(uuid);
      });
      this._page = page2;
      this.url = url;
      this._suggestedFilename = suggestedFilename;
      page2._browserContext._downloads.add(this);
      if (suggestedFilename !== void 0) this._fireDownloadEvent();
    }
    page() {
      return this._page;
    }
    _filenameSuggested(suggestedFilename) {
      (0, _utils2.assert)(this._suggestedFilename === void 0);
      this._suggestedFilename = suggestedFilename;
      this._fireDownloadEvent();
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    _fireDownloadEvent() {
      this._page.instrumentation.onDownload(this._page, this);
      this._page.emit(_page.Page.Events.Download, this);
    }
  }
  download$1.Download = Download2;
  return download$1;
}
var socksClientCertificatesInterceptor = {};
var socksProxy = {};
Object.defineProperty(socksProxy, "__esModule", {
  value: true
});
socksProxy.SocksProxyHandler = socksProxy.SocksProxy = void 0;
socksProxy.parsePattern = parsePattern;
var _events$a = _interopRequireDefault$9(require$$0$1);
var _net = _interopRequireDefault$9(require$$8);
var _debugLogger$9 = debugLogger;
var _happyEyeballs$1 = requireHappyEyeballs();
var _utils$y = requireUtils();
function _interopRequireDefault$9(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var SocksAuth = /* @__PURE__ */ function(SocksAuth2) {
  SocksAuth2[SocksAuth2["NO_AUTHENTICATION_REQUIRED"] = 0] = "NO_AUTHENTICATION_REQUIRED";
  SocksAuth2[SocksAuth2["GSSAPI"] = 1] = "GSSAPI";
  SocksAuth2[SocksAuth2["USERNAME_PASSWORD"] = 2] = "USERNAME_PASSWORD";
  SocksAuth2[SocksAuth2["NO_ACCEPTABLE_METHODS"] = 255] = "NO_ACCEPTABLE_METHODS";
  return SocksAuth2;
}(SocksAuth || {});
var SocksAddressType = /* @__PURE__ */ function(SocksAddressType2) {
  SocksAddressType2[SocksAddressType2["IPv4"] = 1] = "IPv4";
  SocksAddressType2[SocksAddressType2["FqName"] = 3] = "FqName";
  SocksAddressType2[SocksAddressType2["IPv6"] = 4] = "IPv6";
  return SocksAddressType2;
}(SocksAddressType || {});
var SocksCommand = /* @__PURE__ */ function(SocksCommand2) {
  SocksCommand2[SocksCommand2["CONNECT"] = 1] = "CONNECT";
  SocksCommand2[SocksCommand2["BIND"] = 2] = "BIND";
  SocksCommand2[SocksCommand2["UDP_ASSOCIATE"] = 3] = "UDP_ASSOCIATE";
  return SocksCommand2;
}(SocksCommand || {});
var SocksReply = /* @__PURE__ */ function(SocksReply2) {
  SocksReply2[SocksReply2["Succeeded"] = 0] = "Succeeded";
  SocksReply2[SocksReply2["GeneralServerFailure"] = 1] = "GeneralServerFailure";
  SocksReply2[SocksReply2["NotAllowedByRuleSet"] = 2] = "NotAllowedByRuleSet";
  SocksReply2[SocksReply2["NetworkUnreachable"] = 3] = "NetworkUnreachable";
  SocksReply2[SocksReply2["HostUnreachable"] = 4] = "HostUnreachable";
  SocksReply2[SocksReply2["ConnectionRefused"] = 5] = "ConnectionRefused";
  SocksReply2[SocksReply2["TtlExpired"] = 6] = "TtlExpired";
  SocksReply2[SocksReply2["CommandNotSupported"] = 7] = "CommandNotSupported";
  SocksReply2[SocksReply2["AddressTypeNotSupported"] = 8] = "AddressTypeNotSupported";
  return SocksReply2;
}(SocksReply || {});
class SocksConnection {
  constructor(uid, socket, client) {
    this._buffer = Buffer.from([]);
    this._offset = 0;
    this._fence = 0;
    this._fenceCallback = void 0;
    this._socket = void 0;
    this._boundOnData = void 0;
    this._uid = void 0;
    this._client = void 0;
    this._uid = uid;
    this._socket = socket;
    this._client = client;
    this._boundOnData = this._onData.bind(this);
    socket.on("data", this._boundOnData);
    socket.on("close", () => this._onClose());
    socket.on("end", () => this._onClose());
    socket.on("error", () => this._onClose());
    this._run().catch(() => this._socket.end());
  }
  async _run() {
    (0, _utils$y.assert)(await this._authenticate());
    const {
      command,
      host,
      port
    } = await this._parseRequest();
    if (command !== SocksCommand.CONNECT) {
      this._writeBytes(Buffer.from([
        5,
        SocksReply.CommandNotSupported,
        0,
        // RSV
        1,
        // IPv4
        0,
        0,
        0,
        0,
        // Address
        0,
        0
        // Port
      ]));
      return;
    }
    this._socket.off("data", this._boundOnData);
    this._client.onSocketRequested({
      uid: this._uid,
      host,
      port
    });
  }
  async _authenticate() {
    const version2 = await this._readByte();
    (0, _utils$y.assert)(version2 === 5, "The VER field must be set to x05 for this version of the protocol, was " + version2);
    const nMethods = await this._readByte();
    (0, _utils$y.assert)(nMethods, "No authentication methods specified");
    const methods = await this._readBytes(nMethods);
    for (const method of methods) {
      if (method === 0) {
        this._writeBytes(Buffer.from([version2, method]));
        return true;
      }
    }
    this._writeBytes(Buffer.from([version2, SocksAuth.NO_ACCEPTABLE_METHODS]));
    return false;
  }
  async _parseRequest() {
    const version2 = await this._readByte();
    (0, _utils$y.assert)(version2 === 5, "The VER field must be set to x05 for this version of the protocol, was " + version2);
    const command = await this._readByte();
    await this._readByte();
    const addressType = await this._readByte();
    let host = "";
    switch (addressType) {
      case SocksAddressType.IPv4:
        host = (await this._readBytes(4)).join(".");
        break;
      case SocksAddressType.FqName:
        const length = await this._readByte();
        host = (await this._readBytes(length)).toString();
        break;
      case SocksAddressType.IPv6:
        const bytes = await this._readBytes(16);
        const tokens = [];
        for (let i = 0; i < 8; ++i) tokens.push(bytes.readUInt16BE(i * 2).toString(16));
        host = tokens.join(":");
        break;
    }
    const port = (await this._readBytes(2)).readUInt16BE(0);
    this._buffer = Buffer.from([]);
    this._offset = 0;
    this._fence = 0;
    return {
      command,
      host,
      port
    };
  }
  async _readByte() {
    const buffer = await this._readBytes(1);
    return buffer[0];
  }
  async _readBytes(length) {
    this._fence = this._offset + length;
    if (!this._buffer || this._buffer.length < this._fence) await new Promise((f) => this._fenceCallback = f);
    this._offset += length;
    return this._buffer.slice(this._offset - length, this._offset);
  }
  _writeBytes(buffer) {
    if (this._socket.writable) this._socket.write(buffer);
  }
  _onClose() {
    this._client.onSocketClosed({
      uid: this._uid
    });
  }
  _onData(buffer) {
    this._buffer = Buffer.concat([this._buffer, buffer]);
    if (this._fenceCallback && this._buffer.length >= this._fence) {
      const callback = this._fenceCallback;
      this._fenceCallback = void 0;
      callback();
    }
  }
  socketConnected(host, port) {
    this._writeBytes(Buffer.from([
      5,
      SocksReply.Succeeded,
      0,
      // RSV
      ...ipToSocksAddress(host),
      // ATYP, Address
      port >> 8,
      port & 255
      // Port
    ]));
    this._socket.on("data", (data) => this._client.onSocketData({
      uid: this._uid,
      data
    }));
  }
  socketFailed(errorCode) {
    const buffer = Buffer.from([
      5,
      0,
      0,
      // RSV
      ...ipToSocksAddress("0.0.0.0"),
      // ATYP, Address
      0,
      0
      // Port
    ]);
    switch (errorCode) {
      case "ENOENT":
      case "ENOTFOUND":
      case "ETIMEDOUT":
      case "EHOSTUNREACH":
        buffer[1] = SocksReply.HostUnreachable;
        break;
      case "ENETUNREACH":
        buffer[1] = SocksReply.NetworkUnreachable;
        break;
      case "ECONNREFUSED":
        buffer[1] = SocksReply.ConnectionRefused;
        break;
      case "ERULESET":
        buffer[1] = SocksReply.NotAllowedByRuleSet;
        break;
    }
    this._writeBytes(buffer);
    this._socket.end();
  }
  sendData(data) {
    this._socket.write(data);
  }
  end() {
    this._socket.end();
  }
  error(error) {
    this._socket.destroy(new Error(error));
  }
}
function hexToNumber(hex) {
  return [...hex].reduce((value, digit2) => {
    const code = digit2.charCodeAt(0);
    if (code >= 48 && code <= 57)
      return value + code;
    if (code >= 97 && code <= 102)
      return value + (code - 97) + 10;
    if (code >= 65 && code <= 70)
      return value + (code - 65) + 10;
    throw new Error("Invalid IPv6 token " + hex);
  }, 0);
}
function ipToSocksAddress(address) {
  if (_net.default.isIPv4(address)) {
    return [
      1,
      // IPv4
      ...address.split(".", 4).map((t) => +t & 255)
      // Address
    ];
  }
  if (_net.default.isIPv6(address)) {
    const result2 = [4];
    const tokens = address.split(":", 8);
    while (tokens.length < 8) tokens.unshift("");
    for (const token of tokens) {
      const value = hexToNumber(token);
      result2.push(value >> 8 & 255, value & 255);
    }
    return result2;
  }
  throw new Error("Only IPv4 and IPv6 addresses are supported");
}
function starMatchToRegex(pattern) {
  const source2 = pattern.split("*").map((s) => {
    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }).join(".*");
  return new RegExp("^" + source2 + "$");
}
function parsePattern(pattern) {
  if (!pattern) return () => false;
  const matchers = pattern.split(",").map((token) => {
    const match = token.match(/^(.*?)(?::(\d+))?$/);
    if (!match) throw new Error(`Unsupported token "${token}" in pattern "${pattern}"`);
    const tokenPort = match[2] ? +match[2] : void 0;
    const portMatches = (port) => tokenPort === void 0 || tokenPort === port;
    let tokenHost = match[1];
    if (tokenHost === "<loopback>") {
      return (host, port) => {
        if (!portMatches(port)) return false;
        return host === "localhost" || host.endsWith(".localhost") || host === "127.0.0.1" || host === "[::1]";
      };
    }
    if (tokenHost === "*") return (host, port) => portMatches(port);
    if (_net.default.isIPv4(tokenHost) || _net.default.isIPv6(tokenHost)) return (host, port) => host === tokenHost && portMatches(port);
    if (tokenHost[0] === ".") tokenHost = "*" + tokenHost;
    const tokenRegex = starMatchToRegex(tokenHost);
    return (host, port) => {
      if (!portMatches(port)) return false;
      if (_net.default.isIPv4(host) || _net.default.isIPv6(host)) return false;
      return !!host.match(tokenRegex);
    };
  });
  return (host, port) => matchers.some((matcher) => matcher(host, port));
}
class SocksProxy extends _events$a.default {
  constructor() {
    super();
    this._server = void 0;
    this._connections = /* @__PURE__ */ new Map();
    this._sockets = /* @__PURE__ */ new Set();
    this._closed = false;
    this._port = void 0;
    this._patternMatcher = () => false;
    this._directSockets = /* @__PURE__ */ new Map();
    this._server = new _net.default.Server((socket) => {
      const uid = (0, _utils$y.createGuid)();
      const connection2 = new SocksConnection(uid, socket, this);
      this._connections.set(uid, connection2);
    });
    this._server.on("connection", (socket) => {
      if (this._closed) {
        socket.destroy();
        return;
      }
      this._sockets.add(socket);
      socket.once("close", () => this._sockets.delete(socket));
    });
  }
  setPattern(pattern) {
    try {
      this._patternMatcher = parsePattern(pattern);
    } catch (e) {
      this._patternMatcher = () => false;
    }
  }
  async _handleDirect(request2) {
    try {
      var _this$_connections$ge4;
      const socket = await (0, _happyEyeballs$1.createSocket)(request2.host, request2.port);
      socket.on("data", (data) => {
        var _this$_connections$ge;
        return (_this$_connections$ge = this._connections.get(request2.uid)) === null || _this$_connections$ge === void 0 ? void 0 : _this$_connections$ge.sendData(data);
      });
      socket.on("error", (error) => {
        var _this$_connections$ge2;
        (_this$_connections$ge2 = this._connections.get(request2.uid)) === null || _this$_connections$ge2 === void 0 || _this$_connections$ge2.error(error.message);
        this._directSockets.delete(request2.uid);
      });
      socket.on("end", () => {
        var _this$_connections$ge3;
        (_this$_connections$ge3 = this._connections.get(request2.uid)) === null || _this$_connections$ge3 === void 0 || _this$_connections$ge3.end();
        this._directSockets.delete(request2.uid);
      });
      const localAddress = socket.localAddress;
      const localPort = socket.localPort;
      this._directSockets.set(request2.uid, socket);
      (_this$_connections$ge4 = this._connections.get(request2.uid)) === null || _this$_connections$ge4 === void 0 || _this$_connections$ge4.socketConnected(localAddress, localPort);
    } catch (error) {
      var _this$_connections$ge5;
      (_this$_connections$ge5 = this._connections.get(request2.uid)) === null || _this$_connections$ge5 === void 0 || _this$_connections$ge5.socketFailed(error.code);
    }
  }
  port() {
    return this._port;
  }
  async listen(port, hostname) {
    return new Promise((f) => {
      this._server.listen(port, hostname, () => {
        const port2 = this._server.address().port;
        this._port = port2;
        f(port2);
      });
    });
  }
  async close() {
    if (this._closed) return;
    this._closed = true;
    for (const socket of this._sockets) socket.destroy();
    this._sockets.clear();
    await new Promise((f) => this._server.close(f));
  }
  onSocketRequested(payload) {
    if (!this._patternMatcher(payload.host, payload.port)) {
      this._handleDirect(payload);
      return;
    }
    this.emit(SocksProxy.Events.SocksRequested, payload);
  }
  onSocketData(payload) {
    const direct = this._directSockets.get(payload.uid);
    if (direct) {
      direct.write(payload.data);
      return;
    }
    this.emit(SocksProxy.Events.SocksData, payload);
  }
  onSocketClosed(payload) {
    const direct = this._directSockets.get(payload.uid);
    if (direct) {
      direct.destroy();
      this._directSockets.delete(payload.uid);
      return;
    }
    this.emit(SocksProxy.Events.SocksClosed, payload);
  }
  socketConnected({
    uid,
    host,
    port
  }) {
    var _this$_connections$ge6;
    (_this$_connections$ge6 = this._connections.get(uid)) === null || _this$_connections$ge6 === void 0 || _this$_connections$ge6.socketConnected(host, port);
  }
  socketFailed({
    uid,
    errorCode
  }) {
    var _this$_connections$ge7;
    (_this$_connections$ge7 = this._connections.get(uid)) === null || _this$_connections$ge7 === void 0 || _this$_connections$ge7.socketFailed(errorCode);
  }
  sendSocketData({
    uid,
    data
  }) {
    var _this$_connections$ge8;
    (_this$_connections$ge8 = this._connections.get(uid)) === null || _this$_connections$ge8 === void 0 || _this$_connections$ge8.sendData(data);
  }
  sendSocketEnd({
    uid
  }) {
    var _this$_connections$ge9;
    (_this$_connections$ge9 = this._connections.get(uid)) === null || _this$_connections$ge9 === void 0 || _this$_connections$ge9.end();
  }
  sendSocketError({
    uid,
    error
  }) {
    var _this$_connections$ge10;
    (_this$_connections$ge10 = this._connections.get(uid)) === null || _this$_connections$ge10 === void 0 || _this$_connections$ge10.error(error);
  }
}
socksProxy.SocksProxy = SocksProxy;
SocksProxy.Events = {
  SocksRequested: "socksRequested",
  SocksData: "socksData",
  SocksClosed: "socksClosed"
};
class SocksProxyHandler extends _events$a.default {
  constructor(pattern, redirectPortForTest) {
    super();
    this._sockets = /* @__PURE__ */ new Map();
    this._patternMatcher = () => false;
    this._redirectPortForTest = void 0;
    this._patternMatcher = parsePattern(pattern);
    this._redirectPortForTest = redirectPortForTest;
  }
  cleanup() {
    for (const uid of this._sockets.keys()) this.socketClosed({
      uid
    });
  }
  async socketRequested({
    uid,
    host,
    port
  }) {
    _debugLogger$9.debugLogger.log("socks", `[${uid}] => request ${host}:${port}`);
    if (!this._patternMatcher(host, port)) {
      const payload = {
        uid,
        errorCode: "ERULESET"
      };
      _debugLogger$9.debugLogger.log("socks", `[${uid}] <= pattern error ${payload.errorCode}`);
      this.emit(SocksProxyHandler.Events.SocksFailed, payload);
      return;
    }
    if (host === "local.playwright") host = "localhost";
    try {
      if (this._redirectPortForTest) port = this._redirectPortForTest;
      const socket = await (0, _happyEyeballs$1.createSocket)(host, port);
      socket.on("data", (data) => {
        const payload2 = {
          uid,
          data
        };
        this.emit(SocksProxyHandler.Events.SocksData, payload2);
      });
      socket.on("error", (error) => {
        const payload2 = {
          uid,
          error: error.message
        };
        _debugLogger$9.debugLogger.log("socks", `[${uid}] <= network socket error ${payload2.error}`);
        this.emit(SocksProxyHandler.Events.SocksError, payload2);
        this._sockets.delete(uid);
      });
      socket.on("end", () => {
        const payload2 = {
          uid
        };
        _debugLogger$9.debugLogger.log("socks", `[${uid}] <= network socket closed`);
        this.emit(SocksProxyHandler.Events.SocksEnd, payload2);
        this._sockets.delete(uid);
      });
      const localAddress = socket.localAddress;
      const localPort = socket.localPort;
      this._sockets.set(uid, socket);
      const payload = {
        uid,
        host: localAddress,
        port: localPort
      };
      _debugLogger$9.debugLogger.log("socks", `[${uid}] <= connected to network ${payload.host}:${payload.port}`);
      this.emit(SocksProxyHandler.Events.SocksConnected, payload);
    } catch (error) {
      const payload = {
        uid,
        errorCode: error.code
      };
      _debugLogger$9.debugLogger.log("socks", `[${uid}] <= connect error ${payload.errorCode}`);
      this.emit(SocksProxyHandler.Events.SocksFailed, payload);
    }
  }
  sendSocketData({
    uid,
    data
  }) {
    var _this$_sockets$get;
    (_this$_sockets$get = this._sockets.get(uid)) === null || _this$_sockets$get === void 0 || _this$_sockets$get.write(data);
  }
  socketClosed({
    uid
  }) {
    var _this$_sockets$get2;
    _debugLogger$9.debugLogger.log("socks", `[${uid}] <= browser socket closed`);
    (_this$_sockets$get2 = this._sockets.get(uid)) === null || _this$_sockets$get2 === void 0 || _this$_sockets$get2.destroy();
    this._sockets.delete(uid);
  }
}
socksProxy.SocksProxyHandler = SocksProxyHandler;
SocksProxyHandler.Events = {
  SocksConnected: "socksConnected",
  SocksData: "socksData",
  SocksError: "socksError",
  SocksFailed: "socksFailed",
  SocksEnd: "socksEnd"
};
var hasRequiredSocksClientCertificatesInterceptor;
function requireSocksClientCertificatesInterceptor() {
  if (hasRequiredSocksClientCertificatesInterceptor) return socksClientCertificatesInterceptor;
  hasRequiredSocksClientCertificatesInterceptor = 1;
  Object.defineProperty(socksClientCertificatesInterceptor, "__esModule", {
    value: true
  });
  socksClientCertificatesInterceptor.ClientCertificatesProxy = void 0;
  socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin = getMatchingTLSOptionsForOrigin;
  socksClientCertificatesInterceptor.rewriteOpenSSLErrorIfNeeded = rewriteOpenSSLErrorIfNeeded;
  var _net2 = _interopRequireDefault2(require$$8);
  var _http = _interopRequireDefault2(require$$2$3);
  var _tls = _interopRequireDefault2(require$$9);
  var _stream2 = _interopRequireDefault2(require$$12);
  var _happyEyeballs2 = requireHappyEyeballs();
  var _utils2 = requireUtils();
  var _socksProxy2 = socksProxy;
  var _debugLogger2 = debugLogger;
  var _fetch2 = requireFetch$1();
  var _events2 = require$$0$1;
  var _browserContext2 = requireBrowserContext$1();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  let dummyServerTlsOptions = void 0;
  function loadDummyServerCertsIfNeeded() {
    if (dummyServerTlsOptions) return;
    const {
      cert,
      key
    } = (0, _utils2.generateSelfSignedCertificate)();
    dummyServerTlsOptions = {
      key,
      cert
    };
  }
  class ALPNCache {
    constructor() {
      this._cache = /* @__PURE__ */ new Map();
    }
    get(host, port, success) {
      const cacheKey = `${host}:${port}`;
      {
        const result3 = this._cache.get(cacheKey);
        if (result3) {
          result3.then(success);
          return;
        }
      }
      const result2 = new _utils2.ManualPromise();
      this._cache.set(cacheKey, result2);
      result2.then(success);
      (0, _happyEyeballs2.createTLSSocket)({
        host,
        port,
        servername: _net2.default.isIP(host) ? void 0 : host,
        ALPNProtocols: ["h2", "http/1.1"],
        rejectUnauthorized: false
      }).then((socket) => {
        result2.resolve(socket.alpnProtocol || "http/1.1");
        socket.end();
      }).catch((error) => {
        _debugLogger2.debugLogger.log("client-certificates", `ALPN error: ${error.message}`);
        result2.resolve("http/1.1");
      });
    }
  }
  class SocksProxyConnection {
    constructor(socksProxy2, uid, host, port) {
      this.socksProxy = void 0;
      this.uid = void 0;
      this.host = void 0;
      this.port = void 0;
      this.firstPackageReceived = false;
      this.target = void 0;
      this.internal = void 0;
      this.internalTLS = void 0;
      this._targetCloseEventListener = void 0;
      this._dummyServer = void 0;
      this._closed = false;
      this.socksProxy = socksProxy2;
      this.uid = uid;
      this.host = host;
      this.port = port;
      this._targetCloseEventListener = () => {
        var _this$internalTLS, _this$_dummyServer;
        this.socksProxy._socksProxy.sendSocketEnd({
          uid: this.uid
        });
        (_this$internalTLS = this.internalTLS) === null || _this$internalTLS === void 0 || _this$internalTLS.destroy();
        (_this$_dummyServer = this._dummyServer) === null || _this$_dummyServer === void 0 || _this$_dummyServer.close();
      };
    }
    async connect() {
      if (this.socksProxy.proxyAgentFromOptions) this.target = await this.socksProxy.proxyAgentFromOptions.callback(new _events2.EventEmitter(), {
        host: rewriteToLocalhostIfNeeded(this.host),
        port: this.port,
        secureEndpoint: false
      });
      else this.target = await (0, _happyEyeballs2.createSocket)(rewriteToLocalhostIfNeeded(this.host), this.port);
      this.target.once("close", this._targetCloseEventListener);
      this.target.once("error", (error) => this.socksProxy._socksProxy.sendSocketError({
        uid: this.uid,
        error: error.message
      }));
      if (this._closed) {
        this.target.destroy();
        return;
      }
      this.socksProxy._socksProxy.socketConnected({
        uid: this.uid,
        host: this.target.localAddress,
        port: this.target.localPort
      });
    }
    onClose() {
      var _this$internalTLS2, _this$_dummyServer2;
      this.target.destroy();
      (_this$internalTLS2 = this.internalTLS) === null || _this$internalTLS2 === void 0 || _this$internalTLS2.destroy();
      (_this$_dummyServer2 = this._dummyServer) === null || _this$_dummyServer2 === void 0 || _this$_dummyServer2.close();
      this._closed = true;
    }
    onData(data) {
      if (!this.firstPackageReceived) {
        this.firstPackageReceived = true;
        if (data[0] === 22) this._attachTLSListeners();
        else this.target.on("data", (data2) => this.socksProxy._socksProxy.sendSocketData({
          uid: this.uid,
          data: data2
        }));
      }
      if (this.internal) this.internal.push(data);
      else this.target.write(data);
    }
    _attachTLSListeners() {
      this.internal = new _stream2.default.Duplex({
        read: () => {
        },
        write: (data, encoding, callback) => {
          this.socksProxy._socksProxy.sendSocketData({
            uid: this.uid,
            data
          });
          callback();
        }
      });
      this.socksProxy.alpnCache.get(rewriteToLocalhostIfNeeded(this.host), this.port, (alpnProtocolChosenByServer) => {
        _debugLogger2.debugLogger.log("client-certificates", `Proxy->Target ${this.host}:${this.port} chooses ALPN ${alpnProtocolChosenByServer}`);
        if (this._closed) return;
        this._dummyServer = _tls.default.createServer({
          ...dummyServerTlsOptions,
          ALPNProtocols: alpnProtocolChosenByServer === "h2" ? ["h2", "http/1.1"] : ["http/1.1"]
        });
        this._dummyServer.emit("connection", this.internal);
        this._dummyServer.once("secureConnection", (internalTLS) => {
          this.internalTLS = internalTLS;
          _debugLogger2.debugLogger.log("client-certificates", `Browser->Proxy ${this.host}:${this.port} chooses ALPN ${internalTLS.alpnProtocol}`);
          let targetTLS = void 0;
          const handleError = (error) => {
            _debugLogger2.debugLogger.log("client-certificates", `error when connecting to target: ${error.message.replaceAll("\n", " ")}`);
            const responseBody = (0, _utils2.escapeHTML)("Playwright client-certificate error: " + error.message).replaceAll("\n", " <br>");
            if ((internalTLS === null || internalTLS === void 0 ? void 0 : internalTLS.alpnProtocol) === "h2") {
              if ("performServerHandshake" in _http.default) {
                this.target.removeListener("close", this._targetCloseEventListener);
                const session2 = _http.default.performServerHandshake(internalTLS);
                session2.on("error", () => {
                  this.target.destroy();
                  this._targetCloseEventListener();
                });
                session2.once("stream", (stream2) => {
                  stream2.respond({
                    "content-type": "text/html",
                    [_http.default.constants.HTTP2_HEADER_STATUS]: 503
                  });
                  const cleanup = () => {
                    session2.close();
                    this.target.destroy();
                    this._targetCloseEventListener();
                  };
                  stream2.end(responseBody, cleanup);
                  stream2.once("error", cleanup);
                });
              } else {
                this.target.destroy();
              }
            } else {
              internalTLS.end(["HTTP/1.1 503 Internal Server Error", "Content-Type: text/html; charset=utf-8", "Content-Length: " + Buffer.byteLength(responseBody), "", responseBody].join("\r\n"));
              this.target.destroy();
            }
          };
          if (this._closed) {
            internalTLS.destroy();
            return;
          }
          targetTLS = _tls.default.connect({
            socket: this.target,
            host: this.host,
            port: this.port,
            rejectUnauthorized: !this.socksProxy.ignoreHTTPSErrors,
            ALPNProtocols: [internalTLS.alpnProtocol || "http/1.1"],
            servername: !_net2.default.isIP(this.host) ? this.host : void 0,
            secureContext: this.socksProxy.secureContextMap.get(new URL(`https://${this.host}:${this.port}`).origin)
          });
          targetTLS.once("secureConnect", () => {
            internalTLS.pipe(targetTLS);
            targetTLS.pipe(internalTLS);
          });
          internalTLS.once("error", () => this.target.destroy());
          targetTLS.once("error", handleError);
        });
      });
    }
  }
  class ClientCertificatesProxy {
    constructor(contextOptions) {
      this._socksProxy = void 0;
      this._connections = /* @__PURE__ */ new Map();
      this.ignoreHTTPSErrors = void 0;
      this.secureContextMap = /* @__PURE__ */ new Map();
      this.alpnCache = void 0;
      this.proxyAgentFromOptions = void 0;
      (0, _browserContext2.verifyClientCertificates)(contextOptions.clientCertificates);
      this.alpnCache = new ALPNCache();
      this.ignoreHTTPSErrors = contextOptions.ignoreHTTPSErrors;
      this.proxyAgentFromOptions = contextOptions.proxy ? (0, _fetch2.createProxyAgent)(contextOptions.proxy) : void 0;
      this._initSecureContexts(contextOptions.clientCertificates);
      this._socksProxy = new _socksProxy2.SocksProxy();
      this._socksProxy.setPattern("*");
      this._socksProxy.addListener(_socksProxy2.SocksProxy.Events.SocksRequested, async (payload) => {
        try {
          const connection2 = new SocksProxyConnection(this, payload.uid, payload.host, payload.port);
          await connection2.connect();
          this._connections.set(payload.uid, connection2);
        } catch (error) {
          this._socksProxy.socketFailed({
            uid: payload.uid,
            errorCode: error.code
          });
        }
      });
      this._socksProxy.addListener(_socksProxy2.SocksProxy.Events.SocksData, async (payload) => {
        var _this$_connections$ge;
        (_this$_connections$ge = this._connections.get(payload.uid)) === null || _this$_connections$ge === void 0 || _this$_connections$ge.onData(payload.data);
      });
      this._socksProxy.addListener(_socksProxy2.SocksProxy.Events.SocksClosed, (payload) => {
        var _this$_connections$ge2;
        (_this$_connections$ge2 = this._connections.get(payload.uid)) === null || _this$_connections$ge2 === void 0 || _this$_connections$ge2.onClose();
        this._connections.delete(payload.uid);
      });
      loadDummyServerCertsIfNeeded();
    }
    _initSecureContexts(clientCertificates) {
      const origin2certs = /* @__PURE__ */ new Map();
      for (const cert of clientCertificates || []) {
        const origin = normalizeOrigin(cert.origin);
        const certs = origin2certs.get(origin) || [];
        certs.push(cert);
        origin2certs.set(origin, certs);
      }
      for (const [origin, certs] of origin2certs) {
        try {
          this.secureContextMap.set(origin, _tls.default.createSecureContext(convertClientCertificatesToTLSOptions(certs)));
        } catch (error) {
          error = rewriteOpenSSLErrorIfNeeded(error);
          throw (0, _utils2.rewriteErrorMessage)(error, `Failed to load client certificate: ${error.message}`);
        }
      }
    }
    async listen() {
      const port = await this._socksProxy.listen(0, "127.0.0.1");
      return {
        server: `socks5://127.0.0.1:${port}`
      };
    }
    async close() {
      await this._socksProxy.close();
    }
  }
  socksClientCertificatesInterceptor.ClientCertificatesProxy = ClientCertificatesProxy;
  function normalizeOrigin(origin) {
    try {
      return new URL(origin).origin;
    } catch (error) {
      return origin;
    }
  }
  function convertClientCertificatesToTLSOptions(clientCertificates) {
    if (!clientCertificates || !clientCertificates.length) return;
    const tlsOptions = {
      pfx: [],
      key: [],
      cert: []
    };
    for (const cert of clientCertificates) {
      if (cert.cert) tlsOptions.cert.push(cert.cert);
      if (cert.key) tlsOptions.key.push({
        pem: cert.key,
        passphrase: cert.passphrase
      });
      if (cert.pfx) tlsOptions.pfx.push({
        buf: cert.pfx,
        passphrase: cert.passphrase
      });
    }
    return tlsOptions;
  }
  function getMatchingTLSOptionsForOrigin(clientCertificates, origin) {
    const matchingCerts = clientCertificates === null || clientCertificates === void 0 ? void 0 : clientCertificates.filter((c) => normalizeOrigin(c.origin) === origin);
    return convertClientCertificatesToTLSOptions(matchingCerts);
  }
  function rewriteToLocalhostIfNeeded(host) {
    return host === "local.playwright" ? "localhost" : host;
  }
  function rewriteOpenSSLErrorIfNeeded(error) {
    if (error.message !== "unsupported" && error.code !== "ERR_CRYPTO_UNSUPPORTED_OPERATION") return error;
    return (0, _utils2.rewriteErrorMessage)(error, ["Unsupported TLS certificate.", "Most likely, the security algorithm of the given certificate was deprecated by OpenSSL.", "For more details, see https://github.com/openssl/openssl/blob/master/README-PROVIDERS.md#the-legacy-provider", "You could probably modernize the certificate by following the steps at https://github.com/nodejs/node/issues/40672#issuecomment-1243648223"].join("\n"));
  }
  return socksClientCertificatesInterceptor;
}
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1) return browser$1;
  hasRequiredBrowser$1 = 1;
  Object.defineProperty(browser$1, "__esModule", {
    value: true
  });
  browser$1.Browser = void 0;
  var _browserContext2 = requireBrowserContext$1();
  var _page = requirePage$1();
  var _download = requireDownload();
  var _instrumentation2 = instrumentation;
  var _artifact2 = artifact$1;
  var _socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
  class Browser extends _instrumentation2.SdkObject {
    constructor(parent, options) {
      super(parent, "browser");
      this.options = void 0;
      this._downloads = /* @__PURE__ */ new Map();
      this._defaultContext = null;
      this._startedClosing = false;
      this._idToVideo = /* @__PURE__ */ new Map();
      this._contextForReuse = void 0;
      this._closeReason = void 0;
      this._isCollocatedWithServer = true;
      this.attribution.browser = this;
      this.options = options;
      this.instrumentation.onBrowserOpen(this);
    }
    async newContext(metadata, options) {
      var _options$clientCertif;
      (0, _browserContext2.validateBrowserContextOptions)(options, this.options);
      let clientCertificatesProxy;
      if ((_options$clientCertif = options.clientCertificates) !== null && _options$clientCertif !== void 0 && _options$clientCertif.length) {
        clientCertificatesProxy = new _socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
        options = {
          ...options
        };
        options.proxyOverride = await clientCertificatesProxy.listen();
        options.internalIgnoreHTTPSErrors = true;
      }
      let context;
      try {
        context = await this.doCreateNewContext(options);
      } catch (error) {
        var _clientCertificatesPr;
        await ((_clientCertificatesPr = clientCertificatesProxy) === null || _clientCertificatesPr === void 0 ? void 0 : _clientCertificatesPr.close());
        throw error;
      }
      context._clientCertificatesProxy = clientCertificatesProxy;
      if (options.storageState) await context.setStorageState(metadata, options.storageState);
      return context;
    }
    async newContextForReuse(params, metadata) {
      const hash = _browserContext2.BrowserContext.reusableContextHash(params);
      if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {
        if (this._contextForReuse) await this._contextForReuse.context.close({
          reason: "Context reused"
        });
        this._contextForReuse = {
          context: await this.newContext(metadata, params),
          hash
        };
        return {
          context: this._contextForReuse.context,
          needsReset: false
        };
      }
      await this._contextForReuse.context.stopPendingOperations("Context recreated");
      return {
        context: this._contextForReuse.context,
        needsReset: true
      };
    }
    async stopPendingOperations(reason) {
      var _this$_contextForReus;
      await ((_this$_contextForReus = this._contextForReuse) === null || _this$_contextForReus === void 0 || (_this$_contextForReus = _this$_contextForReus.context) === null || _this$_contextForReus === void 0 ? void 0 : _this$_contextForReus.stopPendingOperations(reason));
    }
    _downloadCreated(page2, uuid, url, suggestedFilename) {
      const download2 = new _download.Download(page2, this.options.downloadsPath || "", uuid, url, suggestedFilename);
      this._downloads.set(uuid, download2);
    }
    _downloadFilenameSuggested(uuid, suggestedFilename) {
      const download2 = this._downloads.get(uuid);
      if (!download2) return;
      download2._filenameSuggested(suggestedFilename);
    }
    _downloadFinished(uuid, error) {
      const download2 = this._downloads.get(uuid);
      if (!download2) return;
      download2.artifact.reportFinished(error ? new Error(error) : void 0);
      this._downloads.delete(uuid);
    }
    _videoStarted(context, videoId, path2, pageOrError) {
      const artifact2 = new _artifact2.Artifact(context, path2);
      this._idToVideo.set(videoId, {
        context,
        artifact: artifact2
      });
      pageOrError.then((page2) => {
        if (page2 instanceof _page.Page) {
          page2._video = artifact2;
          page2.emitOnContext(_browserContext2.BrowserContext.Events.VideoStarted, artifact2);
          page2.emit(_page.Page.Events.Video, artifact2);
        }
      });
    }
    _takeVideo(videoId) {
      const video2 = this._idToVideo.get(videoId);
      this._idToVideo.delete(videoId);
      return video2 === null || video2 === void 0 ? void 0 : video2.artifact;
    }
    _didClose() {
      for (const context of this.contexts()) context._browserClosed();
      if (this._defaultContext) this._defaultContext._browserClosed();
      this.emit(Browser.Events.Disconnected);
      this.instrumentation.onBrowserClose(this);
    }
    async close(options) {
      if (!this._startedClosing) {
        if (options.reason) this._closeReason = options.reason;
        this._startedClosing = true;
        await this.options.browserProcess.close();
      }
      if (this.isConnected()) await new Promise((x) => this.once(Browser.Events.Disconnected, x));
    }
    async killForTests() {
      await this.options.browserProcess.kill();
    }
  }
  browser$1.Browser = Browser;
  Browser.Events = {
    Disconnected: "disconnected"
  };
  return browser$1;
}
var crConnection = {};
Object.defineProperty(crConnection, "__esModule", {
  value: true
});
crConnection.kBrowserCloseMessageId = crConnection.ConnectionEvents = crConnection.CRSession = crConnection.CRConnection = crConnection.CDPSession = void 0;
var _utils$x = requireUtils();
var _events$9 = require$$0$1;
var _debugLogger$8 = debugLogger;
var _helper$4 = helper;
var _protocolError$6 = protocolError;
const ConnectionEvents$1 = crConnection.ConnectionEvents = {
  Disconnected: Symbol("ConnectionEvents.Disconnected")
};
const kBrowserCloseMessageId$3 = crConnection.kBrowserCloseMessageId = -9999;
class CRConnection extends _events$9.EventEmitter {
  constructor(transport2, protocolLogger, browserLogsCollector) {
    super();
    this._lastId = 0;
    this._transport = void 0;
    this._sessions = /* @__PURE__ */ new Map();
    this._protocolLogger = void 0;
    this._browserLogsCollector = void 0;
    this._browserDisconnectedLogs = void 0;
    this.rootSession = void 0;
    this._closed = false;
    this.setMaxListeners(0);
    this._transport = transport2;
    this._protocolLogger = protocolLogger;
    this._browserLogsCollector = browserLogsCollector;
    this.rootSession = new CRSession(this, null, "");
    this._sessions.set("", this.rootSession);
    this._transport.onmessage = this._onMessage.bind(this);
    this._transport.onclose = this._onClose.bind(this);
  }
  _rawSend(sessionId, method, params) {
    const id = ++this._lastId;
    const message = {
      id,
      method,
      params
    };
    if (sessionId) message.sessionId = sessionId;
    this._protocolLogger("send", message);
    this._transport.send(message);
    return id;
  }
  async _onMessage(message) {
    this._protocolLogger("receive", message);
    if (message.id === kBrowserCloseMessageId$3) return;
    const session2 = this._sessions.get(message.sessionId || "");
    if (session2) session2._onMessage(message);
  }
  _onClose(reason) {
    this._closed = true;
    this._transport.onmessage = void 0;
    this._transport.onclose = void 0;
    this._browserDisconnectedLogs = _helper$4.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
    this.rootSession.dispose();
    Promise.resolve().then(() => this.emit(ConnectionEvents$1.Disconnected));
  }
  close() {
    if (!this._closed) this._transport.close();
  }
  async createBrowserSession() {
    const {
      sessionId
    } = await this.rootSession.send("Target.attachToBrowserTarget");
    return new CDPSession$1(this.rootSession, sessionId);
  }
}
crConnection.CRConnection = CRConnection;
class CRSession extends _events$9.EventEmitter {
  constructor(connection2, parentSession, sessionId, eventListener) {
    super();
    this._connection = void 0;
    this._eventListener = void 0;
    this._callbacks = /* @__PURE__ */ new Map();
    this._sessionId = void 0;
    this._parentSession = void 0;
    this._crashed = false;
    this._closed = false;
    this.on = void 0;
    this.addListener = void 0;
    this.off = void 0;
    this.removeListener = void 0;
    this.once = void 0;
    this.setMaxListeners(0);
    this._connection = connection2;
    this._parentSession = parentSession;
    this._sessionId = sessionId;
    this._eventListener = eventListener;
    this.on = super.on;
    this.addListener = super.addListener;
    this.off = super.removeListener;
    this.removeListener = super.removeListener;
    this.once = super.once;
  }
  _markAsCrashed() {
    this._crashed = true;
  }
  createChildSession(sessionId, eventListener) {
    const session2 = new CRSession(this._connection, this, sessionId, eventListener);
    this._connection._sessions.set(sessionId, session2);
    return session2;
  }
  async send(method, params) {
    if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs) throw new _protocolError$6.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this._connection._browserDisconnectedLogs);
    const id = this._connection._rawSend(this._sessionId, method, params);
    return new Promise((resolve, reject) => {
      this._callbacks.set(id, {
        resolve,
        reject,
        error: new _protocolError$6.ProtocolError("error", method)
      });
    });
  }
  _sendMayFail(method, params) {
    return this.send(method, params).catch((error) => _debugLogger$8.debugLogger.log("error", error));
  }
  _onMessage(object) {
    var _object$error;
    if (object.id && this._callbacks.has(object.id)) {
      const callback = this._callbacks.get(object.id);
      this._callbacks.delete(object.id);
      if (object.error) {
        callback.error.setMessage(object.error.message);
        callback.reject(callback.error);
      } else {
        callback.resolve(object.result);
      }
    } else if (object.id && ((_object$error = object.error) === null || _object$error === void 0 ? void 0 : _object$error.code) === -32001) ;
    else {
      var _object$error2;
      (0, _utils$x.assert)(!object.id, (object === null || object === void 0 || (_object$error2 = object.error) === null || _object$error2 === void 0 ? void 0 : _object$error2.message) || void 0);
      Promise.resolve().then(() => {
        if (this._eventListener) this._eventListener(object.method, object.params);
        this.emit(object.method, object.params);
      });
    }
  }
  async detach() {
    if (this._closed) throw new Error(`Session already detached. Most likely the page has been closed.`);
    if (!this._parentSession) throw new Error("Root session cannot be closed");
    await this._sendMayFail("Runtime.runIfWaitingForDebugger");
    await this._parentSession.send("Target.detachFromTarget", {
      sessionId: this._sessionId
    });
    this.dispose();
  }
  dispose() {
    this._closed = true;
    this._connection._sessions.delete(this._sessionId);
    for (const callback of this._callbacks.values()) {
      callback.error.setMessage(`Internal server error, session closed.`);
      callback.error.type = this._crashed ? "crashed" : "closed";
      callback.error.logs = this._connection._browserDisconnectedLogs;
      callback.reject(callback.error);
    }
    this._callbacks.clear();
  }
}
crConnection.CRSession = CRSession;
let CDPSession$1 = class CDPSession extends _events$9.EventEmitter {
  constructor(parentSession, sessionId) {
    super();
    this.guid = void 0;
    this._session = void 0;
    this._listeners = [];
    this.guid = `cdp-session@${sessionId}`;
    this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, {
      method,
      params
    }));
    this._listeners = [_utils$x.eventsHelper.addEventListener(parentSession, "Target.detachedFromTarget", (event) => {
      if (event.sessionId === sessionId) this._onClose();
    })];
  }
  async send(method, params) {
    return await this._session.send(method, params);
  }
  async detach() {
    return await this._session.detach();
  }
  async attachToTarget(targetId) {
    const {
      sessionId
    } = await this.send("Target.attachToTarget", {
      targetId,
      flatten: true
    });
    return new CDPSession(this._session, sessionId);
  }
  _onClose() {
    _utils$x.eventsHelper.removeEventListeners(this._listeners);
    this._session.dispose();
    this.emit(CDPSession.Events.Closed);
  }
};
crConnection.CDPSession = CDPSession$1;
CDPSession$1.Events = {
  Event: "event",
  Closed: "close"
};
var crPage = {};
var dialog$1 = {};
Object.defineProperty(dialog$1, "__esModule", {
  value: true
});
dialog$1.Dialog = void 0;
var _utils$w = requireUtils();
var _instrumentation$4 = instrumentation;
class Dialog extends _instrumentation$4.SdkObject {
  constructor(page2, type, message, onHandle, defaultValue) {
    super(page2, "dialog");
    this._page = void 0;
    this._type = void 0;
    this._message = void 0;
    this._onHandle = void 0;
    this._handled = false;
    this._defaultValue = void 0;
    this._page = page2;
    this._type = type;
    this._message = message;
    this._onHandle = onHandle;
    this._defaultValue = defaultValue || "";
    this._page._frameManager.dialogDidOpen(this);
    this.instrumentation.onDialog(this);
  }
  page() {
    return this._page;
  }
  type() {
    return this._type;
  }
  message() {
    return this._message;
  }
  defaultValue() {
    return this._defaultValue;
  }
  async accept(promptText) {
    (0, _utils$w.assert)(!this._handled, "Cannot accept dialog which is already handled!");
    this._handled = true;
    this._page._frameManager.dialogWillClose(this);
    await this._onHandle(true, promptText);
  }
  async dismiss() {
    (0, _utils$w.assert)(!this._handled, "Cannot dismiss dialog which is already handled!");
    this._handled = true;
    this._page._frameManager.dialogWillClose(this);
    await this._onHandle(false);
  }
  async close() {
    if (this._type === "beforeunload") await this.accept();
    else await this.dismiss();
  }
}
dialog$1.Dialog = Dialog;
var crAccessibility = {};
Object.defineProperty(crAccessibility, "__esModule", {
  value: true
});
crAccessibility.getAccessibilityTree = getAccessibilityTree$2;
async function getAccessibilityTree$2(client, needle) {
  const {
    nodes
  } = await client.send("Accessibility.getFullAXTree");
  const tree = CRAXNode.createTree(client, nodes);
  return {
    tree,
    needle: needle ? await tree._findElement(needle) : null
  };
}
class CRAXNode {
  constructor(client, payload) {
    this._payload = void 0;
    this._children = [];
    this._richlyEditable = false;
    this._editable = false;
    this._focusable = false;
    this._expanded = false;
    this._hidden = false;
    this._name = void 0;
    this._role = void 0;
    this._cachedHasFocusableChild = void 0;
    this._client = void 0;
    this._client = client;
    this._payload = payload;
    this._name = this._payload.name ? this._payload.name.value : "";
    this._role = this._payload.role ? this._payload.role.value : "Unknown";
    for (const property of this._payload.properties || []) {
      if (property.name === "editable") {
        this._richlyEditable = property.value.value === "richtext";
        this._editable = true;
      }
      if (property.name === "focusable") this._focusable = property.value.value;
      if (property.name === "expanded") this._expanded = property.value.value;
      if (property.name === "hidden") this._hidden = property.value.value;
    }
  }
  _isPlainTextField() {
    if (this._richlyEditable) return false;
    if (this._editable) return true;
    return this._role === "textbox" || this._role === "ComboBox" || this._role === "searchbox";
  }
  _isTextOnlyObject() {
    const role = this._role;
    return role === "LineBreak" || role === "text" || role === "InlineTextBox" || role === "StaticText";
  }
  _hasFocusableChild() {
    if (this._cachedHasFocusableChild === void 0) {
      this._cachedHasFocusableChild = false;
      for (const child of this._children) {
        if (child._focusable || child._hasFocusableChild()) {
          this._cachedHasFocusableChild = true;
          break;
        }
      }
    }
    return this._cachedHasFocusableChild;
  }
  children() {
    return this._children;
  }
  async _findElement(element) {
    const objectId = element._objectId;
    const {
      node: {
        backendNodeId
      }
    } = await this._client.send("DOM.describeNode", {
      objectId
    });
    const needle = this.find((node) => node._payload.backendDOMNodeId === backendNodeId);
    return needle || null;
  }
  find(predicate) {
    if (predicate(this)) return this;
    for (const child of this._children) {
      const result2 = child.find(predicate);
      if (result2) return result2;
    }
    return null;
  }
  isLeafNode() {
    if (!this._children.length) return true;
    if (this._isPlainTextField() || this._isTextOnlyObject()) return true;
    switch (this._role) {
      case "doc-cover":
      case "graphics-symbol":
      case "img":
      case "Meter":
      case "scrollbar":
      case "slider":
      case "separator":
      case "progressbar":
        return true;
    }
    if (this._hasFocusableChild()) return false;
    if (this._focusable && this._role !== "WebArea" && this._role !== "RootWebArea" && this._name) return true;
    if (this._role === "heading" && this._name) return true;
    return false;
  }
  isControl() {
    switch (this._role) {
      case "button":
      case "checkbox":
      case "ColorWell":
      case "combobox":
      case "DisclosureTriangle":
      case "listbox":
      case "menu":
      case "menubar":
      case "menuitem":
      case "menuitemcheckbox":
      case "menuitemradio":
      case "radio":
      case "scrollbar":
      case "searchbox":
      case "slider":
      case "spinbutton":
      case "switch":
      case "tab":
      case "textbox":
      case "tree":
        return true;
      default:
        return false;
    }
  }
  isInteresting(insideControl) {
    const role = this._role;
    if (role === "Ignored" || this._hidden) return false;
    if (this._focusable || this._richlyEditable) return true;
    if (this.isControl()) return true;
    if (insideControl) return false;
    return this.isLeafNode() && !!this._name;
  }
  normalizedRole() {
    switch (this._role) {
      case "RootWebArea":
        return "WebArea";
      case "StaticText":
        return "text";
      default:
        return this._role;
    }
  }
  serialize() {
    const properties = /* @__PURE__ */ new Map();
    for (const property of this._payload.properties || []) properties.set(property.name.toLowerCase(), property.value.value);
    if (this._payload.description) properties.set("description", this._payload.description.value);
    const node = {
      role: this.normalizedRole(),
      name: this._payload.name ? this._payload.name.value || "" : ""
    };
    const userStringProperties = ["description", "keyshortcuts", "roledescription", "valuetext"];
    for (const userStringProperty of userStringProperties) {
      if (!properties.has(userStringProperty)) continue;
      node[userStringProperty] = properties.get(userStringProperty);
    }
    const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
    for (const booleanProperty of booleanProperties) {
      if (booleanProperty === "focused" && (this._role === "WebArea" || this._role === "RootWebArea")) continue;
      const value = properties.get(booleanProperty);
      if (!value) continue;
      node[booleanProperty] = value;
    }
    const numericalProperties = ["level", "valuemax", "valuemin"];
    for (const numericalProperty of numericalProperties) {
      if (!properties.has(numericalProperty)) continue;
      node[numericalProperty] = properties.get(numericalProperty);
    }
    const tokenProperties = ["autocomplete", "haspopup", "invalid", "orientation"];
    for (const tokenProperty of tokenProperties) {
      const value = properties.get(tokenProperty);
      if (!value || value === "false") continue;
      node[tokenProperty] = value;
    }
    const axNode = node;
    if (this._payload.value) {
      if (typeof this._payload.value.value === "string") axNode.valueString = this._payload.value.value;
      if (typeof this._payload.value.value === "number") axNode.valueNumber = this._payload.value.value;
    }
    if (properties.has("checked")) axNode.checked = properties.get("checked") === "true" ? "checked" : properties.get("checked") === "false" ? "unchecked" : "mixed";
    if (properties.has("pressed")) axNode.pressed = properties.get("pressed") === "true" ? "pressed" : properties.get("pressed") === "false" ? "released" : "mixed";
    return axNode;
  }
  static createTree(client, payloads) {
    const nodeById = /* @__PURE__ */ new Map();
    for (const payload of payloads) nodeById.set(payload.nodeId, new CRAXNode(client, payload));
    for (const node of nodeById.values()) {
      for (const childId of node._payload.childIds || []) node._children.push(nodeById.get(childId));
    }
    return nodeById.values().next().value;
  }
}
var crCoverage = {};
Object.defineProperty(crCoverage, "__esModule", {
  value: true
});
crCoverage.CRCoverage = void 0;
var _eventsHelper$2 = eventsHelper;
var _utils$v = requireUtils();
class CRCoverage {
  constructor(client) {
    this._jsCoverage = void 0;
    this._cssCoverage = void 0;
    this._jsCoverage = new JSCoverage(client);
    this._cssCoverage = new CSSCoverage(client);
  }
  async startJSCoverage(options) {
    return await this._jsCoverage.start(options);
  }
  async stopJSCoverage() {
    return await this._jsCoverage.stop();
  }
  async startCSSCoverage(options) {
    return await this._cssCoverage.start(options);
  }
  async stopCSSCoverage() {
    return await this._cssCoverage.stop();
  }
}
crCoverage.CRCoverage = CRCoverage;
class JSCoverage {
  constructor(client) {
    this._client = void 0;
    this._enabled = void 0;
    this._scriptIds = void 0;
    this._scriptSources = void 0;
    this._eventListeners = void 0;
    this._resetOnNavigation = void 0;
    this._reportAnonymousScripts = false;
    this._client = client;
    this._enabled = false;
    this._scriptIds = /* @__PURE__ */ new Set();
    this._scriptSources = /* @__PURE__ */ new Map();
    this._eventListeners = [];
    this._resetOnNavigation = false;
  }
  async start(options) {
    (0, _utils$v.assert)(!this._enabled, "JSCoverage is already enabled");
    const {
      resetOnNavigation = true,
      reportAnonymousScripts = false
    } = options;
    this._resetOnNavigation = resetOnNavigation;
    this._reportAnonymousScripts = reportAnonymousScripts;
    this._enabled = true;
    this._scriptIds.clear();
    this._scriptSources.clear();
    this._eventListeners = [_eventsHelper$2.eventsHelper.addEventListener(this._client, "Debugger.scriptParsed", this._onScriptParsed.bind(this)), _eventsHelper$2.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper$2.eventsHelper.addEventListener(this._client, "Debugger.paused", this._onDebuggerPaused.bind(this))];
    await Promise.all([this._client.send("Profiler.enable"), this._client.send("Profiler.startPreciseCoverage", {
      callCount: true,
      detailed: true
    }), this._client.send("Debugger.enable"), this._client.send("Debugger.setSkipAllPauses", {
      skip: true
    })]);
  }
  _onDebuggerPaused() {
    this._client.send("Debugger.resume");
  }
  _onExecutionContextsCleared() {
    if (!this._resetOnNavigation) return;
    this._scriptIds.clear();
    this._scriptSources.clear();
  }
  async _onScriptParsed(event) {
    this._scriptIds.add(event.scriptId);
    if (!event.url && !this._reportAnonymousScripts) return;
    const response = await this._client._sendMayFail("Debugger.getScriptSource", {
      scriptId: event.scriptId
    });
    if (response) this._scriptSources.set(event.scriptId, response.scriptSource);
  }
  async stop() {
    (0, _utils$v.assert)(this._enabled, "JSCoverage is not enabled");
    this._enabled = false;
    const [profileResponse] = await Promise.all([this._client.send("Profiler.takePreciseCoverage"), this._client.send("Profiler.stopPreciseCoverage"), this._client.send("Profiler.disable"), this._client.send("Debugger.disable")]);
    _eventsHelper$2.eventsHelper.removeEventListeners(this._eventListeners);
    const coverage2 = {
      entries: []
    };
    for (const entry of profileResponse.result) {
      if (!this._scriptIds.has(entry.scriptId)) continue;
      if (!entry.url && !this._reportAnonymousScripts) continue;
      const source2 = this._scriptSources.get(entry.scriptId);
      if (source2) coverage2.entries.push({
        ...entry,
        source: source2
      });
      else coverage2.entries.push(entry);
    }
    return coverage2;
  }
}
class CSSCoverage {
  constructor(client) {
    this._client = void 0;
    this._enabled = void 0;
    this._stylesheetURLs = void 0;
    this._stylesheetSources = void 0;
    this._eventListeners = void 0;
    this._resetOnNavigation = void 0;
    this._client = client;
    this._enabled = false;
    this._stylesheetURLs = /* @__PURE__ */ new Map();
    this._stylesheetSources = /* @__PURE__ */ new Map();
    this._eventListeners = [];
    this._resetOnNavigation = false;
  }
  async start(options) {
    (0, _utils$v.assert)(!this._enabled, "CSSCoverage is already enabled");
    const {
      resetOnNavigation = true
    } = options;
    this._resetOnNavigation = resetOnNavigation;
    this._enabled = true;
    this._stylesheetURLs.clear();
    this._stylesheetSources.clear();
    this._eventListeners = [_eventsHelper$2.eventsHelper.addEventListener(this._client, "CSS.styleSheetAdded", this._onStyleSheet.bind(this)), _eventsHelper$2.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this))];
    await Promise.all([this._client.send("DOM.enable"), this._client.send("CSS.enable"), this._client.send("CSS.startRuleUsageTracking")]);
  }
  _onExecutionContextsCleared() {
    if (!this._resetOnNavigation) return;
    this._stylesheetURLs.clear();
    this._stylesheetSources.clear();
  }
  async _onStyleSheet(event) {
    const header = event.header;
    if (!header.sourceURL) return;
    const response = await this._client._sendMayFail("CSS.getStyleSheetText", {
      styleSheetId: header.styleSheetId
    });
    if (response) {
      this._stylesheetURLs.set(header.styleSheetId, header.sourceURL);
      this._stylesheetSources.set(header.styleSheetId, response.text);
    }
  }
  async stop() {
    (0, _utils$v.assert)(this._enabled, "CSSCoverage is not enabled");
    this._enabled = false;
    const ruleTrackingResponse = await this._client.send("CSS.stopRuleUsageTracking");
    await Promise.all([this._client.send("CSS.disable"), this._client.send("DOM.disable")]);
    _eventsHelper$2.eventsHelper.removeEventListeners(this._eventListeners);
    const styleSheetIdToCoverage = /* @__PURE__ */ new Map();
    for (const entry of ruleTrackingResponse.ruleUsage) {
      let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);
      if (!ranges) {
        ranges = [];
        styleSheetIdToCoverage.set(entry.styleSheetId, ranges);
      }
      ranges.push({
        startOffset: entry.startOffset,
        endOffset: entry.endOffset,
        count: entry.used ? 1 : 0
      });
    }
    const coverage2 = {
      entries: []
    };
    for (const styleSheetId of this._stylesheetURLs.keys()) {
      const url = this._stylesheetURLs.get(styleSheetId);
      const text = this._stylesheetSources.get(styleSheetId);
      const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);
      coverage2.entries.push({
        url,
        ranges,
        text
      });
    }
    return coverage2;
  }
}
function convertToDisjointRanges(nestedRanges) {
  const points = [];
  for (const range of nestedRanges) {
    points.push({
      offset: range.startOffset,
      type: 0,
      range
    });
    points.push({
      offset: range.endOffset,
      type: 1,
      range
    });
  }
  points.sort((a, b) => {
    if (a.offset !== b.offset) return a.offset - b.offset;
    if (a.type !== b.type) return b.type - a.type;
    const aLength = a.range.endOffset - a.range.startOffset;
    const bLength = b.range.endOffset - b.range.startOffset;
    if (a.type === 0) return bLength - aLength;
    return aLength - bLength;
  });
  const hitCountStack = [];
  const results = [];
  let lastOffset = 0;
  for (const point of points) {
    if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {
      const lastResult = results.length ? results[results.length - 1] : null;
      if (lastResult && lastResult.end === lastOffset) lastResult.end = point.offset;
      else results.push({
        start: lastOffset,
        end: point.offset
      });
    }
    lastOffset = point.offset;
    if (point.type === 0) hitCountStack.push(point.range.count);
    else hitCountStack.pop();
  }
  return results.filter((range) => range.end - range.start > 1);
}
var crDragDrop = {};
var crProtocolHelper = {};
Object.defineProperty(crProtocolHelper, "__esModule", {
  value: true
});
crProtocolHelper.exceptionToError = exceptionToError;
crProtocolHelper.getExceptionMessage = getExceptionMessage;
crProtocolHelper.readProtocolStream = readProtocolStream;
crProtocolHelper.releaseObject = releaseObject;
crProtocolHelper.saveProtocolStream = saveProtocolStream;
crProtocolHelper.toButtonsMask = toButtonsMask$2;
crProtocolHelper.toConsoleMessageLocation = toConsoleMessageLocation;
crProtocolHelper.toModifiersMask = toModifiersMask$2;
var _fs$6 = _interopRequireDefault$8(require$$0$2);
var _fileUtils$2 = requireFileUtils();
var _stackTrace$5 = requireStackTrace();
function _interopRequireDefault$8(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function getExceptionMessage(exceptionDetails) {
  if (exceptionDetails.exception) return exceptionDetails.exception.description || String(exceptionDetails.exception.value);
  let message = exceptionDetails.text;
  if (exceptionDetails.stackTrace) {
    for (const callframe of exceptionDetails.stackTrace.callFrames) {
      const location2 = callframe.url + ":" + callframe.lineNumber + ":" + callframe.columnNumber;
      const functionName = callframe.functionName || "<anonymous>";
      message += `
    at ${functionName} (${location2})`;
    }
  }
  return message;
}
async function releaseObject(client, objectId) {
  await client.send("Runtime.releaseObject", {
    objectId
  }).catch((error) => {
  });
}
async function saveProtocolStream(client, handle, path2) {
  let eof = false;
  await (0, _fileUtils$2.mkdirIfNeeded)(path2);
  const fd = await _fs$6.default.promises.open(path2, "w");
  while (!eof) {
    const response = await client.send("IO.read", {
      handle
    });
    eof = response.eof;
    const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : void 0);
    await fd.write(buf);
  }
  await fd.close();
  await client.send("IO.close", {
    handle
  });
}
async function readProtocolStream(client, handle) {
  let eof = false;
  const chunks = [];
  while (!eof) {
    const response = await client.send("IO.read", {
      handle
    });
    eof = response.eof;
    const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : void 0);
    chunks.push(buf);
  }
  await client.send("IO.close", {
    handle
  });
  return Buffer.concat(chunks);
}
function toConsoleMessageLocation(stackTrace2) {
  return stackTrace2 && stackTrace2.callFrames.length ? {
    url: stackTrace2.callFrames[0].url,
    lineNumber: stackTrace2.callFrames[0].lineNumber,
    columnNumber: stackTrace2.callFrames[0].columnNumber
  } : {
    url: "",
    lineNumber: 0,
    columnNumber: 0
  };
}
function exceptionToError(exceptionDetails) {
  var _exceptionDetails$exc, _nameOverride$value;
  const messageWithStack = getExceptionMessage(exceptionDetails);
  const lines = messageWithStack.split("\n");
  const firstStackTraceLine = lines.findIndex((line) => line.startsWith("    at"));
  let messageWithName = "";
  let stack = "";
  if (firstStackTraceLine === -1) {
    messageWithName = messageWithStack;
  } else {
    messageWithName = lines.slice(0, firstStackTraceLine).join("\n");
    stack = messageWithStack;
  }
  const {
    name: name2,
    message
  } = (0, _stackTrace$5.splitErrorMessage)(messageWithName);
  const err = new Error(message);
  err.stack = stack;
  const nameOverride = (_exceptionDetails$exc = exceptionDetails.exception) === null || _exceptionDetails$exc === void 0 || (_exceptionDetails$exc = _exceptionDetails$exc.preview) === null || _exceptionDetails$exc === void 0 ? void 0 : _exceptionDetails$exc.properties.find((o) => o.name === "name");
  err.name = nameOverride ? (_nameOverride$value = nameOverride.value) !== null && _nameOverride$value !== void 0 ? _nameOverride$value : "Error" : name2;
  return err;
}
function toModifiersMask$2(modifiers) {
  let mask = 0;
  if (modifiers.has("Alt")) mask |= 1;
  if (modifiers.has("Control")) mask |= 2;
  if (modifiers.has("Meta")) mask |= 4;
  if (modifiers.has("Shift")) mask |= 8;
  return mask;
}
function toButtonsMask$2(buttons) {
  let mask = 0;
  if (buttons.has("left")) mask |= 1;
  if (buttons.has("right")) mask |= 2;
  if (buttons.has("middle")) mask |= 4;
  return mask;
}
Object.defineProperty(crDragDrop, "__esModule", {
  value: true
});
crDragDrop.DragManager = void 0;
var _utils$u = requireUtils();
var _crProtocolHelper$3 = crProtocolHelper;
class DragManager {
  constructor(page2) {
    this._crPage = void 0;
    this._dragState = null;
    this._lastPosition = {
      x: 0,
      y: 0
    };
    this._crPage = page2;
  }
  async cancelDrag() {
    if (!this._dragState) return false;
    await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
      type: "dragCancel",
      x: this._lastPosition.x,
      y: this._lastPosition.y,
      data: {
        items: [],
        dragOperationsMask: 65535
      }
    });
    this._dragState = null;
    return true;
  }
  async interceptDragCausedByMove(x, y, button, buttons, modifiers, moveCallback) {
    this._lastPosition = {
      x,
      y
    };
    if (this._dragState) {
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "dragOver",
        x,
        y,
        data: this._dragState,
        modifiers: (0, _crProtocolHelper$3.toModifiersMask)(modifiers)
      });
      return;
    }
    if (button !== "left") return moveCallback();
    const client = this._crPage._mainFrameSession._client;
    let onDragIntercepted;
    const dragInterceptedPromise = new Promise((x2) => onDragIntercepted = x2);
    function setupDragListeners() {
      let didStartDrag = Promise.resolve(false);
      let dragEvent = null;
      const dragListener = (event) => dragEvent = event;
      const mouseListener = () => {
        didStartDrag = new Promise((callback) => {
          window.addEventListener("dragstart", dragListener, {
            once: true,
            capture: true
          });
          setTimeout(() => callback(dragEvent ? !dragEvent.defaultPrevented : false), 0);
        });
      };
      window.addEventListener("mousemove", mouseListener, {
        once: true,
        capture: true
      });
      window.__cleanupDrag = async () => {
        const val = await didStartDrag;
        window.removeEventListener("mousemove", mouseListener, {
          capture: true
        });
        window.removeEventListener("dragstart", dragListener, {
          capture: true
        });
        delete window.__cleanupDrag;
        return val;
      };
    }
    await this._crPage._page.safeNonStallingEvaluateInAllFrames(`(${setupDragListeners.toString()})()`, "utility");
    client.on("Input.dragIntercepted", onDragIntercepted);
    try {
      await client.send("Input.setInterceptDrags", {
        enabled: true
      });
    } catch {
      client.off("Input.dragIntercepted", onDragIntercepted);
      return moveCallback();
    }
    await moveCallback();
    const expectingDrag = (await Promise.all(this._crPage._page.frames().map(async (frame2) => {
      return frame2.nonStallingEvaluateInExistingContext("window.__cleanupDrag && window.__cleanupDrag()", "utility").catch(() => false);
    }))).some((x2) => x2);
    this._dragState = expectingDrag ? (await dragInterceptedPromise).data : null;
    client.off("Input.dragIntercepted", onDragIntercepted);
    await client.send("Input.setInterceptDrags", {
      enabled: false
    });
    if (this._dragState) {
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "dragEnter",
        x,
        y,
        data: this._dragState,
        modifiers: (0, _crProtocolHelper$3.toModifiersMask)(modifiers)
      });
    }
  }
  isDragging() {
    return !!this._dragState;
  }
  async drop(x, y, modifiers) {
    (0, _utils$u.assert)(this._dragState, "missing drag state");
    await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
      type: "drop",
      x,
      y,
      data: this._dragState,
      modifiers: (0, _crProtocolHelper$3.toModifiersMask)(modifiers)
    });
    this._dragState = null;
  }
}
crDragDrop.DragManager = DragManager;
var crExecutionContext = {};
Object.defineProperty(crExecutionContext, "__esModule", {
  value: true
});
crExecutionContext.CRExecutionContext = void 0;
var _crProtocolHelper$2 = crProtocolHelper;
var js$3 = _interopRequireWildcard$a(javascript$1);
var _stackTrace$4 = requireStackTrace();
var _utilityScriptSerializers$3 = utilityScriptSerializers;
var _protocolError$5 = protocolError;
function _getRequireWildcardCache$a(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$a = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$a(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$a(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class CRExecutionContext {
  constructor(client, contextPayload) {
    this._client = void 0;
    this._contextId = void 0;
    this._client = client;
    this._contextId = contextPayload.id;
  }
  async rawEvaluateJSON(expression) {
    const {
      exceptionDetails,
      result: remoteObject
    } = await this._client.send("Runtime.evaluate", {
      expression,
      contextId: this._contextId,
      returnByValue: true
    }).catch(rewriteError$2);
    if (exceptionDetails) throw new js$3.JavaScriptErrorInEvaluate((0, _crProtocolHelper$2.getExceptionMessage)(exceptionDetails));
    return remoteObject.value;
  }
  async rawEvaluateHandle(expression) {
    const {
      exceptionDetails,
      result: remoteObject
    } = await this._client.send("Runtime.evaluate", {
      expression,
      contextId: this._contextId
    }).catch(rewriteError$2);
    if (exceptionDetails) throw new js$3.JavaScriptErrorInEvaluate((0, _crProtocolHelper$2.getExceptionMessage)(exceptionDetails));
    return remoteObject.objectId;
  }
  rawCallFunctionNoReply(func, ...args) {
    this._client.send("Runtime.callFunctionOn", {
      functionDeclaration: func.toString(),
      arguments: args.map((a) => a instanceof js$3.JSHandle ? {
        objectId: a._objectId
      } : {
        value: a
      }),
      returnByValue: true,
      executionContextId: this._contextId,
      userGesture: true
    }).catch(() => {
    });
  }
  async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
    const {
      exceptionDetails,
      result: remoteObject
    } = await this._client.send("Runtime.callFunctionOn", {
      functionDeclaration: expression,
      objectId: utilityScript._objectId,
      arguments: [{
        objectId: utilityScript._objectId
      }, ...values.map((value) => ({
        value
      })), ...objectIds.map((objectId) => ({
        objectId
      }))],
      returnByValue,
      awaitPromise: true,
      userGesture: true
    }).catch(rewriteError$2);
    if (exceptionDetails) throw new js$3.JavaScriptErrorInEvaluate((0, _crProtocolHelper$2.getExceptionMessage)(exceptionDetails));
    return returnByValue ? (0, _utilityScriptSerializers$3.parseEvaluationResultValue)(remoteObject.value) : utilityScript._context.createHandle(remoteObject);
  }
  async getProperties(context, objectId) {
    const response = await this._client.send("Runtime.getProperties", {
      objectId,
      ownProperties: true
    });
    const result2 = /* @__PURE__ */ new Map();
    for (const property of response.result) {
      if (!property.enumerable || !property.value) continue;
      result2.set(property.name, context.createHandle(property.value));
    }
    return result2;
  }
  createHandle(context, remoteObject) {
    return new js$3.JSHandle(context, remoteObject.subtype || remoteObject.type, renderPreview$3(remoteObject), remoteObject.objectId, potentiallyUnserializableValue$2(remoteObject));
  }
  async releaseHandle(objectId) {
    await (0, _crProtocolHelper$2.releaseObject)(this._client, objectId);
  }
}
crExecutionContext.CRExecutionContext = CRExecutionContext;
function rewriteError$2(error) {
  if (error.message.includes("Object reference chain is too long")) return {
    result: {
      type: "undefined"
    }
  };
  if (error.message.includes("Object couldn't be returned by value")) return {
    result: {
      type: "undefined"
    }
  };
  if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) (0, _stackTrace$4.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
  if (!js$3.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError$5.isSessionClosedError)(error)) throw new Error("Execution context was destroyed, most likely because of a navigation.");
  throw error;
}
function potentiallyUnserializableValue$2(remoteObject) {
  const value = remoteObject.value;
  const unserializableValue = remoteObject.unserializableValue;
  return unserializableValue ? js$3.parseUnserializableValue(unserializableValue) : value;
}
function renderPreview$3(object) {
  if (object.type === "undefined") return "undefined";
  if ("value" in object) return String(object.value);
  if (object.unserializableValue) return String(object.unserializableValue);
  if (object.description === "Object" && object.preview) {
    const tokens = [];
    for (const {
      name: name2,
      value
    } of object.preview.properties) tokens.push(`${name2}: ${value}`);
    return `{${tokens.join(", ")}}`;
  }
  if (object.subtype === "array" && object.preview) return js$3.sparseArrayToString(object.preview.properties);
  return object.description;
}
var crInput = {};
var macEditingCommands = {};
Object.defineProperty(macEditingCommands, "__esModule", {
  value: true
});
macEditingCommands.macEditingCommands = void 0;
macEditingCommands.macEditingCommands = {
  "Backspace": "deleteBackward:",
  "Enter": "insertNewline:",
  "NumpadEnter": "insertNewline:",
  "Escape": "cancelOperation:",
  "ArrowUp": "moveUp:",
  "ArrowDown": "moveDown:",
  "ArrowLeft": "moveLeft:",
  "ArrowRight": "moveRight:",
  "F5": "complete:",
  "Delete": "deleteForward:",
  "Home": "scrollToBeginningOfDocument:",
  "End": "scrollToEndOfDocument:",
  "PageUp": "scrollPageUp:",
  "PageDown": "scrollPageDown:",
  "Shift+Backspace": "deleteBackward:",
  "Shift+Enter": "insertNewline:",
  "Shift+NumpadEnter": "insertNewline:",
  "Shift+Escape": "cancelOperation:",
  "Shift+ArrowUp": "moveUpAndModifySelection:",
  "Shift+ArrowDown": "moveDownAndModifySelection:",
  "Shift+ArrowLeft": "moveLeftAndModifySelection:",
  "Shift+ArrowRight": "moveRightAndModifySelection:",
  "Shift+F5": "complete:",
  "Shift+Delete": "deleteForward:",
  "Shift+Home": "moveToBeginningOfDocumentAndModifySelection:",
  "Shift+End": "moveToEndOfDocumentAndModifySelection:",
  "Shift+PageUp": "pageUpAndModifySelection:",
  "Shift+PageDown": "pageDownAndModifySelection:",
  "Shift+Numpad5": "delete:",
  "Control+Tab": "selectNextKeyView:",
  "Control+Enter": "insertLineBreak:",
  "Control+NumpadEnter": "insertLineBreak:",
  "Control+Quote": "insertSingleQuoteIgnoringSubstitution:",
  "Control+KeyA": "moveToBeginningOfParagraph:",
  "Control+KeyB": "moveBackward:",
  "Control+KeyD": "deleteForward:",
  "Control+KeyE": "moveToEndOfParagraph:",
  "Control+KeyF": "moveForward:",
  "Control+KeyH": "deleteBackward:",
  "Control+KeyK": "deleteToEndOfParagraph:",
  "Control+KeyL": "centerSelectionInVisibleArea:",
  "Control+KeyN": "moveDown:",
  "Control+KeyO": ["insertNewlineIgnoringFieldEditor:", "moveBackward:"],
  "Control+KeyP": "moveUp:",
  "Control+KeyT": "transpose:",
  "Control+KeyV": "pageDown:",
  "Control+KeyY": "yank:",
  "Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
  "Control+ArrowUp": "scrollPageUp:",
  "Control+ArrowDown": "scrollPageDown:",
  "Control+ArrowLeft": "moveToLeftEndOfLine:",
  "Control+ArrowRight": "moveToRightEndOfLine:",
  "Shift+Control+Enter": "insertLineBreak:",
  "Shift+Control+NumpadEnter": "insertLineBreak:",
  "Shift+Control+Tab": "selectPreviousKeyView:",
  "Shift+Control+Quote": "insertDoubleQuoteIgnoringSubstitution:",
  "Shift+Control+KeyA": "moveToBeginningOfParagraphAndModifySelection:",
  "Shift+Control+KeyB": "moveBackwardAndModifySelection:",
  "Shift+Control+KeyE": "moveToEndOfParagraphAndModifySelection:",
  "Shift+Control+KeyF": "moveForwardAndModifySelection:",
  "Shift+Control+KeyN": "moveDownAndModifySelection:",
  "Shift+Control+KeyP": "moveUpAndModifySelection:",
  "Shift+Control+KeyV": "pageDownAndModifySelection:",
  "Shift+Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
  "Shift+Control+ArrowUp": "scrollPageUp:",
  "Shift+Control+ArrowDown": "scrollPageDown:",
  "Shift+Control+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
  "Shift+Control+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
  "Alt+Backspace": "deleteWordBackward:",
  "Alt+Enter": "insertNewlineIgnoringFieldEditor:",
  "Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
  "Alt+Escape": "complete:",
  "Alt+ArrowUp": ["moveBackward:", "moveToBeginningOfParagraph:"],
  "Alt+ArrowDown": ["moveForward:", "moveToEndOfParagraph:"],
  "Alt+ArrowLeft": "moveWordLeft:",
  "Alt+ArrowRight": "moveWordRight:",
  "Alt+Delete": "deleteWordForward:",
  "Alt+PageUp": "pageUp:",
  "Alt+PageDown": "pageDown:",
  "Shift+Alt+Backspace": "deleteWordBackward:",
  "Shift+Alt+Enter": "insertNewlineIgnoringFieldEditor:",
  "Shift+Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
  "Shift+Alt+Escape": "complete:",
  "Shift+Alt+ArrowUp": "moveParagraphBackwardAndModifySelection:",
  "Shift+Alt+ArrowDown": "moveParagraphForwardAndModifySelection:",
  "Shift+Alt+ArrowLeft": "moveWordLeftAndModifySelection:",
  "Shift+Alt+ArrowRight": "moveWordRightAndModifySelection:",
  "Shift+Alt+Delete": "deleteWordForward:",
  "Shift+Alt+PageUp": "pageUp:",
  "Shift+Alt+PageDown": "pageDown:",
  "Control+Alt+KeyB": "moveWordBackward:",
  "Control+Alt+KeyF": "moveWordForward:",
  "Control+Alt+Backspace": "deleteWordBackward:",
  "Shift+Control+Alt+KeyB": "moveWordBackwardAndModifySelection:",
  "Shift+Control+Alt+KeyF": "moveWordForwardAndModifySelection:",
  "Shift+Control+Alt+Backspace": "deleteWordBackward:",
  "Meta+NumpadSubtract": "cancel:",
  "Meta+Backspace": "deleteToBeginningOfLine:",
  "Meta+ArrowUp": "moveToBeginningOfDocument:",
  "Meta+ArrowDown": "moveToEndOfDocument:",
  "Meta+ArrowLeft": "moveToLeftEndOfLine:",
  "Meta+ArrowRight": "moveToRightEndOfLine:",
  "Shift+Meta+NumpadSubtract": "cancel:",
  "Shift+Meta+Backspace": "deleteToBeginningOfLine:",
  "Shift+Meta+ArrowUp": "moveToBeginningOfDocumentAndModifySelection:",
  "Shift+Meta+ArrowDown": "moveToEndOfDocumentAndModifySelection:",
  "Shift+Meta+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
  "Shift+Meta+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
  "Meta+KeyA": "selectAll:",
  "Meta+KeyC": "copy:",
  "Meta+KeyX": "cut:",
  "Meta+KeyV": "paste:",
  "Meta+KeyZ": "undo:",
  "Shift+Meta+KeyZ": "redo:"
};
Object.defineProperty(crInput, "__esModule", {
  value: true
});
crInput.RawTouchscreenImpl = crInput.RawMouseImpl = crInput.RawKeyboardImpl = void 0;
var input$2 = _interopRequireWildcard$9(input$3);
var _macEditingCommands$1 = macEditingCommands;
var _utils$t = requireUtils();
var _crProtocolHelper$1 = crProtocolHelper;
function _getRequireWildcardCache$9(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$9 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$9(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$9(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
let RawKeyboardImpl$3 = class RawKeyboardImpl {
  constructor(_client, _isMac, _dragManger) {
    this._client = _client;
    this._isMac = _isMac;
    this._dragManger = _dragManger;
  }
  _commandsForCode(code, modifiers) {
    if (!this._isMac) return [];
    const parts = [];
    for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
      if (modifiers.has(modifier)) parts.push(modifier);
    }
    parts.push(code);
    const shortcut = parts.join("+");
    let commands = _macEditingCommands$1.macEditingCommands[shortcut] || [];
    if ((0, _utils$t.isString)(commands)) commands = [commands];
    commands = commands.filter((x) => !x.startsWith("insert"));
    return commands.map((c) => c.substring(0, c.length - 1));
  }
  async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
    if (code === "Escape" && await this._dragManger.cancelDrag()) return;
    const commands = this._commandsForCode(code, modifiers);
    await this._client.send("Input.dispatchKeyEvent", {
      type: text ? "keyDown" : "rawKeyDown",
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      windowsVirtualKeyCode: keyCodeWithoutLocation,
      code,
      commands,
      key,
      text,
      unmodifiedText: text,
      autoRepeat,
      location: location2,
      isKeypad: location2 === input$2.keypadLocation
    });
  }
  async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
    await this._client.send("Input.dispatchKeyEvent", {
      type: "keyUp",
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      key,
      windowsVirtualKeyCode: keyCodeWithoutLocation,
      code,
      location: location2
    });
  }
  async sendText(text) {
    await this._client.send("Input.insertText", {
      text
    });
  }
};
crInput.RawKeyboardImpl = RawKeyboardImpl$3;
let RawMouseImpl$3 = class RawMouseImpl {
  constructor(page2, client, dragManager) {
    this._client = void 0;
    this._page = void 0;
    this._dragManager = void 0;
    this._page = page2;
    this._client = client;
    this._dragManager = dragManager;
  }
  async move(x, y, button, buttons, modifiers, forClick) {
    const actualMove = async () => {
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseMoved",
        button,
        buttons: (0, _crProtocolHelper$1.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers)
      });
    };
    if (forClick) {
      return actualMove();
    }
    await this._dragManager.interceptDragCausedByMove(x, y, button, buttons, modifiers, actualMove);
  }
  async down(x, y, button, buttons, modifiers, clickCount) {
    if (this._dragManager.isDragging()) return;
    await this._client.send("Input.dispatchMouseEvent", {
      type: "mousePressed",
      button,
      buttons: (0, _crProtocolHelper$1.toButtonsMask)(buttons),
      x,
      y,
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      clickCount
    });
  }
  async up(x, y, button, buttons, modifiers, clickCount) {
    if (this._dragManager.isDragging()) {
      await this._dragManager.drop(x, y, modifiers);
      return;
    }
    await this._client.send("Input.dispatchMouseEvent", {
      type: "mouseReleased",
      button,
      buttons: (0, _crProtocolHelper$1.toButtonsMask)(buttons),
      x,
      y,
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      clickCount
    });
  }
  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
    await this._client.send("Input.dispatchMouseEvent", {
      type: "mouseWheel",
      x,
      y,
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      deltaX,
      deltaY
    });
  }
};
crInput.RawMouseImpl = RawMouseImpl$3;
let RawTouchscreenImpl$3 = class RawTouchscreenImpl {
  constructor(client) {
    this._client = void 0;
    this._client = client;
  }
  async tap(x, y, modifiers) {
    await Promise.all([this._client.send("Input.dispatchTouchEvent", {
      type: "touchStart",
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      touchPoints: [{
        x,
        y
      }]
    }), this._client.send("Input.dispatchTouchEvent", {
      type: "touchEnd",
      modifiers: (0, _crProtocolHelper$1.toModifiersMask)(modifiers),
      touchPoints: []
    })]);
  }
};
crInput.RawTouchscreenImpl = RawTouchscreenImpl$3;
var crNetworkManager = {};
var hasRequiredCrNetworkManager;
function requireCrNetworkManager() {
  if (hasRequiredCrNetworkManager) return crNetworkManager;
  hasRequiredCrNetworkManager = 1;
  Object.defineProperty(crNetworkManager, "__esModule", {
    value: true
  });
  crNetworkManager.CRNetworkManager = void 0;
  var _helper2 = helper;
  var _eventsHelper2 = eventsHelper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _utils2 = requireUtils();
  var _protocolError2 = protocolError;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class CRNetworkManager {
    constructor(page2, serviceWorker) {
      this._page = void 0;
      this._serviceWorker = void 0;
      this._requestIdToRequest = /* @__PURE__ */ new Map();
      this._requestIdToRequestWillBeSentEvent = /* @__PURE__ */ new Map();
      this._credentials = null;
      this._attemptedAuthentications = /* @__PURE__ */ new Set();
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._offline = false;
      this._extraHTTPHeaders = [];
      this._requestIdToRequestPausedEvent = /* @__PURE__ */ new Map();
      this._responseExtraInfoTracker = new ResponseExtraInfoTracker();
      this._sessions = /* @__PURE__ */ new Map();
      this._page = page2;
      this._serviceWorker = serviceWorker;
    }
    async addSession(session2, workerFrame, isMain) {
      const sessionInfo = {
        session: session2,
        isMain,
        workerFrame,
        eventListeners: []
      };
      sessionInfo.eventListeners = [_eventsHelper2.eventsHelper.addEventListener(session2, "Fetch.requestPaused", this._onRequestPaused.bind(this, sessionInfo)), _eventsHelper2.eventsHelper.addEventListener(session2, "Fetch.authRequired", this._onAuthRequired.bind(this, sessionInfo)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this, sessionInfo)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.requestWillBeSentExtraInfo", this._onRequestWillBeSentExtraInfo.bind(this)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.requestServedFromCache", this._onRequestServedFromCache.bind(this)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.responseReceived", this._onResponseReceived.bind(this, sessionInfo)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.responseReceivedExtraInfo", this._onResponseReceivedExtraInfo.bind(this)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.loadingFinished", this._onLoadingFinished.bind(this, sessionInfo)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.loadingFailed", this._onLoadingFailed.bind(this, sessionInfo))];
      if (this._page) {
        sessionInfo.eventListeners.push(...[_eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))]);
      }
      this._sessions.set(session2, sessionInfo);
      await Promise.all([session2.send("Network.enable"), this._updateProtocolRequestInterceptionForSession(
        sessionInfo,
        true
        /* initial */
      ), this._setOfflineForSession(
        sessionInfo,
        true
        /* initial */
      ), this._setExtraHTTPHeadersForSession(
        sessionInfo,
        true
        /* initial */
      )]);
    }
    removeSession(session2) {
      const info = this._sessions.get(session2);
      if (info) _eventsHelper2.eventsHelper.removeEventListeners(info.eventListeners);
      this._sessions.delete(session2);
    }
    async _forEachSession(cb) {
      await Promise.all([...this._sessions.values()].map((info) => {
        if (info.isMain) return cb(info);
        return cb(info).catch((e) => {
          if ((0, _protocolError2.isSessionClosedError)(e)) return;
          throw e;
        });
      }));
    }
    async authenticate(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async setOffline(offline) {
      if (offline === this._offline) return;
      this._offline = offline;
      await this._forEachSession((info) => this._setOfflineForSession(info));
    }
    async _setOfflineForSession(info, initial) {
      if (initial && !this._offline) return;
      if (info.workerFrame) return;
      await info.session.send("Network.emulateNetworkConditions", {
        offline: this._offline,
        // values of 0 remove any active throttling. crbug.com/456324#c9
        latency: 0,
        downloadThroughput: -1,
        uploadThroughput: -1
      });
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception() {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled) return;
      this._protocolRequestInterceptionEnabled = enabled;
      await this._forEachSession((info) => this._updateProtocolRequestInterceptionForSession(info));
    }
    async _updateProtocolRequestInterceptionForSession(info, initial) {
      const enabled = this._protocolRequestInterceptionEnabled;
      if (initial && !enabled) return;
      const cachePromise = info.session.send("Network.setCacheDisabled", {
        cacheDisabled: enabled
      });
      let fetchPromise = Promise.resolve(void 0);
      if (!info.workerFrame) {
        if (enabled) fetchPromise = info.session.send("Fetch.enable", {
          handleAuthRequests: true,
          patterns: [{
            urlPattern: "*",
            requestStage: "Request"
          }]
        });
        else fetchPromise = info.session.send("Fetch.disable");
      }
      await Promise.all([cachePromise, fetchPromise]);
    }
    async setExtraHTTPHeaders(extraHTTPHeaders) {
      if (!this._extraHTTPHeaders.length && !extraHTTPHeaders.length) return;
      this._extraHTTPHeaders = extraHTTPHeaders;
      await this._forEachSession((info) => this._setExtraHTTPHeadersForSession(info));
    }
    async _setExtraHTTPHeadersForSession(info, initial) {
      if (initial && !this._extraHTTPHeaders.length) return;
      await info.session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils2.headersArrayToObject)(
          this._extraHTTPHeaders,
          false
          /* lowerCase */
        )
      });
    }
    async clearCache() {
      await this._forEachSession(async (info) => {
        await info.session.send("Network.setCacheDisabled", {
          cacheDisabled: true
        });
        if (!this._protocolRequestInterceptionEnabled) await info.session.send("Network.setCacheDisabled", {
          cacheDisabled: false
        });
        if (!info.workerFrame) await info.session.send("Network.clearBrowserCache");
      });
    }
    _onRequestWillBeSent(sessionInfo, event) {
      if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith("data:")) {
        const requestId = event.requestId;
        const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);
        if (requestPausedEvent) {
          this._onRequest(sessionInfo, event, requestPausedEvent.sessionInfo, requestPausedEvent.event);
          this._requestIdToRequestPausedEvent.delete(requestId);
        } else {
          this._requestIdToRequestWillBeSentEvent.set(event.requestId, {
            sessionInfo,
            event
          });
        }
      } else {
        this._onRequest(sessionInfo, event, void 0, void 0);
      }
    }
    _onRequestServedFromCache(event) {
      this._responseExtraInfoTracker.requestServedFromCache(event);
    }
    _onRequestWillBeSentExtraInfo(event) {
      this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);
    }
    _onAuthRequired(sessionInfo, event) {
      let response = "Default";
      const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);
      if (this._attemptedAuthentications.has(event.requestId)) {
        response = "CancelAuth";
      } else if (shouldProvideCredentials) {
        response = "ProvideCredentials";
        this._attemptedAuthentications.add(event.requestId);
      }
      const {
        username,
        password
      } = shouldProvideCredentials && this._credentials ? this._credentials : {
        username: void 0,
        password: void 0
      };
      sessionInfo.session._sendMayFail("Fetch.continueWithAuth", {
        requestId: event.requestId,
        authChallengeResponse: {
          response,
          username,
          password
        }
      });
    }
    _shouldProvideCredentials(url) {
      if (!this._credentials) return false;
      return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();
    }
    _onRequestPaused(sessionInfo, event) {
      if (!event.networkId) {
        sessionInfo.session._sendMayFail("Fetch.continueRequest", {
          requestId: event.requestId
        });
        return;
      }
      if (event.request.url.startsWith("data:")) return;
      const requestId = event.networkId;
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);
      if (requestWillBeSentEvent) {
        this._onRequest(requestWillBeSentEvent.sessionInfo, requestWillBeSentEvent.event, sessionInfo, event);
        this._requestIdToRequestWillBeSentEvent.delete(requestId);
      } else {
        var _existingRequest$_rou;
        const existingRequest = this._requestIdToRequest.get(requestId);
        const alreadyContinuedParams = existingRequest === null || existingRequest === void 0 || (_existingRequest$_rou = existingRequest._route) === null || _existingRequest$_rou === void 0 ? void 0 : _existingRequest$_rou._alreadyContinuedParams;
        if (alreadyContinuedParams && !event.redirectedRequestId) {
          sessionInfo.session._sendMayFail("Fetch.continueRequest", {
            ...alreadyContinuedParams,
            requestId: event.requestId
          });
          return;
        }
        this._requestIdToRequestPausedEvent.set(requestId, {
          sessionInfo,
          event
        });
      }
    }
    _onRequest(requestWillBeSentSessionInfo, requestWillBeSentEvent, requestPausedSessionInfo, requestPausedEvent) {
      var _this$_page, _this$_page2, _this$_page3;
      if (requestWillBeSentEvent.request.url.startsWith("data:")) return;
      let redirectedFrom = null;
      if (requestWillBeSentEvent.redirectResponse) {
        const request3 = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);
        if (request3) {
          this._handleRequestRedirect(request3, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);
          redirectedFrom = request3;
        }
      }
      let frame2 = requestWillBeSentEvent.frameId ? (_this$_page = this._page) === null || _this$_page === void 0 ? void 0 : _this$_page._frameManager.frame(requestWillBeSentEvent.frameId) : requestWillBeSentSessionInfo.workerFrame;
      if (!frame2 && this._page && requestPausedEvent && requestPausedEvent.frameId) frame2 = this._page._frameManager.frame(requestPausedEvent.frameId);
      if (!frame2 && this._page && requestWillBeSentEvent.frameId === ((_this$_page2 = this._page) === null || _this$_page2 === void 0 ? void 0 : _this$_page2._delegate)._targetId) {
        frame2 = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);
      }
      const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === "OPTIONS" && requestWillBeSentEvent.initiator.type === "preflight";
      if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker).needsRequestInterception()) {
        const requestHeaders = requestPausedEvent.request.headers;
        const responseHeaders = [{
          name: "Access-Control-Allow-Origin",
          value: requestHeaders["Origin"] || "*"
        }, {
          name: "Access-Control-Allow-Methods",
          value: requestHeaders["Access-Control-Request-Method"] || "GET, POST, OPTIONS, DELETE"
        }, {
          name: "Access-Control-Allow-Credentials",
          value: "true"
        }];
        if (requestHeaders["Access-Control-Request-Headers"]) responseHeaders.push({
          name: "Access-Control-Allow-Headers",
          value: requestHeaders["Access-Control-Request-Headers"]
        });
        requestPausedSessionInfo.session._sendMayFail("Fetch.fulfillRequest", {
          requestId: requestPausedEvent.requestId,
          responseCode: 204,
          responsePhrase: network2.statusText(204),
          responseHeaders,
          body: ""
        });
        return;
      }
      if (!frame2 && !this._serviceWorker) {
        if (requestPausedEvent) requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
          requestId: requestPausedEvent.requestId
        });
        return;
      }
      let route = null;
      let headersOverride;
      if (requestPausedEvent) {
        if (redirectedFrom || !this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {
          var _redirectedFrom;
          headersOverride = (_redirectedFrom = redirectedFrom) === null || _redirectedFrom === void 0 || (_redirectedFrom = _redirectedFrom._originalRequestRoute) === null || _redirectedFrom === void 0 || (_redirectedFrom = _redirectedFrom._alreadyContinuedParams) === null || _redirectedFrom === void 0 ? void 0 : _redirectedFrom.headers;
          requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId,
            headers: headersOverride
          });
        } else {
          route = new RouteImpl(requestPausedSessionInfo.session, requestPausedEvent.requestId);
        }
      }
      const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === "Document";
      const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : void 0;
      const request2 = new InterceptableRequest({
        session: requestWillBeSentSessionInfo.session,
        context: (this._page || this._serviceWorker)._browserContext,
        frame: frame2 || null,
        serviceWorker: this._serviceWorker || null,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        headersOverride: headersOverride || null
      });
      this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request2);
      if (route) {
        request2.request.setRawRequestHeaders((0, _utils2.headersObjectToArray)(requestPausedEvent.request.headers, "\n"));
      }
      (((_this$_page3 = this._page) === null || _this$_page3 === void 0 ? void 0 : _this$_page3._frameManager) || this._serviceWorker).requestStarted(request2.request, route || void 0);
    }
    _createResponse(request2, responsePayload, hasExtraInfo) {
      var _responsePayload$secu, _responsePayload$secu2, _responsePayload$secu3, _responsePayload$secu4, _responsePayload$secu5;
      const getResponseBody = async () => {
        var _request$_route;
        const contentLengthHeader = Object.entries(responsePayload.headers).find((header) => header[0].toLowerCase() === "content-length");
        const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : void 0;
        const session2 = request2.session;
        const response2 = await session2.send("Network.getResponseBody", {
          requestId: request2._requestId
        });
        if (response2.body || !expectedLength) return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
        if ((_request$_route = request2._route) !== null && _request$_route !== void 0 && _request$_route._fulfilled) return Buffer.from("");
        const resource = await session2.send("Network.loadNetworkResource", {
          url: request2.request.url(),
          frameId: this._serviceWorker ? void 0 : request2.request.frame()._id,
          options: {
            disableCache: false,
            includeCredentials: true
          }
        });
        const chunks = [];
        while (resource.resource.stream) {
          const chunk = await session2.send("IO.read", {
            handle: resource.resource.stream
          });
          chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? "base64" : "utf-8"));
          if (chunk.eof) {
            await session2.send("IO.close", {
              handle: resource.resource.stream
            });
            break;
          }
        }
        return Buffer.concat(chunks);
      };
      const timingPayload = responsePayload.timing;
      let timing;
      if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request2._requestId)) {
        timing = {
          startTime: (timingPayload.requestTime - request2._timestamp + request2._wallTime) * 1e3,
          domainLookupStart: timingPayload.dnsStart,
          domainLookupEnd: timingPayload.dnsEnd,
          connectStart: timingPayload.connectStart,
          secureConnectionStart: timingPayload.sslStart,
          connectEnd: timingPayload.connectEnd,
          requestStart: timingPayload.sendStart,
          responseStart: timingPayload.receiveHeadersEnd
        };
      } else {
        timing = {
          startTime: request2._wallTime * 1e3,
          domainLookupStart: -1,
          domainLookupEnd: -1,
          connectStart: -1,
          secureConnectionStart: -1,
          connectEnd: -1,
          requestStart: -1,
          responseStart: -1
        };
      }
      const response = new network2.Response(request2.request, responsePayload.status, responsePayload.statusText, (0, _utils2.headersObjectToArray)(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);
      if (responsePayload !== null && responsePayload !== void 0 && responsePayload.remoteIPAddress && typeof (responsePayload === null || responsePayload === void 0 ? void 0 : responsePayload.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: responsePayload.remoteIPAddress,
          port: responsePayload.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu = responsePayload.securityDetails) === null || _responsePayload$secu === void 0 ? void 0 : _responsePayload$secu.protocol,
        subjectName: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu2 = responsePayload.securityDetails) === null || _responsePayload$secu2 === void 0 ? void 0 : _responsePayload$secu2.subjectName,
        issuer: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu3 = responsePayload.securityDetails) === null || _responsePayload$secu3 === void 0 ? void 0 : _responsePayload$secu3.issuer,
        validFrom: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu4 = responsePayload.securityDetails) === null || _responsePayload$secu4 === void 0 ? void 0 : _responsePayload$secu4.validFrom,
        validTo: responsePayload === null || responsePayload === void 0 || (_responsePayload$secu5 = responsePayload.securityDetails) === null || _responsePayload$secu5 === void 0 ? void 0 : _responsePayload$secu5.validTo
      });
      this._responseExtraInfoTracker.processResponse(request2._requestId, response, hasExtraInfo);
      return response;
    }
    _deleteRequest(request2) {
      this._requestIdToRequest.delete(request2._requestId);
      if (request2._interceptionId) this._attemptedAuthentications.delete(request2._interceptionId);
    }
    _handleRequestRedirect(request2, responsePayload, timestamp, hasExtraInfo) {
      var _this$_page4, _this$_page5;
      const response = this._createResponse(request2, responsePayload, hasExtraInfo);
      response.setTransferSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished((timestamp - request2._timestamp) * 1e3);
      this._deleteRequest(request2);
      (((_this$_page4 = this._page) === null || _this$_page4 === void 0 ? void 0 : _this$_page4._frameManager) || this._serviceWorker).requestReceivedResponse(response);
      (((_this$_page5 = this._page) === null || _this$_page5 === void 0 ? void 0 : _this$_page5._frameManager) || this._serviceWorker).reportRequestFinished(request2.request, response);
    }
    _onResponseReceivedExtraInfo(event) {
      this._responseExtraInfoTracker.responseReceivedExtraInfo(event);
    }
    _onResponseReceived(sessionInfo, event) {
      var _this$_page6;
      let request2 = this._requestIdToRequest.get(event.requestId);
      if (!request2 && event.response.fromServiceWorker) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, void 0, void 0);
          request2 = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request2) return;
      const response = this._createResponse(request2, event.response, event.hasExtraInfo);
      (((_this$_page6 = this._page) === null || _this$_page6 === void 0 ? void 0 : _this$_page6._frameManager) || this._serviceWorker).requestReceivedResponse(response);
    }
    _onLoadingFinished(sessionInfo, event) {
      var _this$_page7;
      this._responseExtraInfoTracker.loadingFinished(event);
      const request2 = this._requestIdToRequest.get(event.requestId);
      if (!request2) return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request2);
      const response = request2.request._existingResponse();
      if (response) {
        response.setTransferSize(event.encodedDataLength);
        response.responseHeadersSize().then((size) => response.setEncodedBodySize(event.encodedDataLength - size));
        response._requestFinished(_helper2.helper.secondsToRoundishMillis(event.timestamp - request2._timestamp));
      }
      this._deleteRequest(request2);
      (((_this$_page7 = this._page) === null || _this$_page7 === void 0 ? void 0 : _this$_page7._frameManager) || this._serviceWorker).reportRequestFinished(request2.request, response);
    }
    _onLoadingFailed(sessionInfo, event) {
      var _this$_page8;
      this._responseExtraInfoTracker.loadingFailed(event);
      let request2 = this._requestIdToRequest.get(event.requestId);
      if (!request2) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, void 0, void 0);
          request2 = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request2) return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request2);
      const response = request2.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper2.helper.secondsToRoundishMillis(event.timestamp - request2._timestamp));
      } else {
        request2.request.setRawRequestHeaders(null);
      }
      this._deleteRequest(request2);
      request2.request._setFailureText(event.errorText || event.blockedReason || "");
      (((_this$_page8 = this._page) === null || _this$_page8 === void 0 ? void 0 : _this$_page8._frameManager) || this._serviceWorker).requestFailed(request2.request, !!event.canceled);
    }
    _maybeUpdateOOPIFMainRequest(sessionInfo, request2) {
      if (request2.session !== sessionInfo.session && !sessionInfo.isMain && request2._documentId === request2._requestId) request2.session = sessionInfo.session;
    }
  }
  crNetworkManager.CRNetworkManager = CRNetworkManager;
  class InterceptableRequest {
    constructor(options) {
      this.request = void 0;
      this._requestId = void 0;
      this._interceptionId = void 0;
      this._documentId = void 0;
      this._timestamp = void 0;
      this._wallTime = void 0;
      this._route = void 0;
      this._originalRequestRoute = void 0;
      this.session = void 0;
      const {
        session: session2,
        context,
        frame: frame2,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        serviceWorker,
        headersOverride
      } = options;
      this.session = session2;
      this._timestamp = requestWillBeSentEvent.timestamp;
      this._wallTime = requestWillBeSentEvent.wallTime;
      this._requestId = requestWillBeSentEvent.requestId;
      this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;
      this._documentId = documentId;
      this._route = route;
      this._originalRequestRoute = route !== null && route !== void 0 ? route : redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom._originalRequestRoute;
      const {
        headers: headers2,
        method,
        url,
        postDataEntries = null
      } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;
      const type = (requestWillBeSentEvent.type || "").toLowerCase();
      let postDataBuffer = null;
      const entries = postDataEntries === null || postDataEntries === void 0 ? void 0 : postDataEntries.filter((entry) => entry.bytes);
      if (entries && entries.length) postDataBuffer = Buffer.concat(entries.map((entry) => Buffer.from(entry.bytes, "base64")));
      this.request = new network2.Request(context, frame2, serviceWorker, (redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom.request) || null, documentId, url, type, method, postDataBuffer, headersOverride || (0, _utils2.headersObjectToArray)(headers2));
    }
  }
  class RouteImpl {
    constructor(session2, interceptionId) {
      this._session = void 0;
      this._interceptionId = void 0;
      this._alreadyContinuedParams = void 0;
      this._fulfilled = false;
      this._session = session2;
      this._interceptionId = interceptionId;
    }
    async continue(overrides) {
      this._alreadyContinuedParams = {
        requestId: this._interceptionId,
        url: overrides.url,
        headers: overrides.headers,
        method: overrides.method,
        postData: overrides.postData ? overrides.postData.toString("base64") : void 0
      };
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.continueRequest", this._alreadyContinuedParams);
      });
    }
    async fulfill(response) {
      this._fulfilled = true;
      const body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      const responseHeaders = splitSetCookieHeader(response.headers);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.fulfillRequest", {
          requestId: this._interceptionId,
          responseCode: response.status,
          responsePhrase: network2.statusText(response.status),
          responseHeaders,
          body
        });
      });
    }
    async abort(errorCode = "failed") {
      const errorReason = errorReasons[errorCode];
      (0, _utils2.assert)(errorReason, "Unknown error code: " + errorCode);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.failRequest", {
          requestId: this._interceptionId,
          errorReason
        });
      });
    }
  }
  async function catchDisallowedErrors(callback) {
    try {
      return await callback();
    } catch (e) {
      if ((0, _protocolError2.isProtocolError)(e) && e.message.includes("Invalid http status code or phrase")) throw e;
    }
  }
  function splitSetCookieHeader(headers2) {
    const index = headers2.findIndex(({
      name: name2
    }) => name2.toLowerCase() === "set-cookie");
    if (index === -1) return headers2;
    const header = headers2[index];
    const values = header.value.split("\n");
    if (values.length === 1) return headers2;
    const result2 = headers2.slice();
    result2.splice(index, 1, ...values.map((value) => ({
      name: header.name,
      value
    })));
    return result2;
  }
  const errorReasons = {
    "aborted": "Aborted",
    "accessdenied": "AccessDenied",
    "addressunreachable": "AddressUnreachable",
    "blockedbyclient": "BlockedByClient",
    "blockedbyresponse": "BlockedByResponse",
    "connectionaborted": "ConnectionAborted",
    "connectionclosed": "ConnectionClosed",
    "connectionfailed": "ConnectionFailed",
    "connectionrefused": "ConnectionRefused",
    "connectionreset": "ConnectionReset",
    "internetdisconnected": "InternetDisconnected",
    "namenotresolved": "NameNotResolved",
    "timedout": "TimedOut",
    "failed": "Failed"
  };
  class ResponseExtraInfoTracker {
    constructor() {
      this._requests = /* @__PURE__ */ new Map();
    }
    requestWillBeSentExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.requestWillBeSentExtraInfo.push(event);
      this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);
      this._checkFinished(info);
    }
    requestServedFromCache(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.servedFromCache = true;
    }
    servedFromCache(requestId) {
      const info = this._requests.get(requestId);
      return !!(info !== null && info !== void 0 && info.servedFromCache);
    }
    responseReceivedExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.responseReceivedExtraInfo.push(event);
      this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);
      this._checkFinished(info);
    }
    processResponse(requestId, response, hasExtraInfo) {
      var _info;
      let info = this._requests.get(requestId);
      if (!hasExtraInfo || (_info = info) !== null && _info !== void 0 && _info.servedFromCache) {
        response.request().setRawRequestHeaders(null);
        response.setResponseHeadersSize(null);
        response.setRawResponseHeaders(null);
        return;
      }
      info = this._getOrCreateEntry(requestId);
      info.responses.push(response);
      this._patchHeaders(info, info.responses.length - 1);
    }
    loadingFinished(event) {
      const info = this._requests.get(event.requestId);
      if (!info) return;
      info.loadingFinished = event;
      this._checkFinished(info);
    }
    loadingFailed(event) {
      const info = this._requests.get(event.requestId);
      if (!info) return;
      info.loadingFailed = event;
      this._checkFinished(info);
    }
    _getOrCreateEntry(requestId) {
      let info = this._requests.get(requestId);
      if (!info) {
        info = {
          requestId,
          requestWillBeSentExtraInfo: [],
          responseReceivedExtraInfo: [],
          responses: []
        };
        this._requests.set(requestId, info);
      }
      return info;
    }
    _patchHeaders(info, index) {
      const response = info.responses[index];
      const requestExtraInfo = info.requestWillBeSentExtraInfo[index];
      if (response && requestExtraInfo) {
        response.request().setRawRequestHeaders((0, _utils2.headersObjectToArray)(requestExtraInfo.headers, "\n"));
        info.requestWillBeSentExtraInfo[index] = void 0;
      }
      const responseExtraInfo = info.responseReceivedExtraInfo[index];
      if (response && responseExtraInfo) {
        var _responseExtraInfo$he;
        response.setResponseHeadersSize(((_responseExtraInfo$he = responseExtraInfo.headersText) === null || _responseExtraInfo$he === void 0 ? void 0 : _responseExtraInfo$he.length) || 0);
        response.setRawResponseHeaders((0, _utils2.headersObjectToArray)(responseExtraInfo.headers, "\n"));
        info.responseReceivedExtraInfo[index] = void 0;
      }
    }
    _checkFinished(info) {
      if (!info.loadingFinished && !info.loadingFailed) return;
      if (info.responses.length <= info.responseReceivedExtraInfo.length) {
        this._stopTracking(info.requestId);
        return;
      }
    }
    _stopTracking(requestId) {
      this._requests.delete(requestId);
    }
  }
  return crNetworkManager;
}
var crPdf = {};
Object.defineProperty(crPdf, "__esModule", {
  value: true
});
crPdf.CRPDF = void 0;
var _utils$s = requireUtils();
var _crProtocolHelper = crProtocolHelper;
const PagePaperFormats$1 = {
  letter: {
    width: 8.5,
    height: 11
  },
  legal: {
    width: 8.5,
    height: 14
  },
  tabloid: {
    width: 11,
    height: 17
  },
  ledger: {
    width: 17,
    height: 11
  },
  a0: {
    width: 33.1,
    height: 46.8
  },
  a1: {
    width: 23.4,
    height: 33.1
  },
  a2: {
    width: 16.54,
    height: 23.4
  },
  a3: {
    width: 11.7,
    height: 16.54
  },
  a4: {
    width: 8.27,
    height: 11.7
  },
  a5: {
    width: 5.83,
    height: 8.27
  },
  a6: {
    width: 4.13,
    height: 5.83
  }
};
const unitToPixels$1 = {
  "px": 1,
  "in": 96,
  "cm": 37.8,
  "mm": 3.78
};
function convertPrintParameterToInches$1(text) {
  if (text === void 0) return void 0;
  let unit = text.substring(text.length - 2).toLowerCase();
  let valueText = "";
  if (unitToPixels$1.hasOwnProperty(unit)) {
    valueText = text.substring(0, text.length - 2);
  } else {
    unit = "px";
    valueText = text;
  }
  const value = Number(valueText);
  (0, _utils$s.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
  const pixels = value * unitToPixels$1[unit];
  return pixels / 96;
}
class CRPDF {
  constructor(client) {
    this._client = void 0;
    this._client = client;
  }
  async generate(options) {
    const {
      scale = 1,
      displayHeaderFooter = false,
      headerTemplate = "",
      footerTemplate = "",
      printBackground = false,
      landscape = false,
      pageRanges = "",
      preferCSSPageSize = false,
      margin = {},
      tagged = false,
      outline = false
    } = options;
    let paperWidth = 8.5;
    let paperHeight = 11;
    if (options.format) {
      const format = PagePaperFormats$1[options.format.toLowerCase()];
      (0, _utils$s.assert)(format, "Unknown paper format: " + options.format);
      paperWidth = format.width;
      paperHeight = format.height;
    } else {
      paperWidth = convertPrintParameterToInches$1(options.width) || paperWidth;
      paperHeight = convertPrintParameterToInches$1(options.height) || paperHeight;
    }
    const marginTop = convertPrintParameterToInches$1(margin.top) || 0;
    const marginLeft = convertPrintParameterToInches$1(margin.left) || 0;
    const marginBottom = convertPrintParameterToInches$1(margin.bottom) || 0;
    const marginRight = convertPrintParameterToInches$1(margin.right) || 0;
    const generateDocumentOutline = outline;
    const generateTaggedPDF = tagged;
    const result2 = await this._client.send("Page.printToPDF", {
      transferMode: "ReturnAsStream",
      landscape,
      displayHeaderFooter,
      headerTemplate,
      footerTemplate,
      printBackground,
      scale,
      paperWidth,
      paperHeight,
      marginTop,
      marginBottom,
      marginLeft,
      marginRight,
      pageRanges,
      preferCSSPageSize,
      generateTaggedPDF,
      generateDocumentOutline
    });
    return await (0, _crProtocolHelper.readProtocolStream)(this._client, result2.stream);
  }
}
crPdf.CRPDF = CRPDF;
var defaultFontFamilies = {};
Object.defineProperty(defaultFontFamilies, "__esModule", {
  value: true
});
defaultFontFamilies.platformToFontFamilies = void 0;
defaultFontFamilies.platformToFontFamilies = {
  "linux": {
    "fontFamilies": {
      "standard": "Times New Roman",
      "fixed": "Monospace",
      "serif": "Times New Roman",
      "sansSerif": "Arial",
      "cursive": "Comic Sans MS",
      "fantasy": "Impact"
    }
  },
  "mac": {
    "fontFamilies": {
      "standard": "Times",
      "fixed": "Courier",
      "serif": "Times",
      "sansSerif": "Helvetica",
      "cursive": "Apple Chancery",
      "fantasy": "Papyrus"
    },
    "forScripts": [{
      "script": "jpan",
      "fontFamilies": {
        "standard": "Hiragino Kaku Gothic ProN",
        "fixed": "Osaka-Mono",
        "serif": "Hiragino Mincho ProN",
        "sansSerif": "Hiragino Kaku Gothic ProN"
      }
    }, {
      "script": "hang",
      "fontFamilies": {
        "standard": "Apple SD Gothic Neo",
        "serif": "AppleMyungjo",
        "sansSerif": "Apple SD Gothic Neo"
      }
    }, {
      "script": "hans",
      "fontFamilies": {
        "standard": ",PingFang SC,STHeiti",
        "serif": "Songti SC",
        "sansSerif": ",PingFang SC,STHeiti",
        "cursive": "Kaiti SC"
      }
    }, {
      "script": "hant",
      "fontFamilies": {
        "standard": ",PingFang TC,Heiti TC",
        "serif": "Songti TC",
        "sansSerif": ",PingFang TC,Heiti TC",
        "cursive": "Kaiti TC"
      }
    }]
  },
  "win": {
    "fontFamilies": {
      "standard": "Times New Roman",
      "fixed": "Consolas",
      "serif": "Times New Roman",
      "sansSerif": "Arial",
      "cursive": "Comic Sans MS",
      "fantasy": "Impact"
    },
    "forScripts": [{
      "script": "cyrl",
      "fontFamilies": {
        "standard": "Times New Roman",
        "fixed": "Courier New",
        "serif": "Times New Roman",
        "sansSerif": "Arial"
      }
    }, {
      "script": "arab",
      "fontFamilies": {
        "fixed": "Courier New",
        "sansSerif": "Segoe UI"
      }
    }, {
      "script": "grek",
      "fontFamilies": {
        "standard": "Times New Roman",
        "fixed": "Courier New",
        "serif": "Times New Roman",
        "sansSerif": "Arial"
      }
    }, {
      "script": "jpan",
      "fontFamilies": {
        "standard": ",Meiryo,Yu Gothic",
        "fixed": "MS Gothic",
        "serif": ",Yu Mincho,MS PMincho",
        "sansSerif": ",Meiryo,Yu Gothic"
      }
    }, {
      "script": "hang",
      "fontFamilies": {
        "standard": "Malgun Gothic",
        "fixed": "Gulimche",
        "serif": "Batang",
        "sansSerif": "Malgun Gothic",
        "cursive": "Gungsuh"
      }
    }, {
      "script": "hans",
      "fontFamilies": {
        "standard": "Microsoft YaHei",
        "fixed": "NSimsun",
        "serif": "Simsun",
        "sansSerif": "Microsoft YaHei",
        "cursive": "KaiTi"
      }
    }, {
      "script": "hant",
      "fontFamilies": {
        "standard": "Microsoft JhengHei",
        "fixed": "MingLiU",
        "serif": "PMingLiU",
        "sansSerif": "Microsoft JhengHei",
        "cursive": "DFKai-SB"
      }
    }]
  }
};
var videoRecorder = {};
var hasRequiredVideoRecorder;
function requireVideoRecorder() {
  if (hasRequiredVideoRecorder) return videoRecorder;
  hasRequiredVideoRecorder = 1;
  Object.defineProperty(videoRecorder, "__esModule", {
    value: true
  });
  videoRecorder.VideoRecorder = void 0;
  var _utils2 = requireUtils();
  var _page = requirePage$1();
  var _processLauncher = requireProcessLauncher();
  var _progress2 = progress;
  var _instrumentation2 = instrumentation;
  const fps = 25;
  class VideoRecorder {
    static async launch(page2, ffmpegPath, options) {
      if (!options.outputFile.endsWith(".webm")) throw new Error("File must have .webm extension");
      const controller = new _progress2.ProgressController((0, _instrumentation2.serverSideCallMetadata)(), page2);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        const recorder2 = new VideoRecorder(page2, ffmpegPath, progress2);
        await recorder2._launch(options);
        return recorder2;
      });
    }
    constructor(page2, ffmpegPath, progress2) {
      this._process = null;
      this._gracefullyClose = null;
      this._lastWritePromise = Promise.resolve();
      this._lastFrameTimestamp = 0;
      this._lastFrameBuffer = null;
      this._lastWriteTimestamp = 0;
      this._progress = void 0;
      this._frameQueue = [];
      this._isStopped = false;
      this._ffmpegPath = void 0;
      this._progress = progress2;
      this._ffmpegPath = ffmpegPath;
      page2.on(_page.Page.Events.ScreencastFrame, (frame2) => this.writeFrame(frame2.buffer, frame2.frameSwapWallTime / 1e3));
    }
    async _launch(options) {
      const w = options.width;
      const h = options.height;
      const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i pipe:0 -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(" ");
      args.push(options.outputFile);
      const progress2 = this._progress;
      const {
        launchedProcess,
        gracefullyClose
      } = await (0, _processLauncher.launchProcess)({
        command: this._ffmpegPath,
        args,
        stdio: "stdin",
        log: (message) => progress2.log(message),
        tempDirectories: [],
        attemptToGracefullyClose: async () => {
          progress2.log("Closing stdin...");
          launchedProcess.stdin.end();
        },
        onExit: (exitCode, signal) => {
          progress2.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
        }
      });
      launchedProcess.stdin.on("finish", () => {
        progress2.log("ffmpeg finished input.");
      });
      launchedProcess.stdin.on("error", () => {
        progress2.log("ffmpeg error.");
      });
      this._process = launchedProcess;
      this._gracefullyClose = gracefullyClose;
    }
    writeFrame(frame2, timestamp) {
      (0, _utils2.assert)(this._process);
      if (this._isStopped) return;
      if (this._lastFrameBuffer) {
        const durationSec = timestamp - this._lastFrameTimestamp;
        const repeatCount = Math.max(1, Math.round(fps * durationSec));
        for (let i = 0; i < repeatCount; ++i) this._frameQueue.push(this._lastFrameBuffer);
        this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());
      }
      this._lastFrameBuffer = frame2;
      this._lastFrameTimestamp = timestamp;
      this._lastWriteTimestamp = (0, _utils2.monotonicTime)();
    }
    async _sendFrames() {
      while (this._frameQueue.length) await this._sendFrame(this._frameQueue.shift());
    }
    async _sendFrame(frame2) {
      return new Promise((f) => this._process.stdin.write(frame2, f)).then((error) => {
        if (error) this._progress.log(`ffmpeg failed to write: ${String(error)}`);
      });
    }
    async stop() {
      if (this._isStopped) return;
      this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, _utils2.monotonicTime)() - this._lastWriteTimestamp) / 1e3);
      this._isStopped = true;
      await this._lastWritePromise;
      await this._gracefullyClose();
    }
  }
  videoRecorder.VideoRecorder = VideoRecorder;
  return videoRecorder;
}
var hasRequiredCrPage;
function requireCrPage() {
  if (hasRequiredCrPage) return crPage;
  hasRequiredCrPage = 1;
  Object.defineProperty(crPage, "__esModule", {
    value: true
  });
  crPage.CRPage = void 0;
  var _path2 = _interopRequireDefault2(require$$1);
  var _eventsHelper2 = eventsHelper;
  var _registry2 = requireRegistry();
  var _stackTrace2 = requireStackTrace();
  var _utils2 = requireUtils();
  var dialog2 = _interopRequireWildcard2(dialog$1);
  var dom$1 = _interopRequireWildcard2(dom);
  var frames2 = _interopRequireWildcard2(requireFrames());
  var _helper2 = helper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _page = requirePage$1();
  var _crAccessibility = crAccessibility;
  var _crBrowser = requireCrBrowser();
  var _crCoverage = crCoverage;
  var _crDragDrop = crDragDrop;
  var _crExecutionContext = crExecutionContext;
  var _crInput = crInput;
  var _crNetworkManager = requireCrNetworkManager();
  var _crPdf = crPdf;
  var _crProtocolHelper2 = crProtocolHelper;
  var _defaultFontFamilies = defaultFontFamilies;
  var _videoRecorder = requireVideoRecorder();
  var _browserContext2 = requireBrowserContext$1();
  var _errors2 = errors$2;
  var _protocolError2 = protocolError;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const UTILITY_WORLD_NAME = "__playwright_utility_world__";
  class CRPage {
    static mainFrameSession(page2) {
      const crPage2 = page2._delegate;
      return crPage2._mainFrameSession;
    }
    constructor(client, targetId, browserContext2, opener, bits) {
      this._mainFrameSession = void 0;
      this._sessions = /* @__PURE__ */ new Map();
      this._page = void 0;
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._targetId = void 0;
      this._opener = void 0;
      this._networkManager = void 0;
      this._pdf = void 0;
      this._coverage = void 0;
      this._browserContext = void 0;
      this._pagePromise = void 0;
      this._initializedPage = null;
      this._isBackgroundPage = void 0;
      this._nextWindowOpenPopupFeatures = [];
      this._targetId = targetId;
      this._opener = opener;
      this._isBackgroundPage = bits.isBackgroundPage;
      const dragManager = new _crDragDrop.DragManager(this);
      this.rawKeyboard = new _crInput.RawKeyboardImpl(client, browserContext2._browser._platform() === "mac", dragManager);
      this.rawMouse = new _crInput.RawMouseImpl(this, client, dragManager);
      this.rawTouchscreen = new _crInput.RawTouchscreenImpl(client);
      this._pdf = new _crPdf.CRPDF(client);
      this._coverage = new _crCoverage.CRCoverage(client);
      this._browserContext = browserContext2;
      this._page = new _page.Page(this, browserContext2);
      this._networkManager = new _crNetworkManager.CRNetworkManager(this._page, null);
      this.updateOffline();
      this.updateExtraHTTPHeaders();
      this.updateHttpCredentials();
      this.updateRequestInterception();
      this._mainFrameSession = new FrameSession(this, client, targetId, null);
      this._sessions.set(targetId, this._mainFrameSession);
      if (opener && !browserContext2._options.noDefaultViewport) {
        const features = opener._nextWindowOpenPopupFeatures.shift() || [];
        const viewportSize = _helper2.helper.getViewportSizeFromWindowFeatures(features);
        if (viewportSize) this._page._emulatedSize = {
          viewport: viewportSize,
          screen: viewportSize
        };
      }
      this._pagePromise = this._mainFrameSession._initialize(bits.hasUIWindow).then(async (r) => {
        await this._page.initOpener(this._opener);
        return r;
      }).catch(async (e) => {
        await this._page.initOpener(this._opener);
        throw e;
      }).then(() => {
        this._initializedPage = this._page;
        this._reportAsNew();
        return this._page;
      }).catch((e) => {
        this._reportAsNew(e);
        return e;
      });
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    _reportAsNew(error) {
      this._page.reportAsNew(error, this._isBackgroundPage ? _crBrowser.CRBrowserContext.CREvents.BackgroundPage : _browserContext2.BrowserContext.Events.Page);
    }
    async _forAllFrameSessions(cb) {
      const frameSessions = Array.from(this._sessions.values());
      await Promise.all(frameSessions.map((frameSession) => {
        if (frameSession._isMainFrame()) return cb(frameSession);
        return cb(frameSession).catch((e) => {
          if ((0, _protocolError2.isSessionClosedError)(e)) return;
          throw e;
        });
      }));
    }
    _sessionForFrame(frame2) {
      while (!this._sessions.has(frame2._id)) {
        const parent = frame2.parentFrame();
        if (!parent) throw new Error(`Frame has been detached.`);
        frame2 = parent;
      }
      return this._sessions.get(frame2._id);
    }
    _sessionForHandle(handle) {
      const frame2 = handle._context.frame;
      return this._sessionForFrame(frame2);
    }
    willBeginDownload() {
      this._mainFrameSession._willBeginDownload();
    }
    async pageOrError() {
      return this._pagePromise;
    }
    didClose() {
      for (const session2 of this._sessions.values()) session2.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame2, url, referrer) {
      return this._sessionForFrame(frame2)._navigate(frame2, url, referrer);
    }
    async updateExtraHTTPHeaders() {
      const headers2 = network2.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders()]);
      await this._networkManager.setExtraHTTPHeaders(headers2);
    }
    async updateGeolocation() {
      await this._forAllFrameSessions((frame2) => frame2._updateGeolocation(false));
    }
    async updateOffline() {
      await this._networkManager.setOffline(!!this._browserContext._options.offline);
    }
    async updateHttpCredentials() {
      await this._networkManager.authenticate(this._browserContext._options.httpCredentials || null);
    }
    async updateEmulatedViewportSize(preserveWindowBoundaries) {
      await this._mainFrameSession._updateViewport(preserveWindowBoundaries);
    }
    async bringToFront() {
      await this._mainFrameSession._client.send("Page.bringToFront");
    }
    async updateEmulateMedia() {
      await this._forAllFrameSessions((frame2) => frame2._updateEmulateMedia());
    }
    async updateUserAgent() {
      await this._forAllFrameSessions((frame2) => frame2._updateUserAgent());
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      await this._forAllFrameSessions((frame2) => frame2._updateFileChooserInterception(false));
    }
    async reload() {
      await this._mainFrameSession._client.send("Page.reload");
    }
    async _go(delta) {
      const history = await this._mainFrameSession._client.send("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry) return false;
      await this._mainFrameSession._client.send("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
      return true;
    }
    goBack() {
      return this._go(-1);
    }
    goForward() {
      return this._go(1);
    }
    async requestGC() {
      await this._mainFrameSession._client.send("HeapProfiler.collectGarbage");
    }
    async addInitScript(initScript, world = "main") {
      await this._forAllFrameSessions((frame2) => frame2._evaluateOnNewDocument(initScript, world));
    }
    async removeNonInternalInitScripts() {
      await this._forAllFrameSessions((frame2) => frame2._removeEvaluatesOnNewDocument());
    }
    async closePage(runBeforeUnload) {
      if (runBeforeUnload) await this._mainFrameSession._client.send("Page.close");
      else await this._browserContext._browser._closePage(this);
    }
    async setBackgroundColor(color) {
      await this._mainFrameSession._client.send("Emulation.setDefaultBackgroundColorOverride", {
        color
      });
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const {
        visualViewport
      } = await this._mainFrameSession._client.send("Page.getLayoutMetrics");
      if (!documentRect) {
        documentRect = {
          x: visualViewport.pageX + viewportRect.x,
          y: visualViewport.pageY + viewportRect.y,
          ..._helper2.helper.enclosingIntSize({
            width: viewportRect.width / visualViewport.scale,
            height: viewportRect.height / visualViewport.scale
          })
        };
      }
      const clip = {
        ...documentRect,
        scale: viewportRect ? visualViewport.scale : 1
      };
      if (scale === "css") {
        const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;
        clip.scale /= deviceScaleFactor;
      }
      progress2.throwIfAborted();
      const result2 = await this._mainFrameSession._client.send("Page.captureScreenshot", {
        format,
        quality,
        clip,
        captureBeyondViewport: !fitsViewport
      });
      return Buffer.from(result2.data, "base64");
    }
    async getContentFrame(handle) {
      return this._sessionForHandle(handle)._getContentFrame(handle);
    }
    async getOwnerFrame(handle) {
      return this._sessionForHandle(handle)._getOwnerFrame(handle);
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      return this._sessionForHandle(handle)._getBoundingBox(handle);
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);
    }
    async setScreencastOptions(options) {
      if (options) {
        await this._mainFrameSession._startScreencast(this, {
          format: "jpeg",
          quality: options.quality,
          maxWidth: options.width,
          maxHeight: options.height
        });
      } else {
        await this._mainFrameSession._stopScreencast(this);
      }
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      return this._sessionForHandle(handle)._getContentQuads(handle);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(handle, files) {
      const frame2 = await handle.ownerFrame();
      if (!frame2) throw new Error("Cannot set input files to detached input element");
      const parentSession = this._sessionForFrame(frame2);
      await parentSession._client.send("DOM.setFileInputFiles", {
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to2) {
      return this._sessionForHandle(handle)._adoptElementHandle(handle, to2);
    }
    async getAccessibilityTree(needle) {
      return (0, _crAccessibility.getAccessibilityTree)(this._mainFrameSession._client, needle);
    }
    async inputActionEpilogue() {
      await this._mainFrameSession._client.send("Page.enable").catch((e) => {
      });
    }
    async resetForReuse() {
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    coverage() {
      return this._coverage;
    }
    async getFrameElement(frame2) {
      let parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const parentSession = this._sessionForFrame(parent);
      const {
        backendNodeId
      } = await parentSession._client.send("DOM.getFrameOwner", {
        frameId: frame2._id
      }).catch((e) => {
        if (e instanceof Error && e.message.includes("Frame with the given id was not found.")) (0, _stackTrace2.rewriteErrorMessage)(e, "Frame has been detached.");
        throw e;
      });
      parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  crPage.CRPage = CRPage;
  class FrameSession {
    constructor(crPage2, client, targetId, parentSession) {
      this._client = void 0;
      this._crPage = void 0;
      this._page = void 0;
      this._parentSession = void 0;
      this._childSessions = /* @__PURE__ */ new Set();
      this._contextIdToContext = /* @__PURE__ */ new Map();
      this._eventListeners = [];
      this._targetId = void 0;
      this._firstNonInitialNavigationCommittedPromise = void 0;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._windowId = void 0;
      this._swappedIn = false;
      this._videoRecorder = null;
      this._screencastId = null;
      this._screencastClients = /* @__PURE__ */ new Set();
      this._evaluateOnNewDocumentIdentifiers = [];
      this._metricsOverride = void 0;
      this._workerSessions = /* @__PURE__ */ new Map();
      this._client = client;
      this._crPage = crPage2;
      this._page = crPage2._page;
      this._targetId = targetId;
      this._parentSession = parentSession;
      if (parentSession) parentSession._childSessions.add(this);
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
    }
    _isMainFrame() {
      return this._targetId === this._crPage._targetId;
    }
    _addRendererListeners() {
      this._eventListeners.push(...[_eventsHelper2.eventsHelper.addEventListener(this._client, "Log.entryAdded", (event) => this._onLogEntryAdded(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId, event.reason)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.frameRequestedNavigation", (event) => this._onFrameRequestedNavigation(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Runtime.bindingCalled", (event) => this._onBindingCalled(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Runtime.exceptionThrown", (exception) => this._handleException(exception.exceptionDetails)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Runtime.executionContextDestroyed", (event) => this._onExecutionContextDestroyed(event.executionContextId)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", (event) => this._onExecutionContextsCleared()), _eventsHelper2.eventsHelper.addEventListener(this._client, "Target.attachedToTarget", (event) => this._onAttachedToTarget(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Target.detachedFromTarget", (event) => this._onDetachedFromTarget(event))]);
    }
    _addBrowserListeners() {
      this._eventListeners.push(...[_eventsHelper2.eventsHelper.addEventListener(this._client, "Inspector.targetCrashed", (event) => this._onTargetCrashed()), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.screencastFrame", (event) => this._onScreencastFrame(event)), _eventsHelper2.eventsHelper.addEventListener(this._client, "Page.windowOpen", (event) => this._onWindowOpen(event))]);
    }
    async _initialize(hasUIWindow) {
      const isSettingStorageState = this._page._browserContext.isSettingStorageState();
      if (!isSettingStorageState && hasUIWindow && !this._crPage._browserContext._browser.isClank() && !this._crPage._browserContext._options.noDefaultViewport) {
        const {
          windowId
        } = await this._client.send("Browser.getWindowForTarget");
        this._windowId = windowId;
      }
      let screencastOptions;
      if (!isSettingStorageState && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {
        const screencastId = (0, _utils2.createGuid)();
        const outputFile = _path2.default.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + ".webm");
        screencastOptions = {
          // validateBrowserContextOptions ensures correct video size.
          ...this._crPage._browserContext._options.recordVideo.size,
          outputFile
        };
        await this._crPage._browserContext._ensureVideosPath();
        await this._createVideoRecorder(screencastId, screencastOptions);
        this._crPage.pageOrError().then((p) => {
          if (p instanceof Error) this._stopVideoRecording().catch(() => {
          });
        });
      }
      let lifecycleEventsEnabled;
      if (!this._isMainFrame()) this._addRendererListeners();
      this._addBrowserListeners();
      const promises = [this._client.send("Page.enable"), this._client.send("Page.getFrameTree").then(({
        frameTree
      }) => {
        if (this._isMainFrame()) {
          this._handleFrameTree(frameTree);
          this._addRendererListeners();
        }
        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)];
        for (const frame2 of localFrames) {
          this._client._sendMayFail("Page.createIsolatedWorld", {
            frameId: frame2._id,
            grantUniveralAccess: true,
            worldName: UTILITY_WORLD_NAME
          });
          for (const initScript of this._crPage._page.allInitScripts()) frame2.evaluateExpression(initScript.source).catch((e) => {
          });
        }
        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ":";
        if (isInitialEmptyPage) {
          lifecycleEventsEnabled.catch((e) => {
          }).then(() => {
            this._eventListeners.push(_eventsHelper2.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
          });
        } else {
          this._firstNonInitialNavigationCommittedFulfill();
          this._eventListeners.push(_eventsHelper2.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
        }
      }), this._client.send("Log.enable", {}), lifecycleEventsEnabled = this._client.send("Page.setLifecycleEventsEnabled", {
        enabled: true
      }), this._client.send("Runtime.enable", {}), this._client.send("Runtime.addBinding", {
        name: _page.PageBinding.kPlaywrightBinding
      }), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: "",
        worldName: UTILITY_WORLD_NAME
      }), this._crPage._networkManager.addSession(this._client, void 0, this._isMainFrame()), this._client.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      })];
      if (!isSettingStorageState) {
        if (this._isMainFrame()) promises.push(this._client.send("Emulation.setFocusEmulationEnabled", {
          enabled: true
        }));
        const options = this._crPage._browserContext._options;
        if (options.bypassCSP) promises.push(this._client.send("Page.setBypassCSP", {
          enabled: true
        }));
        if (options.ignoreHTTPSErrors || options.internalIgnoreHTTPSErrors) promises.push(this._client.send("Security.setIgnoreCertificateErrors", {
          ignore: true
        }));
        if (this._isMainFrame()) promises.push(this._updateViewport());
        if (options.hasTouch) promises.push(this._client.send("Emulation.setTouchEmulationEnabled", {
          enabled: true
        }));
        if (options.javaScriptEnabled === false) promises.push(this._client.send("Emulation.setScriptExecutionDisabled", {
          value: true
        }));
        if (options.userAgent || options.locale) promises.push(this._updateUserAgent());
        if (options.locale) promises.push(emulateLocale(this._client, options.locale));
        if (options.timezoneId) promises.push(emulateTimezone(this._client, options.timezoneId));
        if (!this._crPage._browserContext._browser.options.headful) promises.push(this._setDefaultFontFamilies(this._client));
        promises.push(this._updateGeolocation(true));
        promises.push(this._updateEmulateMedia());
        promises.push(this._updateFileChooserInterception(true));
        for (const initScript of this._crPage._page.allInitScripts()) promises.push(this._evaluateOnNewDocument(initScript, "main"));
        if (screencastOptions) promises.push(this._startVideoRecording(screencastOptions));
      }
      promises.push(this._client.send("Runtime.runIfWaitingForDebugger"));
      promises.push(this._firstNonInitialNavigationCommittedPromise);
      await Promise.all(promises);
    }
    dispose() {
      this._firstNonInitialNavigationCommittedReject(new _errors2.TargetClosedError());
      for (const childSession of this._childSessions) childSession.dispose();
      if (this._parentSession) this._parentSession._childSessions.delete(this);
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
      this._crPage._networkManager.removeSession(this._client);
      this._crPage._sessions.delete(this._targetId);
      this._client.dispose();
    }
    async _navigate(frame2, url, referrer) {
      const response = await this._client.send("Page.navigate", {
        url,
        referrer,
        frameId: frame2._id,
        referrerPolicy: "unsafeUrl"
      });
      if (response.errorText) throw new frames2.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
      return {
        newDocumentId: response.loaderId
      };
    }
    _onLifecycleEvent(event) {
      if (this._eventBelongsToStaleFrame(event.frameId)) return;
      if (event.name === "load") this._page._frameManager.frameLifecycleEvent(event.frameId, "load");
      else if (event.name === "DOMContentLoaded") this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded");
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      if (!frameTree.childFrames) return;
      for (const child of frameTree.childFrames) this._handleFrameTree(child);
    }
    _eventBelongsToStaleFrame(frameId) {
      const frame2 = this._page._frameManager.frame(frameId);
      if (!frame2) return true;
      const session2 = this._crPage._sessionForFrame(frame2);
      return session2 && session2 !== this && !session2._swappedIn;
    }
    _onFrameAttached(frameId, parentFrameId) {
      const frameSession = this._crPage._sessions.get(frameId);
      if (frameSession && frameId !== this._targetId) {
        frameSession._swappedIn = true;
        const frame2 = this._page._frameManager.frame(frameId);
        if (frame2) this._page._frameManager.removeChildFramesRecursively(frame2);
        return;
      }
      if (parentFrameId && !this._page._frameManager.frame(parentFrameId)) {
        return;
      }
      this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      if (this._eventBelongsToStaleFrame(framePayload.id)) return;
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ""), framePayload.name || "", framePayload.loaderId, initial);
      if (!initial) this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameRequestedNavigation(payload) {
      if (this._eventBelongsToStaleFrame(payload.frameId)) return;
      if (payload.disposition === "currentTab") this._page._frameManager.frameRequestedNavigation(payload.frameId);
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      if (this._eventBelongsToStaleFrame(frameId)) return;
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId, reason) {
      if (this._crPage._sessions.has(frameId)) {
        return;
      }
      if (reason === "swap") {
        const frame2 = this._page._frameManager.frame(frameId);
        if (frame2) this._page._frameManager.removeChildFramesRecursively(frame2);
        return;
      }
      this._page._frameManager.frameDetached(frameId);
    }
    _onExecutionContextCreated(contextPayload) {
      const frame2 = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
      if (!frame2 || this._eventBelongsToStaleFrame(frame2._id)) return;
      const delegate = new _crExecutionContext.CRExecutionContext(this._client, contextPayload);
      let worldName = null;
      if (contextPayload.auxData && !!contextPayload.auxData.isDefault) worldName = "main";
      else if (contextPayload.name === UTILITY_WORLD_NAME) worldName = "utility";
      const context = new dom$1.FrameExecutionContext(delegate, frame2, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName) frame2._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    _onExecutionContextDestroyed(executionContextId) {
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const contextId of Array.from(this._contextIdToContext.keys())) this._onExecutionContextDestroyed(contextId);
    }
    _onAttachedToTarget(event) {
      var _this$_page$_frameMan;
      const session2 = this._client.createChildSession(event.sessionId);
      if (event.targetInfo.type === "iframe") {
        const targetId = event.targetInfo.targetId;
        const frame2 = this._page._frameManager.frame(targetId);
        if (!frame2) return;
        this._page._frameManager.removeChildFramesRecursively(frame2);
        const frameSession = new FrameSession(this._crPage, session2, targetId, this);
        this._crPage._sessions.set(targetId, frameSession);
        frameSession._initialize(false).catch((e) => e);
        return;
      }
      if (event.targetInfo.type !== "worker") {
        session2.detach().catch(() => {
        });
        return;
      }
      const url = event.targetInfo.url;
      const worker2 = new _page.Worker(this._page, url);
      this._page._addWorker(event.sessionId, worker2);
      this._workerSessions.set(event.sessionId, session2);
      session2.once("Runtime.executionContextCreated", async (event2) => {
        worker2._createExecutionContext(new _crExecutionContext.CRExecutionContext(session2, event2.context));
      });
      session2._sendMayFail("Runtime.enable");
      this._crPage._networkManager.addSession(session2, (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== void 0 ? _this$_page$_frameMan : void 0).catch(() => {
      });
      session2._sendMayFail("Runtime.runIfWaitingForDebugger");
      session2._sendMayFail("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      });
      session2.on("Target.attachedToTarget", (event2) => this._onAttachedToTarget(event2));
      session2.on("Target.detachedFromTarget", (event2) => this._onDetachedFromTarget(event2));
      session2.on("Runtime.consoleAPICalled", (event2) => {
        const args = event2.args.map((o) => worker2._existingExecutionContext.createHandle(o));
        this._page._addConsoleMessage(event2.type, args, (0, _crProtocolHelper2.toConsoleMessageLocation)(event2.stackTrace));
      });
      session2.on("Runtime.exceptionThrown", (exception) => this._page.emitOnContextOnceInitialized(_browserContext2.BrowserContext.Events.PageError, (0, _crProtocolHelper2.exceptionToError)(exception.exceptionDetails), this._page));
    }
    _onDetachedFromTarget(event) {
      const workerSession = this._workerSessions.get(event.sessionId);
      if (workerSession) {
        workerSession.dispose();
        this._page._removeWorker(event.sessionId);
        return;
      }
      const childFrameSession = this._crPage._sessions.get(event.targetId);
      if (!childFrameSession) return;
      if (childFrameSession._swappedIn) {
        childFrameSession.dispose();
        return;
      }
      this._client.send("Page.enable").catch((e) => null).then(() => {
        if (!childFrameSession._swappedIn) this._page._frameManager.frameDetached(event.targetId);
        childFrameSession.dispose();
      });
    }
    _onWindowOpen(event) {
      this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      const context = this._contextIdToContext.get(event.executionContextId);
      if (!context) return;
      const values = event.args.map((arg) => context.createHandle(arg));
      this._page._addConsoleMessage(event.type, values, (0, _crProtocolHelper2.toConsoleMessageLocation)(event.stackTrace));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this._crPage.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context) await this._page._onBindingCalled(event.payload, context);
      }
    }
    _onDialog(event) {
      if (!this._page._frameManager.frame(this._targetId)) return;
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        await this._client.send("Page.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    _handleException(exceptionDetails) {
      this._page.emitOnContextOnceInitialized(_browserContext2.BrowserContext.Events.PageError, (0, _crProtocolHelper2.exceptionToError)(exceptionDetails), this._page);
    }
    async _onTargetCrashed() {
      this._client._markAsCrashed();
      this._page._didCrash();
    }
    _onLogEntryAdded(event) {
      const {
        level,
        text,
        args,
        source: source2,
        url,
        lineNumber
      } = event.entry;
      if (args) args.map((arg) => (0, _crProtocolHelper2.releaseObject)(this._client, arg.objectId));
      if (source2 !== "worker") {
        const location2 = {
          url: url || "",
          lineNumber: lineNumber || 0,
          columnNumber: 0
        };
        this._page._addConsoleMessage(level, [], location2, text);
      }
    }
    async _onFileChooserOpened(event) {
      if (!event.backendNodeId) return;
      const frame2 = this._page._frameManager.frame(event.frameId);
      if (!frame2) return;
      let handle;
      try {
        const utilityContext = await frame2._utilityContext();
        handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    _willBeginDownload() {
      const originPage = this._crPage._initializedPage;
      if (!originPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
      }
    }
    _onScreencastFrame(payload) {
      this._page.throttleScreencastFrameAck(() => {
        this._client.send("Page.screencastFrameAck", {
          sessionId: payload.sessionId
        }).catch(() => {
        });
      });
      const buffer = Buffer.from(payload.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        frameSwapWallTime: payload.metadata.timestamp ? payload.metadata.timestamp * 1e3 : void 0,
        width: payload.metadata.deviceWidth,
        height: payload.metadata.deviceHeight
      });
    }
    async _createVideoRecorder(screencastId, options) {
      (0, _utils2.assert)(!this._screencastId);
      const ffmpegPath = _registry2.registry.findExecutable("ffmpeg").executablePathOrDie(this._page.attribution.playwright.options.sdkLanguage);
      this._videoRecorder = await _videoRecorder.VideoRecorder.launch(this._crPage._page, ffmpegPath, options);
      this._screencastId = screencastId;
    }
    async _startVideoRecording(options) {
      const screencastId = this._screencastId;
      (0, _utils2.assert)(screencastId);
      this._page.once(_page.Page.Events.Close, () => this._stopVideoRecording().catch(() => {
      }));
      const gotFirstFrame = new Promise((f) => this._client.once("Page.screencastFrame", f));
      await this._startScreencast(this._videoRecorder, {
        format: "jpeg",
        quality: 90,
        maxWidth: options.width,
        maxHeight: options.height
      });
      gotFirstFrame.then(() => {
        this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage.pageOrError());
      });
    }
    async _stopVideoRecording() {
      if (!this._screencastId) return;
      const screencastId = this._screencastId;
      this._screencastId = null;
      const recorder2 = this._videoRecorder;
      this._videoRecorder = null;
      await this._stopScreencast(recorder2);
      await recorder2.stop().catch(() => {
      });
      const video2 = this._crPage._browserContext._browser._takeVideo(screencastId);
      video2 === null || video2 === void 0 || video2.reportFinished();
    }
    async _startScreencast(client, options = {}) {
      this._screencastClients.add(client);
      if (this._screencastClients.size === 1) await this._client.send("Page.startScreencast", options);
    }
    async _stopScreencast(client) {
      this._screencastClients.delete(client);
      if (!this._screencastClients.size) await this._client._sendMayFail("Page.stopScreencast");
    }
    async _updateGeolocation(initial) {
      const geolocation = this._crPage._browserContext._options.geolocation;
      if (!initial || geolocation) await this._client.send("Emulation.setGeolocationOverride", geolocation || {});
    }
    async _updateViewport(preserveWindowBoundaries) {
      if (this._crPage._browserContext._browser.isClank()) return;
      (0, _utils2.assert)(this._isMainFrame());
      const options = this._crPage._browserContext._options;
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize === null) return;
      const viewportSize = emulatedSize.viewport;
      const screenSize = emulatedSize.screen;
      const isLandscape = screenSize.width > screenSize.height;
      const metricsOverride = {
        mobile: !!options.isMobile,
        width: viewportSize.width,
        height: viewportSize.height,
        screenWidth: screenSize.width,
        screenHeight: screenSize.height,
        deviceScaleFactor: options.deviceScaleFactor || 1,
        screenOrientation: !!options.isMobile ? isLandscape ? {
          angle: 90,
          type: "landscapePrimary"
        } : {
          angle: 0,
          type: "portraitPrimary"
        } : {
          angle: 0,
          type: "landscapePrimary"
        },
        dontSetVisibleSize: preserveWindowBoundaries
      };
      if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride)) return;
      const promises = [this._client.send("Emulation.setDeviceMetricsOverride", metricsOverride)];
      if (!preserveWindowBoundaries && this._windowId) {
        let insets = {
          width: 0,
          height: 0
        };
        if (this._crPage._browserContext._browser.options.headful) {
          insets = {
            width: 24,
            height: 88
          };
          if (process.platform === "win32") insets = {
            width: 16,
            height: 88
          };
          else if (process.platform === "linux") insets = {
            width: 8,
            height: 85
          };
          else if (process.platform === "darwin") insets = {
            width: 2,
            height: 80
          };
          if (this._crPage._browserContext.isPersistentContext()) {
            insets.height += 46;
          }
        }
        promises.push(this.setWindowBounds({
          width: viewportSize.width + insets.width,
          height: viewportSize.height + insets.height
        }));
      }
      await Promise.all(promises);
      this._metricsOverride = metricsOverride;
    }
    async windowBounds() {
      const {
        bounds
      } = await this._client.send("Browser.getWindowBounds", {
        windowId: this._windowId
      });
      return bounds;
    }
    async setWindowBounds(bounds) {
      return await this._client.send("Browser.setWindowBounds", {
        windowId: this._windowId,
        bounds
      });
    }
    async _updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const media = emulatedMedia.media === "no-override" ? "" : emulatedMedia.media;
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? "" : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? "" : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? "" : emulatedMedia.forcedColors;
      const features = [{
        name: "prefers-color-scheme",
        value: colorScheme
      }, {
        name: "prefers-reduced-motion",
        value: reducedMotion
      }, {
        name: "forced-colors",
        value: forcedColors
      }];
      await this._client.send("Emulation.setEmulatedMedia", {
        media,
        features
      });
    }
    async _updateUserAgent() {
      const options = this._crPage._browserContext._options;
      await this._client.send("Emulation.setUserAgentOverride", {
        userAgent: options.userAgent || "",
        acceptLanguage: options.locale,
        userAgentMetadata: calculateUserAgentMetadata(options)
      });
    }
    async _setDefaultFontFamilies(session2) {
      const fontFamilies = _defaultFontFamilies.platformToFontFamilies[this._crPage._browserContext._browser._platform()];
      await session2.send("Page.setFontFamilies", fontFamilies);
    }
    async _updateFileChooserInterception(initial) {
      const enabled = this._page.fileChooserIntercepted();
      if (initial && !enabled) return;
      await this._client.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async _evaluateOnNewDocument(initScript, world) {
      const worldName = world === "utility" ? UTILITY_WORLD_NAME : void 0;
      const {
        identifier
      } = await this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: initScript.source,
        worldName
      });
      if (!initScript.internal) this._evaluateOnNewDocumentIdentifiers.push(identifier);
    }
    async _removeEvaluatesOnNewDocument() {
      const identifiers = this._evaluateOnNewDocumentIdentifiers;
      this._evaluateOnNewDocumentIdentifiers = [];
      await Promise.all(identifiers.map((identifier) => this._client.send("Page.removeScriptToEvaluateOnNewDocument", {
        identifier
      })));
    }
    async _getContentFrame(handle) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo || typeof nodeInfo.node.frameId !== "string") return null;
      return this._page._frameManager.frame(nodeInfo.node.frameId);
    }
    async _getOwnerFrame(handle) {
      const documentElement = await handle.evaluateHandle((node) => {
        const doc = node;
        if (doc.documentElement && doc.documentElement.ownerDocument === doc) return doc.documentElement;
        return node.ownerDocument ? node.ownerDocument.documentElement : null;
      });
      if (!documentElement) return null;
      if (!documentElement._objectId) return null;
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: documentElement._objectId
      });
      const frameId = nodeInfo && typeof nodeInfo.node.frameId === "string" ? nodeInfo.node.frameId : null;
      documentElement.dispose();
      return frameId;
    }
    async _getBoundingBox(handle) {
      const result2 = await this._client._sendMayFail("DOM.getBoxModel", {
        objectId: handle._objectId
      });
      if (!result2) return null;
      const quad = result2.model.border;
      const x = Math.min(quad[0], quad[2], quad[4], quad[6]);
      const y = Math.min(quad[1], quad[3], quad[5], quad[7]);
      const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;
      const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;
      const position = await this._framePosition();
      if (!position) return null;
      return {
        x: x + position.x,
        y: y + position.y,
        width,
        height
      };
    }
    async _framePosition() {
      const frame2 = this._page._frameManager.frame(this._targetId);
      if (!frame2) return null;
      if (frame2 === this._page.mainFrame()) return {
        x: 0,
        y: 0
      };
      const element = await frame2.frameElement();
      const box = await element.boundingBox();
      return box;
    }
    async _scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._client.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object")) return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document")) return "error:notconnected";
        throw e;
      });
    }
    async _getContentQuads(handle) {
      const result2 = await this._client._sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result2) return null;
      const position = await this._framePosition();
      if (!position) return null;
      return result2.quads.map((quad) => [{
        x: quad[0] + position.x,
        y: quad[1] + position.y
      }, {
        x: quad[2] + position.x,
        y: quad[3] + position.y
      }, {
        x: quad[4] + position.x,
        y: quad[5] + position.y
      }, {
        x: quad[6] + position.x,
        y: quad[7] + position.y
      }]);
    }
    async _adoptElementHandle(handle, to2) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to2);
    }
    async _adoptBackendNodeId(backendNodeId, to2) {
      const result2 = await this._client._sendMayFail("DOM.resolveNode", {
        backendNodeId,
        executionContextId: to2[contextDelegateSymbol]._contextId
      });
      if (!result2 || result2.object.subtype === "null") throw new Error(dom$1.kUnableToAdoptErrorMessage);
      return to2.createHandle(result2.object).asElement();
    }
  }
  async function emulateLocale(session2, locale) {
    try {
      await session2.send("Emulation.setLocaleOverride", {
        locale
      });
    } catch (exception) {
      if (exception.message.includes("Another locale override is already in effect")) return;
      throw exception;
    }
  }
  async function emulateTimezone(session2, timezoneId) {
    try {
      await session2.send("Emulation.setTimezoneOverride", {
        timezoneId
      });
    } catch (exception) {
      if (exception.message.includes("Timezone override is already in effect")) return;
      if (exception.message.includes("Invalid timezone")) throw new Error(`Invalid timezone ID: ${timezoneId}`);
      throw exception;
    }
  }
  const contextDelegateSymbol = Symbol("delegate");
  function calculateUserAgentMetadata(options) {
    const ua = options.userAgent;
    if (!ua) return void 0;
    const metadata = {
      mobile: !!options.isMobile,
      model: "",
      architecture: "x64",
      platform: "Windows",
      platformVersion: ""
    };
    const androidMatch = ua.match(/Android (\d+(\.\d+)?(\.\d+)?)/);
    const iPhoneMatch = ua.match(/iPhone OS (\d+(_\d+)?)/);
    const iPadMatch = ua.match(/iPad; CPU OS (\d+(_\d+)?)/);
    const macOSMatch = ua.match(/Mac OS X (\d+(_\d+)?(_\d+)?)/);
    const windowsMatch = ua.match(/Windows\D+(\d+(\.\d+)?(\.\d+)?)/);
    if (androidMatch) {
      metadata.platform = "Android";
      metadata.platformVersion = androidMatch[1];
      metadata.architecture = "arm";
    } else if (iPhoneMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPhoneMatch[1];
      metadata.architecture = "arm";
    } else if (iPadMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPadMatch[1];
      metadata.architecture = "arm";
    } else if (macOSMatch) {
      metadata.platform = "macOS";
      metadata.platformVersion = macOSMatch[1];
      if (!ua.includes("Intel")) metadata.architecture = "arm";
    } else if (windowsMatch) {
      metadata.platform = "Windows";
      metadata.platformVersion = windowsMatch[1];
    } else if (ua.toLowerCase().includes("linux")) {
      metadata.platform = "Linux";
    }
    if (ua.includes("ARM")) metadata.architecture = "arm";
    return metadata;
  }
  return crPage;
}
var crServiceWorker = {};
var hasRequiredCrServiceWorker;
function requireCrServiceWorker() {
  if (hasRequiredCrServiceWorker) return crServiceWorker;
  hasRequiredCrServiceWorker = 1;
  Object.defineProperty(crServiceWorker, "__esModule", {
    value: true
  });
  crServiceWorker.CRServiceWorker = void 0;
  var _page = requirePage$1();
  var _crExecutionContext = crExecutionContext;
  var _crNetworkManager = requireCrNetworkManager();
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _browserContext2 = requireBrowserContext$1();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class CRServiceWorker extends _page.Worker {
    constructor(browserContext2, session2, url) {
      super(browserContext2, url);
      this._browserContext = void 0;
      this._networkManager = void 0;
      this._session = void 0;
      this._session = session2;
      this._browserContext = browserContext2;
      if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS) this._networkManager = new _crNetworkManager.CRNetworkManager(null, this);
      session2.once("Runtime.executionContextCreated", (event) => {
        this._createExecutionContext(new _crExecutionContext.CRExecutionContext(session2, event.context));
      });
      if (this._networkManager && this._isNetworkInspectionEnabled()) {
        this.updateRequestInterception();
        this.updateExtraHTTPHeaders();
        this.updateHttpCredentials();
        this.updateOffline();
        this._networkManager.addSession(
          session2,
          void 0,
          true
          /* isMain */
        ).catch(() => {
        });
      }
      session2.send("Runtime.enable", {}).catch((e) => {
      });
      session2.send("Runtime.runIfWaitingForDebugger").catch((e) => {
      });
      session2.on("Inspector.targetReloadedAfterCrash", () => {
        session2._sendMayFail("Runtime.runIfWaitingForDebugger", {});
      });
    }
    didClose() {
      var _this$_networkManager;
      (_this$_networkManager = this._networkManager) === null || _this$_networkManager === void 0 || _this$_networkManager.removeSession(this._session);
      this._session.dispose();
      super.didClose();
    }
    async updateOffline() {
      var _this$_networkManager2;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager2 = this._networkManager) === null || _this$_networkManager2 === void 0 ? void 0 : _this$_networkManager2.setOffline(!!this._browserContext._options.offline).catch(() => {
      }));
    }
    async updateHttpCredentials() {
      var _this$_networkManager3;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager3 = this._networkManager) === null || _this$_networkManager3 === void 0 ? void 0 : _this$_networkManager3.authenticate(this._browserContext._options.httpCredentials || null).catch(() => {
      }));
    }
    async updateExtraHTTPHeaders() {
      var _this$_networkManager4;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager4 = this._networkManager) === null || _this$_networkManager4 === void 0 ? void 0 : _this$_networkManager4.setExtraHTTPHeaders(this._browserContext._options.extraHTTPHeaders || []).catch(() => {
      }));
    }
    async updateRequestInterception() {
      var _this$_networkManager5;
      if (!this._isNetworkInspectionEnabled()) return;
      await ((_this$_networkManager5 = this._networkManager) === null || _this$_networkManager5 === void 0 ? void 0 : _this$_networkManager5.setRequestInterception(this.needsRequestInterception()).catch(() => {
      }));
    }
    needsRequestInterception() {
      return this._isNetworkInspectionEnabled() && !!this._browserContext._requestInterceptor;
    }
    reportRequestFinished(request2, response) {
      this._browserContext.emit(_browserContext2.BrowserContext.Events.RequestFinished, {
        request: request2,
        response
      });
    }
    requestFailed(request2, _canceled) {
      this._browserContext.emit(_browserContext2.BrowserContext.Events.RequestFailed, request2);
    }
    requestReceivedResponse(response) {
      this._browserContext.emit(_browserContext2.BrowserContext.Events.Response, response);
    }
    requestStarted(request2, route) {
      this._browserContext.emit(_browserContext2.BrowserContext.Events.Request, request2);
      if (route) {
        var _this$_browserContext, _this$_browserContext2;
        const r = new network2.Route(request2, route);
        if ((_this$_browserContext = (_this$_browserContext2 = this._browserContext)._requestInterceptor) !== null && _this$_browserContext !== void 0 && _this$_browserContext.call(_this$_browserContext2, r, request2)) return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    _isNetworkInspectionEnabled() {
      return this._browserContext._options.serviceWorkers !== "block";
    }
  }
  crServiceWorker.CRServiceWorker = CRServiceWorker;
  return crServiceWorker;
}
var hasRequiredCrBrowser;
function requireCrBrowser() {
  if (hasRequiredCrBrowser) return crBrowser;
  hasRequiredCrBrowser = 1;
  Object.defineProperty(crBrowser, "__esModule", {
    value: true
  });
  crBrowser.CRBrowserContext = crBrowser.CRBrowser = void 0;
  var _path2 = _interopRequireDefault2(require$$1);
  var _browser2 = requireBrowser$1();
  var _browserContext2 = requireBrowserContext$1();
  var _utils2 = requireUtils();
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _page = requirePage$1();
  var _frames = requireFrames();
  var _crConnection2 = crConnection;
  var _crPage = requireCrPage();
  var _crProtocolHelper2 = crProtocolHelper;
  var _crServiceWorker = requireCrServiceWorker();
  var _artifact2 = artifact$1;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class CRBrowser extends _browser2.Browser {
    static async connect(parent, transport2, options, devtools) {
      options = {
        ...options
      };
      const connection2 = new _crConnection2.CRConnection(transport2, options.protocolLogger, options.browserLogsCollector);
      const browser2 = new CRBrowser(parent, connection2, options);
      browser2._devtools = devtools;
      if (browser2.isClank()) browser2._isCollocatedWithServer = false;
      const session2 = connection2.rootSession;
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      const version2 = await session2.send("Browser.getVersion");
      browser2._version = version2.product.substring(version2.product.indexOf("/") + 1);
      browser2._userAgent = version2.userAgent;
      browser2.options.headful = !version2.userAgent.includes("Headless");
      if (!options.persistent) {
        await session2.send("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        return browser2;
      }
      browser2._defaultContext = new CRBrowserContext(browser2, void 0, options.persistent);
      await Promise.all([session2.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      }).then(async () => {
        await session2.send("Target.getTargetInfo");
      }), browser2._defaultContext._initialize()]);
      await browser2._waitForAllPagesToBeInitialized();
      return browser2;
    }
    constructor(parent, connection2, options) {
      super(parent, options);
      this._connection = void 0;
      this._session = void 0;
      this._clientRootSessionPromise = null;
      this._contexts = /* @__PURE__ */ new Map();
      this._crPages = /* @__PURE__ */ new Map();
      this._backgroundPages = /* @__PURE__ */ new Map();
      this._serviceWorkers = /* @__PURE__ */ new Map();
      this._devtools = void 0;
      this._version = "";
      this._tracingRecording = false;
      this._tracingClient = void 0;
      this._userAgent = "";
      this._connection = connection2;
      this._session = this._connection.rootSession;
      this._connection.on(_crConnection2.ConnectionEvents.Disconnected, () => this._didDisconnect());
      this._session.on("Target.attachedToTarget", this._onAttachedToTarget.bind(this));
      this._session.on("Target.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this._session.on("Browser.downloadWillBegin", this._onDownloadWillBegin.bind(this));
      this._session.on("Browser.downloadProgress", this._onDownloadProgress.bind(this));
    }
    async doCreateNewContext(options) {
      const proxy = options.proxyOverride || options.proxy;
      let proxyBypassList = void 0;
      if (proxy) {
        if (process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK) proxyBypassList = proxy.bypass;
        else proxyBypassList = "<-loopback>" + (proxy.bypass ? `,${proxy.bypass}` : "");
      }
      const {
        browserContextId
      } = await this._session.send("Target.createBrowserContext", {
        disposeOnDetach: true,
        proxyServer: proxy ? proxy.server : void 0,
        proxyBypassList
      });
      const context = new CRBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _platform() {
      if (this._userAgent.includes("Windows")) return "win";
      if (this._userAgent.includes("Macintosh")) return "mac";
      return "linux";
    }
    isClank() {
      return this.options.name === "clank";
    }
    async _waitForAllPagesToBeInitialized() {
      await Promise.all([...this._crPages.values()].map((page2) => page2.pageOrError()));
    }
    _onAttachedToTarget({
      targetInfo,
      sessionId,
      waitingForDebugger
    }) {
      if (targetInfo.type === "browser") return;
      const session2 = this._session.createChildSession(sessionId);
      (0, _utils2.assert)(targetInfo.browserContextId, "targetInfo: " + JSON.stringify(targetInfo, null, 2));
      let context = this._contexts.get(targetInfo.browserContextId) || null;
      if (!context) {
        context = this._defaultContext;
      }
      if (targetInfo.type === "other" && targetInfo.url.startsWith("devtools://devtools") && this._devtools) {
        this._devtools.install(session2);
        return;
      }
      const treatOtherAsPage = targetInfo.type === "other" && process.env.PW_CHROMIUM_ATTACH_TO_OTHER;
      if (!context || targetInfo.type === "other" && !treatOtherAsPage) {
        session2.detach().catch(() => {
        });
        return;
      }
      (0, _utils2.assert)(!this._crPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils2.assert)(!this._backgroundPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils2.assert)(!this._serviceWorkers.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      if (targetInfo.type === "background_page") {
        const backgroundPage = new _crPage.CRPage(session2, targetInfo.targetId, context, null, {
          hasUIWindow: false,
          isBackgroundPage: true
        });
        this._backgroundPages.set(targetInfo.targetId, backgroundPage);
        return;
      }
      if (targetInfo.type === "page" || treatOtherAsPage) {
        const opener = targetInfo.openerId ? this._crPages.get(targetInfo.openerId) || null : null;
        const crPage2 = new _crPage.CRPage(session2, targetInfo.targetId, context, opener, {
          hasUIWindow: targetInfo.type === "page",
          isBackgroundPage: false
        });
        this._crPages.set(targetInfo.targetId, crPage2);
        return;
      }
      if (targetInfo.type === "service_worker") {
        const serviceWorker = new _crServiceWorker.CRServiceWorker(context, session2, targetInfo.url);
        this._serviceWorkers.set(targetInfo.targetId, serviceWorker);
        context.emit(CRBrowserContext.CREvents.ServiceWorker, serviceWorker);
        return;
      }
      session2.detach().catch(() => {
      });
    }
    _onDetachedFromTarget(payload) {
      const targetId = payload.targetId;
      const crPage2 = this._crPages.get(targetId);
      if (crPage2) {
        this._crPages.delete(targetId);
        crPage2.didClose();
        return;
      }
      const backgroundPage = this._backgroundPages.get(targetId);
      if (backgroundPage) {
        this._backgroundPages.delete(targetId);
        backgroundPage.didClose();
        return;
      }
      const serviceWorker = this._serviceWorkers.get(targetId);
      if (serviceWorker) {
        this._serviceWorkers.delete(targetId);
        serviceWorker.didClose();
        return;
      }
    }
    _didDisconnect() {
      for (const crPage2 of this._crPages.values()) crPage2.didClose();
      this._crPages.clear();
      for (const backgroundPage of this._backgroundPages.values()) backgroundPage.didClose();
      this._backgroundPages.clear();
      for (const serviceWorker of this._serviceWorkers.values()) serviceWorker.didClose();
      this._serviceWorkers.clear();
      this._didClose();
    }
    _findOwningPage(frameId) {
      for (const crPage2 of this._crPages.values()) {
        const frame2 = crPage2._page._frameManager.frame(frameId);
        if (frame2) return crPage2;
      }
      return null;
    }
    _onDownloadWillBegin(payload) {
      const page2 = this._findOwningPage(payload.frameId);
      if (!page2) {
        return;
      }
      page2.willBeginDownload();
      let originPage = page2._initializedPage;
      if (!originPage && page2._opener) originPage = page2._opener._initializedPage;
      if (!originPage) return;
      this._downloadCreated(originPage, payload.guid, payload.url, payload.suggestedFilename);
    }
    _onDownloadProgress(payload) {
      if (payload.state === "completed") this._downloadFinished(payload.guid, "");
      if (payload.state === "canceled") this._downloadFinished(payload.guid, this._closeReason || "canceled");
    }
    async _closePage(crPage2) {
      await this._session.send("Target.closeTarget", {
        targetId: crPage2._targetId
      });
    }
    async newBrowserCDPSession() {
      return await this._connection.createBrowserSession();
    }
    async startTracing(page2, options = {}) {
      (0, _utils2.assert)(!this._tracingRecording, "Cannot start recording trace while already recording trace.");
      this._tracingClient = page2 ? page2._delegate._mainFrameSession._client : this._session;
      const defaultCategories = ["-*", "devtools.timeline", "v8.execute", "disabled-by-default-devtools.timeline", "disabled-by-default-devtools.timeline.frame", "toplevel", "blink.console", "blink.user_timing", "latencyInfo", "disabled-by-default-devtools.timeline.stack", "disabled-by-default-v8.cpu_profiler", "disabled-by-default-v8.cpu_profiler.hires"];
      const {
        screenshots = false,
        categories = defaultCategories
      } = options;
      if (screenshots) categories.push("disabled-by-default-devtools.screenshot");
      this._tracingRecording = true;
      await this._tracingClient.send("Tracing.start", {
        transferMode: "ReturnAsStream",
        categories: categories.join(",")
      });
    }
    async stopTracing() {
      (0, _utils2.assert)(this._tracingClient, "Tracing was not started.");
      const [event] = await Promise.all([new Promise((f) => this._tracingClient.once("Tracing.tracingComplete", f)), this._tracingClient.send("Tracing.end")]);
      const tracingPath = _path2.default.join(this.options.artifactsDir, (0, _utils2.createGuid)() + ".crtrace");
      await (0, _crProtocolHelper2.saveProtocolStream)(this._tracingClient, event.stream, tracingPath);
      this._tracingRecording = false;
      const artifact2 = new _artifact2.Artifact(this, tracingPath);
      artifact2.reportFinished();
      return artifact2;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async _clientRootSession() {
      if (!this._clientRootSessionPromise) this._clientRootSessionPromise = this._connection.createBrowserSession();
      return this._clientRootSessionPromise;
    }
  }
  crBrowser.CRBrowser = CRBrowser;
  class CRBrowserContext extends _browserContext2.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
      this._authenticateProxyViaCredentials();
    }
    async _initialize() {
      (0, _utils2.assert)(!Array.from(this._browser._crPages.values()).some((page2) => page2._browserContext === this));
      const promises = [super._initialize()];
      if (this._browser.options.name !== "clank" && this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser._session.send("Browser.setDownloadBehavior", {
          behavior: this._options.acceptDownloads === "accept" ? "allowAndName" : "deny",
          browserContextId: this._browserContextId,
          downloadPath: this._browser.options.downloadsPath,
          eventsEnabled: true
        }));
      }
      await Promise.all(promises);
    }
    _crPages() {
      return [...this._browser._crPages.values()].filter((crPage2) => crPage2._browserContext === this);
    }
    pages() {
      return this._crPages().map((crPage2) => crPage2._initializedPage).filter(Boolean);
    }
    async newPageDelegate() {
      (0, _browserContext2.assertBrowserContextIsNotOwned)(this);
      const oldKeys = this._browser.isClank() ? new Set(this._browser._crPages.keys()) : void 0;
      let {
        targetId
      } = await this._browser._session.send("Target.createTarget", {
        url: "about:blank",
        browserContextId: this._browserContextId
      });
      if (oldKeys) {
        const newKeys = new Set(this._browser._crPages.keys());
        for (const key of oldKeys) newKeys.delete(key);
        for (const key of newKeys) {
          const page2 = this._browser._crPages.get(key);
          if (page2._opener) newKeys.delete(key);
        }
        (0, _utils2.assert)(newKeys.size === 1);
        [targetId] = [...newKeys];
      }
      return this._browser._crPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._session.send("Storage.getCookies", {
        browserContextId: this._browserContextId
      });
      return network2.filterCookies(cookies.map((c) => {
        const copy = {
          sameSite: "Lax",
          ...c
        };
        delete copy.size;
        delete copy.priority;
        delete copy.session;
        delete copy.sameParty;
        delete copy.sourceScheme;
        delete copy.sourcePort;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      await this._browser._session.send("Storage.setCookies", {
        cookies: network2.rewriteCookies(cookies),
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._session.send("Storage.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = /* @__PURE__ */ new Map([
        ["geolocation", "geolocation"],
        ["midi", "midi"],
        ["notifications", "notifications"],
        ["camera", "videoCapture"],
        ["microphone", "audioCapture"],
        ["background-sync", "backgroundSync"],
        ["ambient-light-sensor", "sensors"],
        ["accelerometer", "sensors"],
        ["gyroscope", "sensors"],
        ["magnetometer", "sensors"],
        ["accessibility-events", "accessibilityEvents"],
        ["clipboard-read", "clipboardReadWrite"],
        ["clipboard-write", "clipboardSanitizedWrite"],
        ["payment-handler", "paymentHandler"],
        // chrome-specific permissions we have.
        ["midi-sysex", "midiSysex"],
        ["storage-access", "storageAccess"]
      ]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission) throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser._session.send("Browser.grantPermissions", {
        origin: origin === "*" ? void 0 : origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser._session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext2.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      for (const page2 of this.pages()) await page2._delegate.updateGeolocation();
    }
    async setExtraHTTPHeaders(headers2) {
      this._options.extraHTTPHeaders = headers2;
      for (const page2 of this.pages()) await page2._delegate.updateExtraHTTPHeaders();
      for (const sw of this.serviceWorkers()) await sw.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent2) {
      this._options.userAgent = userAgent2;
      for (const page2 of this.pages()) await page2._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page2 of this.pages()) await page2._delegate.updateOffline();
      for (const sw of this.serviceWorkers()) await sw.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page2 of this.pages()) await page2._delegate.updateHttpCredentials();
      for (const sw of this.serviceWorkers()) await sw.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      for (const page2 of this.pages()) await page2._delegate.addInitScript(initScript);
    }
    async doRemoveNonInternalInitScripts() {
      for (const page2 of this.pages()) await page2._delegate.removeNonInternalInitScripts();
    }
    async doUpdateRequestInterception() {
      for (const page2 of this.pages()) await page2._delegate.updateRequestInterception();
      for (const sw of this.serviceWorkers()) await sw.updateRequestInterception();
    }
    async doClose(reason) {
      const openedBeforeUnloadDialogs = [];
      for (const crPage2 of this._crPages()) {
        const dialogs = [...crPage2._page._frameManager._openedDialogs].filter((dialog2) => dialog2.type() === "beforeunload");
        openedBeforeUnloadDialogs.push(...dialogs);
      }
      await Promise.all(openedBeforeUnloadDialogs.map((dialog2) => dialog2.dismiss()));
      if (!this._browserContextId) {
        await this.stopVideoRecording();
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._session.send("Target.disposeBrowserContext", {
        browserContextId: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
      for (const [targetId, serviceWorker] of this._browser._serviceWorkers) {
        if (serviceWorker._browserContext !== this) continue;
        serviceWorker.didClose();
        this._browser._serviceWorkers.delete(targetId);
      }
    }
    async stopVideoRecording() {
      await Promise.all(this._crPages().map((crPage2) => crPage2._mainFrameSession._stopVideoRecording()));
    }
    onClosePersistent() {
      for (const [targetId, backgroundPage] of this._browser._backgroundPages.entries()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage) {
          backgroundPage.didClose();
          this._browser._backgroundPages.delete(targetId);
        }
      }
    }
    async clearCache() {
      for (const page2 of this._crPages()) await page2._networkManager.clearCache();
    }
    async cancelDownload(guid) {
      await this._browser._session.send("Browser.cancelDownload", {
        guid,
        browserContextId: this._browserContextId
      });
    }
    backgroundPages() {
      const result2 = [];
      for (const backgroundPage of this._browser._backgroundPages.values()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage) result2.push(backgroundPage._initializedPage);
      }
      return result2;
    }
    serviceWorkers() {
      return Array.from(this._browser._serviceWorkers.values()).filter((serviceWorker) => serviceWorker._browserContext === this);
    }
    async newCDPSession(page2) {
      let targetId = null;
      if (page2 instanceof _page.Page) {
        targetId = page2._delegate._targetId;
      } else if (page2 instanceof _frames.Frame) {
        const session2 = page2._page._delegate._sessions.get(page2._id);
        if (!session2) throw new Error(`This frame does not have a separate CDP session, it is a part of the parent frame's session`);
        targetId = session2._targetId;
      } else {
        throw new Error("page: expected Page or Frame");
      }
      const rootSession = await this._browser._clientRootSession();
      return rootSession.attachToTarget(targetId);
    }
  }
  crBrowser.CRBrowserContext = CRBrowserContext;
  CRBrowserContext.CREvents = {
    BackgroundPage: "backgroundpage",
    ServiceWorker: "serviceworker"
  };
  return crBrowser;
}
var transport$1 = {};
Object.defineProperty(transport$1, "__esModule", {
  value: true
});
transport$1.PipeTransport = void 0;
var _utils$r = requireUtils();
let PipeTransport$1 = class PipeTransport {
  constructor(pipeWrite, pipeRead, closeable, endian = "le") {
    this._pipeWrite = void 0;
    this._data = Buffer.from([]);
    this._waitForNextTask = (0, _utils$r.makeWaitForNextTask)();
    this._closed = false;
    this._bytesLeft = 0;
    this.onmessage = void 0;
    this.onclose = void 0;
    this._endian = void 0;
    this._closeableStream = void 0;
    this._pipeWrite = pipeWrite;
    this._endian = endian;
    this._closeableStream = closeable;
    pipeRead.on("data", (buffer) => this._dispatch(buffer));
    pipeRead.on("close", () => {
      this._closed = true;
      if (this.onclose) this.onclose();
    });
    this.onmessage = void 0;
    this.onclose = void 0;
  }
  send(message) {
    if (this._closed) throw new Error("Pipe has been closed");
    const data = Buffer.from(message, "utf-8");
    const dataLength = Buffer.alloc(4);
    if (this._endian === "be") dataLength.writeUInt32BE(data.length, 0);
    else dataLength.writeUInt32LE(data.length, 0);
    this._pipeWrite.write(dataLength);
    this._pipeWrite.write(data);
  }
  close() {
    this._closeableStream.close();
  }
  _dispatch(buffer) {
    this._data = Buffer.concat([this._data, buffer]);
    while (true) {
      if (!this._bytesLeft && this._data.length < 4) {
        break;
      }
      if (!this._bytesLeft) {
        this._bytesLeft = this._endian === "be" ? this._data.readUInt32BE(0) : this._data.readUInt32LE(0);
        this._data = this._data.slice(4);
      }
      if (!this._bytesLeft || this._data.length < this._bytesLeft) {
        break;
      }
      const message = this._data.slice(0, this._bytesLeft);
      this._data = this._data.slice(this._bytesLeft);
      this._bytesLeft = 0;
      this._waitForNextTask(() => {
        if (this.onmessage) this.onmessage(message.toString("utf-8"));
      });
    }
  }
};
transport$1.PipeTransport = PipeTransport$1;
var chromiumSwitches = {};
Object.defineProperty(chromiumSwitches, "__esModule", {
  value: true
});
chromiumSwitches.chromiumSwitches = void 0;
chromiumSwitches.chromiumSwitches = [
  "--disable-field-trial-config",
  // https://source.chromium.org/chromium/chromium/src/+/main:testing/variations/README.md
  "--disable-background-networking",
  "--disable-background-timer-throttling",
  "--disable-backgrounding-occluded-windows",
  "--disable-back-forward-cache",
  // Avoids surprises like main request not being intercepted during page.goBack().
  "--disable-breakpad",
  "--disable-client-side-phishing-detection",
  "--disable-component-extensions-with-background-pages",
  "--disable-component-update",
  // Avoids unneeded network activity after startup.
  "--no-default-browser-check",
  "--disable-default-apps",
  "--disable-dev-shm-usage",
  "--disable-extensions",
  // AvoidUnnecessaryBeforeUnloadCheckSync - https://github.com/microsoft/playwright/issues/14047
  // Translate - https://github.com/microsoft/playwright/issues/16126
  // HttpsUpgrades - https://github.com/microsoft/playwright/pull/27605
  // PaintHolding - https://github.com/microsoft/playwright/issues/28023
  // ThirdPartyStoragePartitioning - https://github.com/microsoft/playwright/issues/32230
  // LensOverlay - Hides the Lens feature in the URL address bar. Its not working in unofficial builds.
  // PlzDedicatedWorker - https://github.com/microsoft/playwright/issues/31747
  "--disable-features=ImprovedCookieControls,LazyFrameLoading,GlobalMediaControls,DestroyProfileOnBrowserClose,MediaRouter,DialMediaRouteProvider,AcceptCHFrame,AutoExpandDetailsElement,CertificateTransparencyComponentUpdater,AvoidUnnecessaryBeforeUnloadCheckSync,Translate,HttpsUpgrades,PaintHolding,ThirdPartyStoragePartitioning,LensOverlay,PlzDedicatedWorker",
  "--allow-pre-commit-input",
  "--disable-hang-monitor",
  "--disable-ipc-flooding-protection",
  "--disable-popup-blocking",
  "--disable-prompt-on-repost",
  "--disable-renderer-backgrounding",
  "--force-color-profile=srgb",
  "--metrics-recording-only",
  "--no-first-run",
  "--enable-automation",
  "--password-store=basic",
  "--use-mock-keychain",
  // See https://chromium-review.googlesource.com/c/chromium/src/+/2436773
  "--no-service-autorun",
  "--export-tagged-pdf",
  // https://chromium-review.googlesource.com/c/chromium/src/+/4853540
  "--disable-search-engine-choice-screen",
  // https://issues.chromium.org/41491762
  "--unsafely-disable-devtools-self-xss-warnings"
];
var hasRequiredAndroid$1;
function requireAndroid$1() {
  if (hasRequiredAndroid$1) return android$1;
  hasRequiredAndroid$1 = 1;
  Object.defineProperty(android$1, "__esModule", {
    value: true
  });
  android$1.AndroidDevice = android$1.Android = void 0;
  var _utilsBundle2 = utilsBundle;
  var _events2 = require$$0$1;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _utils2 = requireUtils();
  var _fileUtils2 = requireFileUtils();
  var _browserContext2 = requireBrowserContext$1();
  var _progress2 = progress;
  var _crBrowser = requireCrBrowser();
  var _helper2 = helper;
  var _transport2 = transport$1;
  var _debugLogger2 = debugLogger;
  var _processLauncher = requireProcessLauncher();
  var _timeoutSettings2 = timeoutSettings;
  var _instrumentation2 = instrumentation;
  var _chromiumSwitches = chromiumSwitches;
  var _registry2 = requireRegistry();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const ARTIFACTS_FOLDER = _path2.default.join(_os2.default.tmpdir(), "playwright-artifacts-");
  class Android extends _instrumentation2.SdkObject {
    constructor(parent, backend) {
      super(parent, "android");
      this._backend = void 0;
      this._devices = /* @__PURE__ */ new Map();
      this._timeoutSettings = void 0;
      this._backend = backend;
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async devices(options) {
      const devices2 = (await this._backend.devices(options)).filter((d) => d.status === "device");
      const newSerials = /* @__PURE__ */ new Set();
      for (const d of devices2) {
        newSerials.add(d.serial);
        if (this._devices.has(d.serial)) continue;
        const device = await AndroidDevice.create(this, d, options);
        this._devices.set(d.serial, device);
      }
      for (const d of this._devices.keys()) {
        if (!newSerials.has(d)) this._devices.delete(d);
      }
      return [...this._devices.values()];
    }
    _deviceClosed(device) {
      this._devices.delete(device.serial);
    }
  }
  android$1.Android = Android;
  class AndroidDevice extends _instrumentation2.SdkObject {
    constructor(android2, backend, model, options) {
      super(android2, "android-device");
      this._backend = void 0;
      this.model = void 0;
      this.serial = void 0;
      this._options = void 0;
      this._driverPromise = void 0;
      this._lastId = 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._pollingWebViews = void 0;
      this._timeoutSettings = void 0;
      this._webViews = /* @__PURE__ */ new Map();
      this._browserConnections = /* @__PURE__ */ new Set();
      this._android = void 0;
      this._isClosed = false;
      this._android = android2;
      this._backend = backend;
      this.model = model;
      this.serial = backend.serial;
      this._options = options;
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings(android2._timeoutSettings);
    }
    static async create(android2, backend, options) {
      await backend.init();
      const model = await backend.runCommand("shell:getprop ro.product.model");
      const device = new AndroidDevice(android2, backend, model.toString().trim(), options);
      await device._init();
      return device;
    }
    async _init() {
      await this._refreshWebViews();
      const poll = () => {
        this._pollingWebViews = setTimeout(() => this._refreshWebViews().then(poll).catch(() => {
          this.close().catch(() => {
          });
        }), 500);
      };
      poll();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async shell(command) {
      const result2 = await this._backend.runCommand(`shell:${command}`);
      await this._refreshWebViews();
      return result2;
    }
    async open(command) {
      return await this._backend.open(`${command}`);
    }
    async screenshot() {
      return await this._backend.runCommand(`shell:screencap -p`);
    }
    async _driver() {
      if (this._isClosed) return;
      if (!this._driverPromise) this._driverPromise = this._installDriver();
      return this._driverPromise;
    }
    async _installDriver() {
      (0, _utilsBundle2.debug)("pw:android")("Stopping the old driver");
      await this.shell(`am force-stop com.microsoft.playwright.androiddriver`);
      if (!this._options.omitDriverInstall) {
        (0, _utilsBundle2.debug)("pw:android")("Uninstalling the old driver");
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`);
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`);
        (0, _utilsBundle2.debug)("pw:android")("Installing the new driver");
        const executable = _registry2.registry.findExecutable("android");
        const packageManagerCommand = (0, _utils2.getPackageManagerExecCommand)();
        for (const file of ["android-driver.apk", "android-driver-target.apk"]) {
          const fullName = _path2.default.join(executable.directory, file);
          if (!_fs2.default.existsSync(fullName)) throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);
          await this.installApk(await _fs2.default.promises.readFile(fullName));
        }
      } else {
        (0, _utilsBundle2.debug)("pw:android")("Skipping the driver installation");
      }
      (0, _utilsBundle2.debug)("pw:android")("Starting the new driver");
      this.shell("am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner").catch((e) => (0, _utilsBundle2.debug)("pw:android")(e));
      const socket = await this._waitForLocalAbstract("playwright_android_driver_socket");
      const transport2 = new _transport2.PipeTransport(socket, socket, socket, "be");
      transport2.onmessage = (message) => {
        const response = JSON.parse(message);
        const {
          id,
          result: result2,
          error
        } = response;
        const callback = this._callbacks.get(id);
        if (!callback) return;
        if (error) callback.reject(new Error(error));
        else callback.fulfill(result2);
        this._callbacks.delete(id);
      };
      return transport2;
    }
    async _waitForLocalAbstract(socketName) {
      let socket;
      (0, _utilsBundle2.debug)("pw:android")(`Polling the socket localabstract:${socketName}`);
      while (!socket) {
        try {
          socket = await this._backend.open(`localabstract:${socketName}`);
        } catch (e) {
          await new Promise((f) => setTimeout(f, 250));
        }
      }
      (0, _utilsBundle2.debug)("pw:android")(`Connected to localabstract:${socketName}`);
      return socket;
    }
    async send(method, params = {}) {
      params.timeout = this._timeoutSettings.timeout(params);
      const driver = await this._driver();
      if (!driver) throw new Error("Device is closed");
      const id = ++this._lastId;
      const result2 = new Promise((fulfill, reject) => this._callbacks.set(id, {
        fulfill,
        reject
      }));
      driver.send(JSON.stringify({
        id,
        method,
        params
      }));
      return result2;
    }
    async close() {
      if (this._isClosed) return;
      this._isClosed = true;
      if (this._pollingWebViews) clearTimeout(this._pollingWebViews);
      for (const connection2 of this._browserConnections) await connection2.close();
      if (this._driverPromise) {
        const driver = await this._driver();
        driver === null || driver === void 0 || driver.close();
      }
      await this._backend.close();
      this._android._deviceClosed(this);
      this.emit(AndroidDevice.Events.Close);
    }
    async launchBrowser(pkg = "com.android.chrome", options) {
      (0, _utilsBundle2.debug)("pw:android")("Force-stopping", pkg);
      await this._backend.runCommand(`shell:am force-stop ${pkg}`);
      const socketName = (0, _utils2.isUnderTest)() ? "webview_devtools_remote_playwright_test" : "playwright_" + (0, _utils2.createGuid)() + "_devtools_remote";
      const commandLine = this._defaultArgs(options, socketName).join(" ");
      (0, _utilsBundle2.debug)("pw:android")("Starting", pkg, commandLine);
      await this._backend.runCommand(`shell:echo "${Buffer.from(commandLine).toString("base64")}" | base64 -d > /data/local/tmp/chrome-command-line`);
      await this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`);
      const browserContext2 = await this._connectToBrowser(socketName, options);
      await this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`);
      return browserContext2;
    }
    _defaultArgs(options, socketName) {
      const chromeArguments = ["_", "--disable-fre", "--no-default-browser-check", `--remote-debugging-socket-name=${socketName}`, ..._chromiumSwitches.chromiumSwitches, ...this._innerDefaultArgs(options)];
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const chromeArguments = [];
      if (proxy) {
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (proxy.bypass) proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>")) proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0) chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    async connectToWebView(socketName) {
      const webView = this._webViews.get(socketName);
      if (!webView) throw new Error("WebView has been closed");
      return await this._connectToBrowser(socketName);
    }
    async _connectToBrowser(socketName, options = {}) {
      const socket = await this._waitForLocalAbstract(socketName);
      const androidBrowser = new AndroidBrowser(this, socket);
      await androidBrowser._init();
      this._browserConnections.add(androidBrowser);
      const artifactsDir = await _fs2.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const cleanupArtifactsDir = async () => {
        const errors2 = await (0, _fileUtils2.removeFolders)([artifactsDir]);
        for (let i = 0; i < (errors2 || []).length; ++i) (0, _utilsBundle2.debug)("pw:android")(`exception while removing ${artifactsDir}: ${errors2[i]}`);
      };
      _processLauncher.gracefullyCloseSet.add(cleanupArtifactsDir);
      socket.on("close", async () => {
        _processLauncher.gracefullyCloseSet.delete(cleanupArtifactsDir);
        cleanupArtifactsDir().catch((e) => (0, _utilsBundle2.debug)("pw:android")(`could not cleanup artifacts dir: ${e}`));
      });
      const browserOptions = {
        name: "clank",
        isChromium: true,
        slowMo: 0,
        persistent: {
          ...options,
          noDefaultViewport: true
        },
        artifactsDir,
        downloadsPath: artifactsDir,
        tracesDir: artifactsDir,
        browserProcess: new ClankBrowserProcess(androidBrowser),
        proxy: options.proxy,
        protocolLogger: _helper2.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger2.RecentLogsCollector(),
        originalLaunchOptions: {}
      };
      (0, _browserContext2.validateBrowserContextOptions)(options, browserOptions);
      const browser2 = await _crBrowser.CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions);
      const controller = new _progress2.ProgressController((0, _instrumentation2.serverSideCallMetadata)(), this);
      const defaultContext = browser2._defaultContext;
      await controller.run(async (progress2) => {
        await defaultContext._loadDefaultContextAsIs(progress2);
      });
      return defaultContext;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async installApk(content, options) {
      const args = options && options.args ? options.args : ["-r", "-t", "-S"];
      (0, _utilsBundle2.debug)("pw:android")("Opening install socket");
      const installSocket = await this._backend.open(`shell:cmd package install ${args.join(" ")} ${content.length}`);
      (0, _utilsBundle2.debug)("pw:android")("Writing driver bytes: " + content.length);
      await installSocket.write(content);
      const success = await new Promise((f) => installSocket.on("data", f));
      (0, _utilsBundle2.debug)("pw:android")("Written driver bytes: " + success);
      installSocket.close();
    }
    async push(content, path2, mode = 420) {
      const socket = await this._backend.open(`sync:`);
      const sendHeader = async (command, length) => {
        const buffer = Buffer.alloc(command.length + 4);
        buffer.write(command, 0);
        buffer.writeUInt32LE(length, command.length);
        await socket.write(buffer);
      };
      const send = async (command, data) => {
        await sendHeader(command, data.length);
        await socket.write(data);
      };
      await send("SEND", Buffer.from(`${path2},${mode}`));
      const maxChunk = 65535;
      for (let i = 0; i < content.length; i += maxChunk) await send("DATA", content.slice(i, i + maxChunk));
      await sendHeader("DONE", Date.now() / 1e3 | 0);
      const result2 = await new Promise((f) => socket.once("data", f));
      const code = result2.slice(0, 4).toString();
      if (code !== "OKAY") throw new Error("Could not push: " + code);
      socket.close();
    }
    async _refreshWebViews() {
      const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split("\n");
      if (this._isClosed) return;
      const socketNames = /* @__PURE__ */ new Set();
      for (const line of sockets) {
        const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);
        if (!matchSocketName) continue;
        const socketName = matchSocketName[1];
        socketNames.add(socketName);
        if (this._webViews.has(socketName)) continue;
        const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\d*)/);
        let pid = -1;
        if (match && match[1]) pid = +match[1];
        const pkg = await this._extractPkg(pid);
        if (this._isClosed) return;
        const webView = {
          pid,
          pkg,
          socketName
        };
        this._webViews.set(socketName, webView);
        this.emit(AndroidDevice.Events.WebViewAdded, webView);
      }
      for (const p of this._webViews.keys()) {
        if (!socketNames.has(p)) {
          this._webViews.delete(p);
          this.emit(AndroidDevice.Events.WebViewRemoved, p);
        }
      }
    }
    async _extractPkg(pid) {
      let pkg = "";
      if (pid === -1) return pkg;
      const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split("\n");
      for (const proc of procs) {
        const match = proc.match(/[^\s]+\s+(\d+).*$/);
        if (!match) continue;
        pkg = proc.substring(proc.lastIndexOf(" ") + 1);
      }
      return pkg;
    }
  }
  android$1.AndroidDevice = AndroidDevice;
  AndroidDevice.Events = {
    WebViewAdded: "webViewAdded",
    WebViewRemoved: "webViewRemoved",
    Close: "close"
  };
  class AndroidBrowser extends _events2.EventEmitter {
    constructor(device, socket) {
      super();
      this.device = void 0;
      this._socket = void 0;
      this._receiver = void 0;
      this._waitForNextTask = (0, _utils2.makeWaitForNextTask)();
      this.onmessage = void 0;
      this.onclose = void 0;
      this.setMaxListeners(0);
      this.device = device;
      this._socket = socket;
      this._socket.on("close", () => {
        this._waitForNextTask(() => {
          if (this.onclose) this.onclose();
        });
      });
      this._receiver = new _utilsBundle2.wsReceiver();
      this._receiver.on("message", (message) => {
        this._waitForNextTask(() => {
          if (this.onmessage) this.onmessage(JSON.parse(message));
        });
      });
    }
    async _init() {
      await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\r
Upgrade: WebSocket\r
Connection: Upgrade\r
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r
Sec-WebSocket-Version: 13\r
\r
`));
      await new Promise((f) => this._socket.once("data", f));
      this._socket.on("data", (data) => this._receiver._write(data, "binary", () => {
      }));
    }
    async send(s) {
      await this._socket.write(encodeWebFrame(JSON.stringify(s)));
    }
    async close() {
      this._socket.close();
    }
  }
  function encodeWebFrame(data) {
    return _utilsBundle2.wsSender.frame(Buffer.from(data), {
      opcode: 1,
      mask: true,
      fin: true,
      readOnly: true
    })[0];
  }
  class ClankBrowserProcess {
    constructor(browser2) {
      this._browser = void 0;
      this.onclose = void 0;
      this._browser = browser2;
    }
    async kill() {
    }
    async close() {
      await this._browser.close();
    }
  }
  return android$1;
}
var backendAdb = {};
Object.defineProperty(backendAdb, "__esModule", {
  value: true
});
backendAdb.AdbBackend = void 0;
var _utilsBundle$5 = utilsBundle;
var net = _interopRequireWildcard$8(require$$8);
var _events$8 = require$$0$1;
var _utils$q = requireUtils();
function _getRequireWildcardCache$8(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$8 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$8(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$8(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class AdbBackend {
  async devices(options = {}) {
    const result2 = await runCommand("host:devices", options.host, options.port);
    const lines = result2.toString().trim().split("\n");
    return lines.map((line) => {
      const [serial, status] = line.trim().split("	");
      return new AdbDevice(serial, status, options.host, options.port);
    });
  }
}
backendAdb.AdbBackend = AdbBackend;
class AdbDevice {
  constructor(serial, status, host, port) {
    this.serial = void 0;
    this.status = void 0;
    this.host = void 0;
    this.port = void 0;
    this._closed = false;
    this.serial = serial;
    this.status = status;
    this.host = host;
    this.port = port;
  }
  async init() {
  }
  async close() {
    this._closed = true;
  }
  runCommand(command) {
    if (this._closed) throw new Error("Device is closed");
    return runCommand(command, this.host, this.port, this.serial);
  }
  async open(command) {
    if (this._closed) throw new Error("Device is closed");
    const result2 = await open(command, this.host, this.port, this.serial);
    result2.becomeSocket();
    return result2;
  }
}
async function runCommand(command, host = "127.0.0.1", port = 5037, serial) {
  (0, _utilsBundle$5.debug)("pw:adb:runCommand")(command, serial);
  const socket = new BufferedSocketWrapper(command, net.createConnection({
    host,
    port
  }));
  try {
    if (serial) {
      await socket.write(encodeMessage(`host:transport:${serial}`));
      const status2 = await socket.read(4);
      (0, _utils$q.assert)(status2.toString() === "OKAY", status2.toString());
    }
    await socket.write(encodeMessage(command));
    const status = await socket.read(4);
    (0, _utils$q.assert)(status.toString() === "OKAY", status.toString());
    let commandOutput;
    if (!command.startsWith("shell:")) {
      const remainingLength = parseInt((await socket.read(4)).toString(), 16);
      commandOutput = await socket.read(remainingLength);
    } else {
      commandOutput = await socket.readAll();
    }
    return commandOutput;
  } finally {
    socket.close();
  }
}
async function open(command, host = "127.0.0.1", port = 5037, serial) {
  const socket = new BufferedSocketWrapper(command, net.createConnection({
    host,
    port
  }));
  if (serial) {
    await socket.write(encodeMessage(`host:transport:${serial}`));
    const status2 = await socket.read(4);
    (0, _utils$q.assert)(status2.toString() === "OKAY", status2.toString());
  }
  await socket.write(encodeMessage(command));
  const status = await socket.read(4);
  (0, _utils$q.assert)(status.toString() === "OKAY", status.toString());
  return socket;
}
function encodeMessage(message) {
  let lenHex = message.length.toString(16);
  lenHex = "0".repeat(4 - lenHex.length) + lenHex;
  return Buffer.from(lenHex + message);
}
class BufferedSocketWrapper extends _events$8.EventEmitter {
  constructor(command, socket) {
    super();
    this.guid = (0, _utils$q.createGuid)();
    this._socket = void 0;
    this._buffer = Buffer.from([]);
    this._isSocket = false;
    this._notifyReader = void 0;
    this._connectPromise = void 0;
    this._isClosed = false;
    this._command = void 0;
    this._command = command;
    this._socket = socket;
    this._connectPromise = new Promise((f) => this._socket.on("connect", f));
    this._socket.on("data", (data) => {
      (0, _utilsBundle$5.debug)("pw:adb:data")(data.toString());
      if (this._isSocket) {
        this.emit("data", data);
        return;
      }
      this._buffer = Buffer.concat([this._buffer, data]);
      if (this._notifyReader) this._notifyReader();
    });
    this._socket.on("close", () => {
      this._isClosed = true;
      if (this._notifyReader) this._notifyReader();
      this.close();
      this.emit("close");
    });
    this._socket.on("error", (error) => this.emit("error", error));
  }
  async write(data) {
    (0, _utilsBundle$5.debug)("pw:adb:send")(data.toString().substring(0, 100) + "...");
    await this._connectPromise;
    await new Promise((f) => this._socket.write(data, f));
  }
  close() {
    if (this._isClosed) return;
    (0, _utilsBundle$5.debug)("pw:adb")("Close " + this._command);
    this._socket.destroy();
  }
  async read(length) {
    await this._connectPromise;
    (0, _utils$q.assert)(!this._isSocket, "Can not read by length in socket mode");
    while (this._buffer.length < length) await new Promise((f) => this._notifyReader = f);
    const result2 = this._buffer.slice(0, length);
    this._buffer = this._buffer.slice(length);
    (0, _utilsBundle$5.debug)("pw:adb:recv")(result2.toString().substring(0, 100) + "...");
    return result2;
  }
  async readAll() {
    while (!this._isClosed) await new Promise((f) => this._notifyReader = f);
    return this._buffer;
  }
  becomeSocket() {
    (0, _utils$q.assert)(!this._buffer.length);
    this._isSocket = true;
  }
}
var chromium$1 = {};
var browserType$1 = {};
var transport = {};
Object.defineProperty(transport, "__esModule", {
  value: true
});
transport.perMessageDeflate = transport.WebSocketTransport = void 0;
var _utilsBundle$4 = utilsBundle;
var _utils$p = requireUtils();
var _happyEyeballs = requireHappyEyeballs();
const perMessageDeflate = transport.perMessageDeflate = {
  zlibDeflateOptions: {
    level: 3
  },
  zlibInflateOptions: {
    chunkSize: 10 * 1024
  },
  threshold: 10 * 1024
};
class WebSocketTransport {
  static async connect(progress2, url, headers2, followRedirects, debugLogHeader) {
    return await WebSocketTransport._connect(progress2, url, headers2 || {}, {
      follow: !!followRedirects,
      hadRedirects: false
    }, debugLogHeader);
  }
  static async _connect(progress2, url, headers2, redirect, debugLogHeader) {
    const logUrl = stripQueryParams(url);
    progress2 === null || progress2 === void 0 || progress2.log(`<ws connecting> ${logUrl}`);
    const transport2 = new WebSocketTransport(progress2, url, logUrl, headers2, redirect.follow && redirect.hadRedirects, debugLogHeader);
    let success = false;
    progress2 === null || progress2 === void 0 || progress2.cleanupWhenAborted(async () => {
      if (!success) await transport2.closeAndWait().catch((e) => null);
    });
    const result2 = await new Promise((fulfill, reject) => {
      transport2._ws.on("open", async () => {
        progress2 === null || progress2 === void 0 || progress2.log(`<ws connected> ${logUrl}`);
        fulfill({
          transport: transport2
        });
      });
      transport2._ws.on("error", (event) => {
        progress2 === null || progress2 === void 0 || progress2.log(`<ws connect error> ${logUrl} ${event.message}`);
        reject(new Error("WebSocket error: " + event.message));
        transport2._ws.close();
      });
      transport2._ws.on("unexpected-response", (request2, response) => {
        if (redirect.follow && !redirect.hadRedirects && (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307 || response.statusCode === 308)) {
          fulfill({
            redirect: response
          });
          transport2._ws.close();
          return;
        }
        for (let i = 0; i < response.rawHeaders.length; i += 2) {
          if (debugLogHeader && response.rawHeaders[i] === debugLogHeader) progress2 === null || progress2 === void 0 || progress2.log(response.rawHeaders[i + 1]);
        }
        const chunks = [];
        const errorPrefix = `${logUrl} ${response.statusCode} ${response.statusMessage}`;
        response.on("data", (chunk) => chunks.push(chunk));
        response.on("close", () => {
          const error = chunks.length ? `${errorPrefix}
${Buffer.concat(chunks)}` : errorPrefix;
          progress2 === null || progress2 === void 0 || progress2.log(`<ws unexpected response> ${error}`);
          reject(new Error("WebSocket error: " + error));
          transport2._ws.close();
        });
      });
    });
    if (result2.redirect) {
      const newHeaders = Object.fromEntries(Object.entries(headers2 || {}).filter(([name2]) => {
        return !name2.includes("access-key") && name2.toLowerCase() !== "authorization";
      }));
      return WebSocketTransport._connect(progress2, result2.redirect.headers.location, newHeaders, {
        follow: true,
        hadRedirects: true
      }, debugLogHeader);
    }
    success = true;
    return transport2;
  }
  constructor(progress2, url, logUrl, headers2, followRedirects, debugLogHeader) {
    var _progress$timeUntilDe;
    this._ws = void 0;
    this._progress = void 0;
    this._logUrl = void 0;
    this.onmessage = void 0;
    this.onclose = void 0;
    this.wsEndpoint = void 0;
    this.headers = [];
    this.wsEndpoint = url;
    this._logUrl = logUrl;
    this._ws = new _utilsBundle$4.ws(url, [], {
      maxPayload: 256 * 1024 * 1024,
      // 256Mb,
      // Prevent internal http client error when passing negative timeout.
      handshakeTimeout: Math.max((_progress$timeUntilDe = progress2 === null || progress2 === void 0 ? void 0 : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== void 0 ? _progress$timeUntilDe : 3e4, 1),
      headers: headers2,
      followRedirects,
      agent: /^(https|wss):\/\//.test(url) ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
      perMessageDeflate
    });
    this._ws.on("upgrade", (response) => {
      for (let i = 0; i < response.rawHeaders.length; i += 2) {
        this.headers.push({
          name: response.rawHeaders[i],
          value: response.rawHeaders[i + 1]
        });
        if (debugLogHeader && response.rawHeaders[i] === debugLogHeader) progress2 === null || progress2 === void 0 || progress2.log(response.rawHeaders[i + 1]);
      }
    });
    this._progress = progress2;
    const messageWrap = (0, _utils$p.makeWaitForNextTask)();
    this._ws.addEventListener("message", (event) => {
      messageWrap(() => {
        const eventData = event.data;
        let parsedJson;
        try {
          parsedJson = JSON.parse(eventData);
        } catch (e) {
          var _this$_progress;
          (_this$_progress = this._progress) === null || _this$_progress === void 0 || _this$_progress.log(`<closing ws> Closing websocket due to malformed JSON. eventData=${eventData} e=${e === null || e === void 0 ? void 0 : e.message}`);
          this._ws.close();
          return;
        }
        try {
          if (this.onmessage) this.onmessage.call(null, parsedJson);
        } catch (e) {
          var _this$_progress2;
          (_this$_progress2 = this._progress) === null || _this$_progress2 === void 0 || _this$_progress2.log(`<closing ws> Closing websocket due to failed onmessage callback. eventData=${eventData} e=${e === null || e === void 0 ? void 0 : e.message}`);
          this._ws.close();
        }
      });
    });
    this._ws.addEventListener("close", (event) => {
      var _this$_progress3;
      (_this$_progress3 = this._progress) === null || _this$_progress3 === void 0 || _this$_progress3.log(`<ws disconnected> ${logUrl} code=${event.code} reason=${event.reason}`);
      if (this.onclose) this.onclose.call(null, event.reason);
    });
    this._ws.addEventListener("error", (error) => {
      var _this$_progress4;
      return (_this$_progress4 = this._progress) === null || _this$_progress4 === void 0 ? void 0 : _this$_progress4.log(`<ws error> ${logUrl} ${error.type} ${error.message}`);
    });
  }
  send(message) {
    this._ws.send(JSON.stringify(message));
  }
  close() {
    var _this$_progress5;
    (_this$_progress5 = this._progress) === null || _this$_progress5 === void 0 || _this$_progress5.log(`<ws disconnecting> ${this._logUrl}`);
    this._ws.close();
  }
  async closeAndWait() {
    if (this._ws.readyState === _utilsBundle$4.ws.CLOSED) return;
    const promise = new Promise((f) => this._ws.once("close", f));
    this.close();
    await promise;
  }
}
transport.WebSocketTransport = WebSocketTransport;
function stripQueryParams(url) {
  try {
    const u = new URL(url);
    u.search = "";
    u.hash = "";
    return u.toString();
  } catch {
    return url;
  }
}
var pipeTransport = {};
Object.defineProperty(pipeTransport, "__esModule", {
  value: true
});
pipeTransport.PipeTransport = void 0;
var _utils$o = requireUtils();
var _debugLogger$7 = debugLogger;
class PipeTransport2 {
  constructor(pipeWrite, pipeRead) {
    this._pipeRead = void 0;
    this._pipeWrite = void 0;
    this._pendingBuffers = [];
    this._waitForNextTask = (0, _utils$o.makeWaitForNextTask)();
    this._closed = false;
    this._onclose = void 0;
    this.onmessage = void 0;
    this._pipeRead = pipeRead;
    this._pipeWrite = pipeWrite;
    pipeRead.on("data", (buffer) => this._dispatch(buffer));
    pipeRead.on("close", () => {
      this._closed = true;
      if (this._onclose) this._onclose.call(null);
    });
    pipeRead.on("error", (e) => _debugLogger$7.debugLogger.log("error", e));
    pipeWrite.on("error", (e) => _debugLogger$7.debugLogger.log("error", e));
    this.onmessage = void 0;
  }
  get onclose() {
    return this._onclose;
  }
  set onclose(onclose) {
    this._onclose = onclose;
    if (onclose && !this._pipeRead.readable) onclose();
  }
  send(message) {
    if (this._closed) throw new Error("Pipe has been closed");
    this._pipeWrite.write(JSON.stringify(message));
    this._pipeWrite.write("\0");
  }
  close() {
    throw new Error("unimplemented");
  }
  _dispatch(buffer) {
    let end = buffer.indexOf("\0");
    if (end === -1) {
      this._pendingBuffers.push(buffer);
      return;
    }
    this._pendingBuffers.push(buffer.slice(0, end));
    const message = Buffer.concat(this._pendingBuffers).toString();
    this._waitForNextTask(() => {
      if (this.onmessage) this.onmessage.call(null, JSON.parse(message));
    });
    let start = end + 1;
    end = buffer.indexOf("\0", start);
    while (end !== -1) {
      const message2 = buffer.toString(void 0, start, end);
      this._waitForNextTask(() => {
        if (this.onmessage) this.onmessage.call(null, JSON.parse(message2));
      });
      start = end + 1;
      end = buffer.indexOf("\0", start);
    }
    this._pendingBuffers = [buffer.slice(start)];
  }
}
pipeTransport.PipeTransport = PipeTransport2;
var hasRequiredBrowserType$1;
function requireBrowserType$1() {
  if (hasRequiredBrowserType$1) return browserType$1;
  hasRequiredBrowserType$1 = 1;
  Object.defineProperty(browserType$1, "__esModule", {
    value: true
  });
  browserType$1.kNoXServerRunningError = browserType$1.BrowserType = browserType$1.BrowserReadyState = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var os = _interopRequireWildcard2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _browserContext2 = requireBrowserContext$1();
  var _registry2 = requireRegistry();
  var _transport2 = transport;
  var _processLauncher = requireProcessLauncher();
  var _pipeTransport = pipeTransport;
  var _progress2 = progress;
  var _timeoutSettings2 = timeoutSettings;
  var _utils2 = requireUtils();
  var _fileUtils2 = requireFileUtils();
  var _helper2 = helper;
  var _debugLogger2 = debugLogger;
  var _instrumentation2 = instrumentation;
  var _protocolError2 = protocolError;
  var _socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  browserType$1.kNoXServerRunningError = "Looks like you launched a headed browser without having a XServer running.\nSet either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright.\n\n<3 Playwright Team";
  class BrowserReadyState {
    constructor() {
      this._wsEndpoint = new _utils2.ManualPromise();
    }
    onBrowserExit() {
      this._wsEndpoint.resolve(void 0);
    }
    async waitUntilReady() {
      const wsEndpoint = await this._wsEndpoint;
      return {
        wsEndpoint
      };
    }
  }
  browserType$1.BrowserReadyState = BrowserReadyState;
  class BrowserType extends _instrumentation2.SdkObject {
    constructor(parent, browserName) {
      super(parent, "browser-type");
      this._name = void 0;
      this._useBidi = false;
      this.attribution.browserType = this;
      this._name = browserName;
    }
    executablePath() {
      return _registry2.registry.findExecutable(this._name).executablePath(this.attribution.playwright.options.sdkLanguage) || "";
    }
    name() {
      return this._name;
    }
    async launch(metadata, options, protocolLogger) {
      options = this._validateLaunchOptions(options);
      if (this._useBidi) options.useWebSocket = true;
      const controller = new _progress2.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser2 = await controller.run((progress2) => {
        const seleniumHubUrl = options.__testHookSeleniumRemoteURL || process.env.SELENIUM_REMOTE_URL;
        if (seleniumHubUrl) return this._launchWithSeleniumHub(progress2, seleniumHubUrl, options);
        return this._innerLaunchWithRetries(progress2, options, void 0, _helper2.helper.debugProtocolLogger(protocolLogger)).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
      }, _timeoutSettings2.TimeoutSettings.launchTimeout(options));
      return browser2;
    }
    async launchPersistentContext(metadata, userDataDir, options) {
      const launchOptions = this._validateLaunchOptions(options);
      if (this._useBidi) launchOptions.useWebSocket = true;
      const controller = new _progress2.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser2 = await controller.run(async (progress2) => {
        var _options$clientCertif;
        let clientCertificatesProxy;
        if ((_options$clientCertif = options.clientCertificates) !== null && _options$clientCertif !== void 0 && _options$clientCertif.length) {
          var _clientCertificatesPr;
          clientCertificatesProxy = new _socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
          launchOptions.proxyOverride = await ((_clientCertificatesPr = clientCertificatesProxy) === null || _clientCertificatesPr === void 0 ? void 0 : _clientCertificatesPr.listen());
          options = {
            ...options
          };
          options.internalIgnoreHTTPSErrors = true;
        }
        progress2.cleanupWhenAborted(() => {
          var _clientCertificatesPr2;
          return (_clientCertificatesPr2 = clientCertificatesProxy) === null || _clientCertificatesPr2 === void 0 ? void 0 : _clientCertificatesPr2.close();
        });
        const browser22 = await this._innerLaunchWithRetries(progress2, launchOptions, options, _helper2.helper.debugProtocolLogger(), userDataDir).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
        browser22._defaultContext._clientCertificatesProxy = clientCertificatesProxy;
        return browser22;
      }, _timeoutSettings2.TimeoutSettings.launchTimeout(launchOptions));
      return browser2._defaultContext;
    }
    async _innerLaunchWithRetries(progress2, options, persistent, protocolLogger, userDataDir) {
      try {
        return await this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
      } catch (error) {
        const errorMessage = typeof error === "object" && typeof error.message === "string" ? error.message : "";
        if (errorMessage.includes("Inconsistency detected by ld.so")) {
          progress2.log(`<restarting browser due to hitting race condition in glibc>`);
          return this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
        }
        throw error;
      }
    }
    async _innerLaunch(progress2, options, persistent, protocolLogger, maybeUserDataDir) {
      options.proxy = options.proxy ? (0, _browserContext2.normalizeProxySettings)(options.proxy) : void 0;
      const browserLogsCollector = new _debugLogger2.RecentLogsCollector();
      const {
        browserProcess,
        userDataDir,
        artifactsDir,
        transport: transport2
      } = await this._launchProcess(progress2, options, !!persistent, browserLogsCollector, maybeUserDataDir);
      if (options.__testHookBeforeCreateBrowser) await options.__testHookBeforeCreateBrowser();
      const browserOptions = {
        name: this._name,
        isChromium: this._name === "chromium",
        channel: options.channel,
        slowMo: options.slowMo,
        persistent,
        headful: !options.headless,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        browserProcess,
        customExecutablePath: options.executablePath,
        proxy: options.proxy,
        protocolLogger,
        browserLogsCollector,
        wsEndpoint: options.useWebSocket ? transport2.wsEndpoint : void 0,
        originalLaunchOptions: options
      };
      if (persistent) (0, _browserContext2.validateBrowserContextOptions)(persistent, browserOptions);
      copyTestHooks(options, browserOptions);
      const browser2 = await this.connectToTransport(transport2, browserOptions);
      browser2._userDataDirForTest = userDataDir;
      if (persistent && !options.ignoreAllDefaultArgs) await browser2._defaultContext._loadDefaultContext(progress2);
      return browser2;
    }
    async _launchProcess(progress2, options, isPersistent, browserLogsCollector, userDataDir) {
      var _await$readyState$wai;
      const {
        ignoreDefaultArgs,
        ignoreAllDefaultArgs,
        args = [],
        executablePath = null,
        handleSIGINT = true,
        handleSIGTERM = true,
        handleSIGHUP = true
      } = options;
      const env2 = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
      await this._createArtifactDirs(options);
      const tempDirectories = [];
      const artifactsDir = await _fs2.default.promises.mkdtemp(_path2.default.join(os.tmpdir(), "playwright-artifacts-"));
      tempDirectories.push(artifactsDir);
      if (userDataDir) {
        if (!await (0, _fileUtils2.existsAsync)(userDataDir)) await _fs2.default.promises.mkdir(userDataDir, {
          recursive: true,
          mode: 448
        });
      } else {
        userDataDir = await _fs2.default.promises.mkdtemp(_path2.default.join(os.tmpdir(), `playwright_${this._name}dev_profile-`));
        tempDirectories.push(userDataDir);
      }
      await this.prepareUserDataDir(options, userDataDir);
      const browserArguments = [];
      if (ignoreAllDefaultArgs) browserArguments.push(...args);
      else if (ignoreDefaultArgs) browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir).filter((arg) => ignoreDefaultArgs.indexOf(arg) === -1));
      else browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir));
      let executable;
      if (executablePath) {
        if (!await (0, _fileUtils2.existsAsync)(executablePath)) throw new Error(`Failed to launch ${this._name} because executable doesn't exist at ${executablePath}`);
        executable = executablePath;
      } else {
        const registryExecutable = _registry2.registry.findExecutable(options.channel || this._name);
        if (!registryExecutable || registryExecutable.browserName !== this._name) throw new Error(`Unsupported ${this._name} channel "${options.channel}"`);
        executable = registryExecutable.executablePathOrDie(this.attribution.playwright.options.sdkLanguage);
        await _registry2.registry.validateHostRequirementsForExecutablesIfNeeded([registryExecutable], this.attribution.playwright.options.sdkLanguage);
      }
      const readyState = this.readyState(options);
      let transport2 = void 0;
      let browserProcess = void 0;
      const {
        launchedProcess,
        gracefullyClose,
        kill
      } = await (0, _processLauncher.launchProcess)({
        command: executable,
        args: browserArguments,
        env: this.amendEnvironment(env2, userDataDir, executable, browserArguments),
        handleSIGINT,
        handleSIGTERM,
        handleSIGHUP,
        log: (message) => {
          readyState === null || readyState === void 0 || readyState.onBrowserOutput(message);
          progress2.log(message);
          browserLogsCollector.log(message);
        },
        stdio: "pipe",
        tempDirectories,
        attemptToGracefullyClose: async () => {
          if (options.__testHookGracefullyClose) await options.__testHookGracefullyClose();
          this.attemptToGracefullyCloseBrowser(transport2);
        },
        onExit: (exitCode, signal) => {
          readyState === null || readyState === void 0 || readyState.onBrowserExit();
          if (browserProcess && browserProcess.onclose) browserProcess.onclose(exitCode, signal);
        }
      });
      async function closeOrKill(timeout) {
        let timer;
        try {
          await Promise.race([gracefullyClose(), new Promise((resolve, reject) => timer = setTimeout(reject, timeout))]);
        } catch (ignored) {
          await kill().catch((ignored2) => {
          });
        } finally {
          clearTimeout(timer);
        }
      }
      browserProcess = {
        onclose: void 0,
        process: launchedProcess,
        close: () => closeOrKill(options.__testHookBrowserCloseTimeout || _timeoutSettings2.DEFAULT_TIMEOUT),
        kill
      };
      progress2.cleanupWhenAborted(() => closeOrKill(progress2.timeUntilDeadline()));
      const wsEndpoint = (_await$readyState$wai = await (readyState === null || readyState === void 0 ? void 0 : readyState.waitUntilReady())) === null || _await$readyState$wai === void 0 ? void 0 : _await$readyState$wai.wsEndpoint;
      if (options.useWebSocket) {
        transport2 = await _transport2.WebSocketTransport.connect(progress2, wsEndpoint);
      } else {
        const stdio = launchedProcess.stdio;
        transport2 = new _pipeTransport.PipeTransport(stdio[3], stdio[4]);
      }
      return {
        browserProcess,
        artifactsDir,
        userDataDir,
        transport: transport2
      };
    }
    async _createArtifactDirs(options) {
      if (options.downloadsPath) await _fs2.default.promises.mkdir(options.downloadsPath, {
        recursive: true
      });
      if (options.tracesDir) await _fs2.default.promises.mkdir(options.tracesDir, {
        recursive: true
      });
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      throw new Error("CDP connections are only supported by Chromium");
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      throw new Error("Connecting to SELENIUM_REMOTE_URL is only supported by Chromium");
    }
    _validateLaunchOptions(options) {
      const {
        devtools = false
      } = options;
      let {
        headless = !devtools,
        downloadsPath,
        proxy
      } = options;
      if ((0, _utils2.debugMode)()) headless = false;
      if (downloadsPath && !_path2.default.isAbsolute(downloadsPath)) downloadsPath = _path2.default.join(process.cwd(), downloadsPath);
      if (this.attribution.playwright.options.socksProxyPort) proxy = {
        server: `socks5://127.0.0.1:${this.attribution.playwright.options.socksProxyPort}`
      };
      return {
        ...options,
        devtools,
        headless,
        downloadsPath,
        proxy
      };
    }
    _createUserDataDirArgMisuseError(userDataDirArg) {
      switch (this.attribution.playwright.options.sdkLanguage) {
        case "java":
          return new Error(`Pass userDataDir parameter to 'BrowserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        case "python":
          return new Error(`Pass user_data_dir parameter to 'browser_type.launch_persistent_context(user_data_dir, **kwargs)' instead of specifying '${userDataDirArg}' argument`);
        case "csharp":
          return new Error(`Pass userDataDir parameter to 'BrowserType.LaunchPersistentContextAsync(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        default:
          return new Error(`Pass userDataDir parameter to 'browserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
      }
    }
    _rewriteStartupLog(error) {
      if (!(0, _protocolError2.isProtocolError)(error)) return error;
      return this.doRewriteStartupLog(error);
    }
    readyState(options) {
      return void 0;
    }
    async prepareUserDataDir(options, userDataDir) {
    }
  }
  browserType$1.BrowserType = BrowserType;
  function copyTestHooks(from, to2) {
    for (const [key, value] of Object.entries(from)) {
      if (key.startsWith("__testHook")) to2[key] = value;
    }
  }
  return browserType$1;
}
var crDevTools = {};
Object.defineProperty(crDevTools, "__esModule", {
  value: true
});
crDevTools.CRDevTools = void 0;
var _fs$5 = _interopRequireDefault$7(require$$0$2);
function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
const kBindingName = "__pw_devtools__";
class CRDevTools {
  constructor(preferencesPath) {
    this._preferencesPath = void 0;
    this._prefs = void 0;
    this._savePromise = void 0;
    this.__testHookOnBinding = void 0;
    this._preferencesPath = preferencesPath;
    this._savePromise = Promise.resolve();
  }
  install(session2) {
    session2.on("Runtime.bindingCalled", async (event) => {
      if (event.name !== kBindingName) return;
      const parsed = JSON.parse(event.payload);
      let result2 = void 0;
      if (this.__testHookOnBinding) this.__testHookOnBinding(parsed);
      if (parsed.method === "getPreferences") {
        if (this._prefs === void 0) {
          try {
            const json = await _fs$5.default.promises.readFile(this._preferencesPath, "utf8");
            this._prefs = JSON.parse(json);
          } catch (e) {
            this._prefs = {};
          }
        }
        result2 = this._prefs;
      } else if (parsed.method === "setPreference") {
        this._prefs[parsed.params[0]] = parsed.params[1];
        this._save();
      } else if (parsed.method === "removePreference") {
        delete this._prefs[parsed.params[0]];
        this._save();
      } else if (parsed.method === "clearPreferences") {
        this._prefs = {};
        this._save();
      }
      session2.send("Runtime.evaluate", {
        expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result2)})`,
        contextId: event.executionContextId
      }).catch((e) => null);
    });
    Promise.all([session2.send("Runtime.enable"), session2.send("Runtime.addBinding", {
      name: kBindingName
    }), session2.send("Page.enable"), session2.send("Page.addScriptToEvaluateOnNewDocument", {
      source: `
        (() => {
          const init = () => {
            // Lazy init happens when InspectorFrontendHost is initialized.
            // At this point DevToolsHost is ready to be used.
            const host = window.DevToolsHost;
            const old = host.sendMessageToEmbedder.bind(host);
            host.sendMessageToEmbedder = message => {
              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))
                window.${kBindingName}(message);
              else
                old(message);
            };
          };
          let value;
          Object.defineProperty(window, 'InspectorFrontendHost', {
            configurable: true,
            enumerable: true,
            get() { return value; },
            set(v) { value = v; init(); },
          });
        })()
      `
    }), session2.send("Runtime.runIfWaitingForDebugger")]).catch((e) => null);
  }
  _save() {
    this._savePromise = this._savePromise.then(async () => {
      await _fs$5.default.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch((e) => null);
    });
  }
}
crDevTools.CRDevTools = CRDevTools;
var hasRequiredChromium;
function requireChromium() {
  if (hasRequiredChromium) return chromium$1;
  hasRequiredChromium = 1;
  Object.defineProperty(chromium$1, "__esModule", {
    value: true
  });
  chromium$1.Chromium = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _crBrowser = requireCrBrowser();
  var _processLauncher = requireProcessLauncher();
  var _crConnection2 = crConnection;
  var _browserType = requireBrowserType$1();
  var _transport2 = transport;
  var _crDevTools = crDevTools;
  var _browser2 = requireBrowser$1();
  var _network2 = requireNetwork$2();
  var _userAgent2 = userAgent;
  var _ascii2 = ascii;
  var _utils2 = requireUtils();
  var _fileUtils2 = requireFileUtils();
  var _debugLogger2 = debugLogger;
  var _progress2 = progress;
  var _timeoutSettings2 = timeoutSettings;
  var _helper2 = helper;
  var _registry2 = requireRegistry();
  var _manualPromise2 = requireManualPromise();
  var _browserContext2 = requireBrowserContext$1();
  var _chromiumSwitches = chromiumSwitches;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const ARTIFACTS_FOLDER = _path2.default.join(_os2.default.tmpdir(), "playwright-artifacts-");
  class Chromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "chromium");
      this._devtools = void 0;
      if ((0, _utils2.debugMode)()) this._devtools = this._createDevTools();
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      const controller = new _progress2.ProgressController(metadata, this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        return await this._connectOverCDPInternal(progress2, endpointURL, options);
      }, _timeoutSettings2.TimeoutSettings.timeout({
        timeout
      }));
    }
    async _connectOverCDPInternal(progress2, endpointURL, options, onClose) {
      let headersMap;
      if (options.headers) headersMap = (0, _utils2.headersArrayToObject)(options.headers, false);
      if (!headersMap) headersMap = {
        "User-Agent": (0, _userAgent2.getUserAgent)()
      };
      else if (headersMap && !Object.keys(headersMap).some((key) => key.toLowerCase() === "user-agent")) headersMap["User-Agent"] = (0, _userAgent2.getUserAgent)();
      const artifactsDir = await _fs2.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const wsEndpoint = await urlToWSEndpoint2(progress2, endpointURL, headersMap);
      progress2.throwIfAborted();
      const chromeTransport = await _transport2.WebSocketTransport.connect(progress2, wsEndpoint, headersMap);
      const cleanedUp = new _manualPromise2.ManualPromise();
      const doCleanup = async () => {
        await (0, _fileUtils2.removeFolders)([artifactsDir]);
        await (onClose === null || onClose === void 0 ? void 0 : onClose());
        cleanedUp.resolve();
      };
      const doClose = async () => {
        await chromeTransport.closeAndWait();
        await cleanedUp;
      };
      const browserProcess = {
        close: doClose,
        kill: doClose
      };
      const persistent = {
        noDefaultViewport: true
      };
      const browserOptions = {
        slowMo: options.slowMo,
        name: "chromium",
        isChromium: true,
        persistent,
        browserProcess,
        protocolLogger: _helper2.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger2.RecentLogsCollector(),
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        originalLaunchOptions: {}
      };
      (0, _browserContext2.validateBrowserContextOptions)(persistent, browserOptions);
      progress2.throwIfAborted();
      const browser2 = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
      browser2._isCollocatedWithServer = false;
      browser2.on(_browser2.Browser.Events.Disconnected, doCleanup);
      return browser2;
    }
    _createDevTools() {
      const directory = _registry2.registry.findExecutable("chromium").directory;
      return directory ? new _crDevTools.CRDevTools(_path2.default.join(directory, "devtools-preferences.json")) : void 0;
    }
    async connectToTransport(transport2, options) {
      let devtools = this._devtools;
      if (options.__testHookForDevTools) {
        devtools = this._createDevTools();
        await options.__testHookForDevTools(devtools);
      }
      return _crBrowser.CRBrowser.connect(this.attribution.playwright, transport2, options, devtools);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes("Missing X server")) error.logs = "\n" + (0, _ascii2.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180")) return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join("\n");
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      const message = {
        method: "Browser.close",
        id: _crConnection2.kBrowserCloseMessageId,
        params: {}
      };
      transport2.send(message);
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      await this._createArtifactDirs(options);
      if (!hubUrl.endsWith("/")) hubUrl = hubUrl + "/";
      const args = this._innerDefaultArgs(options);
      args.push("--remote-debugging-port=0");
      const isEdge = options.channel && options.channel.startsWith("msedge");
      let desiredCapabilities = {
        "browserName": isEdge ? "MicrosoftEdge" : "chrome",
        [isEdge ? "ms:edgeOptions" : "goog:chromeOptions"]: {
          args
        }
      };
      if (process.env.SELENIUM_REMOTE_CAPABILITIES) {
        const remoteCapabilities = parseSeleniumRemoteParams({
          name: "capabilities",
          value: process.env.SELENIUM_REMOTE_CAPABILITIES
        }, progress2);
        if (remoteCapabilities) desiredCapabilities = {
          ...desiredCapabilities,
          ...remoteCapabilities
        };
      }
      let headers2 = {};
      if (process.env.SELENIUM_REMOTE_HEADERS) {
        const remoteHeaders = parseSeleniumRemoteParams({
          name: "headers",
          value: process.env.SELENIUM_REMOTE_HEADERS
        }, progress2);
        if (remoteHeaders) headers2 = remoteHeaders;
      }
      progress2.log(`<selenium> connecting to ${hubUrl}`);
      const response = await (0, _network2.fetchData)({
        url: hubUrl + "session",
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          ...headers2
        },
        data: JSON.stringify({
          capabilities: {
            alwaysMatch: desiredCapabilities
          }
        }),
        timeout: progress2.timeUntilDeadline()
      }, seleniumErrorHandler);
      const value = JSON.parse(response).value;
      const sessionId = value.sessionId;
      progress2.log(`<selenium> connected to sessionId=${sessionId}`);
      const disconnectFromSelenium = async () => {
        progress2.log(`<selenium> disconnecting from sessionId=${sessionId}`);
        await (0, _network2.fetchData)({
          url: hubUrl + "session/" + sessionId,
          method: "DELETE",
          headers: headers2
        }).catch((error) => progress2.log(`<error disconnecting from selenium>: ${error}`));
        progress2.log(`<selenium> disconnected from sessionId=${sessionId}`);
        _processLauncher.gracefullyCloseSet.delete(disconnectFromSelenium);
      };
      _processLauncher.gracefullyCloseSet.add(disconnectFromSelenium);
      try {
        const capabilities = value.capabilities;
        let endpointURL;
        if (capabilities["se:cdp"]) {
          progress2.log(`<selenium> using selenium v4`);
          const endpointURLString = addProtocol(capabilities["se:cdp"]);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") endpointURL.hostname = new URL(hubUrl).hostname;
          progress2.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);
        } else {
          progress2.log(`<selenium> using selenium v3`);
          const maybeChromeOptions = capabilities["goog:chromeOptions"];
          const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === "object" ? maybeChromeOptions : void 0;
          const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === "string" ? chromeOptions.debuggerAddress : void 0;
          const chromeOptionsURL = typeof maybeChromeOptions === "string" ? maybeChromeOptions : void 0;
          const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace("localhost", "127.0.0.1");
          progress2.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") {
            const sessionInfoUrl = new URL(hubUrl).origin + "/grid/api/testsession?session=" + sessionId;
            try {
              const sessionResponse = await (0, _network2.fetchData)({
                url: sessionInfoUrl,
                method: "GET",
                timeout: progress2.timeUntilDeadline(),
                headers: headers2
              }, seleniumErrorHandler);
              const proxyId = JSON.parse(sessionResponse).proxyId;
              endpointURL.hostname = new URL(proxyId).hostname;
              progress2.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);
            } catch (e) {
              progress2.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);
            }
          }
        }
        return await this._connectOverCDPInternal(progress2, endpointURL.toString(), {
          ...options,
          headers: (0, _utils2.headersObjectToArray)(headers2)
        }, disconnectFromSelenium);
      } catch (e) {
        await disconnectFromSelenium();
        throw e;
      }
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      if (options.useWebSocket) chromeArguments.push("--remote-debugging-port=0");
      else chromeArguments.push("--remote-debugging-pipe");
      if (isPersistent) chromeArguments.push("about:blank");
      else chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = []
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe"))) throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-"))) throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os2.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless) chromeArguments.push("--use-angle");
      }
      if (options.devtools) chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        if (process.env.PLAYWRIGHT_CHROMIUM_USE_HEADLESS_NEW) chromeArguments.push("--headless=new");
        else chromeArguments.push("--headless=old");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true) chromeArguments.push("--no-sandbox");
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort) proxyBypassRules.push("<-loopback>");
        if (proxy.bypass) proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>")) proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0) chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    readyState(options) {
      var _options$args;
      if (options.useWebSocket || (_options$args = options.args) !== null && _options$args !== void 0 && _options$args.some((a) => a.startsWith("--remote-debugging-port"))) return new ChromiumReadyState();
      return void 0;
    }
  }
  chromium$1.Chromium = Chromium;
  class ChromiumReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/DevTools listening on (.*)/);
      if (match) this._wsEndpoint.resolve(match[1]);
    }
  }
  async function urlToWSEndpoint2(progress2, endpointURL, headers2) {
    if (endpointURL.startsWith("ws")) return endpointURL;
    progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const httpURL = endpointURL.endsWith("/") ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
    const json = await (0, _network2.fetchData)({
      url: httpURL,
      headers: headers2
    }, async (_, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.
This does not look like a DevTools server, try connecting via ws://.`));
    return JSON.parse(json).webSocketDebuggerUrl;
  }
  async function seleniumErrorHandler(params, response) {
    const body = await streamToString(response);
    let message = body;
    try {
      const json = JSON.parse(body);
      message = json.value.localizedMessage || json.value.message;
    } catch (e) {
    }
    return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);
  }
  function addProtocol(url) {
    if (!["ws://", "wss://", "http://", "https://"].some((protocol) => url.startsWith(protocol))) return "http://" + url;
    return url;
  }
  function streamToString(stream2) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      stream2.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
      stream2.on("error", reject);
      stream2.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
    });
  }
  function parseSeleniumRemoteParams(env2, progress2) {
    try {
      const parsed = JSON.parse(env2.value);
      progress2.log(`<selenium> using additional ${env2.name} "${env2.value}"`);
      return parsed;
    } catch (e) {
      progress2.log(`<selenium> ignoring additional ${env2.name} "${env2.value}": ${e}`);
    }
  }
  return chromium$1;
}
var electron$2 = {};
var electron$1;
var hasRequiredElectron$1;
function requireElectron$1() {
  if (hasRequiredElectron$1) return electron$1;
  hasRequiredElectron$1 = 1;
  const fs2 = require$$0$2;
  const path2 = require$$1;
  const pathFile = path2.join(__dirname, "path.txt");
  function getElectronPath() {
    let executablePath;
    if (fs2.existsSync(pathFile)) {
      executablePath = fs2.readFileSync(pathFile, "utf-8");
    }
    if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {
      return path2.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || "electron");
    }
    if (executablePath) {
      return path2.join(__dirname, "dist", executablePath);
    } else {
      throw new Error("Electron failed to install correctly, please delete node_modules/electron and try installing again");
    }
  }
  electron$1 = getElectronPath();
  return electron$1;
}
var hasRequiredElectron;
function requireElectron() {
  if (hasRequiredElectron) return electron$2;
  hasRequiredElectron = 1;
  Object.defineProperty(electron$2, "__esModule", {
    value: true
  });
  electron$2.ElectronApplication = electron$2.Electron = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _crBrowser = requireCrBrowser();
  var _crConnection2 = crConnection;
  var _crExecutionContext = crExecutionContext;
  var js2 = _interopRequireWildcard2(javascript$1);
  var _timeoutSettings2 = timeoutSettings;
  var _utils2 = requireUtils();
  var _transport2 = transport;
  var _processLauncher = requireProcessLauncher();
  var _browserContext2 = requireBrowserContext$1();
  var _progress2 = progress;
  var _helper2 = helper;
  var _eventsHelper2 = eventsHelper;
  var readline = _interopRequireWildcard2(require$$2$1);
  var _debugLogger2 = debugLogger;
  var _instrumentation2 = instrumentation;
  var _crProtocolHelper2 = crProtocolHelper;
  var _console = console$1;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const ARTIFACTS_FOLDER = _path2.default.join(_os2.default.tmpdir(), "playwright-artifacts-");
  class ElectronApplication2 extends _instrumentation2.SdkObject {
    constructor(parent, browser2, nodeConnection, process2) {
      super(parent, "electron-app");
      this._browserContext = void 0;
      this._nodeConnection = void 0;
      this._nodeSession = void 0;
      this._nodeExecutionContext = void 0;
      this._nodeElectronHandlePromise = new _utils2.ManualPromise();
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings();
      this._process = void 0;
      this._process = process2;
      this._browserContext = browser2._defaultContext;
      this._nodeConnection = nodeConnection;
      this._nodeSession = nodeConnection.rootSession;
      this._nodeSession.on("Runtime.executionContextCreated", async (event) => {
        if (!event.context.auxData || !event.context.auxData.isDefault) return;
        const crExecutionContext2 = new _crExecutionContext.CRExecutionContext(this._nodeSession, event.context);
        this._nodeExecutionContext = new js2.ExecutionContext(this, crExecutionContext2, "electron");
        const {
          result: remoteObject
        } = await crExecutionContext2._client.send("Runtime.evaluate", {
          expression: `require('electron')`,
          contextId: event.context.id,
          // Needed after Electron 28 to get access to require: https://github.com/microsoft/playwright/issues/28048
          includeCommandLineAPI: true
        });
        this._nodeElectronHandlePromise.resolve(new js2.JSHandle(this._nodeExecutionContext, "object", "ElectronModule", remoteObject.objectId));
      });
      this._nodeSession.on("Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event));
      const appClosePromise = new Promise((f) => this.once(ElectronApplication2.Events.Close, f));
      this._browserContext.setCustomCloseHandler(async () => {
        await this._browserContext.stopVideoRecording();
        const electronHandle = await this._nodeElectronHandlePromise;
        await electronHandle.evaluate(({
          app
        }) => app.quit()).catch(() => {
        });
        this._nodeConnection.close();
        await appClosePromise;
      });
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      if (!this._nodeExecutionContext) return;
      const args = event.args.map((arg) => this._nodeExecutionContext.createHandle(arg));
      const message = new _console.ConsoleMessage(null, event.type, void 0, args, (0, _crProtocolHelper2.toConsoleMessageLocation)(event.stackTrace));
      this.emit(ElectronApplication2.Events.Console, message);
    }
    async initialize() {
      await this._nodeSession.send("Runtime.enable", {});
      await this._nodeSession.send("Runtime.evaluate", {
        expression: "__playwright_run()"
      });
    }
    process() {
      return this._process;
    }
    context() {
      return this._browserContext;
    }
    async close() {
      await this._browserContext.close({
        reason: "Application exited"
      });
    }
    async browserWindow(page2) {
      const targetId = page2._delegate._targetId;
      const electronHandle = await this._nodeElectronHandlePromise;
      return await electronHandle.evaluateHandle(({
        BrowserWindow,
        webContents
      }, targetId2) => {
        const wc = webContents.fromDevToolsTargetId(targetId2);
        return BrowserWindow.fromWebContents(wc);
      }, targetId);
    }
  }
  electron$2.ElectronApplication = ElectronApplication2;
  ElectronApplication2.Events = {
    Close: "close",
    Console: "console"
  };
  class Electron2 extends _instrumentation2.SdkObject {
    constructor(playwright2) {
      super(playwright2, "electron");
    }
    async launch(options) {
      const {
        args = []
      } = options;
      const controller = new _progress2.ProgressController((0, _instrumentation2.serverSideCallMetadata)(), this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        let app = void 0;
        let electronArguments = ["--inspect=0", "--remote-debugging-port=0", ...args];
        if (_os2.default.platform() === "linux") {
          const runningAsRoot = process.geteuid && process.geteuid() === 0;
          if (runningAsRoot && electronArguments.indexOf("--no-sandbox") === -1) electronArguments.unshift("--no-sandbox");
        }
        const artifactsDir = await _fs2.default.promises.mkdtemp(ARTIFACTS_FOLDER);
        const browserLogsCollector = new _debugLogger2.RecentLogsCollector();
        const env2 = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
        let command;
        if (options.executablePath) {
          command = options.executablePath;
        } else {
          try {
            command = requireElectron$1();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.code) === "MODULE_NOT_FOUND") {
              throw new Error("\n" + (0, _utils2.wrapInASCIIBox)(["Electron executablePath not found!", "Please install it using `npm install -D electron` or set the executablePath to your Electron executable."].join("\n"), 1));
            }
            throw error;
          }
          electronArguments.unshift("-r", require.resolve("./loader"));
        }
        let shell = false;
        if (process.platform === "win32") {
          shell = true;
          command = `"${command}"`;
          electronArguments = electronArguments.map((arg) => `"${arg}"`);
        }
        delete env2.NODE_OPTIONS;
        const {
          launchedProcess,
          gracefullyClose,
          kill
        } = await (0, _processLauncher.launchProcess)({
          command,
          args: electronArguments,
          env: env2,
          log: (message) => {
            progress2.log(message);
            browserLogsCollector.log(message);
          },
          shell,
          stdio: "pipe",
          cwd: options.cwd,
          tempDirectories: [artifactsDir],
          attemptToGracefullyClose: () => app.close(),
          handleSIGINT: true,
          handleSIGTERM: true,
          handleSIGHUP: true,
          onExit: () => {
            var _app;
            return (_app = app) === null || _app === void 0 ? void 0 : _app.emit(ElectronApplication2.Events.Close);
          }
        });
        const waitForXserverError = new Promise(async (resolve, reject) => {
          waitForLine(progress2, launchedProcess, /Unable to open X display/).then(() => reject(new Error(["Unable to open X display!", `================================`, "Most likely this is because there is no X server available.", "Use 'xvfb-run' on Linux to launch your tests with an emulated display server.", "For example: 'xvfb-run npm run test:e2e'", `================================`, progress2.metadata.log].join("\n")))).catch(() => {
          });
        });
        const nodeMatchPromise = waitForLine(progress2, launchedProcess, /^Debugger listening on (ws:\/\/.*)$/);
        const chromeMatchPromise = waitForLine(progress2, launchedProcess, /^DevTools listening on (ws:\/\/.*)$/);
        const debuggerDisconnectPromise = waitForLine(progress2, launchedProcess, /Waiting for the debugger to disconnect\.\.\./);
        const nodeMatch = await nodeMatchPromise;
        const nodeTransport = await _transport2.WebSocketTransport.connect(progress2, nodeMatch[1]);
        const nodeConnection = new _crConnection2.CRConnection(nodeTransport, _helper2.helper.debugProtocolLogger(), browserLogsCollector);
        debuggerDisconnectPromise.then(() => {
          nodeTransport.close();
        }).catch(() => {
        });
        const chromeMatch = await Promise.race([chromeMatchPromise, waitForXserverError]);
        const chromeTransport = await _transport2.WebSocketTransport.connect(progress2, chromeMatch[1]);
        const browserProcess = {
          onclose: void 0,
          process: launchedProcess,
          close: gracefullyClose,
          kill
        };
        const contextOptions = {
          ...options,
          noDefaultViewport: true
        };
        const browserOptions = {
          name: "electron",
          isChromium: true,
          headful: true,
          persistent: contextOptions,
          browserProcess,
          protocolLogger: _helper2.helper.debugProtocolLogger(),
          browserLogsCollector,
          artifactsDir,
          downloadsPath: artifactsDir,
          tracesDir: options.tracesDir || artifactsDir,
          originalLaunchOptions: {}
        };
        (0, _browserContext2.validateBrowserContextOptions)(contextOptions, browserOptions);
        const browser2 = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
        app = new ElectronApplication2(this, browser2, nodeConnection, launchedProcess);
        await app.initialize();
        return app;
      }, _timeoutSettings2.TimeoutSettings.launchTimeout(options));
    }
  }
  electron$2.Electron = Electron2;
  function waitForLine(progress2, process2, regex) {
    return new Promise((resolve, reject) => {
      const rl2 = readline.createInterface({
        input: process2.stderr
      });
      const failError = new Error("Process failed to launch!");
      const listeners = [
        _eventsHelper2.eventsHelper.addEventListener(rl2, "line", onLine),
        _eventsHelper2.eventsHelper.addEventListener(rl2, "close", reject.bind(null, failError)),
        _eventsHelper2.eventsHelper.addEventListener(process2, "exit", reject.bind(null, failError)),
        // It is Ok to remove error handler because we did not create process and there is another listener.
        _eventsHelper2.eventsHelper.addEventListener(process2, "error", reject.bind(null, failError))
      ];
      progress2.cleanupWhenAborted(cleanup);
      function onLine(line) {
        const match = line.match(regex);
        if (!match) return;
        cleanup();
        resolve(match);
      }
      function cleanup() {
        _eventsHelper2.eventsHelper.removeEventListeners(listeners);
      }
    });
  }
  return electron$2;
}
var firefox$1 = {};
var ffBrowser = {};
var ffConnection = {};
Object.defineProperty(ffConnection, "__esModule", {
  value: true
});
ffConnection.kBrowserCloseMessageId = ffConnection.FFSession = ffConnection.FFConnection = ffConnection.ConnectionEvents = void 0;
var _events$7 = require$$0$1;
var _debugLogger$6 = debugLogger;
var _helper$3 = helper;
var _protocolError$4 = protocolError;
const ConnectionEvents = ffConnection.ConnectionEvents = {
  Disconnected: Symbol("Disconnected")
};
const kBrowserCloseMessageId$2 = ffConnection.kBrowserCloseMessageId = -9999;
class FFConnection extends _events$7.EventEmitter {
  constructor(transport2, protocolLogger, browserLogsCollector) {
    super();
    this._lastId = void 0;
    this._transport = void 0;
    this._protocolLogger = void 0;
    this._browserLogsCollector = void 0;
    this._browserDisconnectedLogs = void 0;
    this.rootSession = void 0;
    this._sessions = void 0;
    this._closed = void 0;
    this.setMaxListeners(0);
    this._transport = transport2;
    this._protocolLogger = protocolLogger;
    this._browserLogsCollector = browserLogsCollector;
    this._lastId = 0;
    this._sessions = /* @__PURE__ */ new Map();
    this._closed = false;
    this.rootSession = new FFSession(this, "", (message) => this._rawSend(message));
    this._sessions.set("", this.rootSession);
    this._transport.onmessage = this._onMessage.bind(this);
    this._transport.onclose = this._onClose.bind(this);
  }
  nextMessageId() {
    return ++this._lastId;
  }
  _rawSend(message) {
    this._protocolLogger("send", message);
    this._transport.send(message);
  }
  async _onMessage(message) {
    this._protocolLogger("receive", message);
    if (message.id === kBrowserCloseMessageId$2) return;
    const session2 = this._sessions.get(message.sessionId || "");
    if (session2) session2.dispatchMessage(message);
  }
  _onClose(reason) {
    this._closed = true;
    this._transport.onmessage = void 0;
    this._transport.onclose = void 0;
    this._browserDisconnectedLogs = _helper$3.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
    this.rootSession.dispose();
    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
  }
  close() {
    if (!this._closed) this._transport.close();
  }
  createSession(sessionId) {
    const session2 = new FFSession(this, sessionId, (message) => this._rawSend({
      ...message,
      sessionId
    }));
    this._sessions.set(sessionId, session2);
    return session2;
  }
}
ffConnection.FFConnection = FFConnection;
class FFSession extends _events$7.EventEmitter {
  constructor(connection2, sessionId, rawSend) {
    super();
    this._connection = void 0;
    this._disposed = false;
    this._callbacks = void 0;
    this._sessionId = void 0;
    this._rawSend = void 0;
    this._crashed = false;
    this.on = void 0;
    this.addListener = void 0;
    this.off = void 0;
    this.removeListener = void 0;
    this.once = void 0;
    this.setMaxListeners(0);
    this._callbacks = /* @__PURE__ */ new Map();
    this._connection = connection2;
    this._sessionId = sessionId;
    this._rawSend = rawSend;
    this.on = super.on;
    this.addListener = super.addListener;
    this.off = super.removeListener;
    this.removeListener = super.removeListener;
    this.once = super.once;
  }
  markAsCrashed() {
    this._crashed = true;
  }
  async send(method, params) {
    if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs) throw new _protocolError$4.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this._connection._browserDisconnectedLogs);
    const id = this._connection.nextMessageId();
    this._rawSend({
      method,
      params,
      id
    });
    return new Promise((resolve, reject) => {
      this._callbacks.set(id, {
        resolve,
        reject,
        error: new _protocolError$4.ProtocolError("error", method)
      });
    });
  }
  sendMayFail(method, params) {
    return this.send(method, params).catch((error) => _debugLogger$6.debugLogger.log("error", error));
  }
  dispatchMessage(object) {
    if (object.id) {
      const callback = this._callbacks.get(object.id);
      if (callback) {
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      }
    } else {
      Promise.resolve().then(() => this.emit(object.method, object.params));
    }
  }
  dispose() {
    this._disposed = true;
    this._connection._sessions.delete(this._sessionId);
    for (const callback of this._callbacks.values()) {
      callback.error.type = this._crashed ? "crashed" : "closed";
      callback.error.logs = this._connection._browserDisconnectedLogs;
      callback.reject(callback.error);
    }
    this._callbacks.clear();
  }
}
ffConnection.FFSession = FFSession;
var ffPage = {};
var ffAccessibility = {};
Object.defineProperty(ffAccessibility, "__esModule", {
  value: true
});
ffAccessibility.getAccessibilityTree = getAccessibilityTree$1;
async function getAccessibilityTree$1(session2, needle) {
  const objectId = needle ? needle._objectId : void 0;
  const {
    tree
  } = await session2.send("Accessibility.getFullAXTree", {
    objectId
  });
  const axNode = new FFAXNode(tree);
  return {
    tree: axNode,
    needle: needle ? axNode._findNeedle() : null
  };
}
const FFRoleToARIARole = new Map(Object.entries({
  "pushbutton": "button",
  "checkbutton": "checkbox",
  "editcombobox": "combobox",
  "content deletion": "deletion",
  "footnote": "doc-footnote",
  "non-native document": "document",
  "grouping": "group",
  "graphic": "img",
  "content insertion": "insertion",
  "animation": "marquee",
  "flat equation": "math",
  "menupopup": "menu",
  "check menu item": "menuitemcheckbox",
  "radio menu item": "menuitemradio",
  "listbox option": "option",
  "radiobutton": "radio",
  "statusbar": "status",
  "pagetab": "tab",
  "pagetablist": "tablist",
  "propertypage": "tabpanel",
  "entry": "textbox",
  "outline": "tree",
  "tree table": "treegrid",
  "outlineitem": "treeitem"
}));
class FFAXNode {
  constructor(payload) {
    this._children = void 0;
    this._payload = void 0;
    this._editable = void 0;
    this._richlyEditable = void 0;
    this._focusable = void 0;
    this._expanded = void 0;
    this._name = void 0;
    this._role = void 0;
    this._cachedHasFocusableChild = void 0;
    this._payload = payload;
    this._children = (payload.children || []).map((x) => new FFAXNode(x));
    this._editable = !!payload.editable;
    this._richlyEditable = this._editable && payload.tag !== "textarea" && payload.tag !== "input";
    this._focusable = !!payload.focusable;
    this._expanded = !!payload.expanded;
    this._name = this._payload.name;
    this._role = this._payload.role;
  }
  _isPlainTextField() {
    if (this._richlyEditable) return false;
    if (this._editable) return true;
    return this._role === "entry";
  }
  _isTextOnlyObject() {
    const role = this._role;
    return role === "text leaf" || role === "text" || role === "statictext";
  }
  _hasFocusableChild() {
    if (this._cachedHasFocusableChild === void 0) {
      this._cachedHasFocusableChild = false;
      for (const child of this._children) {
        if (child._focusable || child._hasFocusableChild()) {
          this._cachedHasFocusableChild = true;
          break;
        }
      }
    }
    return this._cachedHasFocusableChild;
  }
  children() {
    return this._children;
  }
  _findNeedle() {
    if (this._payload.foundObject) return this;
    for (const child of this._children) {
      const found = child._findNeedle();
      if (found) return found;
    }
    return null;
  }
  isLeafNode() {
    if (!this._children.length) return true;
    if (this._isPlainTextField() || this._isTextOnlyObject()) return true;
    switch (this._role) {
      case "graphic":
      case "scrollbar":
      case "slider":
      case "separator":
      case "progressbar":
        return true;
    }
    if (this._hasFocusableChild()) return false;
    if (this._focusable && this._role !== "document" && this._name) return true;
    if (this._role === "heading" && this._name) return true;
    return false;
  }
  isControl() {
    switch (this._role) {
      case "checkbutton":
      case "check menu item":
      case "check rich option":
      case "combobox":
      case "combobox option":
      case "color chooser":
      case "listbox":
      case "listbox option":
      case "listbox rich option":
      case "popup menu":
      case "menupopup":
      case "menuitem":
      case "menubar":
      case "button":
      case "pushbutton":
      case "radiobutton":
      case "radio menuitem":
      case "scrollbar":
      case "slider":
      case "spinbutton":
      case "switch":
      case "pagetab":
      case "entry":
      case "tree table":
        return true;
      default:
        return false;
    }
  }
  isInteresting(insideControl) {
    if (this._focusable || this._richlyEditable) return true;
    if (this.isControl()) return true;
    if (insideControl) return false;
    return this.isLeafNode() && !!this._name.trim();
  }
  serialize() {
    const node = {
      role: FFRoleToARIARole.get(this._role) || this._role,
      name: this._name || ""
    };
    const userStringProperties = ["name", "description", "roledescription", "valuetext", "keyshortcuts"];
    for (const userStringProperty of userStringProperties) {
      if (!(userStringProperty in this._payload)) continue;
      node[userStringProperty] = this._payload[userStringProperty];
    }
    const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
    for (const booleanProperty of booleanProperties) {
      if (this._role === "document" && booleanProperty === "focused") continue;
      const value = this._payload[booleanProperty];
      if (!value) continue;
      node[booleanProperty] = value;
    }
    const numericalProperties = ["level"];
    for (const numericalProperty of numericalProperties) {
      if (!(numericalProperty in this._payload)) continue;
      node[numericalProperty] = this._payload[numericalProperty];
    }
    const tokenProperties = ["autocomplete", "haspopup", "orientation"];
    for (const tokenProperty of tokenProperties) {
      const value = this._payload[tokenProperty];
      if (!value || value === "false") continue;
      node[tokenProperty] = value;
    }
    const axNode = node;
    axNode.valueString = this._payload.value;
    if ("checked" in this._payload) axNode.checked = this._payload.checked === true ? "checked" : this._payload.checked === "mixed" ? "mixed" : "unchecked";
    if ("pressed" in this._payload) axNode.pressed = this._payload.pressed === true ? "pressed" : "released";
    if ("invalid" in this._payload) axNode.invalid = this._payload.invalid === true ? "true" : "false";
    return axNode;
  }
}
var ffExecutionContext = {};
Object.defineProperty(ffExecutionContext, "__esModule", {
  value: true
});
ffExecutionContext.FFExecutionContext = void 0;
var js$2 = _interopRequireWildcard$7(javascript$1);
var _stackTrace$3 = requireStackTrace();
var _utilityScriptSerializers$2 = utilityScriptSerializers;
var _protocolError$3 = protocolError;
function _getRequireWildcardCache$7(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$7 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$7(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$7(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class FFExecutionContext {
  constructor(session2, executionContextId) {
    this._session = void 0;
    this._executionContextId = void 0;
    this._session = session2;
    this._executionContextId = executionContextId;
  }
  async rawEvaluateJSON(expression) {
    const payload = await this._session.send("Runtime.evaluate", {
      expression,
      returnByValue: true,
      executionContextId: this._executionContextId
    }).catch(rewriteError$1);
    checkException(payload.exceptionDetails);
    return payload.result.value;
  }
  async rawEvaluateHandle(expression) {
    const payload = await this._session.send("Runtime.evaluate", {
      expression,
      returnByValue: false,
      executionContextId: this._executionContextId
    }).catch(rewriteError$1);
    checkException(payload.exceptionDetails);
    return payload.result.objectId;
  }
  rawCallFunctionNoReply(func, ...args) {
    this._session.send("Runtime.callFunction", {
      functionDeclaration: func.toString(),
      args: args.map((a) => a instanceof js$2.JSHandle ? {
        objectId: a._objectId
      } : {
        value: a
      }),
      returnByValue: true,
      executionContextId: this._executionContextId
    }).catch(() => {
    });
  }
  async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
    const payload = await this._session.send("Runtime.callFunction", {
      functionDeclaration: expression,
      args: [{
        objectId: utilityScript._objectId,
        value: void 0
      }, ...values.map((value) => ({
        value
      })), ...objectIds.map((objectId) => ({
        objectId,
        value: void 0
      }))],
      returnByValue,
      executionContextId: this._executionContextId
    }).catch(rewriteError$1);
    checkException(payload.exceptionDetails);
    if (returnByValue) return (0, _utilityScriptSerializers$2.parseEvaluationResultValue)(payload.result.value);
    return utilityScript._context.createHandle(payload.result);
  }
  async getProperties(context, objectId) {
    const response = await this._session.send("Runtime.getObjectProperties", {
      executionContextId: this._executionContextId,
      objectId
    });
    const result2 = /* @__PURE__ */ new Map();
    for (const property of response.properties) result2.set(property.name, context.createHandle(property.value));
    return result2;
  }
  createHandle(context, remoteObject) {
    return new js$2.JSHandle(context, remoteObject.subtype || remoteObject.type || "", renderPreview$2(remoteObject), remoteObject.objectId, potentiallyUnserializableValue$1(remoteObject));
  }
  async releaseHandle(objectId) {
    await this._session.send("Runtime.disposeObject", {
      executionContextId: this._executionContextId,
      objectId
    });
  }
}
ffExecutionContext.FFExecutionContext = FFExecutionContext;
function checkException(exceptionDetails) {
  if (!exceptionDetails) return;
  if (exceptionDetails.value) throw new js$2.JavaScriptErrorInEvaluate(JSON.stringify(exceptionDetails.value));
  else throw new js$2.JavaScriptErrorInEvaluate(exceptionDetails.text + (exceptionDetails.stack ? "\n" + exceptionDetails.stack : ""));
}
function rewriteError$1(error) {
  if (error.message.includes("cyclic object value") || error.message.includes("Object is not serializable")) return {
    result: {
      type: "undefined",
      value: void 0
    }
  };
  if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) (0, _stackTrace$3.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
  if (!js$2.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError$3.isSessionClosedError)(error)) throw new Error("Execution context was destroyed, most likely because of a navigation.");
  throw error;
}
function potentiallyUnserializableValue$1(remoteObject) {
  const value = remoteObject.value;
  const unserializableValue = remoteObject.unserializableValue;
  return unserializableValue ? js$2.parseUnserializableValue(unserializableValue) : value;
}
function renderPreview$2(object) {
  if (object.type === "undefined") return "undefined";
  if (object.unserializableValue) return String(object.unserializableValue);
  if (object.type === "symbol") return "Symbol()";
  if (object.subtype === "regexp") return "RegExp";
  if (object.subtype === "weakmap") return "WeakMap";
  if (object.subtype === "weakset") return "WeakSet";
  if (object.subtype) return object.subtype[0].toUpperCase() + object.subtype.slice(1);
  if ("value" in object) return String(object.value);
}
var ffInput = {};
Object.defineProperty(ffInput, "__esModule", {
  value: true
});
ffInput.RawTouchscreenImpl = ffInput.RawMouseImpl = ffInput.RawKeyboardImpl = void 0;
function toModifiersMask$1(modifiers) {
  let mask = 0;
  if (modifiers.has("Alt")) mask |= 1;
  if (modifiers.has("Control")) mask |= 2;
  if (modifiers.has("Shift")) mask |= 4;
  if (modifiers.has("Meta")) mask |= 8;
  return mask;
}
function toButtonNumber(button) {
  if (button === "left") return 0;
  if (button === "middle") return 1;
  if (button === "right") return 2;
  return 0;
}
function toButtonsMask$1(buttons) {
  let mask = 0;
  if (buttons.has("left")) mask |= 1;
  if (buttons.has("right")) mask |= 2;
  if (buttons.has("middle")) mask |= 4;
  return mask;
}
let RawKeyboardImpl$2 = class RawKeyboardImpl2 {
  constructor(client) {
    this._client = void 0;
    this._client = client;
  }
  async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
    if (text === "\r") text = "";
    await this._client.send("Page.dispatchKeyEvent", {
      type: "keydown",
      keyCode: keyCodeWithoutLocation,
      code,
      key,
      repeat: autoRepeat,
      location: location2,
      text
    });
  }
  async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
    await this._client.send("Page.dispatchKeyEvent", {
      type: "keyup",
      key,
      keyCode: keyCodeWithoutLocation,
      code,
      location: location2,
      repeat: false
    });
  }
  async sendText(text) {
    await this._client.send("Page.insertText", {
      text
    });
  }
};
ffInput.RawKeyboardImpl = RawKeyboardImpl$2;
let RawMouseImpl$2 = class RawMouseImpl2 {
  constructor(client) {
    this._client = void 0;
    this._page = void 0;
    this._client = client;
  }
  async move(x, y, button, buttons, modifiers, forClick) {
    await this._client.send("Page.dispatchMouseEvent", {
      type: "mousemove",
      button: 0,
      buttons: toButtonsMask$1(buttons),
      x: Math.floor(x),
      y: Math.floor(y),
      modifiers: toModifiersMask$1(modifiers)
    });
  }
  async down(x, y, button, buttons, modifiers, clickCount) {
    await this._client.send("Page.dispatchMouseEvent", {
      type: "mousedown",
      button: toButtonNumber(button),
      buttons: toButtonsMask$1(buttons),
      x: Math.floor(x),
      y: Math.floor(y),
      modifiers: toModifiersMask$1(modifiers),
      clickCount
    });
  }
  async up(x, y, button, buttons, modifiers, clickCount) {
    await this._client.send("Page.dispatchMouseEvent", {
      type: "mouseup",
      button: toButtonNumber(button),
      buttons: toButtonsMask$1(buttons),
      x: Math.floor(x),
      y: Math.floor(y),
      modifiers: toModifiersMask$1(modifiers),
      clickCount
    });
  }
  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
    await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
      world: "utility"
    });
    await this._client.send("Page.dispatchWheelEvent", {
      deltaX,
      deltaY,
      x: Math.floor(x),
      y: Math.floor(y),
      deltaZ: 0,
      modifiers: toModifiersMask$1(modifiers)
    });
  }
  setPage(page2) {
    this._page = page2;
  }
};
ffInput.RawMouseImpl = RawMouseImpl$2;
let RawTouchscreenImpl$2 = class RawTouchscreenImpl2 {
  constructor(client) {
    this._client = void 0;
    this._client = client;
  }
  async tap(x, y, modifiers) {
    await this._client.send("Page.dispatchTapEvent", {
      x,
      y,
      modifiers: toModifiersMask$1(modifiers)
    });
  }
};
ffInput.RawTouchscreenImpl = RawTouchscreenImpl$2;
var ffNetworkManager = {};
var hasRequiredFfNetworkManager;
function requireFfNetworkManager() {
  if (hasRequiredFfNetworkManager) return ffNetworkManager;
  hasRequiredFfNetworkManager = 1;
  Object.defineProperty(ffNetworkManager, "__esModule", {
    value: true
  });
  ffNetworkManager.FFNetworkManager = void 0;
  var _eventsHelper2 = eventsHelper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class FFNetworkManager {
    constructor(session2, page2) {
      this._session = void 0;
      this._requests = void 0;
      this._page = void 0;
      this._eventListeners = void 0;
      this._session = session2;
      this._requests = /* @__PURE__ */ new Map();
      this._page = page2;
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(session2, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.responseReceived", this._onResponseReceived.bind(this)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.requestFinished", this._onRequestFinished.bind(this)), _eventsHelper2.eventsHelper.addEventListener(session2, "Network.requestFailed", this._onRequestFailed.bind(this))];
    }
    dispose() {
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async setRequestInterception(enabled) {
      await Promise.all([this._session.send("Network.setRequestInterception", {
        enabled
      }), this._session.send("Page.setCacheDisabled", {
        cacheDisabled: enabled
      })]);
    }
    _onRequestWillBeSent(event) {
      const redirectedFrom = event.redirectedFrom ? this._requests.get(event.redirectedFrom) || null : null;
      const frame2 = redirectedFrom ? redirectedFrom.request.frame() : event.frameId ? this._page._frameManager.frame(event.frameId) : null;
      if (!frame2) return;
      if (redirectedFrom) this._requests.delete(redirectedFrom._id);
      const request2 = new InterceptableRequest(frame2, redirectedFrom, event);
      let route;
      if (event.isIntercepted) route = new FFRouteImpl(this._session, request2);
      this._requests.set(request2._id, request2);
      this._page._frameManager.requestStarted(request2.request, route);
    }
    _onResponseReceived(event) {
      var _event$securityDetail, _event$securityDetail2, _event$securityDetail3, _event$securityDetail4, _event$securityDetail5;
      const request2 = this._requests.get(event.requestId);
      if (!request2) return;
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: request2._id
        });
        if (response2.evicted) throw new Error(`Response body for ${request2.request.method()} ${request2.request.url()} was evicted!`);
        return Buffer.from(response2.base64body, "base64");
      };
      const startTime = event.timing.startTime;
      function relativeToStart(time2) {
        if (!time2) return -1;
        return (time2 - startTime) / 1e3;
      }
      const timing = {
        startTime: startTime / 1e3,
        domainLookupStart: relativeToStart(event.timing.domainLookupStart),
        domainLookupEnd: relativeToStart(event.timing.domainLookupEnd),
        connectStart: relativeToStart(event.timing.connectStart),
        secureConnectionStart: relativeToStart(event.timing.secureConnectionStart),
        connectEnd: relativeToStart(event.timing.connectEnd),
        requestStart: relativeToStart(event.timing.requestStart),
        responseStart: relativeToStart(event.timing.responseStart)
      };
      const response = new network2.Response(request2.request, event.status, event.statusText, parseMultivalueHeaders(event.headers), timing, getResponseBody, event.fromServiceWorker);
      if (event !== null && event !== void 0 && event.remoteIPAddress && typeof (event === null || event === void 0 ? void 0 : event.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: event.remoteIPAddress,
          port: event.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: event === null || event === void 0 || (_event$securityDetail = event.securityDetails) === null || _event$securityDetail === void 0 ? void 0 : _event$securityDetail.protocol,
        subjectName: event === null || event === void 0 || (_event$securityDetail2 = event.securityDetails) === null || _event$securityDetail2 === void 0 ? void 0 : _event$securityDetail2.subjectName,
        issuer: event === null || event === void 0 || (_event$securityDetail3 = event.securityDetails) === null || _event$securityDetail3 === void 0 ? void 0 : _event$securityDetail3.issuer,
        validFrom: event === null || event === void 0 || (_event$securityDetail4 = event.securityDetails) === null || _event$securityDetail4 === void 0 ? void 0 : _event$securityDetail4.validFrom,
        validTo: event === null || event === void 0 || (_event$securityDetail5 = event.securityDetails) === null || _event$securityDetail5 === void 0 ? void 0 : _event$securityDetail5.validTo
      });
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(null);
      this._page._frameManager.requestReceivedResponse(response);
    }
    _onRequestFinished(event) {
      const request2 = this._requests.get(event.requestId);
      if (!request2) return;
      const response = request2.request._existingResponse();
      response.setTransferSize(event.transferSize);
      response.setEncodedBodySize(event.encodedBodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = event.responseEndTime ? event.responseEndTime / 1e3 - response.timing().startTime : -1;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request2._id);
        response._requestFinished(responseEndTime);
      }
      if (event.protocolVersion) response._setHttpVersion(event.protocolVersion);
      this._page._frameManager.reportRequestFinished(request2.request, response);
    }
    _onRequestFailed(event) {
      const request2 = this._requests.get(event.requestId);
      if (!request2) return;
      this._requests.delete(request2._id);
      const response = request2.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request2.request._setFailureText(event.errorCode);
      this._page._frameManager.requestFailed(request2.request, event.errorCode === "NS_BINDING_ABORTED");
    }
  }
  ffNetworkManager.FFNetworkManager = FFNetworkManager;
  const causeToResourceType = {
    TYPE_INVALID: "other",
    TYPE_OTHER: "other",
    TYPE_SCRIPT: "script",
    TYPE_IMAGE: "image",
    TYPE_STYLESHEET: "stylesheet",
    TYPE_OBJECT: "other",
    TYPE_DOCUMENT: "document",
    TYPE_SUBDOCUMENT: "document",
    TYPE_REFRESH: "document",
    TYPE_XBL: "other",
    TYPE_PING: "other",
    TYPE_XMLHTTPREQUEST: "xhr",
    TYPE_OBJECT_SUBREQUEST: "other",
    TYPE_DTD: "other",
    TYPE_FONT: "font",
    TYPE_MEDIA: "media",
    TYPE_WEBSOCKET: "websocket",
    TYPE_CSP_REPORT: "other",
    TYPE_XSLT: "other",
    TYPE_BEACON: "other",
    TYPE_FETCH: "fetch",
    TYPE_IMAGESET: "images",
    TYPE_WEB_MANIFEST: "manifest"
  };
  const internalCauseToResourceType = {
    TYPE_INTERNAL_EVENTSOURCE: "eventsource"
  };
  class InterceptableRequest {
    constructor(frame2, redirectedFrom, payload) {
      this.request = void 0;
      this._id = void 0;
      this._redirectedTo = void 0;
      this._id = payload.requestId;
      if (redirectedFrom) redirectedFrom._redirectedTo = this;
      let postDataBuffer = null;
      if (payload.postData) postDataBuffer = Buffer.from(payload.postData, "base64");
      this.request = new network2.Request(frame2._page._browserContext, frame2, null, redirectedFrom ? redirectedFrom.request : null, payload.navigationId, payload.url, internalCauseToResourceType[payload.internalCause] || causeToResourceType[payload.cause] || "other", payload.method, postDataBuffer, payload.headers);
      this.request.setRawRequestHeaders(null);
    }
    _finalRequest() {
      let request2 = this;
      while (request2._redirectedTo) request2 = request2._redirectedTo;
      return request2;
    }
  }
  class FFRouteImpl {
    constructor(session2, request2) {
      this._request = void 0;
      this._session = void 0;
      this._session = session2;
      this._request = request2;
    }
    async continue(overrides) {
      await this._session.sendMayFail("Network.resumeInterceptedRequest", {
        requestId: this._request._id,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : void 0
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("Network.fulfillInterceptedRequest", {
        requestId: this._request._id,
        status: response.status,
        statusText: network2.statusText(response.status),
        headers: response.headers,
        base64body
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("Network.abortInterceptedRequest", {
        requestId: this._request._id,
        errorCode
      });
    }
  }
  function parseMultivalueHeaders(headers2) {
    const result2 = [];
    for (const header of headers2) {
      const separator = header.name.toLowerCase() === "set-cookie" ? "\n" : ",";
      const tokens = header.value.split(separator).map((s) => s.trim());
      for (const token of tokens) result2.push({
        name: header.name,
        value: token
      });
    }
    return result2;
  }
  return ffNetworkManager;
}
var hasRequiredFfPage;
function requireFfPage() {
  if (hasRequiredFfPage) return ffPage;
  hasRequiredFfPage = 1;
  Object.defineProperty(ffPage, "__esModule", {
    value: true
  });
  ffPage.UTILITY_WORLD_NAME = ffPage.FFPage = void 0;
  var dialog2 = _interopRequireWildcard2(dialog$1);
  var dom$1 = _interopRequireWildcard2(dom);
  var _eventsHelper2 = eventsHelper;
  var _page = requirePage$1();
  var _ffAccessibility = ffAccessibility;
  var _ffConnection = ffConnection;
  var _ffExecutionContext = ffExecutionContext;
  var _ffInput = ffInput;
  var _ffNetworkManager = requireFfNetworkManager();
  var _stackTrace2 = requireStackTrace();
  var _debugLogger2 = debugLogger;
  var _manualPromise2 = requireManualPromise();
  var _browserContext2 = requireBrowserContext$1();
  var _errors2 = errors$2;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const UTILITY_WORLD_NAME = ffPage.UTILITY_WORLD_NAME = "__playwright_utility_world__";
  class FFPage {
    constructor(session2, browserContext2, opener) {
      this.cspErrorsAsynchronousForInlineScripts = true;
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._session = void 0;
      this._page = void 0;
      this._networkManager = void 0;
      this._browserContext = void 0;
      this._pagePromise = new _manualPromise2.ManualPromise();
      this._initializedPage = null;
      this._initializationFailed = false;
      this._opener = void 0;
      this._contextIdToContext = void 0;
      this._eventListeners = void 0;
      this._workers = /* @__PURE__ */ new Map();
      this._screencastId = void 0;
      this._initScripts = [];
      this._session = session2;
      this._opener = opener;
      this.rawKeyboard = new _ffInput.RawKeyboardImpl(session2);
      this.rawMouse = new _ffInput.RawMouseImpl(session2);
      this.rawTouchscreen = new _ffInput.RawTouchscreenImpl(session2);
      this._contextIdToContext = /* @__PURE__ */ new Map();
      this._browserContext = browserContext2;
      this._page = new _page.Page(this, browserContext2);
      this.rawMouse.setPage(this._page);
      this._networkManager = new _ffNetworkManager.FFNetworkManager(session2, this._page);
      this._page.on(_page.Page.Events.FrameDetached, (frame2) => this._removeContextsForFrame(frame2));
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(this._session, "Page.eventFired", this._onEventFired.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.frameAttached", this._onFrameAttached.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.frameDetached", this._onFrameDetached.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.navigationCommitted", this._onNavigationCommitted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.sameDocumentNavigation", this._onSameDocumentNavigation.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", this._onExecutionContextCreated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Runtime.executionContextDestroyed", this._onExecutionContextDestroyed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.linkClicked", (event) => this._onLinkClicked(event.phase)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.uncaughtError", this._onUncaughtError.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Runtime.console", this._onConsole.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.dialogOpened", this._onDialogOpened.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.bindingCalled", this._onBindingCalled.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", this._onFileChooserOpened.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.workerCreated", this._onWorkerCreated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.workerDestroyed", this._onWorkerDestroyed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.dispatchMessageFromWorker", this._onDispatchMessageFromWorker.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.crashed", this._onCrashed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.videoRecordingStarted", this._onVideoRecordingStarted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.webSocketCreated", this._onWebSocketCreated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.webSocketClosed", this._onWebSocketClosed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.webSocketFrameReceived", this._onWebSocketFrameReceived.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.webSocketFrameSent", this._onWebSocketFrameSent.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.screencastFrame", this._onScreencastFrame.bind(this))];
      this._session.once("Page.ready", async () => {
        await this._page.initOpener(this._opener);
        if (this._initializationFailed) return;
        this._initializedPage = this._page;
        this._page.reportAsNew();
        this._pagePromise.resolve(this._page);
      });
      this.addInitScript(new _page.InitScript("", true), UTILITY_WORLD_NAME).catch((e) => this._markAsError(e));
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _markAsError(error) {
      if (this._initializationFailed) return;
      this._initializationFailed = true;
      if (!this._initializedPage) {
        await this._page.initOpener(this._opener);
        this._page.reportAsNew(error);
        this._pagePromise.resolve(error);
      }
    }
    async pageOrError() {
      return this._pagePromise;
    }
    _onWebSocketCreated(event) {
      this._page._frameManager.onWebSocketCreated(webSocketId(event.frameId, event.wsid), event.requestURL);
      this._page._frameManager.onWebSocketRequest(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketClosed(event) {
      if (event.error) this._page._frameManager.webSocketError(webSocketId(event.frameId, event.wsid), event.error);
      this._page._frameManager.webSocketClosed(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketFrameReceived(event) {
      this._page._frameManager.webSocketFrameReceived(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onWebSocketFrameSent(event) {
      this._page._frameManager.onWebSocketFrameSent(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onExecutionContextCreated(payload) {
      const {
        executionContextId,
        auxData
      } = payload;
      const frame2 = this._page._frameManager.frame(auxData.frameId);
      if (!frame2) return;
      const delegate = new _ffExecutionContext.FFExecutionContext(this._session, executionContextId);
      let worldName = null;
      if (auxData.name === UTILITY_WORLD_NAME) worldName = "utility";
      else if (!auxData.name) worldName = "main";
      const context = new dom$1.FrameExecutionContext(delegate, frame2, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName) frame2._contextCreated(worldName, context);
      this._contextIdToContext.set(executionContextId, context);
    }
    _onExecutionContextDestroyed(payload) {
      const {
        executionContextId
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const executionContextId of Array.from(this._contextIdToContext.keys())) this._onExecutionContextDestroyed({
        executionContextId
      });
    }
    _removeContextsForFrame(frame2) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame2) this._contextIdToContext.delete(contextId);
      }
    }
    _onLinkClicked(phase) {
      if (phase === "before") this._page._frameManager.frameWillPotentiallyRequestNavigation();
      else this._page._frameManager.frameDidPotentiallyRequestNavigation();
    }
    _onNavigationStarted(params) {
      this._page._frameManager.frameRequestedNavigation(params.frameId, params.navigationId);
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.frameId, params.errorText, params.navigationId);
    }
    _onNavigationCommitted(params) {
      for (const [workerId, worker2] of this._workers) {
        if (worker2.frameId === params.frameId) this._onWorkerDestroyed({
          workerId
        });
      }
      this._page._frameManager.frameCommittedNewDocumentNavigation(params.frameId, params.url, params.name || "", params.navigationId || "", false);
    }
    _onSameDocumentNavigation(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.frameId, params.url);
    }
    _onFrameAttached(params) {
      this._page._frameManager.frameAttached(params.frameId, params.parentFrameId);
    }
    _onFrameDetached(params) {
      this._page._frameManager.frameDetached(params.frameId);
    }
    _onEventFired(payload) {
      const {
        frameId,
        name: name2
      } = payload;
      if (name2 === "load") this._page._frameManager.frameLifecycleEvent(frameId, "load");
      if (name2 === "DOMContentLoaded") this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onUncaughtError(params) {
      const {
        name: name2,
        message
      } = (0, _stackTrace2.splitErrorMessage)(params.message);
      const error = new Error(message);
      error.stack = params.message + "\n" + params.stack.split("\n").filter(Boolean).map((a) => a.replace(/([^@]*)@(.*)/, "    at $1 ($2)")).join("\n");
      error.name = name2;
      this._page.emitOnContextOnceInitialized(_browserContext2.BrowserContext.Events.PageError, error, this._page);
    }
    _onConsole(payload) {
      const {
        type,
        args,
        executionContextId,
        location: location2
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      this._page._addConsoleMessage(type === "warn" ? "warning" : type, args.map((arg) => context.createHandle(arg)), location2);
    }
    _onDialogOpened(params) {
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, params.type, params.message, async (accept, promptText) => {
        await this._session.sendMayFail("Page.handleDialog", {
          dialogId: params.dialogId,
          accept,
          promptText
        });
      }, params.defaultValue));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context) await this._page._onBindingCalled(event.payload, context);
      }
    }
    async _onFileChooserOpened(payload) {
      const {
        executionContextId,
        element
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context) return;
      const handle = context.createHandle(element).asElement();
      await this._page._onFileChooserOpened(handle);
    }
    async _onWorkerCreated(event) {
      const workerId = event.workerId;
      const worker2 = new _page.Worker(this._page, event.url);
      const workerSession = new _ffConnection.FFSession(this._session._connection, workerId, (message) => {
        this._session.send("Page.sendMessageToWorker", {
          frameId: event.frameId,
          workerId,
          message: JSON.stringify(message)
        }).catch((e) => {
          workerSession.dispatchMessage({
            id: message.id,
            method: "",
            params: {},
            error: {
              message: e.message,
              data: void 0
            }
          });
        });
      });
      this._workers.set(workerId, {
        session: workerSession,
        frameId: event.frameId
      });
      this._page._addWorker(workerId, worker2);
      workerSession.once("Runtime.executionContextCreated", (event2) => {
        worker2._createExecutionContext(new _ffExecutionContext.FFExecutionContext(workerSession, event2.executionContextId));
      });
      workerSession.on("Runtime.console", (event2) => {
        const {
          type,
          args,
          location: location2
        } = event2;
        const context = worker2._existingExecutionContext;
        this._page._addConsoleMessage(type, args.map((arg) => context.createHandle(arg)), location2);
      });
    }
    _onWorkerDestroyed(event) {
      const workerId = event.workerId;
      const worker2 = this._workers.get(workerId);
      if (!worker2) return;
      worker2.session.dispose();
      this._workers.delete(workerId);
      this._page._removeWorker(workerId);
    }
    async _onDispatchMessageFromWorker(event) {
      const worker2 = this._workers.get(event.workerId);
      if (!worker2) return;
      worker2.session.dispatchMessage(JSON.parse(event.message));
    }
    async _onCrashed(event) {
      this._session.markAsCrashed();
      this._page._didCrash();
    }
    _onVideoRecordingStarted(event) {
      this._browserContext._browser._videoStarted(this._browserContext, event.screencastId, event.file, this.pageOrError());
    }
    didClose() {
      this._markAsError(new _errors2.TargetClosedError());
      this._session.dispose();
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
      this._networkManager.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame2, url, referer) {
      const response = await this._session.send("Page.navigate", {
        url,
        referer,
        frameId: frame2._id
      });
      return {
        newDocumentId: response.navigationId || void 0
      };
    }
    async updateExtraHTTPHeaders() {
      await this._session.send("Network.setExtraHTTPHeaders", {
        headers: this._page.extraHTTPHeaders() || []
      });
    }
    async updateEmulatedViewportSize() {
      const viewportSize = this._page.viewportSize();
      await this._session.send("Page.setViewportSize", {
        viewportSize
      });
    }
    async bringToFront() {
      await this._session.send("Page.bringToFront", {});
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? void 0 : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? void 0 : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? void 0 : emulatedMedia.forcedColors;
      await this._session.send("Page.setEmulatedMedia", {
        // Empty string means reset.
        type: emulatedMedia.media === "no-override" ? "" : emulatedMedia.media,
        colorScheme,
        reducedMotion,
        forcedColors
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    async goBack() {
      const {
        success
      } = await this._session.send("Page.goBack", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async goForward() {
      const {
        success
      } = await this._session.send("Page.goForward", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async requestGC() {
      await this._session.send("Heap.collectGarbage");
    }
    async addInitScript(initScript, worldName) {
      this._initScripts.push({
        initScript,
        worldName
      });
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts.map((s) => ({
          script: s.initScript.source,
          worldName: s.worldName
        }))
      });
    }
    async removeNonInternalInitScripts() {
      this._initScripts = this._initScripts.filter((s) => s.initScript.internal);
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts.map((s) => ({
          script: s.initScript.source,
          worldName: s.worldName
        }))
      });
    }
    async closePage(runBeforeUnload) {
      await this._session.send("Page.close", {
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      if (color) throw new Error("Not implemented");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      if (!documentRect) {
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        documentRect = {
          x: viewportRect.x + scrollOffset.x,
          y: viewportRect.y + scrollOffset.y,
          width: viewportRect.width,
          height: viewportRect.height
        };
      }
      progress2.throwIfAborted();
      const {
        data
      } = await this._session.send("Page.screenshot", {
        mimeType: "image/" + format,
        clip: documentRect,
        quality,
        omitDeviceScaleFactor: scale === "css"
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const {
        contentFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!contentFrameId) return null;
      return this._page._frameManager.frame(contentFrameId);
    }
    async getOwnerFrame(handle) {
      const {
        ownerFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      return ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length) return null;
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("Page.scrollIntoViewIfNeeded", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node is detached from document")) return "error:notconnected";
        if (e instanceof Error && e.message.includes("Node does not have a layout object")) return "error:notvisible";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const {
          screencastId
        } = await this._session.send("Page.startScreencast", options);
        this._screencastId = screencastId;
      } else {
        await this._session.send("Page.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      if (!this._screencastId) return;
      const screencastId = this._screencastId;
      this._page.throttleScreencastFrameAck(() => {
        this._session.send("Page.screencastFrameAck", {
          screencastId
        }).catch((e) => _debugLogger2.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const result2 = await this._session.sendMayFail("Page.getContentQuads", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!result2) return null;
      return result2.quads.map((quad) => [quad.p1, quad.p2, quad.p3, quad.p4]);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(handle, files) {
      await this._session.send("Page.setFileInputFiles", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to2) {
      const result2 = await this._session.send("Page.adoptNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        executionContextId: to2[contextDelegateSymbol]._executionContextId
      });
      if (!result2.remoteObject) throw new Error(dom$1.kUnableToAdoptErrorMessage);
      return to2.createHandle(result2.remoteObject);
    }
    async getAccessibilityTree(needle) {
      return (0, _ffAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", /* @__PURE__ */ new Set(), /* @__PURE__ */ new Set(), false);
    }
    async getFrameElement(frame2) {
      const parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result2 = await this._session.send("Page.adoptNode", {
        frameId: frame2._id,
        executionContextId: context[contextDelegateSymbol]._executionContextId
      });
      if (!result2.remoteObject) throw new Error("Frame has been detached.");
      return context.createHandle(result2.remoteObject);
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  ffPage.FFPage = FFPage;
  function webSocketId(frameId, wsid) {
    return `${frameId}---${wsid}`;
  }
  const contextDelegateSymbol = Symbol("delegate");
  return ffPage;
}
var hasRequiredFfBrowser;
function requireFfBrowser() {
  if (hasRequiredFfBrowser) return ffBrowser;
  hasRequiredFfBrowser = 1;
  Object.defineProperty(ffBrowser, "__esModule", {
    value: true
  });
  ffBrowser.FFBrowserContext = ffBrowser.FFBrowser = void 0;
  var _errors2 = errors$2;
  var _utils2 = requireUtils();
  var _browser2 = requireBrowser$1();
  var _browserContext2 = requireBrowserContext$1();
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _page = requirePage$1();
  var _ffConnection = ffConnection;
  var _ffPage = requireFfPage();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class FFBrowser extends _browser2.Browser {
    static async connect(parent, transport2, options) {
      var _options$originalLaun;
      const connection2 = new _ffConnection.FFConnection(transport2, options.protocolLogger, options.browserLogsCollector);
      const browser2 = new FFBrowser(parent, connection2, options);
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      let firefoxUserPrefs = (_options$originalLaun = options.originalLaunchOptions.firefoxUserPrefs) !== null && _options$originalLaun !== void 0 ? _options$originalLaun : {};
      if (Object.keys(kBandaidFirefoxUserPrefs).length) firefoxUserPrefs = {
        ...kBandaidFirefoxUserPrefs,
        ...firefoxUserPrefs
      };
      const promises = [browser2.session.send("Browser.enable", {
        attachToDefaultContext: !!options.persistent,
        userPrefs: Object.entries(firefoxUserPrefs).map(([name2, value]) => ({
          name: name2,
          value
        }))
      }), browser2._initVersion()];
      if (options.persistent) {
        browser2._defaultContext = new FFBrowserContext(browser2, void 0, options.persistent);
        promises.push(browser2._defaultContext._initialize());
      }
      const proxy = options.originalLaunchOptions.proxyOverride || options.proxy;
      if (proxy) promises.push(browser2.session.send("Browser.setBrowserProxy", toJugglerProxyOptions(proxy)));
      await Promise.all(promises);
      return browser2;
    }
    constructor(parent, connection2, options) {
      super(parent, options);
      this._connection = void 0;
      this.session = void 0;
      this._ffPages = void 0;
      this._contexts = void 0;
      this._version = "";
      this._userAgent = "";
      this._connection = connection2;
      this.session = connection2.rootSession;
      this._ffPages = /* @__PURE__ */ new Map();
      this._contexts = /* @__PURE__ */ new Map();
      this._connection.on(_ffConnection.ConnectionEvents.Disconnected, () => this._onDisconnect());
      this.session.on("Browser.attachedToTarget", this._onAttachedToTarget.bind(this));
      this.session.on("Browser.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this.session.on("Browser.downloadCreated", this._onDownloadCreated.bind(this));
      this.session.on("Browser.downloadFinished", this._onDownloadFinished.bind(this));
      this.session.on("Browser.videoRecordingFinished", this._onVideoRecordingFinished.bind(this));
    }
    async _initVersion() {
      const result2 = await this.session.send("Browser.getInfo");
      this._version = result2.version.substring(result2.version.indexOf("/") + 1);
      this._userAgent = result2.userAgent;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async doCreateNewContext(options) {
      if (options.isMobile) throw new Error("options.isMobile is not supported in Firefox");
      const {
        browserContextId
      } = await this.session.send("Browser.createBrowserContext", {
        removeOnDetach: true
      });
      const context = new FFBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _onDetachedFromTarget(payload) {
      const ffPage2 = this._ffPages.get(payload.targetId);
      this._ffPages.delete(payload.targetId);
      ffPage2.didClose();
    }
    _onAttachedToTarget(payload) {
      const {
        targetId,
        browserContextId,
        openerId,
        type
      } = payload.targetInfo;
      (0, _utils2.assert)(type === "page");
      const context = browserContextId ? this._contexts.get(browserContextId) : this._defaultContext;
      (0, _utils2.assert)(context, `Unknown context id:${browserContextId}, _defaultContext: ${this._defaultContext}`);
      const session2 = this._connection.createSession(payload.sessionId);
      const opener = openerId ? this._ffPages.get(openerId) : null;
      const ffPage2 = new _ffPage.FFPage(session2, context, opener);
      this._ffPages.set(targetId, ffPage2);
    }
    _onDownloadCreated(payload) {
      const ffPage2 = this._ffPages.get(payload.pageTargetId);
      if (!ffPage2) return;
      ffPage2._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = ffPage2._initializedPage;
      if (!originPage) {
        ffPage2._markAsError(new Error("Starting new page download"));
        if (ffPage2._opener) originPage = ffPage2._opener._initializedPage;
      }
      if (!originPage) return;
      this._downloadCreated(originPage, payload.uuid, payload.url, payload.suggestedFileName);
    }
    _onDownloadFinished(payload) {
      const error = payload.canceled ? "canceled" : payload.error;
      this._downloadFinished(payload.uuid, error);
    }
    _onVideoRecordingFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === void 0 || _this$_takeVideo.reportFinished();
    }
    _onDisconnect() {
      for (const video2 of this._idToVideo.values()) video2.artifact.reportFinished(new _errors2.TargetClosedError());
      this._idToVideo.clear();
      for (const ffPage2 of this._ffPages.values()) ffPage2.didClose();
      this._ffPages.clear();
      this._didClose();
    }
  }
  ffBrowser.FFBrowser = FFBrowser;
  class FFBrowserContext extends _browserContext2.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
    }
    async _initialize() {
      (0, _utils2.assert)(!this._ffPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize(), this._browser.session.send("Browser.addBinding", {
        browserContextId: this._browserContextId,
        name: _page.PageBinding.kPlaywrightBinding,
        script: ""
      })];
      if (this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser.session.send("Browser.setDownloadOptions", {
          browserContextId,
          downloadOptions: {
            behavior: this._options.acceptDownloads === "accept" ? "saveToDisk" : "cancel",
            downloadsDir: this._browser.options.downloadsPath
          }
        }));
      }
      if (this._options.viewport) {
        const viewport = {
          viewportSize: {
            width: this._options.viewport.width,
            height: this._options.viewport.height
          },
          deviceScaleFactor: this._options.deviceScaleFactor || 1
        };
        promises.push(this._browser.session.send("Browser.setDefaultViewport", {
          browserContextId,
          viewport
        }));
      }
      if (this._options.hasTouch) promises.push(this._browser.session.send("Browser.setTouchOverride", {
        browserContextId,
        hasTouch: true
      }));
      if (this._options.userAgent) promises.push(this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId,
        userAgent: this._options.userAgent
      }));
      if (this._options.bypassCSP) promises.push(this._browser.session.send("Browser.setBypassCSP", {
        browserContextId,
        bypassCSP: true
      }));
      if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors) promises.push(this._browser.session.send("Browser.setIgnoreHTTPSErrors", {
        browserContextId,
        ignoreHTTPSErrors: true
      }));
      if (this._options.javaScriptEnabled === false) promises.push(this._browser.session.send("Browser.setJavaScriptDisabled", {
        browserContextId,
        javaScriptDisabled: true
      }));
      if (this._options.locale) promises.push(this._browser.session.send("Browser.setLocaleOverride", {
        browserContextId,
        locale: this._options.locale
      }));
      if (this._options.timezoneId) promises.push(this._browser.session.send("Browser.setTimezoneOverride", {
        browserContextId,
        timezoneId: this._options.timezoneId
      }));
      if (this._options.extraHTTPHeaders || this._options.locale) promises.push(this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []));
      if (this._options.httpCredentials) promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      if (this._options.geolocation) promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline) promises.push(this.setOffline(this._options.offline));
      if (this._options.colorScheme !== "no-override") {
        promises.push(this._browser.session.send("Browser.setColorScheme", {
          browserContextId,
          colorScheme: this._options.colorScheme !== void 0 ? this._options.colorScheme : "light"
        }));
      }
      if (this._options.reducedMotion !== "no-override") {
        promises.push(this._browser.session.send("Browser.setReducedMotion", {
          browserContextId,
          reducedMotion: this._options.reducedMotion !== void 0 ? this._options.reducedMotion : "no-preference"
        }));
      }
      if (this._options.forcedColors !== "no-override") {
        promises.push(this._browser.session.send("Browser.setForcedColors", {
          browserContextId,
          forcedColors: this._options.forcedColors !== void 0 ? this._options.forcedColors : "none"
        }));
      }
      if (this._options.recordVideo) {
        promises.push(this._ensureVideosPath().then(() => {
          return this._browser.session.send("Browser.setVideoRecordingOptions", {
            // validateBrowserContextOptions ensures correct video size.
            options: {
              ...this._options.recordVideo.size,
              dir: this._options.recordVideo.dir
            },
            browserContextId: this._browserContextId
          });
        }));
      }
      const proxy = this._options.proxyOverride || this._options.proxy;
      if (proxy) {
        promises.push(this._browser.session.send("Browser.setContextProxy", {
          browserContextId: this._browserContextId,
          ...toJugglerProxyOptions(proxy)
        }));
      }
      await Promise.all(promises);
    }
    _ffPages() {
      return Array.from(this._browser._ffPages.values()).filter((ffPage2) => ffPage2._browserContext === this);
    }
    pages() {
      return this._ffPages().map((ffPage2) => ffPage2._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext2.assertBrowserContextIsNotOwned)(this);
      const {
        targetId
      } = await this._browser.session.send("Browser.newPage", {
        browserContextId: this._browserContextId
      }).catch((e) => {
        if (e.message.includes("Failed to override timezone")) throw new Error(`Invalid timezone ID: ${this._options.timezoneId}`);
        throw e;
      });
      return this._browser._ffPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser.session.send("Browser.getCookies", {
        browserContextId: this._browserContextId
      });
      return network2.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        delete copy.size;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc2 = network2.rewriteCookies(cookies).map((c) => ({
        ...c,
        expires: c.expires === -1 ? void 0 : c.expires
      }));
      await this._browser.session.send("Browser.setCookies", {
        browserContextId: this._browserContextId,
        cookies: cc2
      });
    }
    async doClearCookies() {
      await this._browser.session.send("Browser.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = /* @__PURE__ */ new Map([["geolocation", "geo"], ["persistent-storage", "persistent-storage"], ["push", "push"], ["notifications", "desktop-notification"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission) throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser.session.send("Browser.grantPermissions", {
        origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser.session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext2.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      await this._browser.session.send("Browser.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: geolocation || null
      });
    }
    async setExtraHTTPHeaders(headers2) {
      this._options.extraHTTPHeaders = headers2;
      let allHeaders = this._options.extraHTTPHeaders;
      if (this._options.locale) allHeaders = network2.mergeHeaders([allHeaders, network2.singleHeader("Accept-Language", this._options.locale)]);
      await this._browser.session.send("Browser.setExtraHTTPHeaders", {
        browserContextId: this._browserContextId,
        headers: allHeaders
      });
    }
    async setUserAgent(userAgent2) {
      await this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId: this._browserContextId,
        userAgent: userAgent2 || null
      });
    }
    async setOffline(offline) {
      this._options.offline = offline;
      await this._browser.session.send("Browser.setOnlineOverride", {
        browserContextId: this._browserContextId,
        override: offline ? "offline" : "online"
      });
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      let credentials = null;
      if (httpCredentials) {
        const {
          username,
          password,
          origin
        } = httpCredentials;
        credentials = {
          username,
          password,
          origin
        };
      }
      await this._browser.session.send("Browser.setHTTPCredentials", {
        browserContextId: this._browserContextId,
        credentials
      });
    }
    async doAddInitScript(initScript) {
      await this._updateInitScripts();
    }
    async doRemoveNonInternalInitScripts() {
      await this._updateInitScripts();
    }
    async _updateInitScripts() {
      const bindingScripts = [...this._pageBindings.values()].map((binding) => binding.initScript.source);
      const initScripts = this.initScripts.map((script) => script.source);
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: [...bindingScripts, ...initScripts].map((script) => ({
          script
        }))
      });
    }
    async doUpdateRequestInterception() {
      await Promise.all([this._browser.session.send("Browser.setRequestInterception", {
        browserContextId: this._browserContextId,
        enabled: !!this._requestInterceptor
      }), this._browser.session.send("Browser.setCacheDisabled", {
        browserContextId: this._browserContextId,
        cacheDisabled: !!this._requestInterceptor
      })]);
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser.session.send("Browser.clearCache");
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        if (this._options.recordVideo) {
          await this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: void 0,
            browserContextId: this._browserContextId
          });
        }
        await this._browser.close({
          reason
        });
      } else {
        await this._browser.session.send("Browser.removeBrowserContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid) {
      await this._browser.session.send("Browser.cancelDownload", {
        uuid
      });
    }
  }
  ffBrowser.FFBrowserContext = FFBrowserContext;
  function toJugglerProxyOptions(proxy) {
    const proxyServer = new URL(proxy.server);
    let port = parseInt(proxyServer.port, 10);
    let type = "http";
    if (proxyServer.protocol === "socks5:") type = "socks";
    else if (proxyServer.protocol === "socks4:") type = "socks4";
    else if (proxyServer.protocol === "https:") type = "https";
    if (proxyServer.port === "") {
      if (proxyServer.protocol === "http:") port = 80;
      else if (proxyServer.protocol === "https:") port = 443;
    }
    return {
      type,
      bypass: proxy.bypass ? proxy.bypass.split(",").map((domain) => domain.trim()) : [],
      host: proxyServer.hostname,
      port,
      username: proxy.username,
      password: proxy.password
    };
  }
  const kBandaidFirefoxUserPrefs = {};
  return ffBrowser;
}
var hasRequiredFirefox;
function requireFirefox() {
  if (hasRequiredFirefox) return firefox$1;
  hasRequiredFirefox = 1;
  Object.defineProperty(firefox$1, "__esModule", {
    value: true
  });
  firefox$1.Firefox = void 0;
  var os = _interopRequireWildcard2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _ffBrowser = requireFfBrowser();
  var _ffConnection = ffConnection;
  var _browserType = requireBrowserType$1();
  var _utils2 = requireUtils();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class Firefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "firefox");
    }
    connectToTransport(transport2, options) {
      return _ffBrowser.FFBrowser.connect(this.attribution.playwright, transport2, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`)) error.logs = "\n" + (0, _utils2.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified")) error.logs = "\n" + (0, _utils2.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      if (!_path2.default.isAbsolute(os.homedir())) throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${os.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      if (os.platform() === "linux") {
        return {
          ...env2,
          SNAP_NAME: void 0,
          SNAP_INSTANCE_NAME: void 0
        };
      }
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      const message = {
        method: "Browser.close",
        params: {},
        id: _ffConnection.kBrowserCloseMessageId
      };
      transport2.send(message);
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--profile");
      if (args.find((arg) => arg.startsWith("-juggler"))) throw new Error("Use the port parameter instead of -juggler argument");
      const firefoxArguments = ["-no-remote"];
      if (headless) {
        firefoxArguments.push("-headless");
      } else {
        firefoxArguments.push("-wait-for-browser");
        firefoxArguments.push("-foreground");
      }
      firefoxArguments.push(`-profile`, userDataDir);
      firefoxArguments.push("-juggler-pipe");
      firefoxArguments.push(...args);
      if (isPersistent) firefoxArguments.push("about:blank");
      else firefoxArguments.push("-silent");
      return firefoxArguments;
    }
    readyState(options) {
      return new JugglerReadyState();
    }
  }
  firefox$1.Firefox = Firefox;
  class JugglerReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      if (message.includes("Juggler listening to the pipe")) this._wsEndpoint.resolve(void 0);
    }
  }
  return firefox$1;
}
var selectors$2 = {};
Object.defineProperty(selectors$2, "__esModule", {
  value: true
});
selectors$2.Selectors = void 0;
var _selectorParser = selectorParser;
var _utils$n = requireUtils();
let Selectors$1 = class Selectors {
  constructor() {
    this._builtinEngines = void 0;
    this._builtinEnginesInMainWorld = void 0;
    this._engines = void 0;
    this.guid = `selectors@${(0, _utils$n.createGuid)()}`;
    this._testIdAttributeName = "data-testid";
    this._builtinEngines = /* @__PURE__ */ new Set(["css", "css:light", "xpath", "xpath:light", "_react", "_vue", "text", "text:light", "id", "id:light", "data-testid", "data-testid:light", "data-test-id", "data-test-id:light", "data-test", "data-test:light", "nth", "visible", "internal:control", "internal:has", "internal:has-not", "internal:has-text", "internal:has-not-text", "internal:and", "internal:or", "internal:chain", "role", "internal:attr", "internal:label", "internal:text", "internal:role", "internal:testid"]);
    this._builtinEnginesInMainWorld = /* @__PURE__ */ new Set(["_react", "_vue"]);
    this._engines = /* @__PURE__ */ new Map();
  }
  async register(name2, source2, contentScript = false) {
    if (!name2.match(/^[a-zA-Z_0-9-]+$/)) throw new Error("Selector engine name may only contain [a-zA-Z0-9_] characters");
    if (this._builtinEngines.has(name2) || name2 === "zs" || name2 === "zs:light") throw new Error(`"${name2}" is a predefined selector engine`);
    if (this._engines.has(name2)) throw new Error(`"${name2}" selector engine has been already registered`);
    this._engines.set(name2, {
      source: source2,
      contentScript
    });
  }
  testIdAttributeName() {
    return this._testIdAttributeName;
  }
  setTestIdAttributeName(testIdAttributeName) {
    this._testIdAttributeName = testIdAttributeName;
  }
  unregisterAll() {
    this._engines.clear();
  }
  parseSelector(selector, strict) {
    const parsed = typeof selector === "string" ? (0, _selectorParser.parseSelector)(selector) : selector;
    let needsMainWorld = false;
    (0, _selectorParser.visitAllSelectorParts)(parsed, (part) => {
      const name2 = part.name;
      const custom = this._engines.get(name2);
      if (!custom && !this._builtinEngines.has(name2)) throw new _selectorParser.InvalidSelectorError(`Unknown engine "${name2}" while parsing selector ${(0, _selectorParser.stringifySelector)(parsed)}`);
      if (custom && !custom.contentScript) needsMainWorld = true;
      if (this._builtinEnginesInMainWorld.has(name2)) needsMainWorld = true;
    });
    return {
      parsed,
      world: needsMainWorld ? "main" : "utility",
      strict
    };
  }
};
selectors$2.Selectors = Selectors$1;
var webkit$1 = {};
var wkBrowser = {};
var wkConnection = {};
Object.defineProperty(wkConnection, "__esModule", {
  value: true
});
wkConnection.kPageProxyMessageReceived = wkConnection.kBrowserCloseMessageId = wkConnection.WKSession = wkConnection.WKConnection = void 0;
var _events$6 = require$$0$1;
var _utils$m = requireUtils();
var _debugLogger$5 = debugLogger;
var _helper$2 = helper;
var _protocolError$2 = protocolError;
const kBrowserCloseMessageId$1 = wkConnection.kBrowserCloseMessageId = -9999;
const kPageProxyMessageReceived = wkConnection.kPageProxyMessageReceived = Symbol("kPageProxyMessageReceived");
class WKConnection {
  constructor(transport2, onDisconnect, protocolLogger, browserLogsCollector) {
    this._transport = void 0;
    this._onDisconnect = void 0;
    this._protocolLogger = void 0;
    this._browserLogsCollector = void 0;
    this._browserDisconnectedLogs = void 0;
    this._lastId = 0;
    this._closed = false;
    this.browserSession = void 0;
    this._transport = transport2;
    this._onDisconnect = onDisconnect;
    this._protocolLogger = protocolLogger;
    this._browserLogsCollector = browserLogsCollector;
    this.browserSession = new WKSession(this, "", (message) => {
      this.rawSend(message);
    });
    this._transport.onmessage = this._dispatchMessage.bind(this);
    this._transport.onclose = this._onClose.bind(this);
  }
  nextMessageId() {
    return ++this._lastId;
  }
  rawSend(message) {
    this._protocolLogger("send", message);
    this._transport.send(message);
  }
  _dispatchMessage(message) {
    this._protocolLogger("receive", message);
    if (message.id === kBrowserCloseMessageId$1) return;
    if (message.pageProxyId) {
      const payload = {
        message,
        pageProxyId: message.pageProxyId
      };
      this.browserSession.dispatchMessage({
        method: kPageProxyMessageReceived,
        params: payload
      });
      return;
    }
    this.browserSession.dispatchMessage(message);
  }
  _onClose(reason) {
    this._closed = true;
    this._transport.onmessage = void 0;
    this._transport.onclose = void 0;
    this._browserDisconnectedLogs = _helper$2.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
    this.browserSession.dispose();
    this._onDisconnect();
  }
  isClosed() {
    return this._closed;
  }
  close() {
    if (!this._closed) this._transport.close();
  }
}
wkConnection.WKConnection = WKConnection;
class WKSession extends _events$6.EventEmitter {
  constructor(connection2, sessionId, rawSend) {
    super();
    this.connection = void 0;
    this.sessionId = void 0;
    this._disposed = false;
    this._rawSend = void 0;
    this._callbacks = /* @__PURE__ */ new Map();
    this._crashed = false;
    this.on = void 0;
    this.addListener = void 0;
    this.off = void 0;
    this.removeListener = void 0;
    this.once = void 0;
    this.setMaxListeners(0);
    this.connection = connection2;
    this.sessionId = sessionId;
    this._rawSend = rawSend;
    this.on = super.on;
    this.off = super.removeListener;
    this.addListener = super.addListener;
    this.removeListener = super.removeListener;
    this.once = super.once;
  }
  async send(method, params) {
    if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs) throw new _protocolError$2.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this.connection._browserDisconnectedLogs);
    const id = this.connection.nextMessageId();
    const messageObj = {
      id,
      method,
      params
    };
    this._rawSend(messageObj);
    return new Promise((resolve, reject) => {
      this._callbacks.set(id, {
        resolve,
        reject,
        error: new _protocolError$2.ProtocolError("error", method)
      });
    });
  }
  sendMayFail(method, params) {
    return this.send(method, params).catch((error) => _debugLogger$5.debugLogger.log("error", error));
  }
  markAsCrashed() {
    this._crashed = true;
  }
  isDisposed() {
    return this._disposed;
  }
  dispose() {
    for (const callback of this._callbacks.values()) {
      callback.error.type = this._crashed ? "crashed" : "closed";
      callback.error.logs = this.connection._browserDisconnectedLogs;
      callback.reject(callback.error);
    }
    this._callbacks.clear();
    this._disposed = true;
  }
  dispatchMessage(object) {
    if (object.id && this._callbacks.has(object.id)) {
      const callback = this._callbacks.get(object.id);
      this._callbacks.delete(object.id);
      if (object.error) {
        callback.error.setMessage(object.error.message);
        callback.reject(callback.error);
      } else {
        callback.resolve(object.result);
      }
    } else if (object.id && !object.error) {
      (0, _utils$m.assert)(this.isDisposed());
    } else {
      Promise.resolve().then(() => this.emit(object.method, object.params));
    }
  }
}
wkConnection.WKSession = WKSession;
var wkPage = {};
var wkAccessibility = {};
Object.defineProperty(wkAccessibility, "__esModule", {
  value: true
});
wkAccessibility.getAccessibilityTree = getAccessibilityTree;
async function getAccessibilityTree(session2, needle) {
  const objectId = needle ? needle._objectId : void 0;
  const {
    axNode
  } = await session2.send("Page.accessibilitySnapshot", {
    objectId
  });
  const tree = new WKAXNode(axNode);
  return {
    tree,
    needle: needle ? tree._findNeedle() : null
  };
}
const WKRoleToARIARole = new Map(Object.entries({
  "TextField": "textbox"
}));
const WKUnhelpfulRoleDescriptions = new Map(Object.entries({
  "WebArea": "HTML content",
  "Summary": "summary",
  "DescriptionList": "description list",
  "ImageMap": "image map",
  "ListMarker": "list marker",
  "Video": "video playback",
  "Mark": "highlighted",
  "contentinfo": "content information",
  "Details": "details",
  "DescriptionListDetail": "description",
  "DescriptionListTerm": "term",
  "alertdialog": "web alert dialog",
  "dialog": "web dialog",
  "status": "application status",
  "tabpanel": "tab panel",
  "application": "web application"
}));
class WKAXNode {
  constructor(payload) {
    this._payload = void 0;
    this._children = void 0;
    this._payload = payload;
    this._children = [];
    for (const payload2 of this._payload.children || []) this._children.push(new WKAXNode(payload2));
  }
  children() {
    return this._children;
  }
  _findNeedle() {
    if (this._payload.found) return this;
    for (const child of this._children) {
      const found = child._findNeedle();
      if (found) return found;
    }
    return null;
  }
  isControl() {
    switch (this._payload.role) {
      case "button":
      case "checkbox":
      case "ColorWell":
      case "combobox":
      case "DisclosureTriangle":
      case "listbox":
      case "menu":
      case "menubar":
      case "menuitem":
      case "menuitemcheckbox":
      case "menuitemradio":
      case "radio":
      case "scrollbar":
      case "searchbox":
      case "slider":
      case "spinbutton":
      case "switch":
      case "tab":
      case "textbox":
      case "TextField":
      case "tree":
        return true;
      default:
        return false;
    }
  }
  _isTextControl() {
    switch (this._payload.role) {
      case "combobox":
      case "searchfield":
      case "textbox":
      case "TextField":
        return true;
    }
    return false;
  }
  _name() {
    if (this._payload.role === "text") return this._payload.value || "";
    return this._payload.name || "";
  }
  isInteresting(insideControl) {
    const {
      role,
      focusable
    } = this._payload;
    const name2 = this._name();
    if (role === "ScrollArea") return false;
    if (role === "WebArea") return true;
    if (focusable || role === "MenuListOption") return true;
    if (this.isControl()) return true;
    if (insideControl) return false;
    return this.isLeafNode() && !!name2;
  }
  _hasRedundantTextChild() {
    if (this._children.length !== 1) return false;
    const child = this._children[0];
    return child._payload.role === "text" && this._payload.name === child._payload.value;
  }
  isLeafNode() {
    if (!this._children.length) return true;
    if (this._isTextControl()) return true;
    if (this._hasRedundantTextChild()) return true;
    return false;
  }
  serialize() {
    const node = {
      role: WKRoleToARIARole.get(this._payload.role) || this._payload.role,
      name: this._name()
    };
    if ("description" in this._payload && this._payload.description !== node.name) node.description = this._payload.description;
    if ("roledescription" in this._payload) {
      const roledescription = this._payload.roledescription;
      if (roledescription !== this._payload.role && WKUnhelpfulRoleDescriptions.get(this._payload.role) !== roledescription) node.roledescription = roledescription;
    }
    if ("value" in this._payload && this._payload.role !== "text") {
      if (typeof this._payload.value === "string") node.valueString = this._payload.value;
      else if (typeof this._payload.value === "number") node.valueNumber = this._payload.value;
    }
    if ("checked" in this._payload) node.checked = this._payload.checked === "true" ? "checked" : this._payload.checked === "false" ? "unchecked" : "mixed";
    if ("pressed" in this._payload) node.pressed = this._payload.pressed === "true" ? "pressed" : this._payload.pressed === "false" ? "released" : "mixed";
    const userStringProperties = ["keyshortcuts", "valuetext"];
    for (const userStringProperty of userStringProperties) {
      if (!(userStringProperty in this._payload)) continue;
      node[userStringProperty] = this._payload[userStringProperty];
    }
    const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiselectable", "readonly", "required", "selected"];
    for (const booleanProperty of booleanProperties) {
      if (booleanProperty === "focused" && (this._payload.role === "WebArea" || this._payload.role === "ScrollArea")) continue;
      const value = this._payload[booleanProperty];
      if (!value) continue;
      node[booleanProperty] = value;
    }
    const numericalProperties = ["level", "valuemax", "valuemin"];
    for (const numericalProperty of numericalProperties) {
      if (!(numericalProperty in this._payload)) continue;
      node[numericalProperty] = this._payload[numericalProperty];
    }
    const tokenProperties = ["autocomplete", "haspopup", "invalid"];
    for (const tokenProperty of tokenProperties) {
      const value = this._payload[tokenProperty];
      if (!value || value === "false") continue;
      node[tokenProperty] = value;
    }
    const orientationIsApplicable = /* @__PURE__ */ new Set(["ScrollArea", "scrollbar", "listbox", "combobox", "menu", "tree", "separator", "slider", "tablist", "toolbar"]);
    if (this._payload.orientation && orientationIsApplicable.has(this._payload.role)) node.orientation = this._payload.orientation;
    return node;
  }
}
var wkExecutionContext = {};
Object.defineProperty(wkExecutionContext, "__esModule", {
  value: true
});
wkExecutionContext.WKExecutionContext = void 0;
var js$1 = _interopRequireWildcard$6(javascript$1);
var _utilityScriptSerializers$1 = utilityScriptSerializers;
var _protocolError$1 = protocolError;
function _getRequireWildcardCache$6(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$6 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$6(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$6(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class WKExecutionContext {
  constructor(session2, contextId) {
    this._session = void 0;
    this._contextId = void 0;
    this._session = session2;
    this._contextId = contextId;
  }
  async rawEvaluateJSON(expression) {
    try {
      const response = await this._session.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId,
        returnByValue: true
      });
      if (response.wasThrown) throw new js$1.JavaScriptErrorInEvaluate(response.result.description);
      return response.result.value;
    } catch (error) {
      throw rewriteError(error);
    }
  }
  async rawEvaluateHandle(expression) {
    try {
      const response = await this._session.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId,
        returnByValue: false
      });
      if (response.wasThrown) throw new js$1.JavaScriptErrorInEvaluate(response.result.description);
      return response.result.objectId;
    } catch (error) {
      throw rewriteError(error);
    }
  }
  rawCallFunctionNoReply(func, ...args) {
    this._session.send("Runtime.callFunctionOn", {
      functionDeclaration: func.toString(),
      objectId: args.find((a) => a instanceof js$1.JSHandle)._objectId,
      arguments: args.map((a) => a instanceof js$1.JSHandle ? {
        objectId: a._objectId
      } : {
        value: a
      }),
      returnByValue: true,
      emulateUserGesture: true
    }).catch(() => {
    });
  }
  async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
    try {
      const response = await this._session.send("Runtime.callFunctionOn", {
        functionDeclaration: expression,
        objectId: utilityScript._objectId,
        arguments: [{
          objectId: utilityScript._objectId
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId
        }))],
        returnByValue,
        emulateUserGesture: true,
        awaitPromise: true
      });
      if (response.wasThrown) throw new js$1.JavaScriptErrorInEvaluate(response.result.description);
      if (returnByValue) return (0, _utilityScriptSerializers$1.parseEvaluationResultValue)(response.result.value);
      return utilityScript._context.createHandle(response.result);
    } catch (error) {
      throw rewriteError(error);
    }
  }
  async getProperties(context, objectId) {
    const response = await this._session.send("Runtime.getProperties", {
      objectId,
      ownProperties: true
    });
    const result2 = /* @__PURE__ */ new Map();
    for (const property of response.properties) {
      if (!property.enumerable || !property.value) continue;
      result2.set(property.name, context.createHandle(property.value));
    }
    return result2;
  }
  createHandle(context, remoteObject) {
    const isPromise = remoteObject.className === "Promise";
    return new js$1.JSHandle(context, isPromise ? "promise" : remoteObject.subtype || remoteObject.type, renderPreview$1(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
  }
  async releaseHandle(objectId) {
    await this._session.send("Runtime.releaseObject", {
      objectId
    });
  }
}
wkExecutionContext.WKExecutionContext = WKExecutionContext;
function potentiallyUnserializableValue(remoteObject) {
  const value = remoteObject.value;
  const isUnserializable = remoteObject.type === "number" && ["NaN", "-Infinity", "Infinity", "-0"].includes(remoteObject.description);
  return isUnserializable ? js$1.parseUnserializableValue(remoteObject.description) : value;
}
function rewriteError(error) {
  if (!js$1.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError$1.isSessionClosedError)(error)) return new Error("Execution context was destroyed, most likely because of a navigation.");
  return error;
}
function renderPreview$1(object) {
  if (object.type === "undefined") return "undefined";
  if ("value" in object) return String(object.value);
  if (object.description === "Object" && object.preview) {
    const tokens = [];
    for (const {
      name: name2,
      value
    } of object.preview.properties) tokens.push(`${name2}: ${value}`);
    return `{${tokens.join(", ")}}`;
  }
  if (object.subtype === "array" && object.preview) return js$1.sparseArrayToString(object.preview.properties);
  return object.description;
}
var wkInput = {};
Object.defineProperty(wkInput, "__esModule", {
  value: true
});
wkInput.RawTouchscreenImpl = wkInput.RawMouseImpl = wkInput.RawKeyboardImpl = void 0;
var input$1 = _interopRequireWildcard$5(input$3);
var _macEditingCommands = macEditingCommands;
var _utils$l = requireUtils();
function _getRequireWildcardCache$5(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$5 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$5(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$5(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function toModifiersMask(modifiers) {
  let mask = 0;
  if (modifiers.has("Shift")) mask |= 1;
  if (modifiers.has("Control")) mask |= 2;
  if (modifiers.has("Alt")) mask |= 4;
  if (modifiers.has("Meta")) mask |= 8;
  return mask;
}
function toButtonsMask(buttons) {
  let mask = 0;
  if (buttons.has("left")) mask |= 1;
  if (buttons.has("right")) mask |= 2;
  if (buttons.has("middle")) mask |= 4;
  return mask;
}
let RawKeyboardImpl$1 = class RawKeyboardImpl3 {
  constructor(session2) {
    this._pageProxySession = void 0;
    this._session = void 0;
    this._pageProxySession = session2;
  }
  setSession(session2) {
    this._session = session2;
  }
  async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
    const parts = [];
    for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
      if (modifiers.has(modifier)) parts.push(modifier);
    }
    parts.push(code);
    const shortcut = parts.join("+");
    let commands = _macEditingCommands.macEditingCommands[shortcut];
    if ((0, _utils$l.isString)(commands)) commands = [commands];
    await this._pageProxySession.send("Input.dispatchKeyEvent", {
      type: "keyDown",
      modifiers: toModifiersMask(modifiers),
      windowsVirtualKeyCode: keyCode,
      code,
      key,
      text,
      unmodifiedText: text,
      autoRepeat,
      macCommands: commands,
      isKeypad: location2 === input$1.keypadLocation
    });
  }
  async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
    await this._pageProxySession.send("Input.dispatchKeyEvent", {
      type: "keyUp",
      modifiers: toModifiersMask(modifiers),
      key,
      windowsVirtualKeyCode: keyCode,
      code,
      isKeypad: location2 === input$1.keypadLocation
    });
  }
  async sendText(text) {
    await this._session.send("Page.insertText", {
      text
    });
  }
};
wkInput.RawKeyboardImpl = RawKeyboardImpl$1;
let RawMouseImpl$1 = class RawMouseImpl3 {
  constructor(session2) {
    this._pageProxySession = void 0;
    this._session = void 0;
    this._page = void 0;
    this._pageProxySession = session2;
  }
  setSession(session2) {
    this._session = session2;
  }
  async move(x, y, button, buttons, modifiers, forClick) {
    await this._pageProxySession.send("Input.dispatchMouseEvent", {
      type: "move",
      button,
      buttons: toButtonsMask(buttons),
      x,
      y,
      modifiers: toModifiersMask(modifiers)
    });
  }
  async down(x, y, button, buttons, modifiers, clickCount) {
    await this._pageProxySession.send("Input.dispatchMouseEvent", {
      type: "down",
      button,
      buttons: toButtonsMask(buttons),
      x,
      y,
      modifiers: toModifiersMask(modifiers),
      clickCount
    });
  }
  async up(x, y, button, buttons, modifiers, clickCount) {
    await this._pageProxySession.send("Input.dispatchMouseEvent", {
      type: "up",
      button,
      buttons: toButtonsMask(buttons),
      x,
      y,
      modifiers: toModifiersMask(modifiers),
      clickCount
    });
  }
  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
    var _this$_page;
    if ((_this$_page = this._page) !== null && _this$_page !== void 0 && _this$_page._browserContext._options.isMobile) throw new Error("Mouse wheel is not supported in mobile WebKit");
    await this._session.send("Page.updateScrollingState");
    await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
      world: "utility"
    });
    await this._pageProxySession.send("Input.dispatchWheelEvent", {
      x,
      y,
      deltaX,
      deltaY,
      modifiers: toModifiersMask(modifiers)
    });
  }
  setPage(page2) {
    this._page = page2;
  }
};
wkInput.RawMouseImpl = RawMouseImpl$1;
let RawTouchscreenImpl$1 = class RawTouchscreenImpl3 {
  constructor(session2) {
    this._pageProxySession = void 0;
    this._pageProxySession = session2;
  }
  async tap(x, y, modifiers) {
    await this._pageProxySession.send("Input.dispatchTapEvent", {
      x,
      y,
      modifiers: toModifiersMask(modifiers)
    });
  }
};
wkInput.RawTouchscreenImpl = RawTouchscreenImpl$1;
var wkInterceptableRequest = {};
var hasRequiredWkInterceptableRequest;
function requireWkInterceptableRequest() {
  if (hasRequiredWkInterceptableRequest) return wkInterceptableRequest;
  hasRequiredWkInterceptableRequest = 1;
  Object.defineProperty(wkInterceptableRequest, "__esModule", {
    value: true
  });
  wkInterceptableRequest.WKRouteImpl = wkInterceptableRequest.WKInterceptableRequest = void 0;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _utils2 = requireUtils();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const errorReasons = {
    "aborted": "Cancellation",
    "accessdenied": "AccessControl",
    "addressunreachable": "General",
    "blockedbyclient": "Cancellation",
    "blockedbyresponse": "General",
    "connectionaborted": "General",
    "connectionclosed": "General",
    "connectionfailed": "General",
    "connectionrefused": "General",
    "connectionreset": "General",
    "internetdisconnected": "General",
    "namenotresolved": "General",
    "timedout": "Timeout",
    "failed": "General"
  };
  class WKInterceptableRequest {
    constructor(session2, frame2, event, redirectedFrom, documentId) {
      this._session = void 0;
      this._requestId = void 0;
      this.request = void 0;
      this._timestamp = void 0;
      this._wallTime = void 0;
      this._session = session2;
      this._requestId = event.requestId;
      const resourceType = event.type ? event.type.toLowerCase() : redirectedFrom ? redirectedFrom.request.resourceType() : "other";
      let postDataBuffer = null;
      this._timestamp = event.timestamp;
      this._wallTime = event.walltime * 1e3;
      if (event.request.postData) postDataBuffer = Buffer.from(event.request.postData, "base64");
      this.request = new network2.Request(frame2._page._browserContext, frame2, null, (redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom.request) || null, documentId, event.request.url, resourceType, event.request.method, postDataBuffer, (0, _utils2.headersObjectToArray)(event.request.headers));
    }
    adoptRequestFromNewProcess(newSession, requestId) {
      this._session = newSession;
      this._requestId = requestId;
    }
    createResponse(responsePayload) {
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: this._requestId
        });
        return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
      };
      const timingPayload = responsePayload.timing;
      const timing = {
        startTime: this._wallTime,
        domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,
        domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,
        connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,
        secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,
        connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,
        requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,
        responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1
      };
      const setCookieSeparator = process.platform === "darwin" ? "," : "playwright-set-cookie-separator";
      const response = new network2.Response(this.request, responsePayload.status, responsePayload.statusText, (0, _utils2.headersObjectToArray)(responsePayload.headers, ",", setCookieSeparator), timing, getResponseBody, responsePayload.source === "service-worker");
      response.setRawResponseHeaders(null);
      response.setTransferSize(null);
      if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {
        const headers2 = {
          ...responsePayload.requestHeaders
        };
        if (!headers2["host"]) headers2["Host"] = new URL(this.request.url()).host;
        this.request.setRawRequestHeaders((0, _utils2.headersObjectToArray)(headers2));
      } else {
        this.request.setRawRequestHeaders(null);
      }
      return response;
    }
  }
  wkInterceptableRequest.WKInterceptableRequest = WKInterceptableRequest;
  class WKRouteImpl {
    constructor(session2, requestId) {
      this._session = void 0;
      this._requestId = void 0;
      this._session = session2;
      this._requestId = requestId;
    }
    async abort(errorCode) {
      const errorType = errorReasons[errorCode];
      (0, _utils2.assert)(errorType, "Unknown error code: " + errorCode);
      await this._session.sendMayFail("Network.interceptRequestWithError", {
        requestId: this._requestId,
        errorType
      });
    }
    async fulfill(response) {
      if (300 <= response.status && response.status < 400) throw new Error("Cannot fulfill with redirect status: " + response.status);
      let mimeType2 = response.isBase64 ? "application/octet-stream" : "text/plain";
      const headers2 = (0, _utils2.headersArrayToObject)(
        response.headers,
        true
        /* lowerCase */
      );
      const contentType = headers2["content-type"];
      if (contentType) mimeType2 = contentType.split(";")[0].trim();
      await this._session.sendMayFail("Network.interceptRequestWithResponse", {
        requestId: this._requestId,
        status: response.status,
        statusText: network2.statusText(response.status),
        mimeType: mimeType2,
        headers: headers2,
        base64Encoded: response.isBase64,
        content: response.body
      });
    }
    async continue(overrides) {
      await this._session.sendMayFail("Network.interceptWithRequest", {
        requestId: this._requestId,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers ? (0, _utils2.headersArrayToObject)(
          overrides.headers,
          false
          /* lowerCase */
        ) : void 0,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : void 0
      });
    }
  }
  wkInterceptableRequest.WKRouteImpl = WKRouteImpl;
  function wkMillisToRoundishMillis(value) {
    if (value === -1e3) return -1;
    if (value <= 0) {
      return -1;
    }
    return (value * 1e3 | 0) / 1e3;
  }
  return wkInterceptableRequest;
}
var wkProvisionalPage = {};
Object.defineProperty(wkProvisionalPage, "__esModule", {
  value: true
});
wkProvisionalPage.WKProvisionalPage = void 0;
var _eventsHelper$1 = eventsHelper;
var _utils$k = requireUtils();
class WKProvisionalPage {
  constructor(session2, page2) {
    var _page$_page$mainFrame;
    this._session = void 0;
    this._wkPage = void 0;
    this._coopNavigationRequest = void 0;
    this._sessionListeners = [];
    this._mainFrameId = null;
    this.initializationPromise = void 0;
    this._session = session2;
    this._wkPage = page2;
    this._coopNavigationRequest = (_page$_page$mainFrame = page2._page.mainFrame().pendingDocument()) === null || _page$_page$mainFrame === void 0 ? void 0 : _page$_page$mainFrame.request;
    const overrideFrameId = (handler) => {
      return (payload) => {
        if (payload.frameId) payload.frameId = this._wkPage._page._frameManager.mainFrame()._id;
        handler(payload);
      };
    };
    const wkPage2 = this._wkPage;
    this._sessionListeners = [_eventsHelper$1.eventsHelper.addEventListener(session2, "Network.requestWillBeSent", overrideFrameId((e) => this._onRequestWillBeSent(e))), _eventsHelper$1.eventsHelper.addEventListener(session2, "Network.requestIntercepted", overrideFrameId((e) => wkPage2._onRequestIntercepted(session2, e))), _eventsHelper$1.eventsHelper.addEventListener(session2, "Network.responseReceived", overrideFrameId((e) => wkPage2._onResponseReceived(session2, e))), _eventsHelper$1.eventsHelper.addEventListener(session2, "Network.loadingFinished", overrideFrameId((e) => this._onLoadingFinished(e))), _eventsHelper$1.eventsHelper.addEventListener(session2, "Network.loadingFailed", overrideFrameId((e) => this._onLoadingFailed(e)))];
    this.initializationPromise = this._wkPage._initializeSession(session2, true, ({
      frameTree
    }) => this._handleFrameTree(frameTree));
  }
  coopNavigationRequest() {
    return this._coopNavigationRequest;
  }
  dispose() {
    _eventsHelper$1.eventsHelper.removeEventListeners(this._sessionListeners);
  }
  commit() {
    (0, _utils$k.assert)(this._mainFrameId);
    this._wkPage._onFrameAttached(this._mainFrameId, null);
  }
  _onRequestWillBeSent(event) {
    if (this._coopNavigationRequest && this._coopNavigationRequest.url() === event.request.url) {
      this._wkPage._adoptRequestFromNewProcess(this._coopNavigationRequest, this._session, event.requestId);
      return;
    }
    this._wkPage._onRequestWillBeSent(this._session, event);
  }
  _onLoadingFinished(event) {
    this._coopNavigationRequest = void 0;
    this._wkPage._onLoadingFinished(event);
  }
  _onLoadingFailed(event) {
    this._coopNavigationRequest = void 0;
    this._wkPage._onLoadingFailed(this._session, event);
  }
  _handleFrameTree(frameTree) {
    (0, _utils$k.assert)(!frameTree.frame.parentId);
    this._mainFrameId = frameTree.frame.id;
  }
}
wkProvisionalPage.WKProvisionalPage = WKProvisionalPage;
var wkWorkers = {};
var hasRequiredWkWorkers;
function requireWkWorkers() {
  if (hasRequiredWkWorkers) return wkWorkers;
  hasRequiredWkWorkers = 1;
  Object.defineProperty(wkWorkers, "__esModule", {
    value: true
  });
  wkWorkers.WKWorkers = void 0;
  var _eventsHelper2 = eventsHelper;
  var _page = requirePage$1();
  var _wkConnection = wkConnection;
  var _wkExecutionContext = wkExecutionContext;
  class WKWorkers {
    constructor(page2) {
      this._sessionListeners = [];
      this._page = void 0;
      this._workerSessions = /* @__PURE__ */ new Map();
      this._page = page2;
    }
    setSession(session2) {
      _eventsHelper2.eventsHelper.removeEventListeners(this._sessionListeners);
      this.clear();
      this._sessionListeners = [_eventsHelper2.eventsHelper.addEventListener(session2, "Worker.workerCreated", (event) => {
        const worker2 = new _page.Worker(this._page, event.url);
        const workerSession = new _wkConnection.WKSession(session2.connection, event.workerId, (message) => {
          session2.send("Worker.sendMessageToWorker", {
            workerId: event.workerId,
            message: JSON.stringify(message)
          }).catch((e) => {
            workerSession.dispatchMessage({
              id: message.id,
              error: {
                message: e.message
              }
            });
          });
        });
        this._workerSessions.set(event.workerId, workerSession);
        worker2._createExecutionContext(new _wkExecutionContext.WKExecutionContext(workerSession, void 0));
        this._page._addWorker(event.workerId, worker2);
        workerSession.on("Console.messageAdded", (event2) => this._onConsoleMessage(worker2, event2));
        Promise.all([workerSession.send("Runtime.enable"), workerSession.send("Console.enable"), session2.send("Worker.initialized", {
          workerId: event.workerId
        })]).catch((e) => {
          this._page._removeWorker(event.workerId);
        });
      }), _eventsHelper2.eventsHelper.addEventListener(session2, "Worker.dispatchMessageFromWorker", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession) return;
        workerSession.dispatchMessage(JSON.parse(event.message));
      }), _eventsHelper2.eventsHelper.addEventListener(session2, "Worker.workerTerminated", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession) return;
        workerSession.dispose();
        this._workerSessions.delete(event.workerId);
        this._page._removeWorker(event.workerId);
      })];
    }
    clear() {
      this._page._clearWorkers();
      this._workerSessions.clear();
    }
    async initializeSession(session2) {
      await session2.send("Worker.enable");
    }
    async _onConsoleMessage(worker2, event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber
      } = event.message;
      let derivedType = type || "";
      if (type === "log") derivedType = level;
      else if (type === "timing") derivedType = "timeEnd";
      const handles = (parameters || []).map((p) => {
        return worker2._existingExecutionContext.createHandle(p);
      });
      const location2 = {
        url: url || "",
        lineNumber: (lineNumber || 1) - 1,
        columnNumber: (columnNumber || 1) - 1
      };
      this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? void 0 : text);
    }
  }
  wkWorkers.WKWorkers = WKWorkers;
  return wkWorkers;
}
var hasRequiredWkPage;
function requireWkPage() {
  if (hasRequiredWkPage) return wkPage;
  hasRequiredWkPage = 1;
  Object.defineProperty(wkPage, "__esModule", {
    value: true
  });
  wkPage.WKPage = void 0;
  var _path2 = _interopRequireDefault2(require$$1);
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _utilsBundle2 = utilsBundle;
  var _stackTrace2 = requireStackTrace();
  var _utils2 = requireUtils();
  var _hostPlatform = hostPlatform$1;
  var dialog2 = _interopRequireWildcard2(dialog$1);
  var dom$1 = _interopRequireWildcard2(dom);
  var _eventsHelper2 = eventsHelper;
  var _helper2 = helper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _page = requirePage$1();
  var _wkAccessibility = wkAccessibility;
  var _wkConnection = wkConnection;
  var _wkExecutionContext = wkExecutionContext;
  var _wkInput = wkInput;
  var _wkInterceptableRequest = requireWkInterceptableRequest();
  var _wkProvisionalPage = wkProvisionalPage;
  var _wkWorkers = requireWkWorkers();
  var _debugLogger2 = debugLogger;
  var _manualPromise2 = requireManualPromise();
  var _browserContext2 = requireBrowserContext$1();
  var _errors2 = errors$2;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const UTILITY_WORLD_NAME = "__playwright_utility_world__";
  class WKPage {
    constructor(browserContext2, pageProxySession, opener) {
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._session = void 0;
      this._provisionalPage = null;
      this._page = void 0;
      this._pagePromise = new _manualPromise2.ManualPromise();
      this._pageProxySession = void 0;
      this._opener = void 0;
      this._requestIdToRequest = /* @__PURE__ */ new Map();
      this._requestIdToRequestWillBeSentEvent = /* @__PURE__ */ new Map();
      this._workers = void 0;
      this._contextIdToContext = void 0;
      this._sessionListeners = [];
      this._eventListeners = void 0;
      this._browserContext = void 0;
      this._initializedPage = null;
      this._firstNonInitialNavigationCommittedPromise = void 0;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._lastConsoleMessage = null;
      this._requestIdToResponseReceivedPayloadEvent = /* @__PURE__ */ new Map();
      this._nextWindowOpenPopupFeatures = void 0;
      this._recordingVideoFile = null;
      this._screencastGeneration = 0;
      this._pageProxySession = pageProxySession;
      this._opener = opener;
      this.rawKeyboard = new _wkInput.RawKeyboardImpl(pageProxySession);
      this.rawMouse = new _wkInput.RawMouseImpl(pageProxySession);
      this.rawTouchscreen = new _wkInput.RawTouchscreenImpl(pageProxySession);
      this._contextIdToContext = /* @__PURE__ */ new Map();
      this._page = new _page.Page(this, browserContext2);
      this.rawMouse.setPage(this._page);
      this._workers = new _wkWorkers.WKWorkers(this._page);
      this._session = void 0;
      this._browserContext = browserContext2;
      this._page.on(_page.Page.Events.FrameDetached, (frame2) => this._removeContextsForFrame(frame2, false));
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(this._pageProxySession, "Target.targetCreated", this._onTargetCreated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._pageProxySession, "Target.targetDestroyed", this._onTargetDestroyed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._pageProxySession, "Target.dispatchMessageFromTarget", this._onDispatchMessageFromTarget.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._pageProxySession, "Target.didCommitProvisionalTarget", this._onDidCommitProvisionalTarget.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._pageProxySession, "Screencast.screencastFrame", this._onScreencastFrame.bind(this))];
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
      if (opener && !browserContext2._options.noDefaultViewport && opener._nextWindowOpenPopupFeatures) {
        const viewportSize = _helper2.helper.getViewportSizeFromWindowFeatures(opener._nextWindowOpenPopupFeatures);
        opener._nextWindowOpenPopupFeatures = void 0;
        if (viewportSize) this._page._emulatedSize = {
          viewport: viewportSize,
          screen: viewportSize
        };
      }
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _initializePageProxySession() {
      if (this._page._browserContext.isSettingStorageState()) return;
      const promises = [this._pageProxySession.send("Dialog.enable"), this._pageProxySession.send("Emulation.setActiveAndFocused", {
        active: true
      })];
      const contextOptions = this._browserContext._options;
      if (contextOptions.javaScriptEnabled === false) promises.push(this._pageProxySession.send("Emulation.setJavaScriptEnabled", {
        enabled: false
      }));
      promises.push(this._updateViewport());
      promises.push(this.updateHttpCredentials());
      if (this._browserContext._permissions.size) {
        for (const [key, value] of this._browserContext._permissions) promises.push(this._grantPermissions(key, value));
      }
      if (this._browserContext._options.recordVideo) {
        const outputFile = _path2.default.join(this._browserContext._options.recordVideo.dir, (0, _utils2.createGuid)() + ".webm");
        promises.push(this._browserContext._ensureVideosPath().then(() => {
          return this._startVideo({
            // validateBrowserContextOptions ensures correct video size.
            ...this._browserContext._options.recordVideo.size,
            outputFile
          });
        }));
      }
      await Promise.all(promises);
    }
    _setSession(session2) {
      _eventsHelper2.eventsHelper.removeEventListeners(this._sessionListeners);
      this._session = session2;
      this.rawKeyboard.setSession(session2);
      this.rawMouse.setSession(session2);
      this._addSessionListeners();
      this._workers.setSession(session2);
    }
    // This method is called for provisional targets as well. The session passed as the parameter
    // may be different from the current session and may be destroyed without becoming current.
    async _initializeSession(session2, provisional, resourceTreeHandler) {
      await this._initializeSessionMayThrow(session2, resourceTreeHandler).catch((e) => {
        if (provisional && session2.isDisposed()) return;
        if (this._session === session2) throw e;
      });
    }
    async _initializeSessionMayThrow(session2, resourceTreeHandler) {
      const [, frameTree] = await Promise.all([
        // Page agent must be enabled before Runtime.
        session2.send("Page.enable"),
        session2.send("Page.getResourceTree")
      ]);
      resourceTreeHandler(frameTree);
      const promises = [
        // Resource tree should be received before first execution context.
        session2.send("Runtime.enable"),
        session2.send("Runtime.addBinding", {
          name: _page.PageBinding.kPlaywrightBinding
        }),
        session2.send("Page.createUserWorld", {
          name: UTILITY_WORLD_NAME
        }).catch((_) => {
        }),
        // Worlds are per-process
        session2.send("Console.enable"),
        session2.send("Network.enable"),
        this._workers.initializeSession(session2)
      ];
      if (this._page.needsRequestInterception()) {
        promises.push(session2.send("Network.setInterceptionEnabled", {
          enabled: true
        }));
        promises.push(session2.send("Network.setResourceCachingDisabled", {
          disabled: true
        }));
        promises.push(session2.send("Network.addInterception", {
          url: ".*",
          stage: "request",
          isRegex: true
        }));
      }
      if (this._page._browserContext.isSettingStorageState()) {
        await Promise.all(promises);
        return;
      }
      const contextOptions = this._browserContext._options;
      if (contextOptions.userAgent) promises.push(this.updateUserAgent());
      const emulatedMedia = this._page.emulatedMedia();
      if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors) promises.push(WKPage._setEmulateMedia(session2, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors));
      const bootstrapScript = this._calculateBootstrapScript();
      if (bootstrapScript.length) promises.push(session2.send("Page.setBootstrapScript", {
        source: bootstrapScript
      }));
      this._page.frames().map((frame2) => frame2.evaluateExpression(bootstrapScript).catch((e) => {
      }));
      if (contextOptions.bypassCSP) promises.push(session2.send("Page.setBypassCSP", {
        enabled: true
      }));
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize) {
        promises.push(session2.send("Page.setScreenSizeOverride", {
          width: emulatedSize.screen.width,
          height: emulatedSize.screen.height
        }));
      }
      promises.push(this.updateEmulateMedia());
      promises.push(session2.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils2.headersArrayToObject)(
          this._calculateExtraHTTPHeaders(),
          false
          /* lowerCase */
        )
      }));
      if (contextOptions.offline) promises.push(session2.send("Network.setEmulateOfflineState", {
        offline: true
      }));
      promises.push(session2.send("Page.setTouchEmulationEnabled", {
        enabled: !!contextOptions.hasTouch
      }));
      if (contextOptions.timezoneId) {
        promises.push(session2.send("Page.setTimeZone", {
          timeZone: contextOptions.timezoneId
        }).catch((e) => {
          throw new Error(`Invalid timezone ID: ${contextOptions.timezoneId}`);
        }));
      }
      if (this._page.fileChooserIntercepted()) promises.push(session2.send("Page.setInterceptFileChooserDialog", {
        enabled: true
      }));
      promises.push(session2.send("Page.overrideSetting", {
        setting: "DeviceOrientationEventEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session2.send("Page.overrideSetting", {
        setting: "FullScreenEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session2.send("Page.overrideSetting", {
        setting: "NotificationsEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session2.send("Page.overrideSetting", {
        setting: "PointerLockEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session2.send("Page.overrideSetting", {
        setting: "InputTypeMonthEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session2.send("Page.overrideSetting", {
        setting: "InputTypeWeekEnabled",
        value: contextOptions.isMobile
      }));
      await Promise.all(promises);
    }
    _onDidCommitProvisionalTarget(event) {
      const {
        oldTargetId,
        newTargetId
      } = event;
      (0, _utils2.assert)(this._provisionalPage);
      (0, _utils2.assert)(this._provisionalPage._session.sessionId === newTargetId, "Unknown new target: " + newTargetId);
      (0, _utils2.assert)(this._session.sessionId === oldTargetId, "Unknown old target: " + oldTargetId);
      const newSession = this._provisionalPage._session;
      this._provisionalPage.commit();
      this._provisionalPage.dispose();
      this._provisionalPage = null;
      this._setSession(newSession);
    }
    _onTargetDestroyed(event) {
      const {
        targetId,
        crashed
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) {
        this._maybeCancelCoopNavigationRequest(this._provisionalPage);
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      } else if (this._session.sessionId === targetId) {
        this._session.dispose();
        _eventsHelper2.eventsHelper.removeEventListeners(this._sessionListeners);
        if (crashed) {
          this._session.markAsCrashed();
          this._page._didCrash();
        }
      }
    }
    didClose() {
      this._pageProxySession.dispose();
      _eventsHelper2.eventsHelper.removeEventListeners(this._sessionListeners);
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._session) this._session.dispose();
      if (this._provisionalPage) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      }
      this._firstNonInitialNavigationCommittedReject(new _errors2.TargetClosedError());
      this._page._didClose();
    }
    dispatchMessageToSession(message) {
      this._pageProxySession.dispatchMessage(message);
    }
    handleProvisionalLoadFailed(event) {
      if (!this._initializedPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Initial load failed"));
        return;
      }
      if (!this._provisionalPage) return;
      let errorText = event.error;
      if (errorText.includes("cancelled")) errorText += "; maybe frame was detached?";
      this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, errorText, event.loaderId);
    }
    handleWindowOpen(event) {
      (0, _utils2.debugAssert)(!this._nextWindowOpenPopupFeatures);
      this._nextWindowOpenPopupFeatures = event.windowFeatures;
    }
    async pageOrError() {
      return this._pagePromise;
    }
    async _onTargetCreated(event) {
      const {
        targetInfo
      } = event;
      const session2 = new _wkConnection.WKSession(this._pageProxySession.connection, targetInfo.targetId, (message) => {
        this._pageProxySession.send("Target.sendMessageToTarget", {
          message: JSON.stringify(message),
          targetId: targetInfo.targetId
        }).catch((e) => {
          session2.dispatchMessage({
            id: message.id,
            error: {
              message: e.message
            }
          });
        });
      });
      (0, _utils2.assert)(targetInfo.type === "page", "Only page targets are expected in WebKit, received: " + targetInfo.type);
      if (!targetInfo.isProvisional) {
        (0, _utils2.assert)(!this._initializedPage);
        let pageOrError;
        try {
          this._setSession(session2);
          await Promise.all([this._initializePageProxySession(), this._initializeSession(session2, false, ({
            frameTree
          }) => this._handleFrameTree(frameTree))]);
          pageOrError = this._page;
        } catch (e) {
          pageOrError = e;
        }
        if (targetInfo.isPaused) this._pageProxySession.sendMayFail("Target.resume", {
          targetId: targetInfo.targetId
        });
        if (pageOrError instanceof _page.Page && this._page.mainFrame().url() === "") {
          try {
            await this._firstNonInitialNavigationCommittedPromise;
          } catch (e) {
            pageOrError = e;
          }
        } else {
          this._firstNonInitialNavigationCommittedPromise.catch(() => {
          });
        }
        await this._page.initOpener(this._opener);
        this._initializedPage = pageOrError instanceof _page.Page ? pageOrError : null;
        this._page.reportAsNew(pageOrError instanceof _page.Page ? void 0 : pageOrError);
        this._pagePromise.resolve(pageOrError);
      } else {
        (0, _utils2.assert)(targetInfo.isProvisional);
        (0, _utils2.assert)(!this._provisionalPage);
        this._provisionalPage = new _wkProvisionalPage.WKProvisionalPage(session2, this);
        if (targetInfo.isPaused) {
          this._provisionalPage.initializationPromise.then(() => {
            this._pageProxySession.sendMayFail("Target.resume", {
              targetId: targetInfo.targetId
            });
          });
        }
      }
    }
    _onDispatchMessageFromTarget(event) {
      const {
        targetId,
        message
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) this._provisionalPage._session.dispatchMessage(JSON.parse(message));
      else if (this._session.sessionId === targetId) this._session.dispatchMessage(JSON.parse(message));
      else throw new Error("Unknown target: " + targetId);
    }
    _addSessionListeners() {
      this._sessionListeners = [_eventsHelper2.eventsHelper.addEventListener(this._session, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.willCheckNavigationPolicy", (event) => this._onWillCheckNavigationPolicy(event.frameId)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.didCheckNavigationPolicy", (event) => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.frameScheduledNavigation", (event) => this._onFrameScheduledNavigation(event.frameId, event.delay, event.targetIsCurrentFrame)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.loadEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "load")), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.domContentEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded")), _eventsHelper2.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Runtime.bindingCalled", (event) => this._onBindingCalled(event.contextId, event.argument)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Console.messageAdded", (event) => this._onConsoleMessage(event)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Console.messageRepeatCountUpdated", (event) => this._onConsoleRepeatCountUpdated(event)), _eventsHelper2.eventsHelper.addEventListener(this._pageProxySession, "Dialog.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.requestWillBeSent", (e) => this._onRequestWillBeSent(this._session, e)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.requestIntercepted", (e) => this._onRequestIntercepted(this._session, e)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.responseReceived", (e) => this._onResponseReceived(this._session, e)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.loadingFinished", (e) => this._onLoadingFinished(e)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.loadingFailed", (e) => this._onLoadingFailed(this._session, e)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper2.eventsHelper.addEventListener(this._session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))];
    }
    async _updateState(method, params) {
      await this._forAllSessions((session2) => session2.send(method, params).then());
    }
    async _forAllSessions(callback) {
      const sessions = [this._session];
      if (this._provisionalPage) sessions.push(this._provisionalPage._session);
      await Promise.all(sessions.map((session2) => callback(session2).catch((e) => {
      })));
    }
    _onWillCheckNavigationPolicy(frameId) {
      if (this._provisionalPage) return;
      this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _onDidCheckNavigationPolicy(frameId, cancel) {
      if (!cancel) return;
      if (this._provisionalPage) return;
      this._page._frameManager.frameAbortedNavigation(frameId, "Navigation canceled by policy check");
    }
    _onFrameScheduledNavigation(frameId, delay, targetIsCurrentFrame) {
      if (targetIsCurrentFrame) this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "domcontentloaded");
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "load");
      if (!frameTree.childFrames) return;
      for (const child of frameTree.childFrames) this._handleFrameTree(child);
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      const frame2 = this._page._frameManager.frame(framePayload.id);
      (0, _utils2.assert)(frame2);
      this._removeContextsForFrame(frame2, true);
      if (!framePayload.parentId) this._workers.clear();
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url, framePayload.name || "", framePayload.loaderId, initial);
      if (!initial) this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId) {
      this._page._frameManager.frameDetached(frameId);
    }
    _removeContextsForFrame(frame2, notifyFrame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame2) {
          this._contextIdToContext.delete(contextId);
          if (notifyFrame) frame2._contextDestroyed(context);
        }
      }
    }
    _onExecutionContextCreated(contextPayload) {
      if (this._contextIdToContext.has(contextPayload.id)) return;
      const frame2 = this._page._frameManager.frame(contextPayload.frameId);
      if (!frame2) return;
      const delegate = new _wkExecutionContext.WKExecutionContext(this._session, contextPayload.id);
      let worldName = null;
      if (contextPayload.type === "normal") worldName = "main";
      else if (contextPayload.type === "user" && contextPayload.name === UTILITY_WORLD_NAME) worldName = "utility";
      const context = new dom$1.FrameExecutionContext(delegate, frame2, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName) frame2._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    async _onBindingCalled(contextId, argument) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(contextId);
        if (context) await this._page._onBindingCalled(argument, context);
      }
    }
    async navigateFrame(frame2, url, referrer) {
      if (this._pageProxySession.isDisposed()) throw new _errors2.TargetClosedError();
      const pageProxyId = this._pageProxySession.sessionId;
      const result2 = await this._pageProxySession.connection.browserSession.send("Playwright.navigate", {
        url,
        pageProxyId,
        frameId: frame2._id,
        referrer
      });
      return {
        newDocumentId: result2.loaderId
      };
    }
    _onConsoleMessage(event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber,
        source: source2
      } = event.message;
      if (level === "error" && source2 === "javascript") {
        const {
          name: name2,
          message
        } = (0, _stackTrace2.splitErrorMessage)(text);
        let stack;
        if (event.message.stackTrace) {
          stack = text + "\n" + event.message.stackTrace.callFrames.map((callFrame) => {
            return `    at ${callFrame.functionName || "unknown"} (${callFrame.url}:${callFrame.lineNumber}:${callFrame.columnNumber})`;
          }).join("\n");
        } else {
          stack = "";
        }
        this._lastConsoleMessage = null;
        const error = new Error(message);
        error.stack = stack;
        error.name = name2;
        this._page.emitOnContextOnceInitialized(_browserContext2.BrowserContext.Events.PageError, error, this._page);
        return;
      }
      let derivedType = type || "";
      if (type === "log") derivedType = level;
      else if (type === "timing") derivedType = "timeEnd";
      const handles = [];
      for (const p of parameters || []) {
        let context;
        if (p.objectId) {
          const objectId = JSON.parse(p.objectId);
          context = this._contextIdToContext.get(objectId.injectedScriptId);
        } else {
          context = [...this._contextIdToContext.values()].find((c) => c.frame === this._page.mainFrame());
        }
        if (!context) return;
        handles.push(context.createHandle(p));
      }
      this._lastConsoleMessage = {
        derivedType,
        text,
        handles,
        count: 0,
        location: {
          url: url || "",
          lineNumber: (lineNumber || 1) - 1,
          columnNumber: (columnNumber || 1) - 1
        }
      };
      this._onConsoleRepeatCountUpdated({
        count: 1
      });
    }
    _onConsoleRepeatCountUpdated(event) {
      if (this._lastConsoleMessage) {
        const {
          derivedType,
          text,
          handles,
          count,
          location: location2
        } = this._lastConsoleMessage;
        for (let i = count; i < event.count; ++i) this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? void 0 : text);
        this._lastConsoleMessage.count = event.count;
      }
    }
    _onDialog(event) {
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        await this._pageProxySession.send("Dialog.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    async _onFileChooserOpened(event) {
      let handle;
      try {
        const context = await this._page._frameManager.frame(event.frameId)._mainContext();
        handle = context.createHandle(event.element).asElement();
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    static async _setEmulateMedia(session2, mediaType, colorScheme, reducedMotion, forcedColors) {
      const promises = [];
      promises.push(session2.send("Page.setEmulatedMedia", {
        media: mediaType === "no-override" ? "" : mediaType
      }));
      let appearance = void 0;
      switch (colorScheme) {
        case "light":
          appearance = "Light";
          break;
        case "dark":
          appearance = "Dark";
          break;
        case "no-override":
          appearance = void 0;
          break;
      }
      promises.push(session2.send("Page.overrideUserPreference", {
        name: "PrefersColorScheme",
        value: appearance
      }));
      let reducedMotionWk = void 0;
      switch (reducedMotion) {
        case "reduce":
          reducedMotionWk = "Reduce";
          break;
        case "no-preference":
          reducedMotionWk = "NoPreference";
          break;
        case "no-override":
          reducedMotionWk = void 0;
          break;
      }
      promises.push(session2.send("Page.overrideUserPreference", {
        name: "PrefersReducedMotion",
        value: reducedMotionWk
      }));
      let forcedColorsWk = void 0;
      switch (forcedColors) {
        case "active":
          forcedColorsWk = "Active";
          break;
        case "none":
          forcedColorsWk = "None";
          break;
        case "no-override":
          forcedColorsWk = void 0;
          break;
      }
      promises.push(session2.send("Page.setForcedColors", {
        forcedColors: forcedColorsWk
      }));
      await Promise.all(promises);
    }
    async updateExtraHTTPHeaders() {
      await this._updateState("Network.setExtraHTTPHeaders", {
        headers: (0, _utils2.headersArrayToObject)(
          this._calculateExtraHTTPHeaders(),
          false
          /* lowerCase */
        )
      });
    }
    _calculateExtraHTTPHeaders() {
      const locale = this._browserContext._options.locale;
      const headers2 = network2.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders(), locale ? network2.singleHeader("Accept-Language", locale) : void 0]);
      return headers2;
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors;
      await this._forAllSessions((session2) => WKPage._setEmulateMedia(session2, emulatedMedia.media, colorScheme, reducedMotion, forcedColors));
    }
    async updateEmulatedViewportSize() {
      this._browserContext._validateEmulatedViewport(this._page.viewportSize());
      await this._updateViewport();
    }
    async updateUserAgent() {
      const contextOptions = this._browserContext._options;
      this._updateState("Page.overrideUserAgent", {
        value: contextOptions.userAgent
      });
    }
    async bringToFront() {
      this._pageProxySession.send("Target.activate", {
        targetId: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null) return;
      const viewportSize = deviceSize.viewport;
      const screenSize = deviceSize.screen;
      const promises = [this._pageProxySession.send("Emulation.setDeviceMetricsOverride", {
        width: viewportSize.width,
        height: viewportSize.height,
        fixedLayout: !!options.isMobile,
        deviceScaleFactor: options.deviceScaleFactor || 1
      }), this._session.send("Page.setScreenSizeOverride", {
        width: screenSize.width,
        height: screenSize.height
      })];
      if (options.isMobile) {
        const angle = viewportSize.width > viewportSize.height ? 90 : 0;
        const useLegacySetOrientationOverrideMethod = _os2.default.platform() === "darwin" && parseInt(_os2.default.release().split(".")[0], 10) <= 21;
        if (useLegacySetOrientationOverrideMethod) promises.push(this._session.send("Page.setOrientationOverride", {
          angle
        }));
        else promises.push(this._pageProxySession.send("Emulation.setOrientationOverride", {
          angle
        }));
      }
      await Promise.all(promises);
    }
    async updateRequestInterception() {
      const enabled = this._page.needsRequestInterception();
      await Promise.all([this._updateState("Network.setInterceptionEnabled", {
        enabled
      }), this._updateState("Network.setResourceCachingDisabled", {
        disabled: enabled
      }), this._updateState("Network.addInterception", {
        url: ".*",
        stage: "request",
        isRegex: true
      })]);
    }
    async updateOffline() {
      await this._updateState("Network.setEmulateOfflineState", {
        offline: !!this._browserContext._options.offline
      });
    }
    async updateHttpCredentials() {
      const credentials = this._browserContext._options.httpCredentials || {
        username: "",
        password: "",
        origin: ""
      };
      await this._pageProxySession.send("Emulation.setAuthCredentials", {
        username: credentials.username,
        password: credentials.password,
        origin: credentials.origin
      });
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    goBack() {
      return this._session.send("Page.goBack").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goBack): Failed to go`)) return false;
        throw error;
      });
    }
    goForward() {
      return this._session.send("Page.goForward").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goForward): Failed to go`)) return false;
        throw error;
      });
    }
    async requestGC() {
      await this._session.send("Heap.gc");
    }
    async addInitScript(initScript) {
      await this._updateBootstrapScript();
    }
    async removeNonInternalInitScripts() {
      await this._updateBootstrapScript();
    }
    _calculateBootstrapScript() {
      const scripts = [];
      if (!this._page.context()._options.isMobile) {
        scripts.push("delete window.orientation");
        scripts.push("delete window.ondevicemotion");
        scripts.push("delete window.ondeviceorientation");
      }
      scripts.push('if (!window.safari) window.safari = { pushNotification: { toString() { return "[object SafariRemoteNotification]"; } } };');
      scripts.push("if (!window.GestureEvent) window.GestureEvent = function GestureEvent() {};");
      scripts.push(...this._page.allInitScripts().map((script) => script.source));
      return scripts.join(";\n");
    }
    async _updateBootstrapScript() {
      await this._updateState("Page.setBootstrapScript", {
        source: this._calculateBootstrapScript()
      });
    }
    async closePage(runBeforeUnload) {
      await this._stopVideo();
      await this._pageProxySession.sendMayFail("Target.close", {
        targetId: this._session.sessionId,
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      await this._session.send("Page.setDefaultBackgroundColorOverride", {
        color
      });
    }
    _toolbarHeight() {
      var _this$_page$_browserC;
      if ((_this$_page$_browserC = this._page._browserContext._browser) !== null && _this$_page$_browserC !== void 0 && _this$_page$_browserC.options.headful) return _hostPlatform.hostPlatform === "mac10.15" ? 55 : 59;
      return 0;
    }
    async _startVideo(options) {
      (0, _utils2.assert)(!this._recordingVideoFile);
      const {
        screencastId
      } = await this._pageProxySession.send("Screencast.startVideo", {
        file: options.outputFile,
        width: options.width,
        height: options.height,
        toolbarHeight: this._toolbarHeight()
      });
      this._recordingVideoFile = options.outputFile;
      this._browserContext._browser._videoStarted(this._browserContext, screencastId, options.outputFile, this.pageOrError());
    }
    async _stopVideo() {
      if (!this._recordingVideoFile) return;
      await this._pageProxySession.sendMayFail("Screencast.stopVideo");
      this._recordingVideoFile = null;
    }
    validateScreenshotDimension(side, omitDeviceScaleFactor) {
      if (process.platform === "darwin") return;
      if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor) side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
      if (side > 32767) throw new Error("Cannot take screenshot larger than 32767 pixels on any dimension");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const omitDeviceScaleFactor = scale === "css";
      this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
      this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
      const result2 = await this._session.send("Page.snapshotRect", {
        ...rect,
        coordinateSystem: documentRect ? "Page" : "Viewport",
        omitDeviceScaleFactor
      });
      const prefix = "data:image/png;base64,";
      let buffer = Buffer.from(result2.dataURL.substr(prefix.length), "base64");
      if (format === "jpeg") buffer = _utilsBundle2.jpegjs.encode(_utilsBundle2.PNG.sync.read(buffer), quality).data;
      return buffer;
    }
    async getContentFrame(handle) {
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo.contentFrameId) return null;
      return this._page._frameManager.frame(nodeInfo.contentFrameId);
    }
    async getOwnerFrame(handle) {
      if (!handle._objectId) return null;
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return nodeInfo.ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length) return null;
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object")) return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document")) return "error:notconnected";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const so2 = {
          ...options,
          toolbarHeight: this._toolbarHeight()
        };
        const {
          generation
        } = await this._pageProxySession.send("Screencast.startScreencast", so2);
        this._screencastGeneration = generation;
      } else {
        await this._pageProxySession.send("Screencast.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      const generation = this._screencastGeneration;
      this._page.throttleScreencastFrameAck(() => {
        this._pageProxySession.send("Screencast.screencastFrameAck", {
          generation
        }).catch((e) => _debugLogger2.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return process.platform === "win32" ? 5 : 1;
    }
    async getContentQuads(handle) {
      const result2 = await this._session.sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result2) return null;
      return result2.quads.map((quad) => [{
        x: quad[0],
        y: quad[1]
      }, {
        x: quad[2],
        y: quad[3]
      }, {
        x: quad[4],
        y: quad[5]
      }, {
        x: quad[6],
        y: quad[7]
      }]);
    }
    async setInputFiles(handle, files) {
      const objectId = handle._objectId;
      const protocolFiles = files.map((file) => ({
        name: file.name,
        type: file.mimeType,
        data: file.buffer
      }));
      await this._session.send("DOM.setInputFiles", {
        objectId,
        files: protocolFiles
      });
    }
    async setInputFilePaths(handle, paths) {
      const pageProxyId = this._pageProxySession.sessionId;
      const objectId = handle._objectId;
      await Promise.all([this._pageProxySession.connection.browserSession.send("Playwright.grantFileReadAccess", {
        pageProxyId,
        paths
      }), this._session.send("DOM.setInputFiles", {
        objectId,
        paths
      })]);
    }
    async adoptElementHandle(handle, to2) {
      const result2 = await this._session.sendMayFail("DOM.resolveNode", {
        objectId: handle._objectId,
        executionContextId: to2[contextDelegateSymbol]._contextId
      });
      if (!result2 || result2.object.subtype === "null") throw new Error(dom$1.kUnableToAdoptErrorMessage);
      return to2.createHandle(result2.object);
    }
    async getAccessibilityTree(needle) {
      return (0, _wkAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async getFrameElement(frame2) {
      const parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result2 = await this._session.send("DOM.resolveNode", {
        frameId: frame2._id,
        executionContextId: context[contextDelegateSymbol]._contextId
      });
      if (!result2 || result2.object.subtype === "null") throw new Error("Frame has been detached.");
      return context.createHandle(result2.object);
    }
    _maybeCancelCoopNavigationRequest(provisionalPage) {
      const navigationRequest = provisionalPage.coopNavigationRequest();
      for (const [requestId, request2] of this._requestIdToRequest) {
        if (request2.request === navigationRequest) {
          this._onLoadingFailed(provisionalPage._session, {
            requestId,
            errorText: "Provisiolal navigation canceled.",
            timestamp: request2._timestamp,
            canceled: true
          });
          return;
        }
      }
    }
    _adoptRequestFromNewProcess(navigationRequest, newSession, newRequestId) {
      for (const [requestId, request2] of this._requestIdToRequest) {
        if (request2.request === navigationRequest) {
          this._requestIdToRequest.delete(requestId);
          request2.adoptRequestFromNewProcess(newSession, newRequestId);
          this._requestIdToRequest.set(newRequestId, request2);
          return;
        }
      }
    }
    _onRequestWillBeSent(session2, event) {
      if (event.request.url.startsWith("data:")) return;
      if (this._page.needsRequestInterception() && !event.redirectResponse) this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
      else this._onRequest(session2, event, false);
    }
    _onRequest(session2, event, intercepted) {
      let redirectedFrom = null;
      if (event.redirectResponse) {
        const request3 = this._requestIdToRequest.get(event.requestId);
        if (request3) {
          this._handleRequestRedirect(request3, event.requestId, event.redirectResponse, event.timestamp);
          redirectedFrom = request3;
        }
      }
      const frame2 = redirectedFrom ? redirectedFrom.request.frame() : this._page._frameManager.frame(event.frameId);
      if (!frame2) return;
      const isNavigationRequest = event.type === "Document";
      const documentId = isNavigationRequest ? event.loaderId : void 0;
      const request2 = new _wkInterceptableRequest.WKInterceptableRequest(session2, frame2, event, redirectedFrom, documentId);
      let route;
      if (intercepted) {
        route = new _wkInterceptableRequest.WKRouteImpl(session2, event.requestId);
        request2.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.set(event.requestId, request2);
      this._page._frameManager.requestStarted(request2.request, route);
    }
    _handleRequestRedirect(request2, requestId, responsePayload, timestamp) {
      const response = request2.createResponse(responsePayload);
      response._securityDetailsFinished();
      response._serverAddrFinished();
      response.setResponseHeadersSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished(responsePayload.timing ? _helper2.helper.secondsToRoundishMillis(timestamp - request2._timestamp) : -1);
      this._requestIdToRequest.delete(requestId);
      this._page._frameManager.requestReceivedResponse(response);
      this._page._frameManager.reportRequestFinished(request2.request, response);
    }
    _onRequestIntercepted(session2, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (!requestWillBeSentEvent) {
        session2.sendMayFail("Network.interceptWithRequest", {
          requestId: event.requestId
        });
        return;
      }
      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
      this._onRequest(session2, requestWillBeSentEvent, true);
    }
    _onResponseReceived(session2, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session2, requestWillBeSentEvent, false);
      }
      const request2 = this._requestIdToRequest.get(event.requestId);
      if (!request2) return;
      this._requestIdToResponseReceivedPayloadEvent.set(event.requestId, event);
      const response = request2.createResponse(event.response);
      this._page._frameManager.requestReceivedResponse(response);
      if (response.status() === 204 && request2.request.isNavigationRequest()) {
        this._onLoadingFailed(session2, {
          requestId: event.requestId,
          errorText: "Aborted: 204 No Content",
          timestamp: event.timestamp
        });
      }
    }
    _onLoadingFinished(event) {
      const request2 = this._requestIdToRequest.get(event.requestId);
      if (!request2) return;
      const response = request2.request._existingResponse();
      if (response) {
        var _event$metrics, _event$metrics2, _responseReceivedPayl, _responseReceivedPayl2, _responseReceivedPayl3, _event$metrics3, _event$metrics$respon, _event$metrics4, _event$metrics$respon2, _event$metrics5;
        const responseReceivedPayload = this._requestIdToResponseReceivedPayloadEvent.get(event.requestId);
        response._serverAddrFinished(parseRemoteAddress(event === null || event === void 0 || (_event$metrics = event.metrics) === null || _event$metrics === void 0 ? void 0 : _event$metrics.remoteAddress));
        response._securityDetailsFinished({
          protocol: isLoadedSecurely(response.url(), response.timing()) ? (_event$metrics2 = event.metrics) === null || _event$metrics2 === void 0 || (_event$metrics2 = _event$metrics2.securityConnection) === null || _event$metrics2 === void 0 ? void 0 : _event$metrics2.protocol : void 0,
          subjectName: responseReceivedPayload === null || responseReceivedPayload === void 0 || (_responseReceivedPayl = responseReceivedPayload.response.security) === null || _responseReceivedPayl === void 0 || (_responseReceivedPayl = _responseReceivedPayl.certificate) === null || _responseReceivedPayl === void 0 ? void 0 : _responseReceivedPayl.subject,
          validFrom: responseReceivedPayload === null || responseReceivedPayload === void 0 || (_responseReceivedPayl2 = responseReceivedPayload.response.security) === null || _responseReceivedPayl2 === void 0 || (_responseReceivedPayl2 = _responseReceivedPayl2.certificate) === null || _responseReceivedPayl2 === void 0 ? void 0 : _responseReceivedPayl2.validFrom,
          validTo: responseReceivedPayload === null || responseReceivedPayload === void 0 || (_responseReceivedPayl3 = responseReceivedPayload.response.security) === null || _responseReceivedPayl3 === void 0 || (_responseReceivedPayl3 = _responseReceivedPayl3.certificate) === null || _responseReceivedPayl3 === void 0 ? void 0 : _responseReceivedPayl3.validUntil
        });
        if ((_event$metrics3 = event.metrics) !== null && _event$metrics3 !== void 0 && _event$metrics3.protocol) response._setHttpVersion(event.metrics.protocol);
        response.setEncodedBodySize((_event$metrics$respon = (_event$metrics4 = event.metrics) === null || _event$metrics4 === void 0 ? void 0 : _event$metrics4.responseBodyBytesReceived) !== null && _event$metrics$respon !== void 0 ? _event$metrics$respon : null);
        response.setResponseHeadersSize((_event$metrics$respon2 = (_event$metrics5 = event.metrics) === null || _event$metrics5 === void 0 ? void 0 : _event$metrics5.responseHeaderBytesReceived) !== null && _event$metrics$respon2 !== void 0 ? _event$metrics$respon2 : null);
        response._requestFinished(_helper2.helper.secondsToRoundishMillis(event.timestamp - request2._timestamp));
      } else {
        request2.request.setRawRequestHeaders(null);
      }
      this._requestIdToResponseReceivedPayloadEvent.delete(event.requestId);
      this._requestIdToRequest.delete(event.requestId);
      this._page._frameManager.reportRequestFinished(request2.request, response);
    }
    _onLoadingFailed(session2, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session2, requestWillBeSentEvent, false);
      }
      const request2 = this._requestIdToRequest.get(event.requestId);
      if (!request2) return;
      const response = request2.request._existingResponse();
      if (response) {
        response._serverAddrFinished();
        response._securityDetailsFinished();
        response.setResponseHeadersSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper2.helper.secondsToRoundishMillis(event.timestamp - request2._timestamp));
      } else {
        request2.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.delete(event.requestId);
      request2.request._setFailureText(event.errorText);
      this._page._frameManager.requestFailed(request2.request, event.errorText.includes("cancelled"));
    }
    async _grantPermissions(origin, permissions) {
      const webPermissionToProtocol = /* @__PURE__ */ new Map([["geolocation", "geolocation"], ["notifications", "notifications"], ["clipboard-read", "clipboard-read"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission) throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._pageProxySession.send("Emulation.grantPermissions", {
        origin,
        permissions: filtered
      });
    }
    async _clearPermissions() {
      await this._pageProxySession.send("Emulation.resetPermissions", {});
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  wkPage.WKPage = WKPage;
  function parseRemoteAddress(value) {
    if (!value) return;
    try {
      const colon = value.lastIndexOf(":");
      const dot = value.lastIndexOf(".");
      if (dot < 0) {
        return {
          ipAddress: `[${value.slice(0, colon)}]`,
          port: +value.slice(colon + 1)
        };
      }
      if (colon > dot) {
        const [address, port] = value.split(":");
        return {
          ipAddress: address,
          port: +port
        };
      } else {
        const [address, port] = value.split(".");
        return {
          ipAddress: `[${address}]`,
          port: +port
        };
      }
    } catch (_) {
    }
  }
  function isLoadedSecurely(url, timing) {
    try {
      const u = new URL(url);
      if (u.protocol !== "https:" && u.protocol !== "wss:" && u.protocol !== "sftp:") return false;
      if (timing.secureConnectionStart === -1 && timing.connectStart !== -1) return false;
      return true;
    } catch (_) {
    }
  }
  const contextDelegateSymbol = Symbol("delegate");
  return wkPage;
}
var hasRequiredWkBrowser;
function requireWkBrowser() {
  if (hasRequiredWkBrowser) return wkBrowser;
  hasRequiredWkBrowser = 1;
  Object.defineProperty(wkBrowser, "__esModule", {
    value: true
  });
  wkBrowser.WKBrowserContext = wkBrowser.WKBrowser = void 0;
  var _browser2 = requireBrowser$1();
  var _browserContext2 = requireBrowserContext$1();
  var _utils2 = requireUtils();
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _wkConnection = wkConnection;
  var _wkPage = requireWkPage();
  var _errors2 = errors$2;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const DEFAULT_USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Safari/605.1.15";
  const BROWSER_VERSION = "18.0";
  class WKBrowser extends _browser2.Browser {
    static async connect(parent, transport2, options) {
      const browser2 = new WKBrowser(parent, transport2, options);
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      const promises = [browser2._browserSession.send("Playwright.enable")];
      if (options.persistent) {
        var _options$persistent;
        (_options$persistent = options.persistent).userAgent || (_options$persistent.userAgent = DEFAULT_USER_AGENT);
        browser2._defaultContext = new WKBrowserContext(browser2, void 0, options.persistent);
        promises.push(browser2._defaultContext._initialize());
      }
      await Promise.all(promises);
      return browser2;
    }
    constructor(parent, transport2, options) {
      super(parent, options);
      this._connection = void 0;
      this._browserSession = void 0;
      this._contexts = /* @__PURE__ */ new Map();
      this._wkPages = /* @__PURE__ */ new Map();
      this._connection = new _wkConnection.WKConnection(transport2, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._browserSession.on("Playwright.pageProxyCreated", this._onPageProxyCreated.bind(this));
      this._browserSession.on("Playwright.pageProxyDestroyed", this._onPageProxyDestroyed.bind(this));
      this._browserSession.on("Playwright.provisionalLoadFailed", (event) => this._onProvisionalLoadFailed(event));
      this._browserSession.on("Playwright.windowOpen", (event) => this._onWindowOpen(event));
      this._browserSession.on("Playwright.downloadCreated", this._onDownloadCreated.bind(this));
      this._browserSession.on("Playwright.downloadFilenameSuggested", this._onDownloadFilenameSuggested.bind(this));
      this._browserSession.on("Playwright.downloadFinished", this._onDownloadFinished.bind(this));
      this._browserSession.on("Playwright.screencastFinished", this._onScreencastFinished.bind(this));
      this._browserSession.on(_wkConnection.kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this));
    }
    _onDisconnect() {
      for (const wkPage2 of this._wkPages.values()) wkPage2.didClose();
      this._wkPages.clear();
      for (const video2 of this._idToVideo.values()) video2.artifact.reportFinished(new _errors2.TargetClosedError());
      this._idToVideo.clear();
      this._didClose();
    }
    async doCreateNewContext(options) {
      const proxy = options.proxyOverride || options.proxy;
      const createOptions = proxy ? {
        // Enable socks5 hostname resolution on Windows.
        // See https://github.com/microsoft/playwright/issues/20451
        proxyServer: process.platform === "win32" ? proxy.server.replace(/^socks5:\/\//, "socks5h://") : proxy.server,
        proxyBypassList: proxy.bypass
      } : void 0;
      const {
        browserContextId
      } = await this._browserSession.send("Playwright.createContext", createOptions);
      options.userAgent = options.userAgent || DEFAULT_USER_AGENT;
      const context = new WKBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return BROWSER_VERSION;
    }
    userAgent() {
      return DEFAULT_USER_AGENT;
    }
    _onDownloadCreated(payload) {
      const page2 = this._wkPages.get(payload.pageProxyId);
      if (!page2) return;
      page2._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = page2._initializedPage;
      if (!originPage) {
        page2._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
        if (page2._opener) originPage = page2._opener._initializedPage;
      }
      if (!originPage) return;
      this._downloadCreated(originPage, payload.uuid, payload.url);
    }
    _onDownloadFilenameSuggested(payload) {
      this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);
    }
    _onDownloadFinished(payload) {
      this._downloadFinished(payload.uuid, payload.error);
    }
    _onScreencastFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === void 0 || _this$_takeVideo.reportFinished();
    }
    _onPageProxyCreated(event) {
      const pageProxyId = event.pageProxyId;
      let context = null;
      if (event.browserContextId) {
        context = this._contexts.get(event.browserContextId) || null;
      }
      if (!context) context = this._defaultContext;
      if (!context) return;
      const pageProxySession = new _wkConnection.WKSession(this._connection, pageProxyId, (message) => {
        this._connection.rawSend({
          ...message,
          pageProxyId
        });
      });
      const opener = event.openerId ? this._wkPages.get(event.openerId) : void 0;
      const wkPage2 = new _wkPage.WKPage(context, pageProxySession, opener || null);
      this._wkPages.set(pageProxyId, wkPage2);
    }
    _onPageProxyDestroyed(event) {
      const pageProxyId = event.pageProxyId;
      const wkPage2 = this._wkPages.get(pageProxyId);
      if (!wkPage2) return;
      wkPage2.didClose();
      this._wkPages.delete(pageProxyId);
    }
    _onPageProxyMessageReceived(event) {
      const wkPage2 = this._wkPages.get(event.pageProxyId);
      if (!wkPage2) return;
      wkPage2.dispatchMessageToSession(event.message);
    }
    _onProvisionalLoadFailed(event) {
      const wkPage2 = this._wkPages.get(event.pageProxyId);
      if (!wkPage2) return;
      wkPage2.handleProvisionalLoadFailed(event);
    }
    _onWindowOpen(event) {
      const wkPage2 = this._wkPages.get(event.pageProxyId);
      if (!wkPage2) return;
      wkPage2.handleWindowOpen(event);
    }
    isConnected() {
      return !this._connection.isClosed();
    }
  }
  wkBrowser.WKBrowser = WKBrowser;
  class WKBrowserContext extends _browserContext2.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
      this._validateEmulatedViewport(options.viewport);
      this._authenticateProxyViaHeader();
    }
    async _initialize() {
      (0, _utils2.assert)(!this._wkPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      promises.push(this._browser._browserSession.send("Playwright.setDownloadBehavior", {
        behavior: this._options.acceptDownloads === "accept" ? "allow" : "deny",
        downloadPath: this._browser.options.downloadsPath,
        browserContextId
      }));
      if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors) promises.push(this._browser._browserSession.send("Playwright.setIgnoreCertificateErrors", {
        browserContextId,
        ignore: true
      }));
      if (this._options.locale) promises.push(this._browser._browserSession.send("Playwright.setLanguages", {
        browserContextId,
        languages: [this._options.locale]
      }));
      if (this._options.geolocation) promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline) promises.push(this.setOffline(this._options.offline));
      if (this._options.httpCredentials) promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      await Promise.all(promises);
    }
    _wkPages() {
      return Array.from(this._browser._wkPages.values()).filter((wkPage2) => wkPage2._browserContext === this);
    }
    pages() {
      return this._wkPages().map((wkPage2) => wkPage2._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext2.assertBrowserContextIsNotOwned)(this);
      const {
        pageProxyId
      } = await this._browser._browserSession.send("Playwright.createPage", {
        browserContextId: this._browserContextId
      });
      return this._browser._wkPages.get(pageProxyId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("Playwright.getAllCookies", {
        browserContextId: this._browserContextId
      });
      return network2.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        copy.expires = c.expires === -1 ? -1 : c.expires / 1e3;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc2 = network2.rewriteCookies(cookies).map((c) => ({
        ...c,
        session: c.expires === -1 || c.expires === void 0,
        expires: c.expires && c.expires !== -1 ? c.expires * 1e3 : c.expires
      }));
      await this._browser._browserSession.send("Playwright.setCookies", {
        cookies: cc2,
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._browserSession.send("Playwright.deleteAllCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      await Promise.all(this.pages().map((page2) => page2._delegate._grantPermissions(origin, permissions)));
    }
    async doClearPermissions() {
      await Promise.all(this.pages().map((page2) => page2._delegate._clearPermissions()));
    }
    async setGeolocation(geolocation) {
      (0, _browserContext2.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      const payload = geolocation ? {
        ...geolocation,
        timestamp: Date.now()
      } : void 0;
      await this._browser._browserSession.send("Playwright.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: payload
      });
    }
    async setExtraHTTPHeaders(headers2) {
      this._options.extraHTTPHeaders = headers2;
      for (const page2 of this.pages()) await page2._delegate.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent2) {
      this._options.userAgent = userAgent2;
      for (const page2 of this.pages()) await page2._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page2 of this.pages()) await page2._delegate.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page2 of this.pages()) await page2._delegate.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      for (const page2 of this.pages()) await page2._delegate._updateBootstrapScript();
    }
    async doRemoveNonInternalInitScripts() {
      for (const page2 of this.pages()) await page2._delegate._updateBootstrapScript();
    }
    async doUpdateRequestInterception() {
      for (const page2 of this.pages()) await page2._delegate.updateRequestInterception();
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser._browserSession.send("Playwright.clearMemoryCache", {
        browserContextId: this._browserContextId
      });
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await Promise.all(this._wkPages().map((wkPage2) => wkPage2._stopVideo()));
        await this._browser.close({
          reason
        });
      } else {
        await this._browser._browserSession.send("Playwright.deleteContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid) {
      await this._browser._browserSession.send("Playwright.cancelDownload", {
        uuid
      });
    }
    _validateEmulatedViewport(viewportSize) {
      if (!viewportSize) return;
      if (process.platform === "win32" && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240)) throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);
    }
  }
  wkBrowser.WKBrowserContext = WKBrowserContext;
  return wkBrowser;
}
var hasRequiredWebkit;
function requireWebkit() {
  if (hasRequiredWebkit) return webkit$1;
  hasRequiredWebkit = 1;
  Object.defineProperty(webkit$1, "__esModule", {
    value: true
  });
  webkit$1.WebKit = void 0;
  var _wkBrowser = requireWkBrowser();
  var _path2 = _interopRequireDefault2(require$$1);
  var _wkConnection = wkConnection;
  var _browserType = requireBrowserType$1();
  var _utils2 = requireUtils();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class WebKit extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "webkit");
    }
    connectToTransport(transport2, options) {
      return _wkBrowser.WKBrowser.connect(this.attribution.playwright, transport2, options);
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      return {
        ...env2,
        CURL_COOKIE_JAR_PATH: _path2.default.join(userDataDir, "cookiejar.db")
      };
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes("cannot open display")) error.logs = "\n" + (0, _utils2.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      transport2.send({
        method: "Playwright.close",
        params: {},
        id: _wkConnection.kBrowserCloseMessageId
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => !arg.startsWith("-"))) throw new Error("Arguments can not specify page to be opened");
      const webkitArguments = ["--inspector-pipe"];
      if (process.platform === "win32") webkitArguments.push("--disable-accelerated-compositing");
      if (headless) webkitArguments.push("--headless");
      if (isPersistent) webkitArguments.push(`--user-data-dir=${userDataDir}`);
      else webkitArguments.push(`--no-startup-window`);
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        if (process.platform === "darwin") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass) webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);
        } else if (process.platform === "linux") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass) webkitArguments.push(...proxy.bypass.split(",").map((t) => `--ignore-host=${t}`));
        } else if (process.platform === "win32") {
          webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\/\//, "socks5h://")}`);
          if (proxy.bypass) webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);
        }
      }
      webkitArguments.push(...args);
      if (isPersistent) webkitArguments.push("about:blank");
      return webkitArguments;
    }
  }
  webkit$1.WebKit = WebKit;
  return webkit$1;
}
var debugController = {};
var hasRequiredDebugController;
function requireDebugController() {
  if (hasRequiredDebugController) return debugController;
  hasRequiredDebugController = 1;
  Object.defineProperty(debugController, "__esModule", {
    value: true
  });
  debugController.DebugController = void 0;
  var _processLauncher = requireProcessLauncher();
  var _instrumentation2 = instrumentation;
  var _recorder = requireRecorder();
  var _recorderApp = requireRecorderApp();
  var _utils2 = requireUtils();
  const internalMetadata = (0, _instrumentation2.serverSideCallMetadata)();
  class DebugController extends _instrumentation2.SdkObject {
    constructor(playwright2) {
      super({
        attribution: {
          isInternalPlaywright: true
        },
        instrumentation: (0, _instrumentation2.createInstrumentation)()
      }, void 0, "DebugController");
      this._autoCloseTimer = void 0;
      this._autoCloseAllowed = false;
      this._trackHierarchyListener = void 0;
      this._playwright = void 0;
      this._sdkLanguage = "javascript";
      this._codegenId = "playwright-test";
      this._playwright = playwright2;
    }
    initialize(codegenId, sdkLanguage) {
      this._codegenId = codegenId;
      this._sdkLanguage = sdkLanguage;
    }
    setAutoCloseAllowed(allowed) {
      this._autoCloseAllowed = allowed;
    }
    dispose() {
      this.setReportStateChanged(false);
      this.setAutoCloseAllowed(false);
    }
    setReportStateChanged(enabled) {
      if (enabled && !this._trackHierarchyListener) {
        this._trackHierarchyListener = {
          onPageOpen: () => this._emitSnapshot(),
          onPageClose: () => this._emitSnapshot()
        };
        this._playwright.instrumentation.addListener(this._trackHierarchyListener, null);
      } else if (!enabled && this._trackHierarchyListener) {
        this._playwright.instrumentation.removeListener(this._trackHierarchyListener);
        this._trackHierarchyListener = void 0;
      }
    }
    async resetForReuse() {
      const contexts = /* @__PURE__ */ new Set();
      for (const page2 of this._playwright.allPages()) contexts.add(page2.context());
      for (const context of contexts) await context.resetForReuse(internalMetadata, null);
    }
    async navigate(url) {
      for (const p of this._playwright.allPages()) await p.mainFrame().goto(internalMetadata, url);
    }
    async setRecorderMode(params) {
      await this._closeBrowsersWithoutPages();
      if (params.mode === "none") {
        for (const recorder2 of await this._allRecorders()) {
          recorder2.hideHighlightedSelector();
          recorder2.setMode("none");
        }
        this.setAutoCloseEnabled(true);
        return;
      }
      if (!this._playwright.allBrowsers().length) await this._playwright.chromium.launch(internalMetadata, {
        headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
      });
      const pages = this._playwright.allPages();
      if (!pages.length) {
        const [browser2] = this._playwright.allBrowsers();
        const {
          context
        } = await browser2.newContextForReuse({}, internalMetadata);
        await context.newPage(internalMetadata);
      }
      if (params.testIdAttributeName) {
        for (const page2 of this._playwright.allPages()) page2.context().selectors().setTestIdAttributeName(params.testIdAttributeName);
      }
      for (const recorder2 of await this._allRecorders()) {
        recorder2.hideHighlightedSelector();
        if (params.mode !== "inspecting") recorder2.setOutput(this._codegenId, params.file);
        recorder2.setMode(params.mode);
      }
      this.setAutoCloseEnabled(true);
    }
    async setAutoCloseEnabled(enabled) {
      if (!this._autoCloseAllowed) return;
      if (this._autoCloseTimer) clearTimeout(this._autoCloseTimer);
      if (!enabled) return;
      const heartBeat = () => {
        if (!this._playwright.allPages().length) (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
        else this._autoCloseTimer = setTimeout(heartBeat, 5e3);
      };
      this._autoCloseTimer = setTimeout(heartBeat, 3e4);
    }
    async highlight(selector) {
      for (const recorder2 of await this._allRecorders()) recorder2.setHighlightedSelector(this._sdkLanguage, selector);
    }
    async hideHighlight() {
      for (const recorder2 of await this._allRecorders()) recorder2.hideHighlightedSelector();
      await this._playwright.hideHighlight();
    }
    allBrowsers() {
      return [...this._playwright.allBrowsers()];
    }
    async resume() {
      for (const recorder2 of await this._allRecorders()) recorder2.resume();
    }
    async kill() {
      (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
    }
    async closeAllBrowsers() {
      await Promise.all(this.allBrowsers().map((browser2) => browser2.close({
        reason: "Close all browsers requested"
      })));
    }
    _emitSnapshot() {
      let pageCount = 0;
      for (const browser2 of this._playwright.allBrowsers()) {
        const b = {
          contexts: []
        };
        for (const context of browser2.contexts()) {
          const c = {
            pages: []
          };
          b.contexts.push(c);
          for (const page2 of context.pages()) c.pages.push(page2.mainFrame().url());
          pageCount += context.pages().length;
        }
      }
      this.emit(DebugController.Events.StateChanged, {
        pageCount
      });
    }
    async _allRecorders() {
      const contexts = /* @__PURE__ */ new Set();
      for (const page2 of this._playwright.allPages()) contexts.add(page2.context());
      const result2 = await Promise.all([...contexts].map((c) => _recorder.Recorder.showInspector(c, {
        omitCallTracking: true
      }, () => Promise.resolve(new InspectingRecorderApp(this)))));
      return result2.filter(Boolean);
    }
    async _closeBrowsersWithoutPages() {
      for (const browser2 of this._playwright.allBrowsers()) {
        for (const context of browser2.contexts()) {
          if (!context.pages().length) await context.close({
            reason: "Browser collected"
          });
        }
        if (!browser2.contexts()) await browser2.close({
          reason: "Browser collected"
        });
      }
    }
  }
  debugController.DebugController = DebugController;
  DebugController.Events = {
    StateChanged: "stateChanged",
    InspectRequested: "inspectRequested",
    SourceChanged: "sourceChanged",
    Paused: "paused",
    SetModeRequested: "setModeRequested"
  };
  class InspectingRecorderApp extends _recorderApp.EmptyRecorderApp {
    constructor(debugController2) {
      super();
      this._debugController = void 0;
      this._debugController = debugController2;
    }
    async setSelector(selector) {
      const locator2 = (0, _utils2.asLocator)(this._debugController._sdkLanguage, selector);
      this._debugController.emit(DebugController.Events.InspectRequested, {
        selector,
        locator: locator2
      });
    }
    async setSources(sources) {
      const source2 = sources.find((s) => s.id === this._debugController._codegenId);
      const {
        text,
        header,
        footer,
        actions
      } = source2 || {
        text: ""
      };
      this._debugController.emit(DebugController.Events.SourceChanged, {
        text,
        header,
        footer,
        actions
      });
    }
    async setPaused(paused) {
      this._debugController.emit(DebugController.Events.Paused, {
        paused
      });
    }
    async setMode(mode) {
      this._debugController.emit(DebugController.Events.SetModeRequested, {
        mode
      });
    }
  }
  return debugController;
}
var bidiChromium = {};
var bidiBrowser = {};
var bidiConnection = {};
Object.defineProperty(bidiConnection, "__esModule", {
  value: true
});
bidiConnection.kBrowserCloseMessageId = bidiConnection.BidiSession = bidiConnection.BidiConnection = void 0;
var _events$5 = require$$0$1;
var _utils$j = requireUtils();
var _debugLogger$4 = debugLogger;
var _helper$1 = helper;
var _protocolError = protocolError;
const kBrowserCloseMessageId = bidiConnection.kBrowserCloseMessageId = 0;
class BidiConnection {
  constructor(transport2, onDisconnect, protocolLogger, browserLogsCollector) {
    this._transport = void 0;
    this._onDisconnect = void 0;
    this._protocolLogger = void 0;
    this._browserLogsCollector = void 0;
    this._browserDisconnectedLogs = void 0;
    this._lastId = 0;
    this._closed = false;
    this.browserSession = void 0;
    this._browsingContextToSession = /* @__PURE__ */ new Map();
    this._transport = transport2;
    this._onDisconnect = onDisconnect;
    this._protocolLogger = protocolLogger;
    this._browserLogsCollector = browserLogsCollector;
    this.browserSession = new BidiSession(this, "", (message) => {
      this.rawSend(message);
    });
    this._transport.onmessage = this._dispatchMessage.bind(this);
    this._transport.onclose = this._onClose.bind(this);
  }
  nextMessageId() {
    return ++this._lastId;
  }
  rawSend(message) {
    this._protocolLogger("send", message);
    this._transport.send(message);
  }
  _dispatchMessage(message) {
    this._protocolLogger("receive", message);
    const object = message;
    if (object.type === "event") {
      var _object$params$source;
      let context;
      if ("context" in object.params) context = object.params.context;
      else if (object.method === "log.entryAdded" || object.method === "script.message") context = (_object$params$source = object.params.source) === null || _object$params$source === void 0 ? void 0 : _object$params$source.context;
      if (context) {
        const session2 = this._browsingContextToSession.get(context);
        if (session2) {
          session2.dispatchMessage(message);
          return;
        }
      }
    } else if (message.id) {
      for (const session2 of this._browsingContextToSession.values()) {
        if (session2.hasCallback(message.id)) {
          session2.dispatchMessage(message);
          return;
        }
      }
    }
    this.browserSession.dispatchMessage(message);
  }
  _onClose(reason) {
    this._closed = true;
    this._transport.onmessage = void 0;
    this._transport.onclose = void 0;
    this._browserDisconnectedLogs = _helper$1.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
    this.browserSession.dispose();
    this._onDisconnect();
  }
  isClosed() {
    return this._closed;
  }
  close() {
    if (!this._closed) this._transport.close();
  }
  createMainFrameBrowsingContextSession(bowsingContextId) {
    const result2 = new BidiSession(this, bowsingContextId, (message) => this.rawSend(message));
    this._browsingContextToSession.set(bowsingContextId, result2);
    return result2;
  }
}
bidiConnection.BidiConnection = BidiConnection;
class BidiSession extends _events$5.EventEmitter {
  constructor(connection2, sessionId, rawSend) {
    super();
    this.connection = void 0;
    this.sessionId = void 0;
    this._disposed = false;
    this._rawSend = void 0;
    this._callbacks = /* @__PURE__ */ new Map();
    this._crashed = false;
    this._browsingContexts = /* @__PURE__ */ new Set();
    this.on = void 0;
    this.addListener = void 0;
    this.off = void 0;
    this.removeListener = void 0;
    this.once = void 0;
    this.setMaxListeners(0);
    this.connection = connection2;
    this.sessionId = sessionId;
    this._rawSend = rawSend;
    this.on = super.on;
    this.off = super.removeListener;
    this.addListener = super.addListener;
    this.removeListener = super.removeListener;
    this.once = super.once;
  }
  addFrameBrowsingContext(context) {
    this._browsingContexts.add(context);
    this.connection._browsingContextToSession.set(context, this);
  }
  removeFrameBrowsingContext(context) {
    this._browsingContexts.delete(context);
    this.connection._browsingContextToSession.delete(context);
  }
  async send(method, params) {
    if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs) throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this.connection._browserDisconnectedLogs);
    const id = this.connection.nextMessageId();
    const messageObj = {
      id,
      method,
      params
    };
    this._rawSend(messageObj);
    return new Promise((resolve, reject) => {
      this._callbacks.set(id, {
        resolve,
        reject,
        error: new _protocolError.ProtocolError("error", method)
      });
    });
  }
  sendMayFail(method, params) {
    return this.send(method, params).catch((error) => _debugLogger$4.debugLogger.log("error", error));
  }
  markAsCrashed() {
    this._crashed = true;
  }
  isDisposed() {
    return this._disposed;
  }
  dispose() {
    this._disposed = true;
    this.connection._browsingContextToSession.delete(this.sessionId);
    for (const context of this._browsingContexts) this.connection._browsingContextToSession.delete(context);
    this._browsingContexts.clear();
    for (const callback of this._callbacks.values()) {
      callback.error.type = this._crashed ? "crashed" : "closed";
      callback.error.logs = this.connection._browserDisconnectedLogs;
      callback.reject(callback.error);
    }
    this._callbacks.clear();
  }
  hasCallback(id) {
    return this._callbacks.has(id);
  }
  dispatchMessage(message) {
    const object = message;
    if (object.id === kBrowserCloseMessageId) return;
    if (object.id && this._callbacks.has(object.id)) {
      const callback = this._callbacks.get(object.id);
      this._callbacks.delete(object.id);
      if (object.type === "error") {
        callback.error.setMessage(object.error + "\nMessage: " + object.message);
        callback.reject(callback.error);
      } else if (object.type === "success") {
        callback.resolve(object.result);
      } else {
        callback.error.setMessage("Internal error, unexpected response type: " + JSON.stringify(object));
        callback.reject(callback.error);
      }
    } else if (object.id) {
      (0, _utils$j.assert)(this.isDisposed());
    } else {
      Promise.resolve().then(() => this.emit(object.method, object.params));
    }
  }
}
bidiConnection.BidiSession = BidiSession;
var bidiNetworkManager = {};
var bidiProtocol = {};
Object.defineProperty(bidiProtocol, "__esModule", {
  value: true
});
bidiProtocol.Storage = bidiProtocol.Session = bidiProtocol.Script = bidiProtocol.Network = bidiProtocol.Log = bidiProtocol.Input = bidiProtocol.ErrorCode = bidiProtocol.BrowsingContext = bidiProtocol.Browser = void 0;
/**
 * @license
 * Copyright 2024 Google Inc.
 * Modifications copyright (c) Microsoft Corporation.
 * SPDX-License-Identifier: Apache-2.0
 */
bidiProtocol.ErrorCode = /* @__PURE__ */ function(ErrorCode) {
  ErrorCode["InvalidArgument"] = "invalid argument";
  ErrorCode["InvalidSelector"] = "invalid selector";
  ErrorCode["InvalidSessionId"] = "invalid session id";
  ErrorCode["MoveTargetOutOfBounds"] = "move target out of bounds";
  ErrorCode["NoSuchAlert"] = "no such alert";
  ErrorCode["NoSuchElement"] = "no such element";
  ErrorCode["NoSuchFrame"] = "no such frame";
  ErrorCode["NoSuchHandle"] = "no such handle";
  ErrorCode["NoSuchHistoryEntry"] = "no such history entry";
  ErrorCode["NoSuchIntercept"] = "no such intercept";
  ErrorCode["NoSuchNode"] = "no such node";
  ErrorCode["NoSuchRequest"] = "no such request";
  ErrorCode["NoSuchScript"] = "no such script";
  ErrorCode["NoSuchStoragePartition"] = "no such storage partition";
  ErrorCode["NoSuchUserContext"] = "no such user context";
  ErrorCode["SessionNotCreated"] = "session not created";
  ErrorCode["UnableToCaptureScreen"] = "unable to capture screen";
  ErrorCode["UnableToCloseBrowser"] = "unable to close browser";
  ErrorCode["UnableToSetCookie"] = "unable to set cookie";
  ErrorCode["UnableToSetFileInput"] = "unable to set file input";
  ErrorCode["UnderspecifiedStoragePartition"] = "underspecified storage partition";
  ErrorCode["UnknownCommand"] = "unknown command";
  ErrorCode["UnknownError"] = "unknown error";
  ErrorCode["UnsupportedOperation"] = "unsupported operation";
  return ErrorCode;
}({});
let Session = bidiProtocol.Session = void 0;
(function(_Session10) {
  let UserPromptHandlerType = /* @__PURE__ */ function(UserPromptHandlerType2) {
    UserPromptHandlerType2["Accept"] = "accept";
    UserPromptHandlerType2["Dismiss"] = "dismiss";
    UserPromptHandlerType2["Ignore"] = "ignore";
    return UserPromptHandlerType2;
  }({});
  _Session10.UserPromptHandlerType = UserPromptHandlerType;
})(Session || (bidiProtocol.Session = Session = {}));
bidiProtocol.Browser = void 0;
let BrowsingContext = bidiProtocol.BrowsingContext = void 0;
(function(_BrowsingContext10) {
  let ReadinessState = /* @__PURE__ */ function(ReadinessState2) {
    ReadinessState2["None"] = "none";
    ReadinessState2["Interactive"] = "interactive";
    ReadinessState2["Complete"] = "complete";
    return ReadinessState2;
  }({});
  _BrowsingContext10.ReadinessState = ReadinessState;
})(BrowsingContext || (bidiProtocol.BrowsingContext = BrowsingContext = {}));
(function(_BrowsingContext11) {
  let UserPromptType = /* @__PURE__ */ function(UserPromptType2) {
    UserPromptType2["Alert"] = "alert";
    UserPromptType2["Beforeunload"] = "beforeunload";
    UserPromptType2["Confirm"] = "confirm";
    UserPromptType2["Prompt"] = "prompt";
    return UserPromptType2;
  }({});
  _BrowsingContext11.UserPromptType = UserPromptType;
})(BrowsingContext || (bidiProtocol.BrowsingContext = BrowsingContext = {}));
(function(_BrowsingContext24) {
  let CreateType = /* @__PURE__ */ function(CreateType2) {
    CreateType2["Tab"] = "tab";
    CreateType2["Window"] = "window";
    return CreateType2;
  }({});
  _BrowsingContext24.CreateType = CreateType;
})(BrowsingContext || (bidiProtocol.BrowsingContext = BrowsingContext = {}));
let Network = bidiProtocol.Network = void 0;
(function(_Network6) {
  let SameSite = /* @__PURE__ */ function(SameSite2) {
    SameSite2["Strict"] = "strict";
    SameSite2["Lax"] = "lax";
    SameSite2["None"] = "none";
    return SameSite2;
  }({});
  _Network6.SameSite = SameSite;
})(Network || (bidiProtocol.Network = Network = {}));
(function(_Network23) {
  let InterceptPhase = /* @__PURE__ */ function(InterceptPhase2) {
    InterceptPhase2["BeforeRequestSent"] = "beforeRequestSent";
    InterceptPhase2["ResponseStarted"] = "responseStarted";
    InterceptPhase2["AuthRequired"] = "authRequired";
    return InterceptPhase2;
  }({});
  _Network23.InterceptPhase = InterceptPhase;
})(Network || (bidiProtocol.Network = Network = {}));
let Script = bidiProtocol.Script = void 0;
(function(_Script68) {
  let ResultOwnership = /* @__PURE__ */ function(ResultOwnership2) {
    ResultOwnership2["Root"] = "root";
    ResultOwnership2["None"] = "none";
    return ResultOwnership2;
  }({});
  _Script68.ResultOwnership = ResultOwnership;
})(Script || (bidiProtocol.Script = Script = {}));
bidiProtocol.Storage = void 0;
let Log = bidiProtocol.Log = void 0;
(function(_Log7) {
  let Level = /* @__PURE__ */ function(Level2) {
    Level2["Debug"] = "debug";
    Level2["Info"] = "info";
    Level2["Warn"] = "warn";
    Level2["Error"] = "error";
    return Level2;
  }({});
  _Log7.Level = Level;
})(Log || (bidiProtocol.Log = Log = {}));
let Input = bidiProtocol.Input = void 0;
(function(_Input9) {
  let PointerType = /* @__PURE__ */ function(PointerType2) {
    PointerType2["Mouse"] = "mouse";
    PointerType2["Pen"] = "pen";
    PointerType2["Touch"] = "touch";
    return PointerType2;
  }({});
  _Input9.PointerType = PointerType;
})(Input || (bidiProtocol.Input = Input = {}));
var cookieStore = {};
var hasRequiredCookieStore;
function requireCookieStore() {
  if (hasRequiredCookieStore) return cookieStore;
  hasRequiredCookieStore = 1;
  Object.defineProperty(cookieStore, "__esModule", {
    value: true
  });
  cookieStore.CookieStore = void 0;
  cookieStore.domainMatches = domainMatches;
  cookieStore.parseRawCookie = parseRawCookie;
  var _network2 = requireNetwork$1();
  class Cookie {
    constructor(data) {
      this._raw = void 0;
      this._raw = data;
    }
    name() {
      return this._raw.name;
    }
    // https://datatracker.ietf.org/doc/html/rfc6265#section-5.4
    matches(url) {
      if (this._raw.secure && url.protocol !== "https:" && url.hostname !== "localhost") return false;
      if (!domainMatches(url.hostname, this._raw.domain)) return false;
      if (!pathMatches(url.pathname, this._raw.path)) return false;
      return true;
    }
    equals(other) {
      return this._raw.name === other._raw.name && this._raw.domain === other._raw.domain && this._raw.path === other._raw.path;
    }
    networkCookie() {
      return this._raw;
    }
    updateExpiresFrom(other) {
      this._raw.expires = other._raw.expires;
    }
    expired() {
      if (this._raw.expires === -1) return false;
      return this._raw.expires * 1e3 < Date.now();
    }
  }
  class CookieStore {
    constructor() {
      this._nameToCookies = /* @__PURE__ */ new Map();
    }
    addCookies(cookies) {
      for (const cookie of cookies) this._addCookie(new Cookie(cookie));
    }
    cookies(url) {
      const result2 = [];
      for (const cookie of this._cookiesIterator()) {
        if (cookie.matches(url)) result2.push(cookie.networkCookie());
      }
      return result2;
    }
    allCookies() {
      const result2 = [];
      for (const cookie of this._cookiesIterator()) result2.push(cookie.networkCookie());
      return result2;
    }
    _addCookie(cookie) {
      let set = this._nameToCookies.get(cookie.name());
      if (!set) {
        set = /* @__PURE__ */ new Set();
        this._nameToCookies.set(cookie.name(), set);
      }
      for (const other of set) {
        if (other.equals(cookie)) set.delete(other);
      }
      set.add(cookie);
      CookieStore.pruneExpired(set);
    }
    *_cookiesIterator() {
      for (const [name2, cookies] of this._nameToCookies) {
        CookieStore.pruneExpired(cookies);
        for (const cookie of cookies) yield cookie;
        if (cookies.size === 0) this._nameToCookies.delete(name2);
      }
    }
    static pruneExpired(cookies) {
      for (const cookie of cookies) {
        if (cookie.expired()) cookies.delete(cookie);
      }
    }
  }
  cookieStore.CookieStore = CookieStore;
  function parseRawCookie(header) {
    const pairs = header.split(";").filter((s) => s.trim().length > 0).map((p) => {
      let key = "";
      let value2 = "";
      const separatorPos = p.indexOf("=");
      if (separatorPos === -1) {
        key = p.trim();
      } else {
        key = p.slice(0, separatorPos).trim();
        value2 = p.slice(separatorPos + 1).trim();
      }
      return [key, value2];
    });
    if (!pairs.length) return null;
    const [name2, value] = pairs[0];
    const cookie = {
      name: name2,
      value
    };
    for (let i = 1; i < pairs.length; i++) {
      const [name3, value2] = pairs[i];
      switch (name3.toLowerCase()) {
        case "expires":
          const expiresMs = +new Date(value2);
          if (isFinite(expiresMs)) {
            if (expiresMs <= 0) cookie.expires = 0;
            else cookie.expires = Math.min(expiresMs / 1e3, _network2.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "max-age":
          const maxAgeSec = parseInt(value2, 10);
          if (isFinite(maxAgeSec)) {
            if (maxAgeSec <= 0) cookie.expires = 0;
            else cookie.expires = Math.min(Date.now() / 1e3 + maxAgeSec, _network2.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "domain":
          cookie.domain = value2.toLocaleLowerCase() || "";
          if (cookie.domain && !cookie.domain.startsWith(".") && cookie.domain.includes(".")) cookie.domain = "." + cookie.domain;
          break;
        case "path":
          cookie.path = value2 || "";
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "samesite":
          switch (value2.toLowerCase()) {
            case "none":
              cookie.sameSite = "None";
              break;
            case "lax":
              cookie.sameSite = "Lax";
              break;
            case "strict":
              cookie.sameSite = "Strict";
              break;
          }
          break;
      }
    }
    return cookie;
  }
  function domainMatches(value, domain) {
    if (value === domain) return true;
    if (!domain.startsWith(".")) return false;
    value = "." + value;
    return value.endsWith(domain);
  }
  function pathMatches(value, path2) {
    if (value === path2) return true;
    if (!value.endsWith("/")) value = value + "/";
    if (!path2.endsWith("/")) path2 = path2 + "/";
    return value.startsWith(path2);
  }
  return cookieStore;
}
var hasRequiredBidiNetworkManager;
function requireBidiNetworkManager() {
  if (hasRequiredBidiNetworkManager) return bidiNetworkManager;
  hasRequiredBidiNetworkManager = 1;
  Object.defineProperty(bidiNetworkManager, "__esModule", {
    value: true
  });
  bidiNetworkManager.BidiNetworkManager = void 0;
  bidiNetworkManager.bidiBytesValueToString = bidiBytesValueToString;
  var _eventsHelper2 = eventsHelper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var bidi2 = _interopRequireWildcard2(bidiProtocol);
  var _cookieStore = requireCookieStore();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class BidiNetworkManager {
    constructor(bidiSession, page2, onNavigationResponseStarted) {
      this._session = void 0;
      this._requests = void 0;
      this._page = void 0;
      this._eventListeners = void 0;
      this._onNavigationResponseStarted = void 0;
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._credentials = void 0;
      this._intercepId = void 0;
      this._session = bidiSession;
      this._requests = /* @__PURE__ */ new Map();
      this._page = page2;
      this._onNavigationResponseStarted = onNavigationResponseStarted;
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(bidiSession, "network.beforeRequestSent", this._onBeforeRequestSent.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "network.responseStarted", this._onResponseStarted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "network.responseCompleted", this._onResponseCompleted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "network.fetchError", this._onFetchError.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "network.authRequired", this._onAuthRequired.bind(this))];
    }
    dispose() {
      _eventsHelper2.eventsHelper.removeEventListeners(this._eventListeners);
    }
    _onBeforeRequestSent(param) {
      if (param.request.url.startsWith("data:")) return;
      const redirectedFrom = param.redirectCount ? this._requests.get(param.request.request) || null : null;
      const frame2 = redirectedFrom ? redirectedFrom.request.frame() : param.context ? this._page._frameManager.frame(param.context) : null;
      if (!frame2) return;
      if (redirectedFrom) this._requests.delete(redirectedFrom._id);
      let route;
      if (param.intercepts) {
        if (redirectedFrom) {
          var _redirectedFrom$_orig;
          this._session.sendMayFail("network.continueRequest", {
            request: param.request.request,
            ...((_redirectedFrom$_orig = redirectedFrom._originalRequestRoute) === null || _redirectedFrom$_orig === void 0 ? void 0 : _redirectedFrom$_orig._alreadyContinuedHeaders) || {}
          });
        } else {
          route = new BidiRouteImpl(this._session, param.request.request);
        }
      }
      const request2 = new BidiRequest(frame2, redirectedFrom, param, route);
      this._requests.set(request2._id, request2);
      this._page._frameManager.requestStarted(request2.request, route);
    }
    _onResponseStarted(params) {
      const request2 = this._requests.get(params.request.request);
      if (!request2) return;
      const getResponseBody = async () => {
        throw new Error(`Response body is not available for requests in Bidi`);
      };
      const timings = params.request.timings;
      const startTime = timings.requestTime;
      function relativeToStart(time2) {
        if (!time2) return -1;
        return (time2 - startTime) / 1e3;
      }
      const timing = {
        startTime: startTime / 1e3,
        requestStart: relativeToStart(timings.requestStart),
        responseStart: relativeToStart(timings.responseStart),
        domainLookupStart: relativeToStart(timings.dnsStart),
        domainLookupEnd: relativeToStart(timings.dnsEnd),
        connectStart: relativeToStart(timings.connectStart),
        secureConnectionStart: relativeToStart(timings.tlsStart),
        connectEnd: relativeToStart(timings.connectEnd)
      };
      const response = new network2.Response(request2.request, params.response.status, params.response.statusText, fromBidiHeaders(params.response.headers), timing, getResponseBody, false);
      response._serverAddrFinished();
      response._securityDetailsFinished();
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(params.response.headersSize);
      this._page._frameManager.requestReceivedResponse(response);
      if (params.navigation) this._onNavigationResponseStarted(params);
    }
    _onResponseCompleted(params) {
      const request2 = this._requests.get(params.request.request);
      if (!request2) return;
      const response = request2.request._existingResponse();
      response.setTransferSize(params.response.bodySize);
      response.setEncodedBodySize(params.response.bodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = params.request.timings.responseEnd / 1e3 - response.timing().startTime;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request2._id);
        response._requestFinished(responseEndTime);
      }
      response._setHttpVersion(params.response.protocol);
      this._page._frameManager.reportRequestFinished(request2.request, response);
    }
    _onFetchError(params) {
      const request2 = this._requests.get(params.request.request);
      if (!request2) return;
      this._requests.delete(request2._id);
      const response = request2.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request2.request._setFailureText(params.errorText);
      this._page._frameManager.requestFailed(request2.request, params.errorText === "NS_BINDING_ABORTED");
    }
    _onAuthRequired(params) {
      var _params$response$auth;
      const isBasic = (_params$response$auth = params.response.authChallenges) === null || _params$response$auth === void 0 ? void 0 : _params$response$auth.some((challenge) => challenge.scheme.startsWith("Basic"));
      const credentials = this._page._browserContext._options.httpCredentials;
      if (isBasic && credentials) {
        this._session.sendMayFail("network.continueWithAuth", {
          request: params.request.request,
          action: "provideCredentials",
          credentials: {
            type: "password",
            username: credentials.username,
            password: credentials.password
          }
        });
      } else {
        this._session.sendMayFail("network.continueWithAuth", {
          request: params.request.request,
          action: "default"
        });
      }
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async setCredentials(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception(initial) {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled) return;
      this._protocolRequestInterceptionEnabled = enabled;
      if (initial && !enabled) return;
      const cachePromise = this._session.send("network.setCacheBehavior", {
        cacheBehavior: enabled ? "bypass" : "default"
      });
      let interceptPromise = Promise.resolve(void 0);
      if (enabled) {
        interceptPromise = this._session.send("network.addIntercept", {
          phases: [bidi2.Network.InterceptPhase.AuthRequired, bidi2.Network.InterceptPhase.BeforeRequestSent],
          urlPatterns: [{
            type: "pattern"
          }]
          // urlPatterns: [{ type: 'string', pattern: '*' }],
        }).then((r) => {
          this._intercepId = r.intercept;
        });
      } else if (this._intercepId) {
        interceptPromise = this._session.send("network.removeIntercept", {
          intercept: this._intercepId
        });
        this._intercepId = void 0;
      }
      await Promise.all([cachePromise, interceptPromise]);
    }
  }
  bidiNetworkManager.BidiNetworkManager = BidiNetworkManager;
  class BidiRequest {
    constructor(frame2, redirectedFrom, payload, route) {
      var _payload$navigation;
      this.request = void 0;
      this._id = void 0;
      this._redirectedTo = void 0;
      this._originalRequestRoute = void 0;
      this._id = payload.request.request;
      if (redirectedFrom) redirectedFrom._redirectedTo = this;
      const postDataBuffer = null;
      this.request = new network2.Request(frame2._page._browserContext, frame2, null, redirectedFrom ? redirectedFrom.request : null, (_payload$navigation = payload.navigation) !== null && _payload$navigation !== void 0 ? _payload$navigation : void 0, payload.request.url, "other", payload.request.method, postDataBuffer, fromBidiHeaders(payload.request.headers));
      this.request.setRawRequestHeaders(null);
      this.request._setBodySize(payload.request.bodySize || 0);
      this._originalRequestRoute = route !== null && route !== void 0 ? route : redirectedFrom === null || redirectedFrom === void 0 ? void 0 : redirectedFrom._originalRequestRoute;
      route === null || route === void 0 || route._setRequest(this.request);
    }
    _finalRequest() {
      let request2 = this;
      while (request2._redirectedTo) request2 = request2._redirectedTo;
      return request2;
    }
  }
  class BidiRouteImpl {
    constructor(session2, requestId) {
      this._requestId = void 0;
      this._session = void 0;
      this._request = void 0;
      this._alreadyContinuedHeaders = void 0;
      this._session = session2;
      this._requestId = requestId;
    }
    _setRequest(request2) {
      this._request = request2;
    }
    async continue(overrides) {
      let headers2 = overrides.headers || this._request.headers();
      if (overrides.postData && headers2) {
        headers2 = headers2.map((header) => {
          if (header.name.toLowerCase() === "content-length") return {
            name: header.name,
            value: overrides.postData.byteLength.toString()
          };
          return header;
        });
      }
      this._alreadyContinuedHeaders = headers2;
      await this._session.sendMayFail("network.continueRequest", {
        request: this._requestId,
        url: overrides.url,
        method: overrides.method,
        ...toBidiRequestHeaders(this._alreadyContinuedHeaders),
        body: overrides.postData ? {
          type: "base64",
          value: Buffer.from(overrides.postData).toString("base64")
        } : void 0
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("network.provideResponse", {
        request: this._requestId,
        statusCode: response.status,
        reasonPhrase: network2.statusText(response.status),
        ...toBidiResponseHeaders(response.headers),
        body: {
          type: "base64",
          value: base64body
        }
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("network.failRequest", {
        request: this._requestId
      });
    }
  }
  function fromBidiHeaders(bidiHeaders) {
    const result2 = [];
    for (const {
      name: name2,
      value
    } of bidiHeaders) result2.push({
      name: name2,
      value: bidiBytesValueToString(value)
    });
    return result2;
  }
  function toBidiRequestHeaders(allHeaders) {
    const bidiHeaders = toBidiHeaders(allHeaders);
    const cookies = bidiHeaders.filter((h) => h.name.toLowerCase() === "cookie");
    const headers2 = bidiHeaders.filter((h) => h.name.toLowerCase() !== "cookie");
    return {
      cookies,
      headers: headers2
    };
  }
  function toBidiResponseHeaders(headers2) {
    const setCookieHeaders = headers2.filter((h) => h.name.toLowerCase() === "set-cookie");
    const otherHeaders = headers2.filter((h) => h.name.toLowerCase() !== "set-cookie");
    const rawCookies = setCookieHeaders.map((h) => (0, _cookieStore.parseRawCookie)(h.value));
    const cookies = rawCookies.filter(Boolean).map((c) => {
      return {
        ...c,
        value: {
          type: "string",
          value: c.value
        },
        sameSite: toBidiSameSite(c.sameSite)
      };
    });
    return {
      cookies,
      headers: toBidiHeaders(otherHeaders)
    };
  }
  function toBidiHeaders(headers2) {
    return headers2.map(({
      name: name2,
      value
    }) => ({
      name: name2,
      value: {
        type: "string",
        value
      }
    }));
  }
  function bidiBytesValueToString(value) {
    if (value.type === "string") return value.value;
    if (value.type === "base64") return Buffer.from(value.type, "base64").toString("binary");
    return "unknown value type: " + value.type;
  }
  function toBidiSameSite(sameSite) {
    if (!sameSite) return void 0;
    if (sameSite === "Strict") return bidi2.Network.SameSite.Strict;
    if (sameSite === "Lax") return bidi2.Network.SameSite.Lax;
    return bidi2.Network.SameSite.None;
  }
  return bidiNetworkManager;
}
var bidiPage = {};
var bidiInput = {};
var bidiKeyboard = {};
Object.defineProperty(bidiKeyboard, "__esModule", {
  value: true
});
bidiKeyboard.getBidiKeyValue = void 0;
/**
 * @license
 * Copyright 2024 Google Inc.
 * Modifications copyright (c) Microsoft Corporation.
 * SPDX-License-Identifier: Apache-2.0
 */
const getBidiKeyValue = (key) => {
  switch (key) {
    case "\r":
    case "\n":
      key = "Enter";
      break;
  }
  if ([...key].length === 1) {
    return key;
  }
  switch (key) {
    case "Cancel":
      return "";
    case "Help":
      return "";
    case "Backspace":
      return "";
    case "Tab":
      return "";
    case "Clear":
      return "";
    case "Enter":
      return "";
    case "Shift":
    case "ShiftLeft":
      return "";
    case "Control":
    case "ControlLeft":
      return "";
    case "Alt":
    case "AltLeft":
      return "";
    case "Pause":
      return "";
    case "Escape":
      return "";
    case "PageUp":
      return "";
    case "PageDown":
      return "";
    case "End":
      return "";
    case "Home":
      return "";
    case "ArrowLeft":
      return "";
    case "ArrowUp":
      return "";
    case "ArrowRight":
      return "";
    case "ArrowDown":
      return "";
    case "Insert":
      return "";
    case "Delete":
      return "";
    case "NumpadEqual":
      return "";
    case "Numpad0":
      return "";
    case "Numpad1":
      return "";
    case "Numpad2":
      return "";
    case "Numpad3":
      return "";
    case "Numpad4":
      return "";
    case "Numpad5":
      return "";
    case "Numpad6":
      return "";
    case "Numpad7":
      return "";
    case "Numpad8":
      return "";
    case "Numpad9":
      return "";
    case "NumpadMultiply":
      return "";
    case "NumpadAdd":
      return "";
    case "NumpadSubtract":
      return "";
    case "NumpadDecimal":
      return "";
    case "NumpadDivide":
      return "";
    case "F1":
      return "";
    case "F2":
      return "";
    case "F3":
      return "";
    case "F4":
      return "";
    case "F5":
      return "";
    case "F6":
      return "";
    case "F7":
      return "";
    case "F8":
      return "";
    case "F9":
      return "";
    case "F10":
      return "";
    case "F11":
      return "";
    case "F12":
      return "";
    case "Meta":
    case "MetaLeft":
      return "";
    case "ShiftRight":
      return "";
    case "ControlRight":
      return "";
    case "AltRight":
      return "";
    case "MetaRight":
      return "";
    case "Digit0":
      return "0";
    case "Digit1":
      return "1";
    case "Digit2":
      return "2";
    case "Digit3":
      return "3";
    case "Digit4":
      return "4";
    case "Digit5":
      return "5";
    case "Digit6":
      return "6";
    case "Digit7":
      return "7";
    case "Digit8":
      return "8";
    case "Digit9":
      return "9";
    case "KeyA":
      return "a";
    case "KeyB":
      return "b";
    case "KeyC":
      return "c";
    case "KeyD":
      return "d";
    case "KeyE":
      return "e";
    case "KeyF":
      return "f";
    case "KeyG":
      return "g";
    case "KeyH":
      return "h";
    case "KeyI":
      return "i";
    case "KeyJ":
      return "j";
    case "KeyK":
      return "k";
    case "KeyL":
      return "l";
    case "KeyM":
      return "m";
    case "KeyN":
      return "n";
    case "KeyO":
      return "o";
    case "KeyP":
      return "p";
    case "KeyQ":
      return "q";
    case "KeyR":
      return "r";
    case "KeyS":
      return "s";
    case "KeyT":
      return "t";
    case "KeyU":
      return "u";
    case "KeyV":
      return "v";
    case "KeyW":
      return "w";
    case "KeyX":
      return "x";
    case "KeyY":
      return "y";
    case "KeyZ":
      return "z";
    case "Semicolon":
      return ";";
    case "Equal":
      return "=";
    case "Comma":
      return ",";
    case "Minus":
      return "-";
    case "Period":
      return ".";
    case "Slash":
      return "/";
    case "Backquote":
      return "`";
    case "BracketLeft":
      return "[";
    case "Backslash":
      return "\\";
    case "BracketRight":
      return "]";
    case "Quote":
      return '"';
    default:
      throw new Error(`Unknown key: "${key}"`);
  }
};
bidiKeyboard.getBidiKeyValue = getBidiKeyValue;
Object.defineProperty(bidiInput, "__esModule", {
  value: true
});
bidiInput.RawTouchscreenImpl = bidiInput.RawMouseImpl = bidiInput.RawKeyboardImpl = void 0;
var bidi$1 = _interopRequireWildcard$4(bidiProtocol);
var _bidiKeyboard = bidiKeyboard;
function _getRequireWildcardCache$4(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$4 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$4(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$4(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class RawKeyboardImpl4 {
  constructor(session2) {
    this._session = void 0;
    this._session = session2;
  }
  setSession(session2) {
    this._session = session2;
  }
  async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
    const actions = [];
    actions.push({
      type: "keyDown",
      value: (0, _bidiKeyboard.getBidiKeyValue)(key)
    });
    await this._performActions(actions);
  }
  async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
    const actions = [];
    actions.push({
      type: "keyUp",
      value: (0, _bidiKeyboard.getBidiKeyValue)(key)
    });
    await this._performActions(actions);
  }
  async sendText(text) {
    const actions = [];
    for (const char of text) {
      const value = (0, _bidiKeyboard.getBidiKeyValue)(char);
      actions.push({
        type: "keyDown",
        value
      });
      actions.push({
        type: "keyUp",
        value
      });
    }
    await this._performActions(actions);
  }
  async _performActions(actions) {
    await this._session.send("input.performActions", {
      context: this._session.sessionId,
      actions: [{
        type: "key",
        id: "pw_keyboard",
        actions
      }]
    });
  }
}
bidiInput.RawKeyboardImpl = RawKeyboardImpl4;
class RawMouseImpl4 {
  constructor(session2) {
    this._session = void 0;
    this._session = session2;
  }
  async move(x, y, button, buttons, modifiers, forClick) {
    x = Math.round(x);
    y = Math.round(y);
    await this._performActions([{
      type: "pointerMove",
      x,
      y
    }]);
  }
  async down(x, y, button, buttons, modifiers, clickCount) {
    await this._performActions([{
      type: "pointerDown",
      button: toBidiButton(button)
    }]);
  }
  async up(x, y, button, buttons, modifiers, clickCount) {
    await this._performActions([{
      type: "pointerUp",
      button: toBidiButton(button)
    }]);
  }
  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
    x = Math.round(x);
    y = Math.round(y);
    await this._session.send("input.performActions", {
      context: this._session.sessionId,
      actions: [{
        type: "wheel",
        id: "pw_mouse_wheel",
        actions: [{
          type: "scroll",
          x,
          y,
          deltaX,
          deltaY
        }]
      }]
    });
  }
  async _performActions(actions) {
    await this._session.send("input.performActions", {
      context: this._session.sessionId,
      actions: [{
        type: "pointer",
        id: "pw_mouse",
        parameters: {
          pointerType: bidi$1.Input.PointerType.Mouse
        },
        actions
      }]
    });
  }
}
bidiInput.RawMouseImpl = RawMouseImpl4;
class RawTouchscreenImpl4 {
  constructor(session2) {
    this._session = void 0;
    this._session = session2;
  }
  async tap(x, y, modifiers) {
  }
}
bidiInput.RawTouchscreenImpl = RawTouchscreenImpl4;
function toBidiButton(button) {
  switch (button) {
    case "left":
      return 0;
    case "right":
      return 2;
    case "middle":
      return 1;
  }
  throw new Error("Unknown button: " + button);
}
var bidiExecutionContext = {};
var bidiDeserializer = {};
Object.defineProperty(bidiDeserializer, "__esModule", {
  value: true
});
bidiDeserializer.BidiDeserializer = void 0;
/**
 * @license
 * Copyright 2024 Google Inc.
 * Modifications copyright (c) Microsoft Corporation.
 * SPDX-License-Identifier: Apache-2.0
 */
class BidiDeserializer {
  static deserialize(result2) {
    var _result$value, _result$value2, _result$value3, _result$value4;
    if (!result2) return void 0;
    switch (result2.type) {
      case "array":
        return (_result$value = result2.value) === null || _result$value === void 0 ? void 0 : _result$value.map((value) => {
          return BidiDeserializer.deserialize(value);
        });
      case "set":
        return (_result$value2 = result2.value) === null || _result$value2 === void 0 ? void 0 : _result$value2.reduce((acc, value) => {
          return acc.add(BidiDeserializer.deserialize(value));
        }, /* @__PURE__ */ new Set());
      case "object":
        return (_result$value3 = result2.value) === null || _result$value3 === void 0 ? void 0 : _result$value3.reduce((acc, tuple) => {
          const {
            key,
            value
          } = BidiDeserializer._deserializeTuple(tuple);
          acc[key] = value;
          return acc;
        }, {});
      case "map":
        return (_result$value4 = result2.value) === null || _result$value4 === void 0 ? void 0 : _result$value4.reduce((acc, tuple) => {
          const {
            key,
            value
          } = BidiDeserializer._deserializeTuple(tuple);
          return acc.set(key, value);
        }, /* @__PURE__ */ new Map());
      case "promise":
        return {};
      case "regexp":
        return new RegExp(result2.value.pattern, result2.value.flags);
      case "date":
        return new Date(result2.value);
      case "undefined":
        return void 0;
      case "null":
        return null;
      case "number":
        return BidiDeserializer._deserializeNumber(result2.value);
      case "bigint":
        return BigInt(result2.value);
      case "boolean":
        return Boolean(result2.value);
      case "string":
        return result2.value;
    }
    throw new Error(`Deserialization of type ${result2.type} not supported.`);
  }
  static _deserializeNumber(value) {
    switch (value) {
      case "-0":
        return -0;
      case "NaN":
        return NaN;
      case "Infinity":
        return Infinity;
      case "-Infinity":
        return -Infinity;
      default:
        return value;
    }
  }
  static _deserializeTuple([serializedKey, serializedValue]) {
    const key = typeof serializedKey === "string" ? serializedKey : BidiDeserializer.deserialize(serializedKey);
    const value = BidiDeserializer.deserialize(serializedValue);
    return {
      key,
      value
    };
  }
}
bidiDeserializer.BidiDeserializer = BidiDeserializer;
var bidiSerializer = {};
Object.defineProperty(bidiSerializer, "__esModule", {
  value: true
});
bidiSerializer.isRegExp = bidiSerializer.isPlainObject = bidiSerializer.isDate = bidiSerializer.BidiSerializer = void 0;
/**
 * @license
 * Copyright 2024 Google Inc.
 * Modifications copyright (c) Microsoft Corporation.
 * SPDX-License-Identifier: Apache-2.0
 */
class UnserializableError extends Error {
}
class BidiSerializer {
  static serialize(arg) {
    switch (typeof arg) {
      case "symbol":
      case "function":
        throw new UnserializableError(`Unable to serializable ${typeof arg}`);
      case "object":
        return BidiSerializer._serializeObject(arg);
      case "undefined":
        return {
          type: "undefined"
        };
      case "number":
        return BidiSerializer._serializeNumber(arg);
      case "bigint":
        return {
          type: "bigint",
          value: arg.toString()
        };
      case "string":
        return {
          type: "string",
          value: arg
        };
      case "boolean":
        return {
          type: "boolean",
          value: arg
        };
    }
  }
  static _serializeNumber(arg) {
    let value;
    if (Object.is(arg, -0)) {
      value = "-0";
    } else if (Object.is(arg, Infinity)) {
      value = "Infinity";
    } else if (Object.is(arg, -Infinity)) {
      value = "-Infinity";
    } else if (Object.is(arg, NaN)) {
      value = "NaN";
    } else {
      value = arg;
    }
    return {
      type: "number",
      value
    };
  }
  static _serializeObject(arg) {
    if (arg === null) {
      return {
        type: "null"
      };
    } else if (Array.isArray(arg)) {
      const parsedArray = arg.map((subArg) => {
        return BidiSerializer.serialize(subArg);
      });
      return {
        type: "array",
        value: parsedArray
      };
    } else if (isPlainObject(arg)) {
      try {
        JSON.stringify(arg);
      } catch (error) {
        if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) {
          error.message += " Recursive objects are not allowed.";
        }
        throw error;
      }
      const parsedObject = [];
      for (const key in arg) {
        parsedObject.push([BidiSerializer.serialize(key), BidiSerializer.serialize(arg[key])]);
      }
      return {
        type: "object",
        value: parsedObject
      };
    } else if (isRegExp(arg)) {
      return {
        type: "regexp",
        value: {
          pattern: arg.source,
          flags: arg.flags
        }
      };
    } else if (isDate(arg)) {
      return {
        type: "date",
        value: arg.toISOString()
      };
    }
    throw new UnserializableError("Custom object serialization not possible. Use plain objects instead.");
  }
}
bidiSerializer.BidiSerializer = BidiSerializer;
const isPlainObject = (obj) => {
  return typeof obj === "object" && (obj === null || obj === void 0 ? void 0 : obj.constructor) === Object;
};
bidiSerializer.isPlainObject = isPlainObject;
const isRegExp = (obj) => {
  return typeof obj === "object" && (obj === null || obj === void 0 ? void 0 : obj.constructor) === RegExp;
};
bidiSerializer.isRegExp = isRegExp;
const isDate = (obj) => {
  return typeof obj === "object" && (obj === null || obj === void 0 ? void 0 : obj.constructor) === Date;
};
bidiSerializer.isDate = isDate;
Object.defineProperty(bidiExecutionContext, "__esModule", {
  value: true
});
bidiExecutionContext.BidiExecutionContext = void 0;
var _utilityScriptSerializers = utilityScriptSerializers;
var js = _interopRequireWildcard$3(javascript$1);
var _bidiDeserializer = bidiDeserializer;
var bidi = _interopRequireWildcard$3(bidiProtocol);
var _bidiSerializer = bidiSerializer;
function _getRequireWildcardCache$3(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$3 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$3(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$3(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class BidiExecutionContext {
  constructor(session2, realmInfo) {
    this._session = void 0;
    this._target = void 0;
    this._session = session2;
    if (realmInfo.type === "window") {
      this._target = {
        context: realmInfo.context,
        sandbox: realmInfo.sandbox
      };
    } else {
      this._target = {
        realm: realmInfo.realm
      };
    }
  }
  async rawEvaluateJSON(expression) {
    const response = await this._session.send("script.evaluate", {
      expression,
      target: this._target,
      serializationOptions: {
        maxObjectDepth: 10,
        maxDomDepth: 10
      },
      awaitPromise: true,
      userActivation: true
    });
    if (response.type === "success") return _bidiDeserializer.BidiDeserializer.deserialize(response.result);
    if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
  }
  async rawEvaluateHandle(expression) {
    const response = await this._session.send("script.evaluate", {
      expression,
      target: this._target,
      resultOwnership: bidi.Script.ResultOwnership.Root,
      // Necessary for the handle to be returned.
      serializationOptions: {
        maxObjectDepth: 0,
        maxDomDepth: 0
      },
      awaitPromise: true,
      userActivation: true
    });
    if (response.type === "success") {
      if ("handle" in response.result) return response.result.handle;
      throw new js.JavaScriptErrorInEvaluate("Cannot get handle: " + JSON.stringify(response.result));
    }
    if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
  }
  rawCallFunctionNoReply(func, ...args) {
    throw new Error("Method not implemented.");
  }
  async evaluateWithArguments(functionDeclaration, returnByValue, utilityScript, values, objectIds) {
    const response = await this._session.send("script.callFunction", {
      functionDeclaration,
      target: this._target,
      arguments: [{
        handle: utilityScript._objectId
      }, ...values.map(_bidiSerializer.BidiSerializer.serialize), ...objectIds.map((handle) => ({
        handle
      }))],
      resultOwnership: returnByValue ? void 0 : bidi.Script.ResultOwnership.Root,
      // Necessary for the handle to be returned.
      serializationOptions: returnByValue ? {} : {
        maxObjectDepth: 0,
        maxDomDepth: 0
      },
      awaitPromise: true,
      userActivation: true
    });
    if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
    if (response.type === "success") {
      if (returnByValue) return (0, _utilityScriptSerializers.parseEvaluationResultValue)(_bidiDeserializer.BidiDeserializer.deserialize(response.result));
      const objectId = "handle" in response.result ? response.result.handle : void 0;
      return utilityScript._context.createHandle({
        objectId,
        ...response.result
      });
    }
    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
  }
  async getProperties(context, objectId) {
    throw new Error("Method not implemented.");
  }
  createHandle(context, jsRemoteObject) {
    const remoteObject = jsRemoteObject;
    return new js.JSHandle(context, remoteObject.type, renderPreview(remoteObject), jsRemoteObject.objectId, remoteObjectValue(remoteObject));
  }
  async releaseHandle(objectId) {
    await this._session.send("script.disown", {
      target: this._target,
      handles: [objectId]
    });
  }
  async rawCallFunction(functionDeclaration, arg) {
    const response = await this._session.send("script.callFunction", {
      functionDeclaration,
      target: this._target,
      arguments: [arg],
      resultOwnership: bidi.Script.ResultOwnership.Root,
      // Necessary for the handle to be returned.
      serializationOptions: {
        maxObjectDepth: 0,
        maxDomDepth: 0
      },
      awaitPromise: true,
      userActivation: true
    });
    if (response.type === "exception") throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
    if (response.type === "success") return response.result;
    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
  }
}
bidiExecutionContext.BidiExecutionContext = BidiExecutionContext;
function renderPreview(remoteObject) {
  if (remoteObject.type === "undefined") return "undefined";
  if (remoteObject.type === "null") return "null";
  if ("value" in remoteObject) return String(remoteObject.value);
  return `<${remoteObject.type}>`;
}
function remoteObjectValue(remoteObject) {
  if (remoteObject.type === "undefined") return void 0;
  if (remoteObject.type === "null") return null;
  if (remoteObject.type === "number" && typeof remoteObject.value === "string") return js.parseUnserializableValue(remoteObject.value);
  if ("value" in remoteObject) return remoteObject.value;
  return void 0;
}
var bidiPdf = {};
Object.defineProperty(bidiPdf, "__esModule", {
  value: true
});
bidiPdf.BidiPDF = void 0;
var _utils$i = requireUtils();
const PagePaperFormats = {
  letter: {
    width: 8.5,
    height: 11
  },
  legal: {
    width: 8.5,
    height: 14
  },
  tabloid: {
    width: 11,
    height: 17
  },
  ledger: {
    width: 17,
    height: 11
  },
  a0: {
    width: 33.1,
    height: 46.8
  },
  a1: {
    width: 23.4,
    height: 33.1
  },
  a2: {
    width: 16.54,
    height: 23.4
  },
  a3: {
    width: 11.7,
    height: 16.54
  },
  a4: {
    width: 8.27,
    height: 11.7
  },
  a5: {
    width: 5.83,
    height: 8.27
  },
  a6: {
    width: 4.13,
    height: 5.83
  }
};
const unitToPixels = {
  "px": 1,
  "in": 96,
  "cm": 37.8,
  "mm": 3.78
};
function convertPrintParameterToInches(text) {
  if (text === void 0) return void 0;
  let unit = text.substring(text.length - 2).toLowerCase();
  let valueText = "";
  if (unitToPixels.hasOwnProperty(unit)) {
    valueText = text.substring(0, text.length - 2);
  } else {
    unit = "px";
    valueText = text;
  }
  const value = Number(valueText);
  (0, _utils$i.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
  const pixels = value * unitToPixels[unit];
  return pixels / 96;
}
class BidiPDF {
  constructor(session2) {
    this._session = void 0;
    this._session = session2;
  }
  async generate(options) {
    const {
      scale = 1,
      printBackground = false,
      landscape = false,
      pageRanges = "",
      margin = {}
    } = options;
    let paperWidth = 8.5;
    let paperHeight = 11;
    if (options.format) {
      const format = PagePaperFormats[options.format.toLowerCase()];
      (0, _utils$i.assert)(format, "Unknown paper format: " + options.format);
      paperWidth = format.width;
      paperHeight = format.height;
    } else {
      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
    }
    const {
      data
    } = await this._session.send("browsingContext.print", {
      context: this._session.sessionId,
      background: printBackground,
      margin: {
        bottom: convertPrintParameterToInches(margin.bottom) || 0,
        left: convertPrintParameterToInches(margin.left) || 0,
        right: convertPrintParameterToInches(margin.right) || 0,
        top: convertPrintParameterToInches(margin.top) || 0
      },
      orientation: landscape ? "landscape" : "portrait",
      page: {
        width: paperWidth,
        height: paperHeight
      },
      pageRanges: pageRanges ? pageRanges.split(",").map((r) => r.trim()) : void 0,
      scale
    });
    return Buffer.from(data, "base64");
  }
}
bidiPdf.BidiPDF = BidiPDF;
var hasRequiredBidiPage;
function requireBidiPage() {
  if (hasRequiredBidiPage) return bidiPage;
  hasRequiredBidiPage = 1;
  Object.defineProperty(bidiPage, "__esModule", {
    value: true
  });
  bidiPage.BidiPage = void 0;
  var _eventsHelper2 = eventsHelper;
  var _utils2 = requireUtils();
  var dom$1 = _interopRequireWildcard2(dom);
  var dialog2 = _interopRequireWildcard2(dialog$1);
  var _page = requirePage$1();
  var _bidiInput = bidiInput;
  var bidi2 = _interopRequireWildcard2(bidiProtocol);
  var _bidiExecutionContext = bidiExecutionContext;
  var _bidiNetworkManager = requireBidiNetworkManager();
  var _browserContext2 = requireBrowserContext$1();
  var _bidiPdf = bidiPdf;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const UTILITY_WORLD_NAME = "__playwright_utility_world__";
  const kPlaywrightBindingChannel = "playwrightChannel";
  class BidiPage {
    constructor(browserContext2, bidiSession, opener) {
      this.rawMouse = void 0;
      this.rawKeyboard = void 0;
      this.rawTouchscreen = void 0;
      this._page = void 0;
      this._pagePromise = void 0;
      this._session = void 0;
      this._opener = void 0;
      this._realmToContext = void 0;
      this._sessionListeners = [];
      this._browserContext = void 0;
      this._networkManager = void 0;
      this._pdf = void 0;
      this._initializedPage = null;
      this._initScriptIds = [];
      this._session = bidiSession;
      this._opener = opener;
      this.rawKeyboard = new _bidiInput.RawKeyboardImpl(bidiSession);
      this.rawMouse = new _bidiInput.RawMouseImpl(bidiSession);
      this.rawTouchscreen = new _bidiInput.RawTouchscreenImpl(bidiSession);
      this._realmToContext = /* @__PURE__ */ new Map();
      this._page = new _page.Page(this, browserContext2);
      this._browserContext = browserContext2;
      this._networkManager = new _bidiNetworkManager.BidiNetworkManager(this._session, this._page, this._onNavigationResponseStarted.bind(this));
      this._pdf = new _bidiPdf.BidiPDF(this._session);
      this._page.on(_page.Page.Events.FrameDetached, (frame2) => this._removeContextsForFrame(frame2, false));
      this._sessionListeners = [_eventsHelper2.eventsHelper.addEventListener(bidiSession, "script.realmCreated", this._onRealmCreated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "script.message", this._onScriptMessage.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.contextDestroyed", this._onBrowsingContextDestroyed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationFailed", this._onNavigationFailed.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.fragmentNavigated", this._onFragmentNavigated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.domContentLoaded", this._onDomContentLoaded.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.load", this._onLoad.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "browsingContext.userPromptOpened", this._onUserPromptOpened.bind(this)), _eventsHelper2.eventsHelper.addEventListener(bidiSession, "log.entryAdded", this._onLogEntryAdded.bind(this))];
      this._pagePromise = this._initialize().finally(async () => {
        await this._page.initOpener(this._opener);
      }).then(() => {
        this._initializedPage = this._page;
        this._page.reportAsNew();
        return this._page;
      }).catch((e) => {
        this._page.reportAsNew(e);
        return e;
      });
    }
    async _initialize() {
      this._onFrameAttached(this._session.sessionId, null);
      await Promise.all([this.updateHttpCredentials(), this.updateRequestInterception(), this._updateViewport(), this._installMainBinding(), this._addAllInitScripts()]);
    }
    async _addAllInitScripts() {
      return Promise.all(this._page.allInitScripts().map((initScript) => this.addInitScript(initScript)));
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    didClose() {
      this._session.dispose();
      _eventsHelper2.eventsHelper.removeEventListeners(this._sessionListeners);
      this._page._didClose();
    }
    async pageOrError() {
      return this._pagePromise;
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _removeContextsForFrame(frame2, notifyFrame) {
      for (const [contextId, context] of this._realmToContext) {
        if (context.frame === frame2) {
          this._realmToContext.delete(contextId);
          if (notifyFrame) frame2._contextDestroyed(context);
        }
      }
    }
    _onRealmCreated(realmInfo) {
      if (this._realmToContext.has(realmInfo.realm)) return;
      if (realmInfo.type !== "window") return;
      const frame2 = this._page._frameManager.frame(realmInfo.context);
      if (!frame2) return;
      const delegate = new _bidiExecutionContext.BidiExecutionContext(this._session, realmInfo);
      let worldName;
      if (!realmInfo.sandbox) {
        worldName = "main";
        this._touchUtilityWorld(realmInfo.context);
      } else if (realmInfo.sandbox === UTILITY_WORLD_NAME) {
        worldName = "utility";
      } else {
        return;
      }
      const context = new dom$1.FrameExecutionContext(delegate, frame2, worldName);
      context[contextDelegateSymbol] = delegate;
      frame2._contextCreated(worldName, context);
      this._realmToContext.set(realmInfo.realm, context);
    }
    async _touchUtilityWorld(context) {
      await this._session.sendMayFail("script.evaluate", {
        expression: "1 + 1",
        target: {
          context,
          sandbox: UTILITY_WORLD_NAME
        },
        serializationOptions: {
          maxObjectDepth: 10,
          maxDomDepth: 10
        },
        awaitPromise: true,
        userActivation: true
      });
    }
    _onRealmDestroyed(params) {
      const context = this._realmToContext.get(params.realm);
      if (!context) return false;
      this._realmToContext.delete(params.realm);
      context.frame._contextDestroyed(context);
      return true;
    }
    // TODO: route the message directly to the browser
    _onBrowsingContextDestroyed(params) {
      this._browserContext._browser._onBrowsingContextDestroyed(params);
    }
    _onNavigationStarted(params) {
      const frameId = params.context;
      this._page._frameManager.frameRequestedNavigation(frameId, params.navigation);
      const url = params.url.toLowerCase();
      if (url.startsWith("file:") || url.startsWith("data:") || url === "about:blank") {
        const frame2 = this._page._frameManager.frame(frameId);
        if (frame2) this._page._frameManager.frameCommittedNewDocumentNavigation(
          frameId,
          params.url,
          "",
          params.navigation,
          /* initial */
          false
        );
      }
    }
    // TODO: there is no separate event for committed navigation, so we approximate it with responseStarted.
    _onNavigationResponseStarted(params) {
      const frameId = params.context;
      const frame2 = this._page._frameManager.frame(frameId);
      (0, _utils2.assert)(frame2);
      this._page._frameManager.frameCommittedNewDocumentNavigation(
        frameId,
        params.response.url,
        "",
        params.navigation,
        /* initial */
        false
      );
    }
    _onDomContentLoaded(params) {
      const frameId = params.context;
      this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onLoad(params) {
      this._page._frameManager.frameLifecycleEvent(params.context, "load");
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.context, "Navigation aborted", params.navigation || void 0);
    }
    _onNavigationFailed(params) {
      this._page._frameManager.frameAbortedNavigation(params.context, "Navigation failed", params.navigation || void 0);
    }
    _onFragmentNavigated(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.context, params.url);
    }
    _onUserPromptOpened(event) {
      this._page.emitOnContext(_browserContext2.BrowserContext.Events.Dialog, new dialog2.Dialog(this._page, event.type, event.message, async (accept, userText) => {
        await this._session.send("browsingContext.handleUserPrompt", {
          context: event.context,
          accept,
          userText
        });
      }, event.defaultValue));
    }
    _onLogEntryAdded(params) {
      var _params$stackTrace;
      if (params.type !== "console") return;
      const entry = params;
      const context = this._realmToContext.get(params.source.realm);
      if (!context) return;
      const callFrame = (_params$stackTrace = params.stackTrace) === null || _params$stackTrace === void 0 ? void 0 : _params$stackTrace.callFrames[0];
      const location2 = callFrame !== null && callFrame !== void 0 ? callFrame : {
        url: "",
        lineNumber: 1,
        columnNumber: 1
      };
      this._page._addConsoleMessage(entry.method, entry.args.map((arg) => context.createHandle({
        objectId: arg.handle,
        ...arg
      })), location2, params.text || void 0);
    }
    async navigateFrame(frame2, url, referrer) {
      const {
        navigation
      } = await this._session.send("browsingContext.navigate", {
        context: frame2._id,
        url
      });
      return {
        newDocumentId: navigation || void 0
      };
    }
    async updateExtraHTTPHeaders() {
    }
    async updateEmulateMedia() {
    }
    async updateEmulatedViewportSize() {
      await this._updateViewport();
    }
    async updateUserAgent() {
    }
    async bringToFront() {
      await this._session.send("browsingContext.activate", {
        context: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null) return;
      const viewportSize = deviceSize.viewport;
      await this._session.send("browsingContext.setViewport", {
        context: this._session.sessionId,
        viewport: {
          width: viewportSize.width,
          height: viewportSize.height
        },
        devicePixelRatio: options.deviceScaleFactor || 1
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateOffline() {
    }
    async updateHttpCredentials() {
      await this._networkManager.setCredentials(this._browserContext._options.httpCredentials);
    }
    async updateFileChooserInterception() {
    }
    async reload() {
      await this._session.send("browsingContext.reload", {
        context: this._session.sessionId,
        // ignoreCache: true,
        wait: bidi2.BrowsingContext.ReadinessState.Interactive
      });
    }
    async goBack() {
      return await this._session.send("browsingContext.traverseHistory", {
        context: this._session.sessionId,
        delta: -1
      }).then(() => true).catch(() => false);
    }
    async goForward() {
      return await this._session.send("browsingContext.traverseHistory", {
        context: this._session.sessionId,
        delta: 1
      }).then(() => true).catch(() => false);
    }
    async requestGC() {
      throw new Error("Method not implemented.");
    }
    // TODO: consider calling this only when bindings are added.
    async _installMainBinding() {
      const functionDeclaration = addMainBinding.toString();
      const args = [{
        type: "channel",
        value: {
          channel: kPlaywrightBindingChannel,
          ownership: bidi2.Script.ResultOwnership.Root
        }
      }];
      const promises = [];
      promises.push(this._session.send("script.addPreloadScript", {
        functionDeclaration,
        arguments: args
      }));
      promises.push(this._session.send("script.callFunction", {
        functionDeclaration,
        arguments: args,
        target: toBidiExecutionContext(await this._page.mainFrame()._mainContext())._target,
        awaitPromise: false,
        userActivation: false
      }));
      await Promise.all(promises);
    }
    async _onScriptMessage(event) {
      if (event.channel !== kPlaywrightBindingChannel) return;
      const pageOrError = await this.pageOrError();
      if (pageOrError instanceof Error) return;
      const context = this._realmToContext.get(event.source.realm);
      if (!context) return;
      if (event.data.type !== "string") return;
      await this._page._onBindingCalled(event.data.value, context);
    }
    async addInitScript(initScript) {
      const {
        script
      } = await this._session.send("script.addPreloadScript", {
        // TODO: remove function call from the source.
        functionDeclaration: `() => { return ${initScript.source} }`,
        // TODO: push to iframes?
        contexts: [this._session.sessionId]
      });
      if (!initScript.internal) this._initScriptIds.push(script);
    }
    async removeNonInternalInitScripts() {
      const promises = this._initScriptIds.map((script) => this._session.send("script.removePreloadScript", {
        script
      }));
      this._initScriptIds = [];
      await Promise.all(promises);
    }
    async closePage(runBeforeUnload) {
      await this._session.send("browsingContext.close", {
        context: this._session.sessionId,
        promptUnload: runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const {
        data
      } = await this._session.send("browsingContext.captureScreenshot", {
        context: this._session.sessionId,
        format: {
          type: `image/${format === "png" ? "png" : "jpeg"}`,
          quality: quality || 80
        },
        origin: documentRect ? "document" : "viewport",
        clip: {
          type: "box",
          ...rect
        }
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const executionContext = toBidiExecutionContext(handle._context);
      const contentWindow = await executionContext.rawCallFunction("e => e.contentWindow", {
        handle: handle._objectId
      });
      if (contentWindow.type === "window") {
        const frameId = contentWindow.value.context;
        const result2 = this._page._frameManager.frame(frameId);
        return result2;
      }
      return null;
    }
    async getOwnerFrame(handle) {
      throw new Error("Method not implemented.");
    }
    isElementHandle(remoteObject) {
      return remoteObject.type === "node";
    }
    async getBoundingBox(handle) {
      const box = await handle.evaluate((element) => {
        if (!(element instanceof Element)) return null;
        const rect = element.getBoundingClientRect();
        return {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
      });
      if (!box) return null;
      const position = await this._framePosition(handle._frame);
      if (!position) return null;
      box.x += position.x;
      box.y += position.y;
      return box;
    }
    // TODO: move to Frame.
    async _framePosition(frame2) {
      if (frame2 === this._page.mainFrame()) return {
        x: 0,
        y: 0
      };
      const element = await frame2.frameElement();
      const box = await element.boundingBox();
      if (!box) return null;
      const style = await element.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
      if (style === "error:notconnected" || style === "transformed") return null;
      box.x += style.left;
      box.y += style.top;
      return box;
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await handle.evaluateInUtility(([injected, node]) => {
        node.scrollIntoView({
          block: "center",
          inline: "center",
          behavior: "instant"
        });
      }, null).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node is detached from document")) return "error:notconnected";
        if (e instanceof Error && e.message.includes("Node does not have a layout object")) return "error:notvisible";
        throw e;
      });
    }
    async setScreencastOptions(options) {
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const quads = await handle.evaluateInUtility(([injected, node]) => {
        if (!node.isConnected) return "error:notconnected";
        const rects = node.getClientRects();
        if (!rects) return null;
        return [...rects].map((rect) => [{
          x: rect.left,
          y: rect.top
        }, {
          x: rect.right,
          y: rect.top
        }, {
          x: rect.right,
          y: rect.bottom
        }, {
          x: rect.left,
          y: rect.bottom
        }]);
      }, null);
      if (!quads || quads === "error:notconnected") return quads;
      const position = await this._framePosition(handle._frame);
      if (!position) return null;
      quads.forEach((quad) => quad.forEach((point) => {
        point.x += position.x;
        point.y += position.y;
      }));
      return quads;
    }
    async setInputFiles(handle, files) {
      throw new Error("Method not implemented.");
    }
    async setInputFilePaths(handle, paths) {
      throw new Error("Method not implemented.");
    }
    async adoptElementHandle(handle, to2) {
      const fromContext = toBidiExecutionContext(handle._context);
      const shared = await fromContext.rawCallFunction("x => x", {
        handle: handle._objectId
      });
      if (!("sharedId" in shared)) throw new Error("Element is not a node");
      const sharedId = shared.sharedId;
      const executionContext = toBidiExecutionContext(to2);
      const result2 = await executionContext.rawCallFunction("x => x", {
        sharedId
      });
      if ("handle" in result2) return to2.createHandle({
        objectId: result2.handle,
        ...result2
      });
      throw new Error("Failed to adopt element handle.");
    }
    async getAccessibilityTree(needle) {
      throw new Error("Method not implemented.");
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    async getFrameElement(frame2) {
      const parent = frame2.parentFrame();
      if (!parent) throw new Error("Frame has been detached.");
      const parentContext = await parent._mainContext();
      const list = await parentContext.evaluateHandle(() => {
        return [...document.querySelectorAll("iframe,frame")];
      });
      const length = await list.evaluate((list2) => list2.length);
      let foundElement = null;
      for (let i = 0; i < length; i++) {
        const element = await list.evaluateHandle((list2, i2) => list2[i2], i);
        const candidate = await element.contentFrame();
        if (frame2 === candidate) {
          foundElement = element;
          break;
        } else {
          element.dispose();
        }
      }
      list.dispose();
      if (!foundElement) throw new Error("Frame has been detached.");
      return foundElement;
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  bidiPage.BidiPage = BidiPage;
  function addMainBinding(callback) {
    globalThis["__playwright__binding__"] = callback;
  }
  function toBidiExecutionContext(executionContext) {
    return executionContext[contextDelegateSymbol];
  }
  const contextDelegateSymbol = Symbol("delegate");
  return bidiPage;
}
var hasRequiredBidiBrowser;
function requireBidiBrowser() {
  if (hasRequiredBidiBrowser) return bidiBrowser;
  hasRequiredBidiBrowser = 1;
  Object.defineProperty(bidiBrowser, "__esModule", {
    value: true
  });
  bidiBrowser.Network = bidiBrowser.BidiBrowserContext = bidiBrowser.BidiBrowser = void 0;
  var _eventsHelper2 = eventsHelper;
  var _browser2 = requireBrowser$1();
  var _browserContext2 = requireBrowserContext$1();
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _bidiConnection = bidiConnection;
  var _bidiNetworkManager = requireBidiNetworkManager();
  var _bidiPage = requireBidiPage();
  var bidi2 = _interopRequireWildcard2(bidiProtocol);
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class BidiBrowser extends _browser2.Browser {
    static async connect(parent, transport2, options) {
      const browser2 = new BidiBrowser(parent, transport2, options);
      if (options.__testHookOnConnectToBrowser) await options.__testHookOnConnectToBrowser();
      let proxy;
      if (options.proxy) {
        proxy = {
          proxyType: "manual"
        };
        const url = new URL(options.proxy.server);
        switch (url.protocol) {
          case "http:":
            proxy.httpProxy = url.host;
            break;
          case "https:":
            proxy.httpsProxy = url.host;
            break;
          case "socks4:":
            proxy.socksProxy = url.host;
            proxy.socksVersion = 4;
            break;
          case "socks5:":
            proxy.socksProxy = url.host;
            proxy.socksVersion = 5;
            break;
          default:
            throw new Error("Invalid proxy server protocol: " + options.proxy.server);
        }
        if (options.proxy.bypass) proxy.noProxy = options.proxy.bypass.split(",");
      }
      browser2._bidiSessionInfo = await browser2._browserSession.send("session.new", {
        capabilities: {
          alwaysMatch: {
            acceptInsecureCerts: false,
            proxy,
            unhandledPromptBehavior: {
              default: bidi2.Session.UserPromptHandlerType.Ignore
            },
            webSocketUrl: true
          }
        }
      });
      await browser2._browserSession.send("session.subscribe", {
        events: ["browsingContext", "network", "log", "script"]
      });
      if (options.persistent) {
        browser2._defaultContext = new BidiBrowserContext(browser2, void 0, options.persistent);
        await browser2._defaultContext._initialize();
        const pageDelegate = await browser2._defaultContext.newPageDelegate();
        await pageDelegate.pageOrError();
      }
      return browser2;
    }
    constructor(parent, transport2, options) {
      super(parent, options);
      this._connection = void 0;
      this._browserSession = void 0;
      this._bidiSessionInfo = void 0;
      this._contexts = /* @__PURE__ */ new Map();
      this._bidiPages = /* @__PURE__ */ new Map();
      this._eventListeners = void 0;
      this._connection = new _bidiConnection.BidiConnection(transport2, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._eventListeners = [_eventsHelper2.eventsHelper.addEventListener(this._browserSession, "browsingContext.contextCreated", this._onBrowsingContextCreated.bind(this)), _eventsHelper2.eventsHelper.addEventListener(this._browserSession, "script.realmDestroyed", this._onScriptRealmDestroyed.bind(this))];
    }
    _onDisconnect() {
      this._didClose();
    }
    async doCreateNewContext(options) {
      const {
        userContext
      } = await this._browserSession.send("browser.createUserContext", {});
      const context = new BidiBrowserContext(this, userContext, options);
      await context._initialize();
      this._contexts.set(userContext, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._bidiSessionInfo.capabilities.browserVersion;
    }
    userAgent() {
      return this._bidiSessionInfo.capabilities.userAgent;
    }
    isConnected() {
      return !this._connection.isClosed();
    }
    _onBrowsingContextCreated(event) {
      if (event.parent) {
        const parentFrameId = event.parent;
        for (const page3 of this._bidiPages.values()) {
          const parentFrame = page3._page._frameManager.frame(parentFrameId);
          if (!parentFrame) continue;
          page3._session.addFrameBrowsingContext(event.context);
          page3._page._frameManager.frameAttached(event.context, parentFrameId);
          return;
        }
        return;
      }
      let context = this._contexts.get(event.userContext);
      if (!context) context = this._defaultContext;
      if (!context) return;
      const session2 = this._connection.createMainFrameBrowsingContextSession(event.context);
      const opener = event.originalOpener && this._bidiPages.get(event.originalOpener);
      const page2 = new _bidiPage.BidiPage(context, session2, opener || null);
      this._bidiPages.set(event.context, page2);
    }
    _onBrowsingContextDestroyed(event) {
      if (event.parent) {
        this._browserSession.removeFrameBrowsingContext(event.context);
        const parentFrameId = event.parent;
        for (const page2 of this._bidiPages.values()) {
          const parentFrame = page2._page._frameManager.frame(parentFrameId);
          if (!parentFrame) continue;
          page2._page._frameManager.frameDetached(event.context);
          return;
        }
        return;
      }
      const bidiPage2 = this._bidiPages.get(event.context);
      if (!bidiPage2) return;
      bidiPage2.didClose();
      this._bidiPages.delete(event.context);
    }
    _onScriptRealmDestroyed(event) {
      for (const page2 of this._bidiPages.values()) {
        if (page2._onRealmDestroyed(event)) return;
      }
    }
  }
  bidiBrowser.BidiBrowser = BidiBrowser;
  class BidiBrowserContext extends _browserContext2.BrowserContext {
    constructor(browser2, browserContextId, options) {
      super(browser2, options, browserContextId);
      this._authenticateProxyViaHeader();
    }
    _bidiPages() {
      return [...this._browser._bidiPages.values()].filter((bidiPage2) => bidiPage2._browserContext === this);
    }
    pages() {
      return this._bidiPages().map((bidiPage2) => bidiPage2._initializedPage).filter(Boolean);
    }
    async newPageDelegate() {
      (0, _browserContext2.assertBrowserContextIsNotOwned)(this);
      const {
        context
      } = await this._browser._browserSession.send("browsingContext.create", {
        type: bidi2.BrowsingContext.CreateType.Window,
        userContext: this._browserContextId
      });
      return this._browser._bidiPages.get(context);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("storage.getCookies", {
        partition: {
          type: "storageKey",
          userContext: this._browserContextId
        }
      });
      return network2.filterCookies(cookies.map((c) => {
        var _c$expiry;
        const copy = {
          name: c.name,
          value: (0, _bidiNetworkManager.bidiBytesValueToString)(c.value),
          domain: c.domain,
          path: c.path,
          httpOnly: c.httpOnly,
          secure: c.secure,
          expires: (_c$expiry = c.expiry) !== null && _c$expiry !== void 0 ? _c$expiry : -1,
          sameSite: c.sameSite ? fromBidiSameSite(c.sameSite) : "None"
        };
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      cookies = network2.rewriteCookies(cookies);
      const promises = cookies.map((c) => {
        const cookie = {
          name: c.name,
          value: {
            type: "string",
            value: c.value
          },
          domain: c.domain,
          path: c.path,
          httpOnly: c.httpOnly,
          secure: c.secure,
          sameSite: c.sameSite && toBidiSameSite(c.sameSite),
          expiry: c.expires === -1 || c.expires === void 0 ? void 0 : Math.round(c.expires)
        };
        return this._browser._browserSession.send("storage.setCookie", {
          cookie,
          partition: {
            type: "storageKey",
            userContext: this._browserContextId
          }
        });
      });
      await Promise.all(promises);
    }
    async doClearCookies() {
      await this._browser._browserSession.send("storage.deleteCookies", {
        partition: {
          type: "storageKey",
          userContext: this._browserContextId
        }
      });
    }
    async doGrantPermissions(origin, permissions) {
    }
    async doClearPermissions() {
    }
    async setGeolocation(geolocation) {
    }
    async setExtraHTTPHeaders(headers2) {
    }
    async setUserAgent(userAgent2) {
    }
    async setOffline(offline) {
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page2 of this.pages()) await page2._delegate.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      await Promise.all(this.pages().map((page2) => page2._delegate.addInitScript(initScript)));
    }
    async doRemoveNonInternalInitScripts() {
    }
    async doUpdateRequestInterception() {
    }
    onClosePersistent() {
    }
    async clearCache() {
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._browserSession.send("browser.removeUserContext", {
        userContext: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
    }
    async cancelDownload(uuid) {
    }
  }
  bidiBrowser.BidiBrowserContext = BidiBrowserContext;
  function fromBidiSameSite(sameSite) {
    switch (sameSite) {
      case "strict":
        return "Strict";
      case "lax":
        return "Lax";
      case "none":
        return "None";
    }
    return "None";
  }
  function toBidiSameSite(sameSite) {
    switch (sameSite) {
      case "Strict":
        return bidi2.Network.SameSite.Strict;
      case "Lax":
        return bidi2.Network.SameSite.Lax;
      case "None":
        return bidi2.Network.SameSite.None;
    }
    return bidi2.Network.SameSite.None;
  }
  let Network2 = bidiBrowser.Network = void 0;
  (function(_Network) {
    let SameSite = /* @__PURE__ */ function(SameSite2) {
      SameSite2["Strict"] = "strict";
      SameSite2["Lax"] = "lax";
      SameSite2["None"] = "none";
      return SameSite2;
    }({});
    _Network.SameSite = SameSite;
  })(Network2 || (bidiBrowser.Network = Network2 = {}));
  return bidiBrowser;
}
var bidiOverCdp = {};
var hasRequiredBidiOverCdp;
function requireBidiOverCdp() {
  if (hasRequiredBidiOverCdp) return bidiOverCdp;
  hasRequiredBidiOverCdp = 1;
  Object.defineProperty(bidiOverCdp, "__esModule", {
    value: true
  });
  bidiOverCdp.connectBidiOverCdp = connectBidiOverCdp;
  var bidiMapper = _interopRequireWildcard2(require$$0$5);
  var bidiCdpConnection = _interopRequireWildcard2(require$$1$3);
  var _debugLogger2 = debugLogger;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const bidiServerLogger = (prefix, ...args) => {
    _debugLogger2.debugLogger.log(prefix, args);
  };
  async function connectBidiOverCdp(cdp) {
    let server2 = void 0;
    const bidiTransport = new BidiTransportImpl();
    const bidiConnection2 = new BidiConnection2(bidiTransport, () => {
      var _server2;
      return (_server2 = server2) === null || _server2 === void 0 ? void 0 : _server2.close();
    });
    const cdpTransportImpl = new CdpTransportImpl(cdp);
    const cdpConnection = new bidiCdpConnection.MapperCdpConnection(cdpTransportImpl, bidiServerLogger);
    cdp.onclose = () => {
      var _bidiConnection$onclo;
      return (_bidiConnection$onclo = bidiConnection2.onclose) === null || _bidiConnection$onclo === void 0 ? void 0 : _bidiConnection$onclo.call(bidiConnection2);
    };
    server2 = await bidiMapper.BidiServer.createAndStart(
      bidiTransport,
      cdpConnection,
      await cdpConnection.createBrowserSession(),
      /* selfTargetId= */
      "",
      void 0,
      bidiServerLogger
    );
    return bidiConnection2;
  }
  class BidiTransportImpl {
    constructor() {
      this._handler = void 0;
      this._bidiConnection = void 0;
    }
    setOnMessage(handler) {
      this._handler = handler;
    }
    sendMessage(message) {
      var _this$_bidiConnection, _this$_bidiConnection2;
      return (_this$_bidiConnection = (_this$_bidiConnection2 = this._bidiConnection).onmessage) === null || _this$_bidiConnection === void 0 ? void 0 : _this$_bidiConnection.call(_this$_bidiConnection2, message);
    }
    close() {
      var _this$_bidiConnection3, _this$_bidiConnection4;
      (_this$_bidiConnection3 = (_this$_bidiConnection4 = this._bidiConnection).onclose) === null || _this$_bidiConnection3 === void 0 || _this$_bidiConnection3.call(_this$_bidiConnection4);
    }
  }
  class BidiConnection2 {
    constructor(bidiTransport, closeCallback) {
      this._bidiTransport = void 0;
      this._closeCallback = void 0;
      this.onmessage = void 0;
      this.onclose = void 0;
      this._bidiTransport = bidiTransport;
      this._bidiTransport._bidiConnection = this;
      this._closeCallback = closeCallback;
    }
    send(s) {
      var _this$_bidiTransport$, _this$_bidiTransport;
      (_this$_bidiTransport$ = (_this$_bidiTransport = this._bidiTransport)._handler) === null || _this$_bidiTransport$ === void 0 || _this$_bidiTransport$.call(_this$_bidiTransport, s);
    }
    close() {
      this._closeCallback();
    }
  }
  class CdpTransportImpl {
    constructor(connection2) {
      this._connection = void 0;
      this._handler = void 0;
      this._bidiConnection = void 0;
      this._connection = connection2;
      this._connection.onmessage = (message) => {
        var _this$_handler;
        (_this$_handler = this._handler) === null || _this$_handler === void 0 || _this$_handler.call(this, JSON.stringify(message));
      };
    }
    setOnMessage(handler) {
      this._handler = handler;
    }
    sendMessage(message) {
      return this._connection.send(JSON.parse(message));
    }
    close() {
      this._connection.close();
    }
  }
  return bidiOverCdp;
}
var hasRequiredBidiChromium;
function requireBidiChromium() {
  if (hasRequiredBidiChromium) return bidiChromium;
  hasRequiredBidiChromium = 1;
  Object.defineProperty(bidiChromium, "__esModule", {
    value: true
  });
  bidiChromium.BidiChromium = void 0;
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _utils2 = requireUtils();
  var _browserType = requireBrowserType$1();
  var _chromiumSwitches = chromiumSwitches;
  var _bidiBrowser = requireBidiBrowser();
  var _bidiConnection = bidiConnection;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class BidiChromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "bidi");
      this._useBidi = true;
    }
    async connectToTransport(transport2, options) {
      const bidiTransport = await requireBidiOverCdp().connectBidiOverCdp(transport2);
      transport2[kBidiOverCdpWrapper] = bidiTransport;
      return _bidiBrowser.BidiBrowser.connect(this.attribution.playwright, bidiTransport, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes("Missing X server")) error.logs = "\n" + (0, _utils2.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180")) return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join("\n");
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      const bidiTransport = transport2[kBidiOverCdpWrapper];
      if (bidiTransport) transport2 = bidiTransport;
      transport2.send({
        method: "browser.close",
        params: {},
        id: _bidiConnection.kBrowserCloseMessageId
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      chromeArguments.push("--remote-debugging-port=0");
      if (isPersistent) chromeArguments.push("about:blank");
      else chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    readyState(options) {
      (0, _utils2.assert)(options.useWebSocket);
      return new ChromiumReadyState();
    }
    _innerDefaultArgs(options) {
      const {
        args = []
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe"))) throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-"))) throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os2.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless) chromeArguments.push("--use-angle");
      }
      if (options.devtools) chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        if (process.env.PLAYWRIGHT_CHROMIUM_USE_HEADLESS_NEW) chromeArguments.push("--headless=new");
        else chromeArguments.push("--headless=old");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true) chromeArguments.push("--no-sandbox");
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort) proxyBypassRules.push("<-loopback>");
        if (proxy.bypass) proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>")) proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0) chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
  }
  bidiChromium.BidiChromium = BidiChromium;
  class ChromiumReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/DevTools listening on (.*)/);
      if (match) this._wsEndpoint.resolve(match[1]);
    }
  }
  const kBidiOverCdpWrapper = Symbol("kBidiConnectionWrapper");
  return bidiChromium;
}
var bidiFirefox = {};
var firefoxPrefs = {};
Object.defineProperty(firefoxPrefs, "__esModule", {
  value: true
});
firefoxPrefs.createProfile = createProfile;
var _fs$4 = _interopRequireDefault$6(require$$0$2);
var _path$3 = _interopRequireDefault$6(require$$1);
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
/**
 * @license
 * Copyright 2023 Google Inc.
 * SPDX-License-Identifier: Apache-2.0
 */
async function createProfile(options) {
  if (!_fs$4.default.existsSync(options.path)) {
    await _fs$4.default.promises.mkdir(options.path, {
      recursive: true
    });
  }
  await writePreferences({
    preferences: {
      ...defaultProfilePreferences(options.preferences),
      ...options.preferences
    },
    path: options.path
  });
}
function defaultProfilePreferences(extraPrefs) {
  const server2 = "dummy.test";
  const defaultPrefs = {
    // Make sure Shield doesn't hit the network.
    "app.normandy.api_url": "",
    // Disable Firefox old build background check
    "app.update.checkInstallTime": false,
    // Disable automatically upgrading Firefox
    "app.update.disabledForTesting": true,
    // Increase the APZ content response timeout to 1 minute
    "apz.content_response_timeout": 6e4,
    // Prevent various error message on the console
    // jest-puppeteer asserts that no error message is emitted by the console
    "browser.contentblocking.features.standard": "-tp,tpPrivate,cookieBehavior0,-cm,-fp",
    // Enable the dump function: which sends messages to the system
    // console
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1543115
    "browser.dom.window.dump.enabled": true,
    // Disable topstories
    "browser.newtabpage.activity-stream.feeds.system.topstories": false,
    // Always display a blank page
    "browser.newtabpage.enabled": false,
    // Background thumbnails in particular cause grief: and disabling
    // thumbnails in general cannot hurt
    "browser.pagethumbnails.capturing_disabled": true,
    // Disable safebrowsing components.
    "browser.safebrowsing.blockedURIs.enabled": false,
    "browser.safebrowsing.downloads.enabled": false,
    "browser.safebrowsing.malware.enabled": false,
    "browser.safebrowsing.phishing.enabled": false,
    // Disable updates to search engines.
    "browser.search.update": false,
    // Do not restore the last open set of tabs if the browser has crashed
    "browser.sessionstore.resume_from_crash": false,
    // Skip check for default browser on startup
    "browser.shell.checkDefaultBrowser": false,
    // Disable newtabpage
    "browser.startup.homepage": "about:blank",
    // Do not redirect user when a milstone upgrade of Firefox is detected
    "browser.startup.homepage_override.mstone": "ignore",
    // Start with a blank page about:blank
    "browser.startup.page": 0,
    // Do not allow background tabs to be zombified on Android: otherwise for
    // tests that open additional tabs: the test harness tab itself might get
    // unloaded
    "browser.tabs.disableBackgroundZombification": false,
    // Do not warn when closing all other open tabs
    "browser.tabs.warnOnCloseOtherTabs": false,
    // Do not warn when multiple tabs will be opened
    "browser.tabs.warnOnOpen": false,
    // Do not automatically offer translations, as tests do not expect this.
    "browser.translations.automaticallyPopup": false,
    // Disable the UI tour.
    "browser.uitour.enabled": false,
    // Turn off search suggestions in the location bar so as not to trigger
    // network connections.
    "browser.urlbar.suggest.searches": false,
    // Disable first run splash page on Windows 10
    "browser.usedOnWindows10.introURL": "",
    // Do not warn on quitting Firefox
    "browser.warnOnQuit": false,
    // Defensively disable data reporting systems
    "datareporting.healthreport.documentServerURI": `http://${server2}/dummy/healthreport/`,
    "datareporting.healthreport.logging.consoleEnabled": false,
    "datareporting.healthreport.service.enabled": false,
    "datareporting.healthreport.service.firstRun": false,
    "datareporting.healthreport.uploadEnabled": false,
    // Do not show datareporting policy notifications which can interfere with tests
    "datareporting.policy.dataSubmissionEnabled": false,
    "datareporting.policy.dataSubmissionPolicyBypassNotification": true,
    // DevTools JSONViewer sometimes fails to load dependencies with its require.js.
    // This doesn't affect Puppeteer but spams console (Bug 1424372)
    "devtools.jsonview.enabled": false,
    // Disable popup-blocker
    "dom.disable_open_during_load": false,
    // Enable the support for File object creation in the content process
    // Required for |Page.setFileInputFiles| protocol method.
    "dom.file.createInChild": true,
    // Disable the ProcessHangMonitor
    "dom.ipc.reportProcessHangs": false,
    // Disable slow script dialogues
    "dom.max_chrome_script_run_time": 0,
    "dom.max_script_run_time": 0,
    // Only load extensions from the application and user profile
    // AddonManager.SCOPE_PROFILE + AddonManager.SCOPE_APPLICATION
    "extensions.autoDisableScopes": 0,
    "extensions.enabledScopes": 5,
    // Disable metadata caching for installed add-ons by default
    "extensions.getAddons.cache.enabled": false,
    // Disable installing any distribution extensions or add-ons.
    "extensions.installDistroAddons": false,
    // Disabled screenshots extension
    "extensions.screenshots.disabled": true,
    // Turn off extension updates so they do not bother tests
    "extensions.update.enabled": false,
    // Turn off extension updates so they do not bother tests
    "extensions.update.notifyUser": false,
    // Make sure opening about:addons will not hit the network
    "extensions.webservice.discoverURL": `http://${server2}/dummy/discoveryURL`,
    // Allow the application to have focus even it runs in the background
    "focusmanager.testmode": true,
    // Disable useragent updates
    "general.useragent.updates.enabled": false,
    // Always use network provider for geolocation tests so we bypass the
    // macOS dialog raised by the corelocation provider
    "geo.provider.testing": true,
    // Do not scan Wifi
    "geo.wifi.scan": false,
    // No hang monitor
    "hangmonitor.timeout": 0,
    // Show chrome errors and warnings in the error console
    "javascript.options.showInConsole": true,
    // Disable download and usage of OpenH264: and Widevine plugins
    "media.gmp-manager.updateEnabled": false,
    // Disable the GFX sanity window
    "media.sanity-test.disabled": true,
    // Disable experimental feature that is only available in Nightly
    "network.cookie.sameSite.laxByDefault": false,
    // Do not prompt for temporary redirects
    "network.http.prompt-temp-redirect": false,
    // Disable speculative connections so they are not reported as leaking
    // when they are hanging around
    "network.http.speculative-parallel-limit": 0,
    // Do not automatically switch between offline and online
    "network.manage-offline-status": false,
    // Make sure SNTP requests do not hit the network
    "network.sntp.pools": server2,
    // Disable Flash.
    "plugin.state.flash": 0,
    "privacy.trackingprotection.enabled": false,
    // Can be removed once Firefox 89 is no longer supported
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1710839
    "remote.enabled": true,
    // Don't do network connections for mitm priming
    "security.certerrors.mitm.priming.enabled": false,
    // Local documents have access to all other local documents,
    // including directory listings
    "security.fileuri.strict_origin_policy": false,
    // Do not wait for the notification button security delay
    "security.notification_enable_delay": 0,
    // Ensure blocklist updates do not hit the network
    "services.settings.server": `http://${server2}/dummy/blocklist/`,
    // Do not automatically fill sign-in forms with known usernames and
    // passwords
    "signon.autofillForms": false,
    // Disable password capture, so that tests that include forms are not
    // influenced by the presence of the persistent doorhanger notification
    "signon.rememberSignons": false,
    // Disable first-run welcome page
    "startup.homepage_welcome_url": "about:blank",
    // Disable first-run welcome page
    "startup.homepage_welcome_url.additional": "",
    // Disable browser animations (tabs, fullscreen, sliding alerts)
    "toolkit.cosmeticAnimations.enabled": false,
    // Prevent starting into safe mode after application crashes
    "toolkit.startup.max_resumed_crashes": -1
  };
  return Object.assign(defaultPrefs, extraPrefs);
}
async function writePreferences(options) {
  const prefsPath = _path$3.default.join(options.path, "prefs.js");
  const lines = Object.entries(options.preferences).map(([key, value]) => {
    return `user_pref(${JSON.stringify(key)}, ${JSON.stringify(value)});`;
  });
  const result2 = await Promise.allSettled([
    _fs$4.default.promises.writeFile(_path$3.default.join(options.path, "user.js"), lines.join("\n")),
    // Create a backup of the preferences file if it already exitsts.
    _fs$4.default.promises.access(prefsPath, _fs$4.default.constants.F_OK).then(
      async () => {
        await _fs$4.default.promises.copyFile(prefsPath, _path$3.default.join(options.path, "prefs.js.playwright"));
      },
      // Swallow only if file does not exist
      () => {
      }
    )
  ]);
  for (const command of result2) {
    if (command.status === "rejected") {
      throw command.reason;
    }
  }
}
var hasRequiredBidiFirefox;
function requireBidiFirefox() {
  if (hasRequiredBidiFirefox) return bidiFirefox;
  hasRequiredBidiFirefox = 1;
  Object.defineProperty(bidiFirefox, "__esModule", {
    value: true
  });
  bidiFirefox.BidiFirefox = void 0;
  var _os2 = _interopRequireDefault2(require$$0$3);
  var _path2 = _interopRequireDefault2(require$$1);
  var _utils2 = requireUtils();
  var _browserType = requireBrowserType$1();
  var _bidiBrowser = requireBidiBrowser();
  var _bidiConnection = bidiConnection;
  var _firefoxPrefs = firefoxPrefs;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class BidiFirefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "bidi");
      this._useBidi = true;
    }
    async connectToTransport(transport2, options) {
      return _bidiBrowser.BidiBrowser.connect(this.attribution.playwright, transport2, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs) return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`)) error.logs = "\n" + (0, _utils2.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified")) error.logs = "\n" + (0, _utils2.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    amendEnvironment(env2, userDataDir, executable, browserArguments) {
      if (!_path2.default.isAbsolute(_os2.default.homedir())) throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${_os2.default.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      env2 = {
        ...env2,
        "MOZ_CRASHREPORTER": "1",
        "MOZ_CRASHREPORTER_NO_REPORT": "1",
        "MOZ_CRASHREPORTER_SHUTDOWN": "1"
      };
      if (_os2.default.platform() === "linux") {
        return {
          ...env2,
          SNAP_NAME: void 0,
          SNAP_INSTANCE_NAME: void 0
        };
      }
      return env2;
    }
    attemptToGracefullyCloseBrowser(transport2) {
      transport2.send({
        method: "browser.close",
        params: {},
        id: _bidiConnection.kBrowserCloseMessageId
      });
    }
    async prepareUserDataDir(options, userDataDir) {
      await (0, _firefoxPrefs.createProfile)({
        path: userDataDir,
        preferences: options.firefoxUserPrefs || {}
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg) throw this._createUserDataDirArgMisuseError("--profile");
      const firefoxArguments = ["--remote-debugging-port=0"];
      if (headless) firefoxArguments.push("--headless");
      else firefoxArguments.push("--foreground");
      firefoxArguments.push(`--profile`, userDataDir);
      firefoxArguments.push(...args);
      return firefoxArguments;
    }
    readyState(options) {
      (0, _utils2.assert)(options.useWebSocket);
      return new FirefoxReadyState();
    }
  }
  bidiFirefox.BidiFirefox = BidiFirefox;
  class FirefoxReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/WebDriver BiDi listening on (ws:\/\/.*)$/);
      if (match) this._wsEndpoint.resolve(match[1] + "/session");
    }
  }
  return bidiFirefox;
}
var hasRequiredPlaywright$1;
function requirePlaywright$1() {
  if (hasRequiredPlaywright$1) return playwright$2;
  hasRequiredPlaywright$1 = 1;
  Object.defineProperty(playwright$2, "__esModule", {
    value: true
  });
  playwright$2.Playwright = void 0;
  playwright$2.createPlaywright = createPlaywright;
  var _android2 = requireAndroid$1();
  var _backendAdb = backendAdb;
  var _chromium = requireChromium();
  var _electron2 = requireElectron();
  var _firefox = requireFirefox();
  var _selectors2 = selectors$2;
  var _webkit = requireWebkit();
  var _instrumentation2 = instrumentation;
  var _utils2 = requireUtils();
  var _debugController2 = requireDebugController();
  var _bidiChromium = requireBidiChromium();
  var _bidiFirefox = requireBidiFirefox();
  class Playwright extends _instrumentation2.SdkObject {
    constructor(options) {
      super({
        attribution: {},
        instrumentation: (0, _instrumentation2.createInstrumentation)()
      }, void 0, "Playwright");
      this.selectors = void 0;
      this.chromium = void 0;
      this.android = void 0;
      this.electron = void 0;
      this.firefox = void 0;
      this.webkit = void 0;
      this.bidiChromium = void 0;
      this.bidiFirefox = void 0;
      this.options = void 0;
      this.debugController = void 0;
      this._allPages = /* @__PURE__ */ new Set();
      this._allBrowsers = /* @__PURE__ */ new Set();
      this.options = options;
      this.attribution.playwright = this;
      this.instrumentation.addListener({
        onBrowserOpen: (browser2) => this._allBrowsers.add(browser2),
        onBrowserClose: (browser2) => this._allBrowsers.delete(browser2),
        onPageOpen: (page2) => this._allPages.add(page2),
        onPageClose: (page2) => this._allPages.delete(page2),
        onCallLog: (sdkObject, metadata, logName, message) => {
          _utils2.debugLogger.log(logName, message);
        }
      }, null);
      this.chromium = new _chromium.Chromium(this);
      this.bidiChromium = new _bidiChromium.BidiChromium(this);
      this.bidiFirefox = new _bidiFirefox.BidiFirefox(this);
      this.firefox = new _firefox.Firefox(this);
      this.webkit = new _webkit.WebKit(this);
      this.electron = new _electron2.Electron(this);
      this.android = new _android2.Android(this, new _backendAdb.AdbBackend());
      this.selectors = new _selectors2.Selectors();
      this.debugController = new _debugController2.DebugController(this);
    }
    async hideHighlight() {
      await Promise.all([...this._allPages].map((p) => p.hideHighlight().catch(() => {
      })));
    }
    allBrowsers() {
      return [...this._allBrowsers];
    }
    allPages() {
      return [...this._allPages];
    }
  }
  playwright$2.Playwright = Playwright;
  function createPlaywright(options) {
    return new Playwright(options);
  }
  return playwright$2;
}
var hasRequiredRecorderApp;
function requireRecorderApp() {
  if (hasRequiredRecorderApp) return recorderApp;
  hasRequiredRecorderApp = 1;
  Object.defineProperty(recorderApp, "__esModule", {
    value: true
  });
  recorderApp.RecorderApp = recorderApp.EmptyRecorderApp = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var _progress2 = progress;
  var _events2 = require$$0$1;
  var _instrumentation2 = instrumentation;
  var _utils2 = requireUtils();
  var _utilsBundle2 = utilsBundle;
  var _launchApp2 = launchApp$1;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class EmptyRecorderApp extends _events2.EventEmitter {
    constructor(...args) {
      super(...args);
      this.wsEndpointForTest = void 0;
    }
    async close() {
    }
    async setPaused(paused) {
    }
    async setMode(mode) {
    }
    async setRunningFile(file) {
    }
    async setSelector(selector, userGesture) {
    }
    async updateCallLogs(callLogs) {
    }
    async setSources(sources) {
    }
    async setActions(actions, sources) {
    }
  }
  recorderApp.EmptyRecorderApp = EmptyRecorderApp;
  class RecorderApp extends _events2.EventEmitter {
    constructor(recorder2, page2, wsEndpoint) {
      super();
      this._page = void 0;
      this.wsEndpointForTest = void 0;
      this._recorder = void 0;
      this.setMaxListeners(0);
      this._recorder = recorder2;
      this._page = page2;
      this.wsEndpointForTest = wsEndpoint;
    }
    async close() {
      await this._page.context().close({
        reason: "Recorder window closed"
      });
    }
    async _init() {
      await (0, _launchApp2.syncLocalStorageWithSettings)(this._page, "recorder");
      await this._page._setServerRequestInterceptor((route) => {
        if (!route.request().url().startsWith("https://playwright/")) return false;
        const uri = route.request().url().substring("https://playwright/".length);
        const file = require.resolve("../../vite/recorder/" + uri);
        _fs2.default.promises.readFile(file).then((buffer) => {
          route.fulfill({
            status: 200,
            headers: [{
              name: "Content-Type",
              value: _utilsBundle2.mime.getType(_path2.default.extname(file)) || "application/octet-stream"
            }],
            body: buffer.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        });
        return true;
      });
      await this._page.exposeBinding("dispatch", false, (_, data) => this.emit("event", data));
      this._page.once("close", () => {
        this.emit("close");
        this._page.context().close({
          reason: "Recorder window closed"
        }).catch(() => {
        });
      });
      const mainFrame = this._page.mainFrame();
      await mainFrame.goto((0, _instrumentation2.serverSideCallMetadata)(), "https://playwright/index.html");
    }
    static factory(context) {
      return async (recorder2) => {
        if (process.env.PW_CODEGEN_NO_INSPECTOR) return new EmptyRecorderApp();
        return await RecorderApp._open(recorder2, context);
      };
    }
    static async _open(recorder2, inspectedContext) {
      const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
      const headed = !!inspectedContext._browser.options.headful;
      const recorderPlaywright = requirePlaywright$1().createPlaywright({
        sdkLanguage: "javascript",
        isInternalPlaywright: true
      });
      const {
        context,
        page: page2
      } = await (0, _launchApp2.launchApp)(recorderPlaywright.chromium, {
        sdkLanguage,
        windowSize: {
          width: 600,
          height: 600
        },
        windowPosition: {
          x: 1020,
          y: 10
        },
        persistentContextOptions: {
          noDefaultViewport: true,
          headless: !!process.env.PWTEST_CLI_HEADLESS || (0, _utils2.isUnderTest)() && !headed,
          useWebSocket: (0, _utils2.isUnderTest)(),
          handleSIGINT: recorder2.handleSIGINT,
          executablePath: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.customExecutablePath : void 0
        }
      });
      const controller = new _progress2.ProgressController((0, _instrumentation2.serverSideCallMetadata)(), context._browser);
      await controller.run(async (progress2) => {
        await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
      });
      const result2 = new RecorderApp(recorder2, page2, context._browser.options.wsEndpoint);
      await result2._init();
      return result2;
    }
    async setMode(mode) {
      await this._page.mainFrame().evaluateExpression(((mode2) => {
        window.playwrightSetMode(mode2);
      }).toString(), {
        isFunction: true
      }, mode).catch(() => {
      });
    }
    async setRunningFile(file) {
      await this._page.mainFrame().evaluateExpression(((file2) => {
        window.playwrightSetRunningFile(file2);
      }).toString(), {
        isFunction: true
      }, file).catch(() => {
      });
    }
    async setPaused(paused) {
      await this._page.mainFrame().evaluateExpression(((paused2) => {
        window.playwrightSetPaused(paused2);
      }).toString(), {
        isFunction: true
      }, paused).catch(() => {
      });
    }
    async setSources(sources) {
      await this._page.mainFrame().evaluateExpression(((sources2) => {
        window.playwrightSetSources(sources2);
      }).toString(), {
        isFunction: true
      }, sources).catch(() => {
      });
      if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
        if (process._didSetSourcesForTest(sources[0].text)) this.close();
      }
    }
    async setActions(actions, sources) {
    }
    async setSelector(selector, userGesture) {
      if (userGesture) {
        var _this$_recorder;
        if (((_this$_recorder = this._recorder) === null || _this$_recorder === void 0 ? void 0 : _this$_recorder.mode()) === "inspecting") {
          this._recorder.setMode("standby");
          this._page.bringToFront();
        } else {
          var _this$_recorder2;
          (_this$_recorder2 = this._recorder) === null || _this$_recorder2 === void 0 || _this$_recorder2.setMode("recording");
        }
      }
      await this._page.mainFrame().evaluateExpression(((data) => {
        window.playwrightSetSelector(data.selector, data.userGesture);
      }).toString(), {
        isFunction: true
      }, {
        selector,
        userGesture
      }).catch(() => {
      });
    }
    async updateCallLogs(callLogs) {
      await this._page.mainFrame().evaluateExpression(((callLogs2) => {
        window.playwrightUpdateLogs(callLogs2);
      }).toString(), {
        isFunction: true
      }, callLogs).catch(() => {
      });
    }
  }
  recorderApp.RecorderApp = RecorderApp;
  return recorderApp;
}
var hasRequiredBrowserContext$1;
function requireBrowserContext$1() {
  if (hasRequiredBrowserContext$1) return browserContext$1;
  hasRequiredBrowserContext$1 = 1;
  Object.defineProperty(browserContext$1, "__esModule", {
    value: true
  });
  browserContext$1.BrowserContext = void 0;
  browserContext$1.assertBrowserContextIsNotOwned = assertBrowserContextIsNotOwned;
  browserContext$1.normalizeProxySettings = normalizeProxySettings;
  browserContext$1.validateBrowserContextOptions = validateBrowserContextOptions;
  browserContext$1.verifyClientCertificates = verifyClientCertificates;
  browserContext$1.verifyGeolocation = verifyGeolocation;
  var _timeoutSettings2 = timeoutSettings;
  var _utils2 = requireUtils();
  var _fileUtils2 = requireFileUtils();
  var _helper2 = helper;
  var network2 = _interopRequireWildcard2(requireNetwork$1());
  var _page6 = requirePage$1();
  var _path2 = _interopRequireDefault2(require$$1);
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _instrumentation2 = instrumentation;
  var _debugger2 = require_debugger();
  var _tracing = requireTracing();
  var _harRecorder = requireHarRecorder();
  var _recorder = requireRecorder();
  var consoleApiSource$1 = _interopRequireWildcard2(consoleApiSource);
  var _fetch2 = requireFetch$1();
  var _clock = clock$1;
  var _recorderApp = requireRecorderApp();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class BrowserContext extends _instrumentation2.SdkObject {
    constructor(browser2, options, browserContextId) {
      super(browser2, "browser-context");
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings();
      this._pageBindings = /* @__PURE__ */ new Map();
      this._activeProgressControllers = /* @__PURE__ */ new Set();
      this._options = void 0;
      this._requestInterceptor = void 0;
      this._isPersistentContext = void 0;
      this._closedStatus = "open";
      this._closePromise = void 0;
      this._closePromiseFulfill = void 0;
      this._permissions = /* @__PURE__ */ new Map();
      this._downloads = /* @__PURE__ */ new Set();
      this._browser = void 0;
      this._browserContextId = void 0;
      this._selectors = void 0;
      this._origins = /* @__PURE__ */ new Set();
      this._harRecorders = /* @__PURE__ */ new Map();
      this.tracing = void 0;
      this.fetchRequest = void 0;
      this._customCloseHandler = void 0;
      this._tempDirs = [];
      this._settingStorageState = false;
      this.initScripts = [];
      this._routesInFlight = /* @__PURE__ */ new Set();
      this._debugger = void 0;
      this._closeReason = void 0;
      this.clock = void 0;
      this._clientCertificatesProxy = void 0;
      this.attribution.context = this;
      this._browser = browser2;
      this._options = options;
      this._browserContextId = browserContextId;
      this._isPersistentContext = !browserContextId;
      this._closePromise = new Promise((fulfill) => this._closePromiseFulfill = fulfill);
      this.fetchRequest = new _fetch2.BrowserContextAPIRequestContext(this);
      if (this._options.recordHar) this._harRecorders.set("", new _harRecorder.HarRecorder(this, null, this._options.recordHar));
      this.tracing = new _tracing.Tracing(this, browser2.options.tracesDir);
      this.clock = new _clock.Clock(this);
    }
    isPersistentContext() {
      return this._isPersistentContext;
    }
    setSelectors(selectors2) {
      this._selectors = selectors2;
    }
    selectors() {
      return this._selectors || this.attribution.playwright.selectors;
    }
    async _initialize() {
      if (this.attribution.playwright.options.isInternalPlaywright) return;
      this._debugger = new _debugger2.Debugger(this);
      if ((0, _utils2.debugMode)() === "inspector") await _recorder.Recorder.show("actions", this, _recorderApp.RecorderApp.factory(this), {
        pauseOnNextStatement: true
      });
      if (this._debugger.isPaused()) _recorder.Recorder.showInspectorNoReply(this, _recorderApp.RecorderApp.factory(this));
      this._debugger.on(_debugger2.Debugger.Events.PausedStateChanged, () => {
        if (this._debugger.isPaused()) _recorder.Recorder.showInspectorNoReply(this, _recorderApp.RecorderApp.factory(this));
      });
      if ((0, _utils2.debugMode)() === "console") await this.extendInjectedScript(consoleApiSource$1.source);
      if (this._options.serviceWorkers === "block") await this.addInitScript(`
if (navigator.serviceWorker) navigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };
`);
      if (this._options.permissions) await this.grantPermissions(this._options.permissions);
    }
    debugger() {
      return this._debugger;
    }
    async _ensureVideosPath() {
      if (this._options.recordVideo) await (0, _fileUtils2.mkdirIfNeeded)(_path2.default.join(this._options.recordVideo.dir, "dummy"));
    }
    canResetForReuse() {
      if (this._closedStatus !== "open") return false;
      return true;
    }
    async stopPendingOperations(reason) {
      for (const controller of this._activeProgressControllers) controller.abort(new Error(reason));
      await new Promise((f) => setTimeout(f, 0));
    }
    static reusableContextHash(params) {
      const paramsCopy = {
        ...params
      };
      for (const k of Object.keys(paramsCopy)) {
        const key = k;
        if (paramsCopy[key] === defaultNewContextParamValues[key]) delete paramsCopy[key];
      }
      for (const key of paramsThatAllowContextReuse) delete paramsCopy[key];
      return JSON.stringify(paramsCopy);
    }
    async resetForReuse(metadata, params) {
      var _page, _page2, _page3, _page4, _page5;
      this.setDefaultNavigationTimeout(void 0);
      this.setDefaultTimeout(void 0);
      this.tracing.resetForReuse();
      if (params) {
        for (const key of paramsThatAllowContextReuse) this._options[key] = params[key];
      }
      await this._cancelAllRoutesInFlight();
      let page2 = this.pages()[0];
      const [, ...otherPages] = this.pages();
      for (const p of otherPages) await p.close(metadata);
      if (page2 && page2.hasCrashed()) {
        await page2.close(metadata);
        page2 = void 0;
      }
      (_page = page2) === null || _page === void 0 || _page._frameManager.setCloseAllOpeningDialogs(true);
      await ((_page2 = page2) === null || _page2 === void 0 ? void 0 : _page2._frameManager.closeOpenDialogs());
      await ((_page3 = page2) === null || _page3 === void 0 ? void 0 : _page3.mainFrame().goto(metadata, "about:blank", {
        timeout: 0
      }));
      (_page4 = page2) === null || _page4 === void 0 || _page4._frameManager.setCloseAllOpeningDialogs(false);
      await this._resetStorage();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      this.clock.markAsUninstalled();
      if (this._options.permissions) await this.grantPermissions(this._options.permissions);
      else await this.clearPermissions();
      await this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []);
      await this.setGeolocation(this._options.geolocation);
      await this.setOffline(!!this._options.offline);
      await this.setUserAgent(this._options.userAgent);
      await this.clearCache();
      await this._resetCookies();
      await ((_page5 = page2) === null || _page5 === void 0 ? void 0 : _page5.resetForReuse(metadata));
    }
    _browserClosed() {
      for (const page2 of this.pages()) page2._didClose();
      this._didCloseInternal();
    }
    _didCloseInternal() {
      var _this$_clientCertific;
      if (this._closedStatus === "closed") {
        return;
      }
      (_this$_clientCertific = this._clientCertificatesProxy) === null || _this$_clientCertific === void 0 || _this$_clientCertific.close().catch(() => {
      });
      this.tracing.abort();
      if (this._isPersistentContext) this.onClosePersistent();
      this._closePromiseFulfill(new Error("Context closed"));
      this.emit(BrowserContext.Events.Close);
    }
    // BrowserContext methods.
    async cookies(urls = []) {
      if (urls && !Array.isArray(urls)) urls = [urls];
      return await this.doGetCookies(urls);
    }
    async clearCookies(options) {
      const currentCookies = await this.cookies();
      await this.doClearCookies();
      const matches = (cookie, prop, value) => {
        if (!value) return true;
        if (value instanceof RegExp) {
          value.lastIndex = 0;
          return value.test(cookie[prop]);
        }
        return cookie[prop] === value;
      };
      const cookiesToReadd = currentCookies.filter((cookie) => {
        return !matches(cookie, "name", options.name) || !matches(cookie, "domain", options.domain) || !matches(cookie, "path", options.path);
      });
      await this.addCookies(cookiesToReadd);
    }
    setHTTPCredentials(httpCredentials) {
      return this.doSetHTTPCredentials(httpCredentials);
    }
    async exposeBinding(name2, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name2)) throw new Error(`Function "${name2}" has been already registered`);
      for (const page2 of this.pages()) {
        if (page2.getBinding(name2)) throw new Error(`Function "${name2}" has been already registered in one of the pages`);
      }
      const binding = new _page6.PageBinding(name2, playwrightBinding, needsHandle);
      this._pageBindings.set(name2, binding);
      await this.doAddInitScript(binding.initScript);
      const frames2 = this.pages().map((page2) => page2.frames()).flat();
      await Promise.all(frames2.map((frame2) => frame2.evaluateExpression(binding.initScript.source).catch((e) => {
      })));
    }
    async _removeExposedBindings() {
      for (const [key, binding] of this._pageBindings) {
        if (!binding.internal) this._pageBindings.delete(key);
      }
    }
    async grantPermissions(permissions, origin) {
      let resolvedOrigin = "*";
      if (origin) {
        const url = new URL(origin);
        resolvedOrigin = url.origin;
      }
      const existing = new Set(this._permissions.get(resolvedOrigin) || []);
      permissions.forEach((p) => existing.add(p));
      const list = [...existing.values()];
      this._permissions.set(resolvedOrigin, list);
      await this.doGrantPermissions(resolvedOrigin, list);
    }
    async clearPermissions() {
      this._permissions.clear();
      await this.doClearPermissions();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async _loadDefaultContextAsIs(progress2) {
      if (!this.pages().length) {
        const waitForEvent2 = _helper2.helper.waitForEvent(progress2, this, BrowserContext.Events.Page);
        progress2.cleanupWhenAborted(() => waitForEvent2.dispose);
        const page2 = await waitForEvent2.promise;
        if (page2._pageIsError) throw page2._pageIsError;
      }
      const pages = this.pages();
      if (pages[0]._pageIsError) throw pages[0]._pageIsError;
      await pages[0].mainFrame()._waitForLoadState(progress2, "load");
      return pages;
    }
    async _loadDefaultContext(progress2) {
      const pages = await this._loadDefaultContextAsIs(progress2);
      const browserName = this._browser.options.name;
      if (this._options.isMobile && browserName === "chromium" || this._options.locale && browserName === "webkit") {
        const oldPage = pages[0];
        await this.newPage(progress2.metadata);
        await oldPage.close(progress2.metadata);
      }
    }
    _authenticateProxyViaHeader() {
      const proxy = this._options.proxy || this._browser.options.proxy || {
        username: void 0,
        password: void 0
      };
      const {
        username,
        password
      } = proxy;
      if (username) {
        this._options.httpCredentials = {
          username,
          password
        };
        const token = Buffer.from(`${username}:${password}`).toString("base64");
        this._options.extraHTTPHeaders = network2.mergeHeaders([this._options.extraHTTPHeaders, network2.singleHeader("Proxy-Authorization", `Basic ${token}`)]);
      }
    }
    _authenticateProxyViaCredentials() {
      const proxy = this._options.proxy || this._browser.options.proxy;
      if (!proxy) return;
      const {
        username,
        password
      } = proxy;
      if (username) this._options.httpCredentials = {
        username,
        password: password || ""
      };
    }
    async addInitScript(source2) {
      const initScript = new _page6.InitScript(source2);
      this.initScripts.push(initScript);
      await this.doAddInitScript(initScript);
    }
    async _removeInitScripts() {
      this.initScripts = this.initScripts.filter((script) => script.internal);
      await this.doRemoveNonInternalInitScripts();
    }
    async setRequestInterceptor(handler) {
      this._requestInterceptor = handler;
      await this.doUpdateRequestInterception();
    }
    isClosingOrClosed() {
      return this._closedStatus !== "open";
    }
    async _deleteAllDownloads() {
      await Promise.all(Array.from(this._downloads).map((download2) => download2.artifact.deleteOnContextClose()));
    }
    async _deleteAllTempDirs() {
      await Promise.all(this._tempDirs.map(async (dir) => await _fs2.default.promises.unlink(dir).catch((e) => {
      })));
    }
    setCustomCloseHandler(handler) {
      this._customCloseHandler = handler;
    }
    async close(options) {
      if (this._closedStatus === "open") {
        if (options.reason) this._closeReason = options.reason;
        this.emit(BrowserContext.Events.BeforeClose);
        this._closedStatus = "closing";
        for (const harRecorder2 of this._harRecorders.values()) await harRecorder2.flush();
        await this.tracing.flush();
        const promises = [];
        for (const {
          context,
          artifact: artifact2
        } of this._browser._idToVideo.values()) {
          if (context === this) promises.push(artifact2.finishedPromise());
        }
        if (this._customCloseHandler) {
          await this._customCloseHandler();
        } else {
          await this.doClose(options.reason);
        }
        promises.push(this._deleteAllDownloads());
        promises.push(this._deleteAllTempDirs());
        await Promise.all(promises);
        if (!this._customCloseHandler) this._didCloseInternal();
      }
      await this._closePromise;
    }
    async newPage(metadata) {
      const pageDelegate = await this.newPageDelegate();
      if (metadata.isServerSide) pageDelegate.potentiallyUninitializedPage().markAsServerSideOnly();
      const pageOrError = await pageDelegate.pageOrError();
      if (pageOrError instanceof _page6.Page) {
        if (pageOrError.isClosed()) throw new Error("Page has been closed.");
        return pageOrError;
      }
      throw pageOrError;
    }
    addVisitedOrigin(origin) {
      this._origins.add(origin);
    }
    async storageState() {
      const result2 = {
        cookies: await this.cookies(),
        origins: []
      };
      const originsToSave = new Set(this._origins);
      for (const page2 of this.pages()) {
        const origin = page2.mainFrame().origin();
        if (!origin || !originsToSave.has(origin)) continue;
        try {
          const storage = await page2.mainFrame().nonStallingEvaluateInExistingContext(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, "utility");
          if (storage.localStorage.length) result2.origins.push({
            origin,
            localStorage: storage.localStorage
          });
          originsToSave.delete(origin);
        } catch {
        }
      }
      if (originsToSave.size) {
        const internalMetadata = (0, _instrumentation2.serverSideCallMetadata)();
        const page2 = await this.newPage(internalMetadata);
        await page2._setServerRequestInterceptor((handler) => {
          handler.fulfill({
            body: "<html></html>"
          }).catch(() => {
          });
          return true;
        });
        for (const origin of originsToSave) {
          const originStorage = {
            origin,
            localStorage: []
          };
          const frame2 = page2.mainFrame();
          await frame2.goto(internalMetadata, origin);
          const storage = await frame2.evaluateExpression(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, {
            world: "utility"
          });
          originStorage.localStorage = storage.localStorage;
          if (storage.localStorage.length) result2.origins.push(originStorage);
        }
        await page2.close(internalMetadata);
      }
      return result2;
    }
    async _resetStorage() {
      var _this$_options$storag;
      const oldOrigins = this._origins;
      const newOrigins = new Map(((_this$_options$storag = this._options.storageState) === null || _this$_options$storag === void 0 || (_this$_options$storag = _this$_options$storag.origins) === null || _this$_options$storag === void 0 ? void 0 : _this$_options$storag.map((p) => [p.origin, p])) || []);
      if (!oldOrigins.size && !newOrigins.size) return;
      let page2 = this.pages()[0];
      const internalMetadata = (0, _instrumentation2.serverSideCallMetadata)();
      page2 = page2 || await this.newPage({
        ...internalMetadata,
        // Do not mark this page as internal, because we will leave it for later reuse
        // as a user-visible page.
        isServerSide: false
      });
      await page2._setServerRequestInterceptor((handler) => {
        handler.fulfill({
          body: "<html></html>"
        }).catch(() => {
        });
        return true;
      });
      for (const origin of /* @__PURE__ */ new Set([...oldOrigins, ...newOrigins.keys()])) {
        const frame2 = page2.mainFrame();
        await frame2.goto(internalMetadata, origin);
        await frame2.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
      }
      await page2._setServerRequestInterceptor(void 0);
      this._origins = /* @__PURE__ */ new Set([...newOrigins.keys()]);
    }
    async _resetCookies() {
      var _this$_options$storag2, _this$_options$storag3;
      await this.doClearCookies();
      if ((_this$_options$storag2 = this._options.storageState) !== null && _this$_options$storag2 !== void 0 && _this$_options$storag2.cookies) await this.addCookies((_this$_options$storag3 = this._options.storageState) === null || _this$_options$storag3 === void 0 ? void 0 : _this$_options$storag3.cookies);
    }
    isSettingStorageState() {
      return this._settingStorageState;
    }
    async setStorageState(metadata, state) {
      this._settingStorageState = true;
      try {
        if (state.cookies) await this.addCookies(state.cookies);
        if (state.origins && state.origins.length) {
          const internalMetadata = (0, _instrumentation2.serverSideCallMetadata)();
          const page2 = await this.newPage(internalMetadata);
          await page2._setServerRequestInterceptor((handler) => {
            handler.fulfill({
              body: "<html></html>"
            }).catch(() => {
            });
            return true;
          });
          for (const originState of state.origins) {
            const frame2 = page2.mainFrame();
            await frame2.goto(metadata, originState.origin);
            await frame2.evaluateExpression(`
            originState => {
              for (const { name, value } of (originState.localStorage || []))
                localStorage.setItem(name, value);
            }`, {
              isFunction: true,
              world: "utility"
            }, originState);
          }
          await page2.close(internalMetadata);
        }
      } finally {
        this._settingStorageState = false;
      }
    }
    async extendInjectedScript(source2, arg) {
      const installInFrame = (frame2) => frame2.extendInjectedScript(source2, arg).catch(() => {
      });
      const installInPage = (page2) => {
        page2.on(_page6.Page.Events.InternalFrameNavigatedToNewDocument, installInFrame);
        return Promise.all(page2.frames().map(installInFrame));
      };
      this.on(BrowserContext.Events.Page, installInPage);
      return Promise.all(this.pages().map(installInPage));
    }
    async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
      await Promise.all(this.pages().map((page2) => page2.safeNonStallingEvaluateInAllFrames(expression, world, options)));
    }
    async _harStart(page2, options) {
      const harId = (0, _utils2.createGuid)();
      this._harRecorders.set(harId, new _harRecorder.HarRecorder(this, page2, options));
      return harId;
    }
    async _harExport(harId) {
      const recorder2 = this._harRecorders.get(harId || "");
      return recorder2.export();
    }
    addRouteInFlight(route) {
      this._routesInFlight.add(route);
    }
    removeRouteInFlight(route) {
      this._routesInFlight.delete(route);
    }
    async _cancelAllRoutesInFlight() {
      await Promise.all([...this._routesInFlight].map((r) => r.abort())).catch(() => {
      });
      this._routesInFlight.clear();
    }
  }
  browserContext$1.BrowserContext = BrowserContext;
  BrowserContext.Events = {
    Console: "console",
    Close: "close",
    Dialog: "dialog",
    Page: "page",
    // Can't use just 'error' due to node.js special treatment of error events.
    // @see https://nodejs.org/api/events.html#events_error_events
    PageError: "pageerror",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished",
    RequestAborted: "requestaborted",
    RequestFulfilled: "requestfulfilled",
    RequestContinued: "requestcontinued",
    BeforeClose: "beforeclose",
    VideoStarted: "videostarted"
  };
  function assertBrowserContextIsNotOwned(context) {
    for (const page2 of context.pages()) {
      if (page2._ownedContext) throw new Error("Please use browser.newContext() for multi-page scripts that share the context.");
    }
  }
  function validateBrowserContextOptions(options, browserOptions) {
    if (options.noDefaultViewport && options.deviceScaleFactor !== void 0) throw new Error(`"deviceScaleFactor" option is not supported with null "viewport"`);
    if (options.noDefaultViewport && !!options.isMobile) throw new Error(`"isMobile" option is not supported with null "viewport"`);
    if (options.acceptDownloads === void 0 && browserOptions.name !== "electron") options.acceptDownloads = "accept";
    else if (options.acceptDownloads === void 0 && browserOptions.name === "electron") options.acceptDownloads = "internal-browser-default";
    if (!options.viewport && !options.noDefaultViewport) options.viewport = {
      width: 1280,
      height: 720
    };
    if (options.recordVideo) {
      if (!options.recordVideo.size) {
        if (options.noDefaultViewport) {
          options.recordVideo.size = {
            width: 800,
            height: 600
          };
        } else {
          const size = options.viewport;
          const scale = Math.min(1, 800 / Math.max(size.width, size.height));
          options.recordVideo.size = {
            width: Math.floor(size.width * scale),
            height: Math.floor(size.height * scale)
          };
        }
      }
      options.recordVideo.size.width &= ~1;
      options.recordVideo.size.height &= ~1;
    }
    if (options.proxy) options.proxy = normalizeProxySettings(options.proxy);
    verifyGeolocation(options.geolocation);
  }
  function verifyGeolocation(geolocation) {
    if (!geolocation) return;
    geolocation.accuracy = geolocation.accuracy || 0;
    const {
      longitude,
      latitude,
      accuracy
    } = geolocation;
    if (longitude < -180 || longitude > 180) throw new Error(`geolocation.longitude: precondition -180 <= LONGITUDE <= 180 failed.`);
    if (latitude < -90 || latitude > 90) throw new Error(`geolocation.latitude: precondition -90 <= LATITUDE <= 90 failed.`);
    if (accuracy < 0) throw new Error(`geolocation.accuracy: precondition 0 <= ACCURACY failed.`);
  }
  function verifyClientCertificates(clientCertificates) {
    if (!clientCertificates) return;
    for (const cert of clientCertificates) {
      if (!cert.origin) throw new Error(`clientCertificates.origin is required`);
      if (!cert.cert && !cert.key && !cert.passphrase && !cert.pfx) throw new Error("None of cert, key, passphrase or pfx is specified");
      if (cert.cert && !cert.key) throw new Error("cert is specified without key");
      if (!cert.cert && cert.key) throw new Error("key is specified without cert");
      if (cert.pfx && (cert.cert || cert.key)) throw new Error("pfx is specified together with cert, key or passphrase");
    }
  }
  function normalizeProxySettings(proxy) {
    let {
      server: server2,
      bypass
    } = proxy;
    let url;
    try {
      url = new URL(server2);
      if (!url.host || !url.protocol) url = new URL("http://" + server2);
    } catch (e) {
      url = new URL("http://" + server2);
    }
    if (url.protocol === "socks4:" && (proxy.username || proxy.password)) throw new Error(`Socks4 proxy protocol does not support authentication`);
    if (url.protocol === "socks5:" && (proxy.username || proxy.password)) throw new Error(`Browser does not support socks5 proxy authentication`);
    server2 = url.protocol + "//" + url.host;
    if (bypass) bypass = bypass.split(",").map((t) => t.trim()).join(",");
    return {
      ...proxy,
      server: server2,
      bypass
    };
  }
  const paramsThatAllowContextReuse = ["colorScheme", "forcedColors", "reducedMotion", "screen", "userAgent", "viewport"];
  const defaultNewContextParamValues = {
    noDefaultViewport: false,
    ignoreHTTPSErrors: false,
    javaScriptEnabled: true,
    bypassCSP: false,
    offline: false,
    isMobile: false,
    hasTouch: false,
    acceptDownloads: "accept",
    strictSelectors: false,
    serviceWorkers: "allow",
    locale: "en-US"
  };
  return browserContext$1;
}
var formData = {};
Object.defineProperty(formData, "__esModule", {
  value: true
});
formData.MultipartFormData = void 0;
var _utilsBundle$3 = utilsBundle;
class MultipartFormData {
  constructor() {
    this._boundary = void 0;
    this._chunks = [];
    this._boundary = generateUniqueBoundaryString();
  }
  contentTypeHeader() {
    return `multipart/form-data; boundary=${this._boundary}`;
  }
  addField(name2, value) {
    this._beginMultiPartHeader(name2);
    this._finishMultiPartHeader();
    this._chunks.push(Buffer.from(value));
    this._finishMultiPartField();
  }
  addFileField(name2, value) {
    this._beginMultiPartHeader(name2);
    this._chunks.push(Buffer.from(`; filename="${value.name}"`));
    this._chunks.push(Buffer.from(`\r
content-type: ${value.mimeType || _utilsBundle$3.mime.getType(value.name) || "application/octet-stream"}`));
    this._finishMultiPartHeader();
    this._chunks.push(value.buffer);
    this._finishMultiPartField();
  }
  finish() {
    this._addBoundary(true);
    return Buffer.concat(this._chunks);
  }
  _beginMultiPartHeader(name2) {
    this._addBoundary();
    this._chunks.push(Buffer.from(`content-disposition: form-data; name="${name2}"`));
  }
  _finishMultiPartHeader() {
    this._chunks.push(Buffer.from(`\r
\r
`));
  }
  _finishMultiPartField() {
    this._chunks.push(Buffer.from(`\r
`));
  }
  _addBoundary(isLastBoundary) {
    this._chunks.push(Buffer.from("--" + this._boundary));
    if (isLastBoundary) this._chunks.push(Buffer.from("--"));
    this._chunks.push(Buffer.from("\r\n"));
  }
}
formData.MultipartFormData = MultipartFormData;
const alphaNumericEncodingMap = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66];
function generateUniqueBoundaryString() {
  const charCodes = [];
  for (let i = 0; i < 16; i++) charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);
  return "----WebKitFormBoundary" + String.fromCharCode(...charCodes);
}
var hasRequiredFetch$1;
function requireFetch$1() {
  if (hasRequiredFetch$1) return fetch$1;
  hasRequiredFetch$1 = 1;
  Object.defineProperty(fetch$1, "__esModule", {
    value: true
  });
  fetch$1.GlobalAPIRequestContext = fetch$1.BrowserContextAPIRequestContext = fetch$1.APIRequestContext = void 0;
  fetch$1.createProxyAgent = createProxyAgent;
  var _http = _interopRequireDefault2(require$$20);
  var _https = _interopRequireDefault2(require$$1$2);
  var _stream2 = require$$12;
  var _url2 = _interopRequireDefault2(require$$6);
  var _zlib = _interopRequireDefault2(require$$13);
  var _timeoutSettings2 = timeoutSettings;
  var _userAgent2 = userAgent;
  var _utils2 = requireUtils();
  var _utilsBundle2 = utilsBundle;
  var _browserContext2 = requireBrowserContext$1();
  var _cookieStore = requireCookieStore();
  var _formData = formData;
  var _happyEyeballs2 = requireHappyEyeballs();
  var _instrumentation2 = instrumentation;
  var _progress2 = progress;
  var _tracing = requireTracing();
  var _socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
  var _tls = require$$9;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class APIRequestContext extends _instrumentation2.SdkObject {
    static findResponseBody(guid) {
      for (const request2 of APIRequestContext.allInstances) {
        const body = request2.fetchResponses.get(guid);
        if (body) return body;
      }
      return void 0;
    }
    constructor(parent) {
      super(parent, "request-context");
      this.fetchResponses = /* @__PURE__ */ new Map();
      this.fetchLog = /* @__PURE__ */ new Map();
      this._activeProgressControllers = /* @__PURE__ */ new Set();
      this._closeReason = void 0;
      APIRequestContext.allInstances.add(this);
    }
    _disposeImpl() {
      APIRequestContext.allInstances.delete(this);
      this.fetchResponses.clear();
      this.fetchLog.clear();
      this.emit(APIRequestContext.Events.Dispose);
    }
    disposeResponse(fetchUid) {
      this.fetchResponses.delete(fetchUid);
      this.fetchLog.delete(fetchUid);
    }
    _storeResponseBody(body) {
      const uid = (0, _utils2.createGuid)();
      this.fetchResponses.set(uid, body);
      return uid;
    }
    async fetch(params, metadata) {
      var _params$method;
      const defaults = this._defaultOptions();
      const headers2 = {
        "user-agent": defaults.userAgent,
        "accept": "*/*",
        "accept-encoding": "gzip,deflate,br"
      };
      if (defaults.extraHTTPHeaders) {
        for (const {
          name: name2,
          value
        } of defaults.extraHTTPHeaders) setHeader(headers2, name2, value);
      }
      if (params.headers) {
        for (const {
          name: name2,
          value
        } of params.headers) setHeader(headers2, name2, value);
      }
      const requestUrl = new URL(params.url, defaults.baseURL);
      if (params.encodedParams) {
        requestUrl.search = params.encodedParams;
      } else if (params.params) {
        for (const {
          name: name2,
          value
        } of params.params) requestUrl.searchParams.append(name2, value);
      }
      const credentials = this._getHttpCredentials(requestUrl);
      if ((credentials === null || credentials === void 0 ? void 0 : credentials.send) === "always") setBasicAuthorizationHeader(headers2, credentials);
      const method = ((_params$method = params.method) === null || _params$method === void 0 ? void 0 : _params$method.toUpperCase()) || "GET";
      const proxy = defaults.proxy;
      let agent;
      if (proxy && proxy.server !== "per-context" && !shouldBypassProxy(requestUrl, proxy.bypass)) agent = createProxyAgent(proxy);
      const timeout = defaults.timeoutSettings.timeout(params);
      const deadline = timeout && (0, _utils2.monotonicTime)() + timeout;
      const options = {
        method,
        headers: headers2,
        agent,
        maxRedirects: params.maxRedirects === 0 ? -1 : params.maxRedirects === void 0 ? 20 : params.maxRedirects,
        timeout,
        deadline,
        ...(0, _socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, requestUrl.origin),
        __testHookLookup: params.__testHookLookup
      };
      if (params.ignoreHTTPSErrors || defaults.ignoreHTTPSErrors) options.rejectUnauthorized = false;
      const postData = serializePostData(params, headers2);
      if (postData) setHeader(headers2, "content-length", String(postData.byteLength));
      const controller = new _progress2.ProgressController(metadata, this);
      const fetchResponse = await controller.run((progress2) => {
        return this._sendRequestWithRetries(progress2, requestUrl, options, postData, params.maxRetries);
      });
      const fetchUid = this._storeResponseBody(fetchResponse.body);
      this.fetchLog.set(fetchUid, controller.metadata.log);
      if (params.failOnStatusCode && (fetchResponse.status < 200 || fetchResponse.status >= 400)) {
        let responseText = "";
        if (fetchResponse.body.byteLength) {
          let text = fetchResponse.body.toString("utf8");
          if (text.length > 1e3) text = text.substring(0, 997) + "...";
          responseText = `
Response text:
${text}`;
        }
        throw new Error(`${fetchResponse.status} ${fetchResponse.statusText}${responseText}`);
      }
      return {
        ...fetchResponse,
        fetchUid
      };
    }
    _parseSetCookieHeader(responseUrl, setCookie) {
      if (!setCookie) return [];
      const url = new URL(responseUrl);
      const defaultPath = "/" + url.pathname.substr(1).split("/").slice(0, -1).join("/");
      const cookies = [];
      for (const header of setCookie) {
        const cookie = parseCookie(header);
        if (!cookie) continue;
        if (!cookie.domain) cookie.domain = url.hostname;
        else (0, _utils2.assert)(cookie.domain.startsWith(".") || !cookie.domain.includes("."));
        if (!(0, _cookieStore.domainMatches)(url.hostname, cookie.domain)) continue;
        if (!cookie.path || !cookie.path.startsWith("/")) cookie.path = defaultPath;
        cookies.push(cookie);
      }
      return cookies;
    }
    async _updateRequestCookieHeader(url, headers2) {
      if (getHeader(headers2, "cookie") !== void 0) return;
      const cookies = await this._cookies(url);
      if (cookies.length) {
        const valueArray = cookies.map((c) => `${c.name}=${c.value}`);
        setHeader(headers2, "cookie", valueArray.join("; "));
      }
    }
    async _sendRequestWithRetries(progress2, url, options, postData, maxRetries) {
      var _maxRetries;
      (_maxRetries = maxRetries) !== null && _maxRetries !== void 0 ? _maxRetries : maxRetries = 0;
      let backoff = 250;
      for (let i = 0; i <= maxRetries; i++) {
        try {
          return await this._sendRequest(progress2, url, options, postData);
        } catch (e) {
          e = (0, _socksClientCertificatesInterceptor.rewriteOpenSSLErrorIfNeeded)(e);
          if (maxRetries === 0) throw e;
          if (i === maxRetries || options.deadline && (0, _utils2.monotonicTime)() + backoff > options.deadline) throw new Error(`Failed after ${i + 1} attempt(s): ${e}`);
          if (e.code !== "ECONNRESET") throw e;
          progress2.log(`  Received ECONNRESET, will retry after ${backoff}ms.`);
          await new Promise((f) => setTimeout(f, backoff));
          backoff *= 2;
        }
      }
      throw new Error("Unreachable");
    }
    async _sendRequest(progress2, url, options, postData) {
      var _getHeader;
      await this._updateRequestCookieHeader(url, options.headers);
      const requestCookies = ((_getHeader = getHeader(options.headers, "cookie")) === null || _getHeader === void 0 ? void 0 : _getHeader.split(";").map((p) => {
        const [name2, value] = p.split("=").map((v) => v.trim());
        return {
          name: name2,
          value
        };
      })) || [];
      const requestEvent = {
        url,
        method: options.method,
        headers: options.headers,
        cookies: requestCookies,
        postData
      };
      this.emit(APIRequestContext.Events.Request, requestEvent);
      return new Promise((fulfill, reject) => {
        const requestConstructor = (url.protocol === "https:" ? _https.default : _http.default).request;
        const agent = options.agent || (url.protocol === "https:" ? _happyEyeballs2.httpsHappyEyeballsAgent : _happyEyeballs2.httpHappyEyeballsAgent);
        const requestOptions = {
          ...options,
          agent
        };
        const startAt = (0, _utils2.monotonicTime)();
        let dnsLookupAt;
        let tcpConnectionAt;
        let tlsHandshakeAt;
        let requestFinishAt;
        let serverIPAddress;
        let serverPort;
        let securityDetails;
        const listeners = [];
        const request2 = requestConstructor(url, requestOptions, async (response) => {
          const responseAt = (0, _utils2.monotonicTime)();
          const notifyRequestFinished = (body2) => {
            var _tlsHandshakeAt;
            const endAt = (0, _utils2.monotonicTime)();
            const timings = {
              send: requestFinishAt - startAt,
              wait: responseAt - requestFinishAt,
              receive: endAt - responseAt,
              dns: dnsLookupAt ? dnsLookupAt - startAt : -1,
              connect: ((_tlsHandshakeAt = tlsHandshakeAt) !== null && _tlsHandshakeAt !== void 0 ? _tlsHandshakeAt : tcpConnectionAt) - startAt,
              // "If [ssl] is defined then the time is also included in the connect field "
              ssl: tlsHandshakeAt ? tlsHandshakeAt - tcpConnectionAt : -1,
              blocked: -1
            };
            const requestFinishedEvent = {
              requestEvent,
              httpVersion: response.httpVersion,
              statusCode: response.statusCode || 0,
              statusMessage: response.statusMessage || "",
              headers: response.headers,
              rawHeaders: response.rawHeaders,
              cookies,
              body: body2,
              timings,
              serverIPAddress,
              serverPort,
              securityDetails
            };
            this.emit(APIRequestContext.Events.RequestFinished, requestFinishedEvent);
          };
          progress2.log(`← ${response.statusCode} ${response.statusMessage}`);
          for (const [name2, value] of Object.entries(response.headers)) progress2.log(`  ${name2}: ${value}`);
          const cookies = this._parseSetCookieHeader(response.url || url.toString(), response.headers["set-cookie"]);
          if (cookies.length) {
            try {
              await this._addCookies(cookies);
            } catch (e) {
              await Promise.all(cookies.map((c) => this._addCookies([c]).catch(() => {
              })));
            }
          }
          if (redirectStatus2.includes(response.statusCode) && options.maxRedirects >= 0) {
            var _response$headers$loc;
            if (!options.maxRedirects) {
              reject(new Error("Max redirect count exceeded"));
              request2.destroy();
              return;
            }
            const headers2 = {
              ...options.headers
            };
            removeHeader(headers2, `cookie`);
            const status = response.statusCode;
            let method = options.method;
            if ((status === 301 || status === 302) && method === "POST" || status === 303 && !["GET", "HEAD"].includes(method)) {
              method = "GET";
              postData = void 0;
              removeHeader(headers2, `content-encoding`);
              removeHeader(headers2, `content-language`);
              removeHeader(headers2, `content-length`);
              removeHeader(headers2, `content-location`);
              removeHeader(headers2, `content-type`);
            }
            const redirectOptions = {
              method,
              headers: headers2,
              agent: options.agent,
              maxRedirects: options.maxRedirects - 1,
              timeout: options.timeout,
              deadline: options.deadline,
              ...(0, _socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, url.origin),
              __testHookLookup: options.__testHookLookup
            };
            if (options.rejectUnauthorized === false) redirectOptions.rejectUnauthorized = false;
            const locationHeaderValue = Buffer.from((_response$headers$loc = response.headers.location) !== null && _response$headers$loc !== void 0 ? _response$headers$loc : "", "latin1").toString("utf8");
            if (locationHeaderValue) {
              let locationURL;
              try {
                locationURL = new URL(locationHeaderValue, url);
              } catch (error) {
                reject(new Error(`uri requested responds with an invalid redirect URL: ${locationHeaderValue}`));
                request2.destroy();
                return;
              }
              if (headers2["host"]) headers2["host"] = locationURL.host;
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, locationURL, redirectOptions, postData));
              request2.destroy();
              return;
            }
          }
          if (response.statusCode === 401 && !getHeader(options.headers, "authorization")) {
            const auth = response.headers["www-authenticate"];
            const credentials = this._getHttpCredentials(url);
            if (auth !== null && auth !== void 0 && auth.trim().startsWith("Basic") && credentials) {
              setBasicAuthorizationHeader(options.headers, credentials);
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, url, options, postData));
              request2.destroy();
              return;
            }
          }
          response.on("aborted", () => reject(new Error("aborted")));
          const chunks = [];
          const notifyBodyFinished = () => {
            const body2 = Buffer.concat(chunks);
            notifyRequestFinished(body2);
            fulfill({
              url: response.url || url.toString(),
              status: response.statusCode || 0,
              statusText: response.statusMessage || "",
              headers: toHeadersArray(response.rawHeaders),
              body: body2
            });
          };
          let body = response;
          let transform2;
          const encoding = response.headers["content-encoding"];
          if (encoding === "gzip" || encoding === "x-gzip") {
            transform2 = _zlib.default.createGunzip({
              flush: _zlib.default.constants.Z_SYNC_FLUSH,
              finishFlush: _zlib.default.constants.Z_SYNC_FLUSH
            });
          } else if (encoding === "br") {
            transform2 = _zlib.default.createBrotliDecompress({
              flush: _zlib.default.constants.BROTLI_OPERATION_FLUSH,
              finishFlush: _zlib.default.constants.BROTLI_OPERATION_FLUSH
            });
          } else if (encoding === "deflate") {
            transform2 = _zlib.default.createInflate();
          }
          if (transform2) {
            const emptyStreamTransform = new SafeEmptyStreamTransform(notifyBodyFinished);
            body = (0, _stream2.pipeline)(response, emptyStreamTransform, transform2, (e) => {
              if (e) reject(new Error(`failed to decompress '${encoding}' encoding: ${e.message}`));
            });
            body.on("error", (e) => reject(new Error(`failed to decompress '${encoding}' encoding: ${e}`)));
          } else {
            body.on("error", reject);
          }
          body.on("data", (chunk) => chunks.push(chunk));
          body.on("end", notifyBodyFinished);
        });
        request2.on("error", reject);
        listeners.push(_utils2.eventsHelper.addEventListener(this, APIRequestContext.Events.Dispose, () => {
          reject(new Error("Request context disposed."));
          request2.destroy();
        }));
        request2.on("close", () => _utils2.eventsHelper.removeEventListeners(listeners));
        request2.on("socket", (socket) => {
          const happyEyeBallsTimings = (0, _happyEyeballs2.timingForSocket)(socket);
          dnsLookupAt = happyEyeBallsTimings.dnsLookupAt;
          tcpConnectionAt = happyEyeBallsTimings.tcpConnectionAt;
          listeners.push(_utils2.eventsHelper.addEventListener(socket, "lookup", () => {
            dnsLookupAt = (0, _utils2.monotonicTime)();
          }), _utils2.eventsHelper.addEventListener(socket, "connect", () => {
            tcpConnectionAt = (0, _utils2.monotonicTime)();
          }), _utils2.eventsHelper.addEventListener(socket, "secureConnect", () => {
            tlsHandshakeAt = (0, _utils2.monotonicTime)();
            if (socket instanceof _tls.TLSSocket) {
              var _socket$getProtocol;
              const peerCertificate = socket.getPeerCertificate();
              securityDetails = {
                protocol: (_socket$getProtocol = socket.getProtocol()) !== null && _socket$getProtocol !== void 0 ? _socket$getProtocol : void 0,
                subjectName: peerCertificate.subject.CN,
                validFrom: new Date(peerCertificate.valid_from).getTime() / 1e3,
                validTo: new Date(peerCertificate.valid_to).getTime() / 1e3,
                issuer: peerCertificate.issuer.CN
              };
            }
          }));
          serverIPAddress = socket.remoteAddress;
          serverPort = socket.remotePort;
        });
        request2.on("finish", () => {
          requestFinishAt = (0, _utils2.monotonicTime)();
        });
        progress2.log(`→ ${options.method} ${url.toString()}`);
        if (options.headers) {
          for (const [name2, value] of Object.entries(options.headers)) progress2.log(`  ${name2}: ${value}`);
        }
        if (options.deadline) {
          const rejectOnTimeout = () => {
            reject(new Error(`Request timed out after ${options.timeout}ms`));
            request2.destroy();
          };
          const remaining = options.deadline - (0, _utils2.monotonicTime)();
          if (remaining <= 0) {
            rejectOnTimeout();
            return;
          }
          request2.setTimeout(remaining, rejectOnTimeout);
        }
        if (postData) request2.write(postData);
        request2.end();
      });
    }
    _getHttpCredentials(url) {
      var _this$_defaultOptions, _this$_defaultOptions2;
      if (!((_this$_defaultOptions = this._defaultOptions().httpCredentials) !== null && _this$_defaultOptions !== void 0 && _this$_defaultOptions.origin) || url.origin.toLowerCase() === ((_this$_defaultOptions2 = this._defaultOptions().httpCredentials) === null || _this$_defaultOptions2 === void 0 || (_this$_defaultOptions2 = _this$_defaultOptions2.origin) === null || _this$_defaultOptions2 === void 0 ? void 0 : _this$_defaultOptions2.toLowerCase())) return this._defaultOptions().httpCredentials;
      return void 0;
    }
  }
  fetch$1.APIRequestContext = APIRequestContext;
  APIRequestContext.Events = {
    Dispose: "dispose",
    Request: "request",
    RequestFinished: "requestfinished"
  };
  APIRequestContext.allInstances = /* @__PURE__ */ new Set();
  class SafeEmptyStreamTransform extends _stream2.Transform {
    constructor(onEmptyStreamCallback) {
      super();
      this._receivedSomeData = false;
      this._onEmptyStreamCallback = void 0;
      this._onEmptyStreamCallback = onEmptyStreamCallback;
    }
    _transform(chunk, encoding, callback) {
      this._receivedSomeData = true;
      callback(null, chunk);
    }
    _flush(callback) {
      if (this._receivedSomeData) callback(null);
      else this._onEmptyStreamCallback();
    }
  }
  class BrowserContextAPIRequestContext extends APIRequestContext {
    constructor(context) {
      super(context);
      this._context = void 0;
      this._context = context;
      context.once(_browserContext2.BrowserContext.Events.Close, () => this._disposeImpl());
    }
    tracing() {
      return this._context.tracing;
    }
    async dispose(options) {
      this._closeReason = options.reason;
      this.fetchResponses.clear();
    }
    _defaultOptions() {
      return {
        userAgent: this._context._options.userAgent || this._context._browser.userAgent(),
        extraHTTPHeaders: this._context._options.extraHTTPHeaders,
        httpCredentials: this._context._options.httpCredentials,
        proxy: this._context._options.proxy || this._context._browser.options.proxy,
        timeoutSettings: this._context._timeoutSettings,
        ignoreHTTPSErrors: this._context._options.ignoreHTTPSErrors,
        baseURL: this._context._options.baseURL,
        clientCertificates: this._context._options.clientCertificates
      };
    }
    async _addCookies(cookies) {
      await this._context.addCookies(cookies);
    }
    async _cookies(url) {
      return await this._context.cookies(url.toString());
    }
    async storageState() {
      return this._context.storageState();
    }
  }
  fetch$1.BrowserContextAPIRequestContext = BrowserContextAPIRequestContext;
  class GlobalAPIRequestContext extends APIRequestContext {
    constructor(playwright2, options) {
      super(playwright2);
      this._cookieStore = new _cookieStore.CookieStore();
      this._options = void 0;
      this._origins = void 0;
      this._tracing = void 0;
      this.attribution.context = this;
      const timeoutSettings2 = new _timeoutSettings2.TimeoutSettings();
      if (options.timeout !== void 0) timeoutSettings2.setDefaultTimeout(options.timeout);
      const proxy = options.proxy;
      if (proxy !== null && proxy !== void 0 && proxy.server) {
        let url = proxy === null || proxy === void 0 ? void 0 : proxy.server.trim();
        if (!/^\w+:\/\//.test(url)) url = "http://" + url;
        proxy.server = url;
      }
      if (options.storageState) {
        this._origins = options.storageState.origins;
        this._cookieStore.addCookies(options.storageState.cookies || []);
      }
      (0, _browserContext2.verifyClientCertificates)(options.clientCertificates);
      this._options = {
        baseURL: options.baseURL,
        userAgent: options.userAgent || (0, _userAgent2.getUserAgent)(),
        extraHTTPHeaders: options.extraHTTPHeaders,
        ignoreHTTPSErrors: !!options.ignoreHTTPSErrors,
        httpCredentials: options.httpCredentials,
        clientCertificates: options.clientCertificates,
        proxy,
        timeoutSettings: timeoutSettings2
      };
      this._tracing = new _tracing.Tracing(this, options.tracesDir);
    }
    tracing() {
      return this._tracing;
    }
    async dispose(options) {
      this._closeReason = options.reason;
      await this._tracing.flush();
      await this._tracing.deleteTmpTracesDir();
      this._disposeImpl();
    }
    _defaultOptions() {
      return this._options;
    }
    async _addCookies(cookies) {
      this._cookieStore.addCookies(cookies);
    }
    async _cookies(url) {
      return this._cookieStore.cookies(url);
    }
    async storageState() {
      return {
        cookies: this._cookieStore.allCookies(),
        origins: this._origins || []
      };
    }
  }
  fetch$1.GlobalAPIRequestContext = GlobalAPIRequestContext;
  function createProxyAgent(proxy) {
    var _proxyOpts$protocol;
    const proxyOpts = _url2.default.parse(proxy.server);
    if ((_proxyOpts$protocol = proxyOpts.protocol) !== null && _proxyOpts$protocol !== void 0 && _proxyOpts$protocol.startsWith("socks")) {
      return new _utilsBundle2.SocksProxyAgent({
        host: proxyOpts.hostname,
        port: proxyOpts.port || void 0
      });
    }
    if (proxy.username) proxyOpts.auth = `${proxy.username}:${proxy.password || ""}`;
    return new _utilsBundle2.HttpsProxyAgent(proxyOpts);
  }
  function toHeadersArray(rawHeaders) {
    const result2 = [];
    for (let i = 0; i < rawHeaders.length; i += 2) result2.push({
      name: rawHeaders[i],
      value: rawHeaders[i + 1]
    });
    return result2;
  }
  const redirectStatus2 = [301, 302, 303, 307, 308];
  function parseCookie(header) {
    const raw = (0, _cookieStore.parseRawCookie)(header);
    if (!raw) return null;
    const cookie = {
      domain: "",
      path: "",
      expires: -1,
      httpOnly: false,
      secure: false,
      // From https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
      // The cookie-sending behavior if SameSite is not specified is SameSite=Lax.
      sameSite: "Lax",
      ...raw
    };
    return cookie;
  }
  function serializePostData(params, headers2) {
    (0, _utils2.assert)((params.postData ? 1 : 0) + (params.jsonData ? 1 : 0) + (params.formData ? 1 : 0) + (params.multipartData ? 1 : 0) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
    if (params.jsonData !== void 0) {
      setHeader(headers2, "content-type", "application/json", true);
      return Buffer.from(params.jsonData, "utf8");
    } else if (params.formData) {
      const searchParams = new URLSearchParams();
      for (const {
        name: name2,
        value
      } of params.formData) searchParams.append(name2, value);
      setHeader(headers2, "content-type", "application/x-www-form-urlencoded", true);
      return Buffer.from(searchParams.toString(), "utf8");
    } else if (params.multipartData) {
      const formData2 = new _formData.MultipartFormData();
      for (const field of params.multipartData) {
        if (field.file) formData2.addFileField(field.name, field.file);
        else if (field.value) formData2.addField(field.name, field.value);
      }
      setHeader(headers2, "content-type", formData2.contentTypeHeader(), true);
      return formData2.finish();
    } else if (params.postData !== void 0) {
      setHeader(headers2, "content-type", "application/octet-stream", true);
      return params.postData;
    }
    return void 0;
  }
  function setHeader(headers2, name2, value, keepExisting = false) {
    const existing = Object.entries(headers2).find((pair) => pair[0].toLowerCase() === name2.toLowerCase());
    if (!existing) headers2[name2] = value;
    else if (!keepExisting) headers2[existing[0]] = value;
  }
  function getHeader(headers2, name2) {
    const existing = Object.entries(headers2).find((pair) => pair[0].toLowerCase() === name2.toLowerCase());
    return existing ? existing[1] : void 0;
  }
  function removeHeader(headers2, name2) {
    delete headers2[name2];
  }
  function shouldBypassProxy(url, bypass) {
    if (!bypass) return false;
    const domains = bypass.split(",").map((s) => {
      s = s.trim();
      if (!s.startsWith(".")) s = "." + s;
      return s;
    });
    const domain = "." + url.hostname;
    return domains.some((d) => domain.endsWith(d));
  }
  function setBasicAuthorizationHeader(headers2, credentials) {
    const {
      username,
      password
    } = credentials;
    const encoded = Buffer.from(`${username || ""}:${password || ""}`).toString("base64");
    setHeader(headers2, "authorization", `Basic ${encoded}`);
  }
  return fetch$1;
}
var androidDispatcher = {};
var browserContextDispatcher = {};
var pageDispatcher = {};
var frameDispatcher = {};
var elementHandlerDispatcher = {};
var jsHandleDispatcher = {};
var hasRequiredJsHandleDispatcher;
function requireJsHandleDispatcher() {
  if (hasRequiredJsHandleDispatcher) return jsHandleDispatcher;
  hasRequiredJsHandleDispatcher = 1;
  Object.defineProperty(jsHandleDispatcher, "__esModule", {
    value: true
  });
  jsHandleDispatcher.JSHandleDispatcher = void 0;
  jsHandleDispatcher.parseArgument = parseArgument;
  jsHandleDispatcher.parseValue = parseValue;
  jsHandleDispatcher.serializeResult = serializeResult;
  var _dispatcher2 = dispatcher;
  var _elementHandlerDispatcher2 = requireElementHandlerDispatcher();
  var _serializers2 = serializers;
  class JSHandleDispatcher extends _dispatcher2.Dispatcher {
    constructor(scope, jsHandle2) {
      super(scope, jsHandle2, jsHandle2.asElement() ? "ElementHandle" : "JSHandle", {
        preview: jsHandle2.toString()
      });
      this._type_JSHandle = true;
      jsHandle2._setPreviewCallback((preview) => this._dispatchEvent("previewUpdated", {
        preview
      }));
    }
    async evaluateExpression(params) {
      return {
        value: serializeResult(await this._object.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, parseArgument(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const jsHandle2 = await this._object.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, parseArgument(params.arg));
      return {
        handle: _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle2)
      };
    }
    async getProperty(params) {
      const jsHandle2 = await this._object.getProperty(params.name);
      return {
        handle: _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle2)
      };
    }
    async getPropertyList() {
      const map = await this._object.getProperties();
      const properties = [];
      for (const [name2, value] of map) properties.push({
        name: name2,
        value: _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(this.parentScope(), value)
      });
      return {
        properties
      };
    }
    async jsonValue() {
      return {
        value: serializeResult(await this._object.jsonValue())
      };
    }
    async dispose(_, metadata) {
      metadata.potentiallyClosesScope = true;
      this._object.dispose();
      this._dispose();
    }
  }
  jsHandleDispatcher.JSHandleDispatcher = JSHandleDispatcher;
  function parseArgument(arg) {
    return (0, _serializers2.parseSerializedValue)(arg.value, arg.handles.map((a) => a._object));
  }
  function parseValue(v) {
    return (0, _serializers2.parseSerializedValue)(v, []);
  }
  function serializeResult(arg) {
    return (0, _serializers2.serializeValue)(arg, (value) => ({
      fallThrough: value
    }));
  }
  return jsHandleDispatcher;
}
var hasRequiredElementHandlerDispatcher;
function requireElementHandlerDispatcher() {
  if (hasRequiredElementHandlerDispatcher) return elementHandlerDispatcher;
  hasRequiredElementHandlerDispatcher = 1;
  Object.defineProperty(elementHandlerDispatcher, "__esModule", {
    value: true
  });
  elementHandlerDispatcher.ElementHandleDispatcher = void 0;
  var _dispatcher2 = dispatcher;
  var _jsHandleDispatcher2 = requireJsHandleDispatcher();
  var _frameDispatcher = requireFrameDispatcher();
  var _browserContextDispatcher2 = requireBrowserContextDispatcher();
  var _pageDispatcher = requirePageDispatcher();
  class ElementHandleDispatcher extends _jsHandleDispatcher2.JSHandleDispatcher {
    static from(scope, handle) {
      return (0, _dispatcher2.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromNullable(scope, handle) {
      if (!handle) return void 0;
      return (0, _dispatcher2.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromJSHandle(scope, handle) {
      const result2 = (0, _dispatcher2.existingDispatcher)(handle);
      if (result2) return result2;
      return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()) : new _jsHandleDispatcher2.JSHandleDispatcher(scope, handle);
    }
    constructor(scope, elementHandle2) {
      super(scope, elementHandle2);
      this._type_ElementHandle = true;
      this._elementHandle = void 0;
      this._elementHandle = elementHandle2;
    }
    async ownerFrame(params, metadata) {
      const frame2 = await this._elementHandle.ownerFrame();
      return {
        frame: frame2 ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame2) : void 0
      };
    }
    async contentFrame(params, metadata) {
      const frame2 = await this._elementHandle.contentFrame();
      return {
        frame: frame2 ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame2) : void 0
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._elementHandle.getAttribute(metadata, params.name);
      return {
        value: value === null ? void 0 : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._elementHandle.inputValue(metadata);
      return {
        value
      };
    }
    async textContent(params, metadata) {
      const value = await this._elementHandle.textContent(metadata);
      return {
        value: value === null ? void 0 : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._elementHandle.innerText(metadata)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._elementHandle.innerHTML(metadata)
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._elementHandle.isChecked(metadata)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._elementHandle.isDisabled(metadata)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._elementHandle.isEditable(metadata)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._elementHandle.isEnabled(metadata)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._elementHandle.isHidden(metadata)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._elementHandle.isVisible(metadata)
      };
    }
    async dispatchEvent(params, metadata) {
      await this._elementHandle.dispatchEvent(metadata, params.type, (0, _jsHandleDispatcher2.parseArgument)(params.eventInit));
    }
    async scrollIntoViewIfNeeded(params, metadata) {
      await this._elementHandle.scrollIntoViewIfNeeded(metadata, params);
    }
    async hover(params, metadata) {
      return await this._elementHandle.hover(metadata, params);
    }
    async click(params, metadata) {
      return await this._elementHandle.click(metadata, params);
    }
    async dblclick(params, metadata) {
      return await this._elementHandle.dblclick(metadata, params);
    }
    async tap(params, metadata) {
      return await this._elementHandle.tap(metadata, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._elementHandle.selectOption(metadata, elements, params.options || [], params)
      };
    }
    async fill(params, metadata) {
      return await this._elementHandle.fill(metadata, params.value, params);
    }
    async selectText(params, metadata) {
      await this._elementHandle.selectText(metadata, params);
    }
    async setInputFiles(params, metadata) {
      return await this._elementHandle.setInputFiles(metadata, params);
    }
    async focus(params, metadata) {
      await this._elementHandle.focus(metadata);
    }
    async type(params, metadata) {
      return await this._elementHandle.type(metadata, params.text, params);
    }
    async press(params, metadata) {
      return await this._elementHandle.press(metadata, params.key, params);
    }
    async check(params, metadata) {
      return await this._elementHandle.check(metadata, params);
    }
    async uncheck(params, metadata) {
      return await this._elementHandle.uncheck(metadata, params);
    }
    async boundingBox(params, metadata) {
      const value = await this._elementHandle.boundingBox();
      return {
        value: value || void 0
      };
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame: frame2,
        selector
      }) => ({
        frame: frame2._object,
        selector
      }));
      return {
        binary: await this._elementHandle.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async querySelector(params, metadata) {
      const handle = await this._elementHandle.querySelector(params.selector, params);
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle)
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._elementHandle.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => ElementHandleDispatcher.from(this.parentScope(), e))
      };
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher2.serializeResult)(await this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher2.serializeResult)(await this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async waitForElementState(params, metadata) {
      await this._elementHandle.waitForElementState(metadata, params.state, params);
    }
    async waitForSelector(params, metadata) {
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params))
      };
    }
    _browserContextDispatcher() {
      const scope = this.parentScope();
      if (scope instanceof _browserContextDispatcher2.BrowserContextDispatcher) return scope;
      if (scope instanceof _pageDispatcher.PageDispatcher) return scope.parentScope();
      if (scope instanceof _pageDispatcher.WorkerDispatcher || scope instanceof _frameDispatcher.FrameDispatcher) {
        const parentScope = scope.parentScope();
        if (parentScope instanceof _browserContextDispatcher2.BrowserContextDispatcher) return parentScope;
        return parentScope.parentScope();
      }
      throw new Error("ElementHandle belongs to unexpected scope");
    }
  }
  elementHandlerDispatcher.ElementHandleDispatcher = ElementHandleDispatcher;
  return elementHandlerDispatcher;
}
var networkDispatchers = {};
var tracingDispatcher = {};
var artifactDispatcher = {};
var streamDispatcher = {};
Object.defineProperty(streamDispatcher, "__esModule", {
  value: true
});
streamDispatcher.StreamDispatcher = void 0;
var _dispatcher$d = dispatcher;
var _utils$h = requireUtils();
class StreamDispatcher extends _dispatcher$d.Dispatcher {
  constructor(scope, stream2) {
    super(scope, {
      guid: "stream@" + (0, _utils$h.createGuid)(),
      stream: stream2
    }, "Stream", {});
    this._type_Stream = true;
    this._ended = false;
    stream2.once("end", () => this._ended = true);
    stream2.once("error", () => this._ended = true);
  }
  async read(params) {
    const stream2 = this._object.stream;
    if (this._ended) return {
      binary: Buffer.from("")
    };
    if (!stream2.readableLength) {
      const readyPromise = new _utils$h.ManualPromise();
      const done = () => readyPromise.resolve();
      stream2.on("readable", done);
      stream2.on("end", done);
      stream2.on("error", done);
      await readyPromise;
      stream2.off("readable", done);
      stream2.off("end", done);
      stream2.off("error", done);
    }
    const buffer = stream2.read(Math.min(stream2.readableLength, params.size || stream2.readableLength));
    return {
      binary: buffer || Buffer.from("")
    };
  }
  async close() {
    this._object.stream.destroy();
  }
}
streamDispatcher.StreamDispatcher = StreamDispatcher;
Object.defineProperty(artifactDispatcher, "__esModule", {
  value: true
});
artifactDispatcher.ArtifactDispatcher = void 0;
var _dispatcher$c = dispatcher;
var _streamDispatcher = streamDispatcher;
var _fs$3 = _interopRequireDefault$5(require$$0$2);
var _fileUtils$1 = requireFileUtils();
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
class ArtifactDispatcher extends _dispatcher$c.Dispatcher {
  static from(parentScope, artifact2) {
    return ArtifactDispatcher.fromNullable(parentScope, artifact2);
  }
  static fromNullable(parentScope, artifact2) {
    if (!artifact2) return void 0;
    const result2 = (0, _dispatcher$c.existingDispatcher)(artifact2);
    return result2 || new ArtifactDispatcher(parentScope, artifact2);
  }
  constructor(scope, artifact2) {
    super(scope, artifact2, "Artifact", {
      absolutePath: artifact2.localPath()
    });
    this._type_Artifact = true;
  }
  async pathAfterFinished() {
    const path2 = await this._object.localPathAfterFinished();
    return {
      value: path2
    };
  }
  async saveAs(params) {
    return await new Promise((resolve, reject) => {
      this._object.saveAs(async (localPath, error) => {
        if (error) {
          reject(error);
          return;
        }
        try {
          await (0, _fileUtils$1.mkdirIfNeeded)(params.path);
          await _fs$3.default.promises.copyFile(localPath, params.path);
          resolve();
        } catch (e) {
          reject(e);
        }
      });
    });
  }
  async saveAsStream() {
    return await new Promise((resolve, reject) => {
      this._object.saveAs(async (localPath, error) => {
        if (error) {
          reject(error);
          return;
        }
        try {
          const readable = _fs$3.default.createReadStream(localPath, {
            highWaterMark: 1024 * 1024
          });
          const stream2 = new _streamDispatcher.StreamDispatcher(this, readable);
          resolve({
            stream: stream2
          });
          await new Promise((resolve2) => {
            readable.on("close", resolve2);
            readable.on("end", resolve2);
            readable.on("error", resolve2);
          });
        } catch (e) {
          reject(e);
        }
      });
    });
  }
  async stream() {
    const fileName = await this._object.localPathAfterFinished();
    const readable = _fs$3.default.createReadStream(fileName, {
      highWaterMark: 1024 * 1024
    });
    return {
      stream: new _streamDispatcher.StreamDispatcher(this, readable)
    };
  }
  async failure() {
    const error = await this._object.failureError();
    return {
      error: error || void 0
    };
  }
  async cancel() {
    await this._object.cancel();
  }
  async delete(_, metadata) {
    metadata.potentiallyClosesScope = true;
    await this._object.delete();
    this._dispose();
  }
}
artifactDispatcher.ArtifactDispatcher = ArtifactDispatcher;
Object.defineProperty(tracingDispatcher, "__esModule", {
  value: true
});
tracingDispatcher.TracingDispatcher = void 0;
var _artifactDispatcher$1 = artifactDispatcher;
var _dispatcher$b = dispatcher;
class TracingDispatcher extends _dispatcher$b.Dispatcher {
  static from(scope, tracing2) {
    const result2 = (0, _dispatcher$b.existingDispatcher)(tracing2);
    return result2 || new TracingDispatcher(scope, tracing2);
  }
  constructor(scope, tracing2) {
    super(scope, tracing2, "Tracing", {});
    this._type_Tracing = true;
  }
  async tracingStart(params) {
    await this._object.start(params);
  }
  async tracingStartChunk(params) {
    return await this._object.startChunk(params);
  }
  async tracingStopChunk(params) {
    const {
      artifact: artifact2,
      entries
    } = await this._object.stopChunk(params);
    return {
      artifact: artifact2 ? _artifactDispatcher$1.ArtifactDispatcher.from(this, artifact2) : void 0,
      entries
    };
  }
  async tracingStop(params) {
    await this._object.stop();
  }
}
tracingDispatcher.TracingDispatcher = TracingDispatcher;
var hasRequiredNetworkDispatchers;
function requireNetworkDispatchers() {
  if (hasRequiredNetworkDispatchers) return networkDispatchers;
  hasRequiredNetworkDispatchers = 1;
  Object.defineProperty(networkDispatchers, "__esModule", {
    value: true
  });
  networkDispatchers.WebSocketDispatcher = networkDispatchers.RouteDispatcher = networkDispatchers.ResponseDispatcher = networkDispatchers.RequestDispatcher = networkDispatchers.APIRequestContextDispatcher = void 0;
  var _network2 = requireNetwork$1();
  var _dispatcher2 = dispatcher;
  var _tracingDispatcher = tracingDispatcher;
  var _frameDispatcher = requireFrameDispatcher();
  var _pageDispatcher = requirePageDispatcher();
  class RequestDispatcher extends _dispatcher2.Dispatcher {
    static from(scope, request2) {
      const result2 = (0, _dispatcher2.existingDispatcher)(request2);
      return result2 || new RequestDispatcher(scope, request2);
    }
    static fromNullable(scope, request2) {
      return request2 ? RequestDispatcher.from(scope, request2) : void 0;
    }
    constructor(scope, request2) {
      var _request$frame;
      const postData = request2.postDataBuffer();
      const frame2 = request2.frame();
      const page2 = (_request$frame = request2.frame()) === null || _request$frame === void 0 ? void 0 : _request$frame._page;
      const pageDispatcher2 = page2 ? (0, _dispatcher2.existingDispatcher)(page2) : null;
      const frameDispatcher2 = frame2 ? _frameDispatcher.FrameDispatcher.from(scope, frame2) : null;
      super(pageDispatcher2 || frameDispatcher2 || scope, request2, "Request", {
        frame: _frameDispatcher.FrameDispatcher.fromNullable(scope, request2.frame()),
        serviceWorker: _pageDispatcher.WorkerDispatcher.fromNullable(scope, request2.serviceWorker()),
        url: request2.url(),
        resourceType: request2.resourceType(),
        method: request2.method(),
        postData: postData === null ? void 0 : postData,
        headers: request2.headers(),
        isNavigationRequest: request2.isNavigationRequest(),
        redirectedFrom: RequestDispatcher.fromNullable(scope, request2.redirectedFrom())
      });
      this._type_Request = void 0;
      this._browserContextDispatcher = void 0;
      this._type_Request = true;
      this._browserContextDispatcher = scope;
    }
    async rawRequestHeaders(params) {
      return {
        headers: await this._object.rawRequestHeaders()
      };
    }
    async response() {
      return {
        response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._object.response())
      };
    }
  }
  networkDispatchers.RequestDispatcher = RequestDispatcher;
  class ResponseDispatcher extends _dispatcher2.Dispatcher {
    static from(scope, response) {
      const result2 = (0, _dispatcher2.existingDispatcher)(response);
      const requestDispatcher = RequestDispatcher.from(scope, response.request());
      return result2 || new ResponseDispatcher(requestDispatcher, response);
    }
    static fromNullable(scope, response) {
      return response ? ResponseDispatcher.from(scope, response) : void 0;
    }
    constructor(scope, response) {
      super(scope, response, "Response", {
        // TODO: responses in popups can point to non-reported requests.
        request: scope,
        url: response.url(),
        status: response.status(),
        statusText: response.statusText(),
        headers: response.headers(),
        timing: response.timing(),
        fromServiceWorker: response.fromServiceWorker()
      });
      this._type_Response = true;
    }
    async body() {
      return {
        binary: await this._object.body()
      };
    }
    async securityDetails() {
      return {
        value: await this._object.securityDetails() || void 0
      };
    }
    async serverAddr() {
      return {
        value: await this._object.serverAddr() || void 0
      };
    }
    async rawResponseHeaders(params) {
      return {
        headers: await this._object.rawResponseHeaders()
      };
    }
    async sizes(params) {
      return {
        sizes: await this._object.sizes()
      };
    }
  }
  networkDispatchers.ResponseDispatcher = ResponseDispatcher;
  class RouteDispatcher extends _dispatcher2.Dispatcher {
    static from(scope, route) {
      const result2 = (0, _dispatcher2.existingDispatcher)(route);
      return result2 || new RouteDispatcher(scope, route);
    }
    constructor(scope, route) {
      super(scope, route, "Route", {
        // Context route can point to a non-reported request, so we send the request in the initializer.
        request: scope
      });
      this._type_Route = true;
    }
    async continue(params, metadata) {
      await this._object.continue({
        url: params.url,
        method: params.method,
        headers: params.headers,
        postData: params.postData,
        isFallback: params.isFallback
      });
    }
    async fulfill(params, metadata) {
      await this._object.fulfill(params);
    }
    async abort(params, metadata) {
      await this._object.abort(params.errorCode || "failed");
    }
    async redirectNavigationRequest(params) {
      await this._object.redirectNavigationRequest(params.url);
    }
  }
  networkDispatchers.RouteDispatcher = RouteDispatcher;
  class WebSocketDispatcher extends _dispatcher2.Dispatcher {
    constructor(scope, webSocket) {
      super(scope, webSocket, "WebSocket", {
        url: webSocket.url()
      });
      this._type_EventTarget = true;
      this._type_WebSocket = true;
      this.addObjectListener(_network2.WebSocket.Events.FrameSent, (event) => this._dispatchEvent("frameSent", event));
      this.addObjectListener(_network2.WebSocket.Events.FrameReceived, (event) => this._dispatchEvent("frameReceived", event));
      this.addObjectListener(_network2.WebSocket.Events.SocketError, (error) => this._dispatchEvent("socketError", {
        error
      }));
      this.addObjectListener(_network2.WebSocket.Events.Close, () => this._dispatchEvent("close", {}));
    }
  }
  networkDispatchers.WebSocketDispatcher = WebSocketDispatcher;
  class APIRequestContextDispatcher extends _dispatcher2.Dispatcher {
    static from(scope, request2) {
      const result2 = (0, _dispatcher2.existingDispatcher)(request2);
      return result2 || new APIRequestContextDispatcher(scope, request2);
    }
    static fromNullable(scope, request2) {
      return request2 ? APIRequestContextDispatcher.from(scope, request2) : void 0;
    }
    constructor(parentScope, request2) {
      const tracing2 = _tracingDispatcher.TracingDispatcher.from(parentScope, request2.tracing());
      super(parentScope, request2, "APIRequestContext", {
        tracing: tracing2
      });
      this._type_APIRequestContext = true;
      this.adopt(tracing2);
    }
    async storageState() {
      return this._object.storageState();
    }
    async dispose(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.dispose(params);
      this._dispose();
    }
    async fetch(params, metadata) {
      const fetchResponse = await this._object.fetch(params, metadata);
      return {
        response: {
          url: fetchResponse.url,
          status: fetchResponse.status,
          statusText: fetchResponse.statusText,
          headers: fetchResponse.headers,
          fetchUid: fetchResponse.fetchUid
        }
      };
    }
    async fetchResponseBody(params) {
      return {
        binary: this._object.fetchResponses.get(params.fetchUid)
      };
    }
    async fetchLog(params) {
      const log = this._object.fetchLog.get(params.fetchUid) || [];
      return {
        log
      };
    }
    async disposeAPIResponse(params) {
      this._object.disposeResponse(params.fetchUid);
    }
  }
  networkDispatchers.APIRequestContextDispatcher = APIRequestContextDispatcher;
  return networkDispatchers;
}
var hasRequiredFrameDispatcher;
function requireFrameDispatcher() {
  if (hasRequiredFrameDispatcher) return frameDispatcher;
  hasRequiredFrameDispatcher = 1;
  Object.defineProperty(frameDispatcher, "__esModule", {
    value: true
  });
  frameDispatcher.FrameDispatcher = void 0;
  var _frames = requireFrames();
  var _dispatcher2 = dispatcher;
  var _elementHandlerDispatcher2 = requireElementHandlerDispatcher();
  var _jsHandleDispatcher2 = requireJsHandleDispatcher();
  var _networkDispatchers2 = requireNetworkDispatchers();
  var _utils2 = requireUtils();
  class FrameDispatcher extends _dispatcher2.Dispatcher {
    static from(scope, frame2) {
      const result2 = (0, _dispatcher2.existingDispatcher)(frame2);
      return result2 || new FrameDispatcher(scope, frame2);
    }
    static fromNullable(scope, frame2) {
      if (!frame2) return;
      return FrameDispatcher.from(scope, frame2);
    }
    constructor(scope, frame2) {
      (0, _utils2.debugAssert)(frame2._page.mainFrame(), "Cannot determine whether the frame is a main frame");
      const gcBucket = frame2._page.mainFrame() === frame2 ? "MainFrame" : "Frame";
      const pageDispatcher2 = (0, _dispatcher2.existingDispatcher)(frame2._page);
      super(pageDispatcher2 || scope, frame2, "Frame", {
        url: frame2.url(),
        name: frame2.name(),
        parentFrame: FrameDispatcher.fromNullable(scope, frame2.parentFrame()),
        loadStates: Array.from(frame2._firedLifecycleEvents)
      }, gcBucket);
      this._type_Frame = true;
      this._frame = void 0;
      this._browserContextDispatcher = void 0;
      this._browserContextDispatcher = scope;
      this._frame = frame2;
      this.addObjectListener(_frames.Frame.Events.AddLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          add: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.RemoveLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          remove: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.InternalNavigation, (event) => {
        if (!event.isPublic) return;
        const params = {
          url: event.url,
          name: event.name,
          error: event.error ? event.error.message : void 0
        };
        if (event.newDocument) params.newDocument = {
          request: _networkDispatchers2.RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null)
        };
        this._dispatchEvent("navigated", params);
      });
    }
    async goto(params, metadata) {
      return {
        response: _networkDispatchers2.ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(metadata, params.url, params))
      };
    }
    async frameElement() {
      return {
        element: _elementHandlerDispatcher2.ElementHandleDispatcher.from(this, await this._frame.frameElement())
      };
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher2.serializeResult)(await this._frame.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async waitForSelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher2.ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(metadata, params.selector, params))
      };
    }
    async dispatchEvent(params, metadata) {
      return this._frame.dispatchEvent(metadata, params.selector, params.type, (0, _jsHandleDispatcher2.parseArgument)(params.eventInit), params);
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher2.serializeResult)(await this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher2.serializeResult)(await this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async querySelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher2.ElementHandleDispatcher.fromNullable(this, await this._frame.querySelector(params.selector, params))
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._frame.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => _elementHandlerDispatcher2.ElementHandleDispatcher.from(this, e))
      };
    }
    async queryCount(params) {
      return {
        value: await this._frame.queryCount(params.selector)
      };
    }
    async content() {
      return {
        value: await this._frame.content()
      };
    }
    async setContent(params, metadata) {
      return await this._frame.setContent(metadata, params.html, params);
    }
    async addScriptTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher2.ElementHandleDispatcher.from(this, await this._frame.addScriptTag(params))
      };
    }
    async addStyleTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher2.ElementHandleDispatcher.from(this, await this._frame.addStyleTag(params))
      };
    }
    async click(params, metadata) {
      metadata.potentiallyClosesScope = true;
      return await this._frame.click(metadata, params.selector, params);
    }
    async dblclick(params, metadata) {
      return await this._frame.dblclick(metadata, params.selector, params);
    }
    async dragAndDrop(params, metadata) {
      return await this._frame.dragAndDrop(metadata, params.source, params.target, params);
    }
    async tap(params, metadata) {
      return await this._frame.tap(metadata, params.selector, params);
    }
    async fill(params, metadata) {
      return await this._frame.fill(metadata, params.selector, params.value, params);
    }
    async focus(params, metadata) {
      await this._frame.focus(metadata, params.selector, params);
    }
    async blur(params, metadata) {
      await this._frame.blur(metadata, params.selector, params);
    }
    async textContent(params, metadata) {
      const value = await this._frame.textContent(metadata, params.selector, params);
      return {
        value: value === null ? void 0 : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._frame.innerText(metadata, params.selector, params)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._frame.innerHTML(metadata, params.selector, params)
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._frame.getAttribute(metadata, params.selector, params.name, params);
      return {
        value: value === null ? void 0 : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._frame.inputValue(metadata, params.selector, params);
      return {
        value
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._frame.isChecked(metadata, params.selector, params)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._frame.isDisabled(metadata, params.selector, params)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._frame.isEditable(metadata, params.selector, params)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._frame.isEnabled(metadata, params.selector, params)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._frame.isHidden(metadata, params.selector, params)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._frame.isVisible(metadata, params.selector, params)
      };
    }
    async hover(params, metadata) {
      return await this._frame.hover(metadata, params.selector, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._frame.selectOption(metadata, params.selector, elements, params.options || [], params)
      };
    }
    async setInputFiles(params, metadata) {
      return await this._frame.setInputFiles(metadata, params.selector, params);
    }
    async type(params, metadata) {
      return await this._frame.type(metadata, params.selector, params.text, params);
    }
    async press(params, metadata) {
      return await this._frame.press(metadata, params.selector, params.key, params);
    }
    async check(params, metadata) {
      return await this._frame.check(metadata, params.selector, params);
    }
    async uncheck(params, metadata) {
      return await this._frame.uncheck(metadata, params.selector, params);
    }
    async waitForTimeout(params, metadata) {
      return await this._frame.waitForTimeout(metadata, params.timeout);
    }
    async waitForFunction(params, metadata) {
      return {
        handle: _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(this, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg), params))
      };
    }
    async title(params, metadata) {
      return {
        value: await this._frame.title()
      };
    }
    async highlight(params, metadata) {
      return await this._frame.highlight(params.selector);
    }
    async expect(params, metadata) {
      metadata.potentiallyClosesScope = true;
      const expectedValue = params.expectedValue ? (0, _jsHandleDispatcher2.parseArgument)(params.expectedValue) : void 0;
      const result2 = await this._frame.expect(metadata, params.selector, {
        ...params,
        expectedValue
      });
      if (result2.received !== void 0) result2.received = (0, _jsHandleDispatcher2.serializeResult)(result2.received);
      return result2;
    }
  }
  frameDispatcher.FrameDispatcher = FrameDispatcher;
  return frameDispatcher;
}
var webSocketRouteDispatcher = {};
var webSocketMockSource = {};
Object.defineProperty(webSocketMockSource, "__esModule", {
  value: true
});
webSocketMockSource.source = void 0;
webSocketMockSource.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/webSocketMock.ts
var webSocketMock_exports = {};
__export(webSocketMock_exports, {
  inject: () => inject
});
module.exports = __toCommonJS(webSocketMock_exports);
function inject(globalThis) {
  if (globalThis.__pwWebSocketDispatch)
    return;
  function generateId() {
    const bytes = new Uint8Array(32);
    globalThis.crypto.getRandomValues(bytes);
    const hex = "0123456789abcdef";
    return [...bytes].map((value) => {
      const high = Math.floor(value / 16);
      const low = value % 16;
      return hex[high] + hex[low];
    }).join("");
  }
  function bufferToData(b) {
    let s = "";
    for (let i = 0; i < b.length; i++)
      s += String.fromCharCode(b[i]);
    return { data: globalThis.btoa(s), isBase64: true };
  }
  function stringToBuffer(s) {
    s = globalThis.atob(s);
    const b = new Uint8Array(s.length);
    for (let i = 0; i < s.length; i++)
      b[i] = s.charCodeAt(i);
    return b.buffer;
  }
  function messageToData(message, cb) {
    if (message instanceof globalThis.Blob)
      return message.arrayBuffer().then((buffer) => cb(bufferToData(new Uint8Array(buffer))));
    if (typeof message === "string")
      return cb({ data: message, isBase64: false });
    if (ArrayBuffer.isView(message))
      return cb(bufferToData(new Uint8Array(message.buffer, message.byteOffset, message.byteLength)));
    return cb(bufferToData(new Uint8Array(message)));
  }
  function dataToMessage(data, binaryType) {
    if (!data.isBase64)
      return data.data;
    const buffer = stringToBuffer(data.data);
    return binaryType === "arraybuffer" ? buffer : new Blob([buffer]);
  }
  const binding = globalThis.__pwWebSocketBinding;
  const NativeWebSocket = globalThis.WebSocket;
  const idToWebSocket = /* @__PURE__ */ new Map();
  globalThis.__pwWebSocketDispatch = (request) => {
    const ws = idToWebSocket.get(request.id);
    if (!ws)
      return;
    if (request.type === "connect")
      ws._apiConnect();
    if (request.type === "passthrough")
      ws._apiPassThrough();
    if (request.type === "ensureOpened")
      ws._apiEnsureOpened();
    if (request.type === "sendToPage")
      ws._apiSendToPage(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closePage")
      ws._apiClosePage(request.code, request.reason, request.wasClean);
    if (request.type === "sendToServer")
      ws._apiSendToServer(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closeServer")
      ws._apiCloseServer(request.code, request.reason, request.wasClean);
  };
  const _WebSocketMock = class _WebSocketMock extends EventTarget {
    constructor(url, protocols) {
      super();
      // WebSocket.CLOSED
      this.CONNECTING = 0;
      // WebSocket.CONNECTING
      this.OPEN = 1;
      // WebSocket.OPEN
      this.CLOSING = 2;
      // WebSocket.CLOSING
      this.CLOSED = 3;
      // WebSocket.CLOSED
      this._oncloseListener = null;
      this._onerrorListener = null;
      this._onmessageListener = null;
      this._onopenListener = null;
      this.bufferedAmount = 0;
      this.extensions = "";
      this.protocol = "";
      this.readyState = 0;
      this._origin = "";
      this._passthrough = false;
      this._wsBufferedMessages = [];
      this._binaryType = "blob";
      this.url = typeof url === "string" ? url : url.href;
      try {
        this.url = new URL(url).href;
        this._origin = new URL(url).origin;
      } catch {
      }
      this._protocols = protocols;
      this._id = generateId();
      idToWebSocket.set(this._id, this);
      binding({ type: "onCreate", id: this._id, url: this.url });
    }
    // --- native WebSocket implementation ---
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(type) {
      this._binaryType = type;
      if (this._ws)
        this._ws.binaryType = type;
    }
    get onclose() {
      return this._oncloseListener;
    }
    set onclose(listener) {
      if (this._oncloseListener)
        this.removeEventListener("close", this._oncloseListener);
      this._oncloseListener = listener;
      if (this._oncloseListener)
        this.addEventListener("close", this._oncloseListener);
    }
    get onerror() {
      return this._onerrorListener;
    }
    set onerror(listener) {
      if (this._onerrorListener)
        this.removeEventListener("error", this._onerrorListener);
      this._onerrorListener = listener;
      if (this._onerrorListener)
        this.addEventListener("error", this._onerrorListener);
    }
    get onopen() {
      return this._onopenListener;
    }
    set onopen(listener) {
      if (this._onopenListener)
        this.removeEventListener("open", this._onopenListener);
      this._onopenListener = listener;
      if (this._onopenListener)
        this.addEventListener("open", this._onopenListener);
    }
    get onmessage() {
      return this._onmessageListener;
    }
    set onmessage(listener) {
      if (this._onmessageListener)
        this.removeEventListener("message", this._onmessageListener);
      this._onmessageListener = listener;
      if (this._onmessageListener)
        this.addEventListener("message", this._onmessageListener);
    }
    send(message) {
      if (this.readyState === _WebSocketMock.CONNECTING)
        throw new DOMException(\`Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.\`);
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      if (this._passthrough) {
        if (this._ws)
          this._apiSendToServer(message);
      } else {
        messageToData(message, (data) => binding({ type: "onMessageFromPage", id: this._id, data }));
      }
    }
    close(code, reason) {
      if (code !== void 0 && code !== 1e3 && (code < 3e3 || code > 4999))
        throw new DOMException(\`Failed to execute 'close' on 'WebSocket': The close code must be either 1000, or between 3000 and 4999. \${code} is neither.\`);
      if (this.readyState === _WebSocketMock.OPEN || this.readyState === _WebSocketMock.CONNECTING)
        this.readyState = _WebSocketMock.CLOSING;
      if (this._passthrough)
        this._apiCloseServer(code, reason, true);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean: true });
    }
    // --- methods called from the routing API ---
    _apiEnsureOpened() {
      if (!this._ws)
        this._ensureOpened();
    }
    _apiSendToPage(message) {
      this._ensureOpened();
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      this.dispatchEvent(new MessageEvent("message", { data: message, origin: this._origin, cancelable: true }));
    }
    _apiSendToServer(message) {
      if (!this._ws)
        throw new Error("Cannot send a message before connecting to the server");
      if (this._ws.readyState === _WebSocketMock.CONNECTING)
        this._wsBufferedMessages.push(message);
      else
        this._ws.send(message);
    }
    _apiConnect() {
      if (this._ws)
        throw new Error("Can only connect to the server once");
      this._ws = new NativeWebSocket(this.url, this._protocols);
      this._ws.binaryType = this._binaryType;
      this._ws.onopen = () => {
        for (const message of this._wsBufferedMessages)
          this._ws.send(message);
        this._wsBufferedMessages = [];
        this._ensureOpened();
      };
      this._ws.onclose = (event) => {
        this._onWSClose(event.code, event.reason, event.wasClean);
      };
      this._ws.onmessage = (event) => {
        if (this._passthrough)
          this._apiSendToPage(event.data);
        else
          messageToData(event.data, (data) => binding({ type: "onMessageFromServer", id: this._id, data }));
      };
      this._ws.onerror = () => {
        const event = new Event("error", { cancelable: true });
        this.dispatchEvent(event);
      };
    }
    // This method connects to the server, and passes all messages through,
    // as if WebSocketMock was not engaged.
    _apiPassThrough() {
      this._passthrough = true;
      this._apiConnect();
    }
    _apiCloseServer(code, reason, wasClean) {
      if (!this._ws) {
        this._onWSClose(code, reason, wasClean);
        return;
      }
      if (this._ws.readyState === _WebSocketMock.CONNECTING || this._ws.readyState === _WebSocketMock.OPEN)
        this._ws.close(code, reason);
    }
    _apiClosePage(code, reason, wasClean) {
      if (this.readyState === _WebSocketMock.CLOSED)
        return;
      this.readyState = _WebSocketMock.CLOSED;
      this.dispatchEvent(new CloseEvent("close", { code, reason, wasClean, cancelable: true }));
      this._maybeCleanup();
      if (this._passthrough)
        this._apiCloseServer(code, reason, wasClean);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean });
    }
    // --- internals ---
    _ensureOpened() {
      if (this.readyState !== _WebSocketMock.CONNECTING)
        return;
      this.readyState = _WebSocketMock.OPEN;
      this.dispatchEvent(new Event("open", { cancelable: true }));
    }
    _onWSClose(code, reason, wasClean) {
      if (this._passthrough)
        this._apiClosePage(code, reason, wasClean);
      else
        binding({ type: "onCloseServer", id: this._id, code, reason, wasClean });
      if (this._ws) {
        this._ws.onopen = null;
        this._ws.onclose = null;
        this._ws.onmessage = null;
        this._ws.onerror = null;
        this._ws = void 0;
        this._wsBufferedMessages = [];
      }
      this._maybeCleanup();
    }
    _maybeCleanup() {
      if (this.readyState === _WebSocketMock.CLOSED && !this._ws)
        idToWebSocket.delete(this._id);
    }
  };
  _WebSocketMock.CONNECTING = 0;
  // WebSocket.CONNECTING
  _WebSocketMock.OPEN = 1;
  // WebSocket.OPEN
  _WebSocketMock.CLOSING = 2;
  // WebSocket.CLOSING
  _WebSocketMock.CLOSED = 3;
  let WebSocketMock = _WebSocketMock;
  globalThis.WebSocket = class WebSocket extends WebSocketMock {
  };
}
`;
var hasRequiredWebSocketRouteDispatcher;
function requireWebSocketRouteDispatcher() {
  if (hasRequiredWebSocketRouteDispatcher) return webSocketRouteDispatcher;
  hasRequiredWebSocketRouteDispatcher = 1;
  Object.defineProperty(webSocketRouteDispatcher, "__esModule", {
    value: true
  });
  webSocketRouteDispatcher.WebSocketRouteDispatcher = void 0;
  var _page = requirePage$1();
  var _dispatcher2 = dispatcher;
  var _utils2 = requireUtils();
  var _pageDispatcher = requirePageDispatcher();
  var webSocketMockSource$1 = _interopRequireWildcard2(webSocketMockSource);
  var _eventsHelper2 = eventsHelper;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const kBindingInstalledSymbol = Symbol("webSocketRouteBindingInstalled");
  const kInitScriptInstalledSymbol = Symbol("webSocketRouteInitScriptInstalled");
  class WebSocketRouteDispatcher extends _dispatcher2.Dispatcher {
    constructor(scope, id, url, frame2) {
      super(scope, {
        guid: "webSocketRoute@" + (0, _utils2.createGuid)()
      }, "WebSocketRoute", {
        url
      });
      this._type_WebSocketRoute = true;
      this._id = void 0;
      this._frame = void 0;
      this._id = id;
      this._frame = frame2;
      this._eventListeners.push(
        // When the frame navigates or detaches, there will be no more communication
        // from the mock websocket, so pretend like it was closed.
        _eventsHelper2.eventsHelper.addEventListener(frame2._page, _page.Page.Events.InternalFrameNavigatedToNewDocument, (frame3) => {
          if (frame3 === this._frame) this._executionContextGone();
        }),
        _eventsHelper2.eventsHelper.addEventListener(frame2._page, _page.Page.Events.FrameDetached, (frame3) => {
          if (frame3 === this._frame) this._executionContextGone();
        }),
        _eventsHelper2.eventsHelper.addEventListener(frame2._page, _page.Page.Events.Close, () => this._executionContextGone()),
        _eventsHelper2.eventsHelper.addEventListener(frame2._page, _page.Page.Events.Crash, () => this._executionContextGone())
      );
      WebSocketRouteDispatcher._idToDispatcher.set(this._id, this);
      scope._dispatchEvent("webSocketRoute", {
        webSocketRoute: this
      });
    }
    static async installIfNeeded(contextDispatcher, target) {
      const context = target instanceof _page.Page ? target.context() : target;
      if (!context[kBindingInstalledSymbol]) {
        context[kBindingInstalledSymbol] = true;
        await context.exposeBinding("__pwWebSocketBinding", false, (source2, payload) => {
          if (payload.type === "onCreate") {
            const pageDispatcher2 = _pageDispatcher.PageDispatcher.fromNullable(contextDispatcher, source2.page);
            let scope;
            if (pageDispatcher2 && matchesPattern(pageDispatcher2, context._options.baseURL, payload.url)) scope = pageDispatcher2;
            else if (matchesPattern(contextDispatcher, context._options.baseURL, payload.url)) scope = contextDispatcher;
            if (scope) {
              new WebSocketRouteDispatcher(scope, payload.id, payload.url, source2.frame);
            } else {
              const request2 = {
                id: payload.id,
                type: "passthrough"
              };
              source2.frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request2)})`).catch(() => {
              });
            }
            return;
          }
          const dispatcher2 = WebSocketRouteDispatcher._idToDispatcher.get(payload.id);
          if (payload.type === "onMessageFromPage") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("messageFromPage", {
            message: payload.data.data,
            isBase64: payload.data.isBase64
          });
          if (payload.type === "onMessageFromServer") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("messageFromServer", {
            message: payload.data.data,
            isBase64: payload.data.isBase64
          });
          if (payload.type === "onClosePage") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("closePage", {
            code: payload.code,
            reason: payload.reason,
            wasClean: payload.wasClean
          });
          if (payload.type === "onCloseServer") dispatcher2 === null || dispatcher2 === void 0 || dispatcher2._dispatchEvent("closeServer", {
            code: payload.code,
            reason: payload.reason,
            wasClean: payload.wasClean
          });
        });
      }
      if (!target[kInitScriptInstalledSymbol]) {
        target[kInitScriptInstalledSymbol] = true;
        await target.addInitScript(`
        (() => {
          const module = {};
          ${webSocketMockSource$1.source}
          (module.exports.inject())(globalThis);
        })();
      `);
      }
    }
    async connect(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "connect"
      });
    }
    async ensureOpened(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "ensureOpened"
      });
    }
    async sendToPage(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "sendToPage",
        data: {
          data: params.message,
          isBase64: params.isBase64
        }
      });
    }
    async sendToServer(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "sendToServer",
        data: {
          data: params.message,
          isBase64: params.isBase64
        }
      });
    }
    async closePage(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "closePage",
        code: params.code,
        reason: params.reason,
        wasClean: params.wasClean
      });
    }
    async closeServer(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "closeServer",
        code: params.code,
        reason: params.reason,
        wasClean: params.wasClean
      });
    }
    async _evaluateAPIRequest(request2) {
      await this._frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request2)})`).catch(() => {
      });
    }
    _onDispose() {
      WebSocketRouteDispatcher._idToDispatcher.delete(this._id);
    }
    _executionContextGone() {
      if (!this._disposed) {
        this._dispatchEvent("closePage", {
          wasClean: true
        });
        this._dispatchEvent("closeServer", {
          wasClean: true
        });
      }
    }
  }
  webSocketRouteDispatcher.WebSocketRouteDispatcher = WebSocketRouteDispatcher;
  WebSocketRouteDispatcher._idToDispatcher = /* @__PURE__ */ new Map();
  function matchesPattern(dispatcher2, baseURL, url) {
    for (const pattern of dispatcher2._webSocketInterceptionPatterns || []) {
      const urlMatch2 = pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob;
      if ((0, _utils2.urlMatches)(baseURL, url, urlMatch2)) return true;
    }
    return false;
  }
  return webSocketRouteDispatcher;
}
var hasRequiredPageDispatcher;
function requirePageDispatcher() {
  if (hasRequiredPageDispatcher) return pageDispatcher;
  hasRequiredPageDispatcher = 1;
  Object.defineProperty(pageDispatcher, "__esModule", {
    value: true
  });
  pageDispatcher.WorkerDispatcher = pageDispatcher.PageDispatcher = pageDispatcher.BindingCallDispatcher = void 0;
  var _page = requirePage$1();
  var _dispatcher2 = dispatcher;
  var _errors2 = errors$2;
  var _frameDispatcher = requireFrameDispatcher();
  var _networkDispatchers2 = requireNetworkDispatchers();
  var _jsHandleDispatcher2 = requireJsHandleDispatcher();
  var _elementHandlerDispatcher2 = requireElementHandlerDispatcher();
  var _artifactDispatcher2 = artifactDispatcher;
  var _utils2 = requireUtils();
  var _webSocketRouteDispatcher = requireWebSocketRouteDispatcher();
  class PageDispatcher extends _dispatcher2.Dispatcher {
    static from(parentScope, page2) {
      return PageDispatcher.fromNullable(parentScope, page2);
    }
    static fromNullable(parentScope, page2) {
      if (!page2) return void 0;
      const result2 = (0, _dispatcher2.existingDispatcher)(page2);
      return result2 || new PageDispatcher(parentScope, page2);
    }
    constructor(parentScope, page2) {
      const mainFrame = _frameDispatcher.FrameDispatcher.from(parentScope, page2.mainFrame());
      super(parentScope, page2, "Page", {
        mainFrame,
        viewportSize: page2.viewportSize() || void 0,
        isClosed: page2.isClosed(),
        opener: PageDispatcher.fromNullable(parentScope, page2.opener())
      });
      this._type_EventTarget = true;
      this._type_Page = true;
      this._page = void 0;
      this._subscriptions = /* @__PURE__ */ new Set();
      this._webSocketInterceptionPatterns = [];
      this.adopt(mainFrame);
      this._page = page2;
      this.addObjectListener(_page.Page.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_page.Page.Events.Crash, () => this._dispatchEvent("crash"));
      this.addObjectListener(_page.Page.Events.Download, (download2) => {
        this._dispatchEvent("download", {
          url: download2.url,
          suggestedFilename: download2.suggestedFilename(),
          artifact: _artifactDispatcher2.ArtifactDispatcher.from(parentScope, download2.artifact)
        });
      });
      this.addObjectListener(_page.Page.Events.FileChooser, (fileChooser2) => this._dispatchEvent("fileChooser", {
        element: _elementHandlerDispatcher2.ElementHandleDispatcher.from(mainFrame, fileChooser2.element()),
        isMultiple: fileChooser2.isMultiple()
      }));
      this.addObjectListener(_page.Page.Events.FrameAttached, (frame2) => this._onFrameAttached(frame2));
      this.addObjectListener(_page.Page.Events.FrameDetached, (frame2) => this._onFrameDetached(frame2));
      this.addObjectListener(_page.Page.Events.LocatorHandlerTriggered, (uid) => this._dispatchEvent("locatorHandlerTriggered", {
        uid
      }));
      this.addObjectListener(_page.Page.Events.WebSocket, (webSocket) => this._dispatchEvent("webSocket", {
        webSocket: new _networkDispatchers2.WebSocketDispatcher(this, webSocket)
      }));
      this.addObjectListener(_page.Page.Events.Worker, (worker2) => this._dispatchEvent("worker", {
        worker: new WorkerDispatcher(this, worker2)
      }));
      this.addObjectListener(_page.Page.Events.Video, (artifact2) => this._dispatchEvent("video", {
        artifact: _artifactDispatcher2.ArtifactDispatcher.from(parentScope, artifact2)
      }));
      if (page2._video) this._dispatchEvent("video", {
        artifact: _artifactDispatcher2.ArtifactDispatcher.from(this.parentScope(), page2._video)
      });
      const frames2 = page2._frameManager.frames();
      for (let i = 1; i < frames2.length; i++) this._onFrameAttached(frames2[i]);
    }
    page() {
      return this._page;
    }
    async setDefaultNavigationTimeoutNoReply(params, metadata) {
      this._page.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params, metadata) {
      this._page.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params, metadata) {
      await this._page.exposeBinding(params.name, !!params.needsHandle, (source2, ...args) => {
        if (this._disposed) return;
        const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source2, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async setExtraHTTPHeaders(params, metadata) {
      await this._page.setExtraHTTPHeaders(params.headers);
    }
    async reload(params, metadata) {
      return {
        response: _networkDispatchers2.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.reload(metadata, params))
      };
    }
    async goBack(params, metadata) {
      return {
        response: _networkDispatchers2.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goBack(metadata, params))
      };
    }
    async goForward(params, metadata) {
      return {
        response: _networkDispatchers2.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goForward(metadata, params))
      };
    }
    async requestGC(params, metadata) {
      await this._page.requestGC();
    }
    async registerLocatorHandler(params, metadata) {
      const uid = this._page.registerLocatorHandler(params.selector, params.noWaitAfter);
      return {
        uid
      };
    }
    async resolveLocatorHandlerNoReply(params, metadata) {
      this._page.resolveLocatorHandler(params.uid, params.remove);
    }
    async unregisterLocatorHandler(params, metadata) {
      this._page.unregisterLocatorHandler(params.uid);
    }
    async emulateMedia(params, metadata) {
      await this._page.emulateMedia({
        media: params.media,
        colorScheme: params.colorScheme,
        reducedMotion: params.reducedMotion,
        forcedColors: params.forcedColors
      });
    }
    async setViewportSize(params, metadata) {
      await this._page.setViewportSize(params.viewportSize);
    }
    async addInitScript(params, metadata) {
      await this._page.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params, metadata) {
      if (!params.patterns.length) {
        await this._page.setClientRequestInterceptor(void 0);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._page.setClientRequestInterceptor((route, request2) => {
        const matchesSome = urlMatchers.some((urlMatch2) => (0, _utils2.urlMatches)(this._page._browserContext._options.baseURL, request2.url(), urlMatch2));
        if (!matchesSome) return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers2.RouteDispatcher.from(_networkDispatchers2.RequestDispatcher.from(this.parentScope(), request2), route)
        });
        return true;
      });
    }
    async setWebSocketInterceptionPatterns(params, metadata) {
      this._webSocketInterceptionPatterns = params.patterns;
      if (params.patterns.length) await _webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this.parentScope(), this._page);
    }
    async expectScreenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame: frame2,
        selector
      }) => ({
        frame: frame2._object,
        selector
      }));
      const locator2 = params.locator ? {
        frame: params.locator.frame._object,
        selector: params.locator.selector
      } : void 0;
      return await this._page.expectScreenshot(metadata, {
        ...params,
        locator: locator2,
        mask
      });
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame: frame2,
        selector
      }) => ({
        frame: frame2._object,
        selector
      }));
      return {
        binary: await this._page.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async close(params, metadata) {
      if (!params.runBeforeUnload) metadata.potentiallyClosesScope = true;
      await this._page.close(metadata, params);
    }
    async updateSubscription(params) {
      if (params.event === "fileChooser") await this._page.setFileChooserIntercepted(params.enabled);
      if (params.enabled) this._subscriptions.add(params.event);
      else this._subscriptions.delete(params.event);
    }
    async keyboardDown(params, metadata) {
      await this._page.keyboard.down(params.key);
    }
    async keyboardUp(params, metadata) {
      await this._page.keyboard.up(params.key);
    }
    async keyboardInsertText(params, metadata) {
      await this._page.keyboard.insertText(params.text);
    }
    async keyboardType(params, metadata) {
      await this._page.keyboard.type(params.text, params);
    }
    async keyboardPress(params, metadata) {
      await this._page.keyboard.press(params.key, params);
    }
    async mouseMove(params, metadata) {
      await this._page.mouse.move(params.x, params.y, params, metadata);
    }
    async mouseDown(params, metadata) {
      await this._page.mouse.down(params, metadata);
    }
    async mouseUp(params, metadata) {
      await this._page.mouse.up(params, metadata);
    }
    async mouseClick(params, metadata) {
      await this._page.mouse.click(params.x, params.y, params, metadata);
    }
    async mouseWheel(params, metadata) {
      await this._page.mouse.wheel(params.deltaX, params.deltaY);
    }
    async touchscreenTap(params, metadata) {
      await this._page.touchscreen.tap(params.x, params.y, metadata);
    }
    async accessibilitySnapshot(params, metadata) {
      const rootAXNode = await this._page.accessibility.snapshot({
        interestingOnly: params.interestingOnly,
        root: params.root ? params.root._elementHandle : void 0
      });
      return {
        rootAXNode: rootAXNode || void 0
      };
    }
    async pdf(params, metadata) {
      if (!this._page.pdf) throw new Error("PDF generation is only supported for Headless Chromium");
      const buffer = await this._page.pdf(params);
      return {
        pdf: buffer
      };
    }
    async bringToFront(params, metadata) {
      await this._page.bringToFront();
    }
    async startJSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      await coverage2.startJSCoverage(params);
    }
    async stopJSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      return await coverage2.stopJSCoverage();
    }
    async startCSSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      await coverage2.startCSSCoverage(params);
    }
    async stopCSSCoverage(params, metadata) {
      const coverage2 = this._page.coverage;
      return await coverage2.stopCSSCoverage();
    }
    _onFrameAttached(frame2) {
      this._dispatchEvent("frameAttached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame2)
      });
    }
    _onFrameDetached(frame2) {
      this._dispatchEvent("frameDetached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame2)
      });
    }
    _onDispose() {
      if (!this._page.isClosedOrClosingOrCrashed()) this._page.setClientRequestInterceptor(void 0).catch(() => {
      });
    }
  }
  pageDispatcher.PageDispatcher = PageDispatcher;
  class WorkerDispatcher extends _dispatcher2.Dispatcher {
    static fromNullable(scope, worker2) {
      if (!worker2) return void 0;
      const result2 = (0, _dispatcher2.existingDispatcher)(worker2);
      return result2 || new WorkerDispatcher(scope, worker2);
    }
    constructor(scope, worker2) {
      super(scope, worker2, "Worker", {
        url: worker2.url()
      });
      this._type_Worker = true;
      this.addObjectListener(_page.Worker.Events.Close, () => this._dispatchEvent("close"));
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher2.serializeResult)(await this._object.evaluateExpression(params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, (0, _jsHandleDispatcher2.parseArgument)(params.arg)))
      };
    }
  }
  pageDispatcher.WorkerDispatcher = WorkerDispatcher;
  class BindingCallDispatcher extends _dispatcher2.Dispatcher {
    constructor(scope, name2, needsHandle, source2, args) {
      super(scope, {
        guid: "bindingCall@" + (0, _utils2.createGuid)()
      }, "BindingCall", {
        frame: _frameDispatcher.FrameDispatcher.from(scope.parentScope(), source2.frame),
        name: name2,
        args: needsHandle ? void 0 : args.map(_jsHandleDispatcher2.serializeResult),
        handle: needsHandle ? _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(scope, args[0]) : void 0
      });
      this._type_BindingCall = true;
      this._resolve = void 0;
      this._reject = void 0;
      this._promise = void 0;
      this._promise = new Promise((resolve, reject) => {
        this._resolve = resolve;
        this._reject = reject;
      });
    }
    promise() {
      return this._promise;
    }
    async resolve(params, metadata) {
      this._resolve((0, _jsHandleDispatcher2.parseArgument)(params.result));
      this._dispose();
    }
    async reject(params, metadata) {
      this._reject((0, _errors2.parseError)(params.error));
      this._dispose();
    }
  }
  pageDispatcher.BindingCallDispatcher = BindingCallDispatcher;
  return pageDispatcher;
}
var cdpSessionDispatcher = {};
Object.defineProperty(cdpSessionDispatcher, "__esModule", {
  value: true
});
cdpSessionDispatcher.CDPSessionDispatcher = void 0;
var _crConnection = crConnection;
var _dispatcher$a = dispatcher;
class CDPSessionDispatcher extends _dispatcher$a.Dispatcher {
  constructor(scope, cdpSession2) {
    super(scope, cdpSession2, "CDPSession", {});
    this._type_CDPSession = true;
    this.addObjectListener(_crConnection.CDPSession.Events.Event, ({
      method,
      params
    }) => this._dispatchEvent("event", {
      method,
      params
    }));
    this.addObjectListener(_crConnection.CDPSession.Events.Closed, () => this._dispose());
  }
  async send(params) {
    return {
      result: await this._object.send(params.method, params.params)
    };
  }
  async detach(_, metadata) {
    metadata.potentiallyClosesScope = true;
    await this._object.detach();
  }
}
cdpSessionDispatcher.CDPSessionDispatcher = CDPSessionDispatcher;
var writableStreamDispatcher = {};
Object.defineProperty(writableStreamDispatcher, "__esModule", {
  value: true
});
writableStreamDispatcher.WritableStreamDispatcher = void 0;
var _dispatcher$9 = dispatcher;
var fs$1 = _interopRequireWildcard$2(require$$0$2);
var _utils$g = requireUtils();
function _getRequireWildcardCache$2(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$2 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$2(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$2(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class WritableStreamDispatcher extends _dispatcher$9.Dispatcher {
  constructor(scope, streamOrDirectory, lastModifiedMs) {
    super(scope, {
      guid: "writableStream@" + (0, _utils$g.createGuid)(),
      streamOrDirectory
    }, "WritableStream", {});
    this._type_WritableStream = true;
    this._lastModifiedMs = void 0;
    this._lastModifiedMs = lastModifiedMs;
  }
  async write(params) {
    if (typeof this._object.streamOrDirectory === "string") throw new Error("Cannot write to a directory");
    const stream2 = this._object.streamOrDirectory;
    await new Promise((fulfill, reject) => {
      stream2.write(params.binary, (error) => {
        if (error) reject(error);
        else fulfill();
      });
    });
  }
  async close() {
    if (typeof this._object.streamOrDirectory === "string") throw new Error("Cannot close a directory");
    const stream2 = this._object.streamOrDirectory;
    await new Promise((fulfill) => stream2.end(fulfill));
    if (this._lastModifiedMs) await fs$1.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
  }
  path() {
    if (typeof this._object.streamOrDirectory === "string") return this._object.streamOrDirectory;
    return this._object.streamOrDirectory.path;
  }
}
writableStreamDispatcher.WritableStreamDispatcher = WritableStreamDispatcher;
var dialogDispatcher = {};
var hasRequiredDialogDispatcher;
function requireDialogDispatcher() {
  if (hasRequiredDialogDispatcher) return dialogDispatcher;
  hasRequiredDialogDispatcher = 1;
  Object.defineProperty(dialogDispatcher, "__esModule", {
    value: true
  });
  dialogDispatcher.DialogDispatcher = void 0;
  var _dispatcher2 = dispatcher;
  var _pageDispatcher = requirePageDispatcher();
  class DialogDispatcher extends _dispatcher2.Dispatcher {
    constructor(scope, dialog2) {
      const page2 = _pageDispatcher.PageDispatcher.fromNullable(scope, dialog2.page().initializedOrUndefined());
      super(page2 || scope, dialog2, "Dialog", {
        page: page2,
        type: dialog2.type(),
        message: dialog2.message(),
        defaultValue: dialog2.defaultValue()
      });
      this._type_Dialog = true;
    }
    async accept(params) {
      await this._object.accept(params.promptText);
    }
    async dismiss() {
      await this._object.dismiss();
    }
  }
  dialogDispatcher.DialogDispatcher = DialogDispatcher;
  return dialogDispatcher;
}
var recorderInTraceViewer = {};
var traceViewer = {};
Object.defineProperty(traceViewer, "__esModule", {
  value: true
});
traceViewer.installRootRedirect = installRootRedirect;
traceViewer.openTraceInBrowser = openTraceInBrowser;
traceViewer.openTraceViewerApp = openTraceViewerApp;
traceViewer.runTraceInBrowser = runTraceInBrowser;
traceViewer.runTraceViewerApp = runTraceViewerApp;
traceViewer.startTraceViewerServer = startTraceViewerServer;
var _path$2 = _interopRequireDefault$4(require$$1);
var _fs$2 = _interopRequireDefault$4(require$$0$2);
var _httpServer = requireHttpServer();
var _utils$f = requireUtils();
var _launchApp = launchApp$1;
var _instrumentation$3 = instrumentation;
var _playwright$3 = requirePlaywright$1();
var _progress$1 = progress;
var _utilsBundle$2 = utilsBundle;
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function validateTraceUrls(traceUrls) {
  for (const traceUrl of traceUrls) {
    let traceFile = traceUrl;
    if (traceUrl.endsWith(".json")) traceFile = traceUrl.substring(0, traceUrl.length - ".json".length);
    if (!traceUrl.startsWith("http://") && !traceUrl.startsWith("https://") && !_fs$2.default.existsSync(traceFile) && !_fs$2.default.existsSync(traceFile + ".trace")) throw new Error(`Trace file ${traceUrl} does not exist!`);
  }
}
async function startTraceViewerServer(options) {
  const server2 = new _httpServer.HttpServer();
  server2.routePrefix("/trace", (request2, response) => {
    const url = new URL("http://localhost" + request2.url);
    const relativePath = url.pathname.slice("/trace".length);
    if (relativePath.endsWith("/stall.js")) return true;
    if (relativePath.startsWith("/file")) {
      try {
        const filePath = url.searchParams.get("path");
        if (_fs$2.default.existsSync(filePath)) return server2.serveFile(request2, response, url.searchParams.get("path"));
        if (filePath.endsWith(".json")) {
          const traceName = filePath.substring(0, filePath.length - ".json".length);
          response.statusCode = 200;
          response.setHeader("Content-Type", "application/json");
          response.end(JSON.stringify(traceDescriptor(traceName)));
          return true;
        }
      } catch (e) {
      }
      response.statusCode = 404;
      response.end();
      return true;
    }
    const absolutePath = _path$2.default.join(__dirname, "..", "..", "..", "vite", "traceViewer", ...relativePath.split("/"));
    return server2.serveFile(request2, response, absolutePath);
  });
  const transport2 = (options === null || options === void 0 ? void 0 : options.transport) || (options !== null && options !== void 0 && options.isServer ? new StdinServer() : void 0);
  if (transport2) server2.createWebSocket(transport2);
  const {
    host,
    port
  } = options || {};
  await server2.start({
    preferredPort: port,
    host
  });
  return server2;
}
async function installRootRedirect(server2, traceUrls, options) {
  const params = new URLSearchParams();
  if (_path$2.default.sep !== _path$2.default.posix.sep) params.set("pathSeparator", _path$2.default.sep);
  for (const traceUrl of traceUrls) params.append("trace", traceUrl);
  if (server2.wsGuid()) params.append("ws", server2.wsGuid());
  if (options !== null && options !== void 0 && options.isServer) params.append("isServer", "");
  if ((0, _utils$f.isUnderTest)()) params.append("isUnderTest", "true");
  for (const arg of options.args || []) params.append("arg", arg);
  if (options.grep) params.append("grep", options.grep);
  if (options.grepInvert) params.append("grepInvert", options.grepInvert);
  for (const project of options.project || []) params.append("project", project);
  for (const reporter of options.reporter || []) params.append("reporter", reporter);
  const urlPath = `./trace/${options.webApp || "index.html"}?${params.toString()}`;
  server2.routePath("/", (_, response) => {
    response.statusCode = 302;
    response.setHeader("Location", urlPath);
    response.end();
    return true;
  });
}
async function runTraceViewerApp(traceUrls, browserName, options, exitOnClose) {
  validateTraceUrls(traceUrls);
  const server2 = await startTraceViewerServer(options);
  await installRootRedirect(server2, traceUrls, options);
  const page2 = await openTraceViewerApp(server2.urlPrefix("precise"), browserName, options);
  if (exitOnClose) page2.on("close", () => (0, _utils$f.gracefullyProcessExitDoNotHang)(0));
  return page2;
}
async function runTraceInBrowser(traceUrls, options) {
  validateTraceUrls(traceUrls);
  const server2 = await startTraceViewerServer(options);
  await installRootRedirect(server2, traceUrls, options);
  await openTraceInBrowser(server2.urlPrefix("human-readable"));
}
async function openTraceViewerApp(url, browserName, options) {
  const traceViewerPlaywright = (0, _playwright$3.createPlaywright)({
    sdkLanguage: "javascript",
    isInternalPlaywright: true
  });
  const traceViewerBrowser = (0, _utils$f.isUnderTest)() ? "chromium" : browserName;
  const {
    context,
    page: page2
  } = await (0, _launchApp.launchApp)(traceViewerPlaywright[traceViewerBrowser], {
    // TODO: store language in the trace.
    sdkLanguage: traceViewerPlaywright.options.sdkLanguage,
    windowSize: {
      width: 1280,
      height: 800
    },
    persistentContextOptions: {
      ...options === null || options === void 0 ? void 0 : options.persistentContextOptions,
      useWebSocket: (0, _utils$f.isUnderTest)(),
      headless: !!(options !== null && options !== void 0 && options.headless)
    }
  });
  const controller = new _progress$1.ProgressController((0, _instrumentation$3.serverSideCallMetadata)(), context._browser);
  await controller.run(async (progress2) => {
    await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
  });
  if (process.env.PWTEST_PRINT_WS_ENDPOINT) process.stderr.write("DevTools listening on: " + context._browser.options.wsEndpoint + "\n");
  if (!(0, _utils$f.isUnderTest)()) await (0, _launchApp.syncLocalStorageWithSettings)(page2, "traceviewer");
  if ((0, _utils$f.isUnderTest)()) page2.on("close", () => context.close({
    reason: "Trace viewer closed"
  }).catch(() => {
  }));
  await page2.mainFrame().goto((0, _instrumentation$3.serverSideCallMetadata)(), url);
  return page2;
}
async function openTraceInBrowser(url) {
  console.log("\nListening on " + url);
  if (!(0, _utils$f.isUnderTest)()) await (0, _utilsBundle$2.open)(url.replace("0.0.0.0", "localhost")).catch(() => {
  });
}
class StdinServer {
  constructor() {
    this._pollTimer = void 0;
    this._traceUrl = void 0;
    this.sendEvent = void 0;
    this.close = void 0;
    process.stdin.on("data", (data) => {
      const url = data.toString().trim();
      if (url === this._traceUrl) return;
      if (url.endsWith(".json")) this._pollLoadTrace(url);
      else this._loadTrace(url);
    });
    process.stdin.on("close", () => (0, _utils$f.gracefullyProcessExitDoNotHang)(0));
  }
  onconnect() {
  }
  async dispatch(method, params) {
    if (method === "initialize") {
      if (this._traceUrl) this._loadTrace(this._traceUrl);
    }
  }
  onclose() {
  }
  _loadTrace(traceUrl) {
    var _this$sendEvent;
    this._traceUrl = traceUrl;
    clearTimeout(this._pollTimer);
    (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === void 0 || _this$sendEvent.call(this, "loadTraceRequested", {
      traceUrl
    });
  }
  _pollLoadTrace(url) {
    this._loadTrace(url);
    this._pollTimer = setTimeout(() => {
      this._pollLoadTrace(url);
    }, 500);
  }
}
function traceDescriptor(traceName) {
  const result2 = {
    entries: []
  };
  const traceDir = _path$2.default.dirname(traceName);
  const traceFile = _path$2.default.basename(traceName);
  for (const name2 of _fs$2.default.readdirSync(traceDir)) {
    if (name2.startsWith(traceFile)) result2.entries.push({
      name: name2,
      path: _path$2.default.join(traceDir, name2)
    });
  }
  const resourcesDir = _path$2.default.join(traceDir, "resources");
  if (_fs$2.default.existsSync(resourcesDir)) {
    for (const name2 of _fs$2.default.readdirSync(resourcesDir)) result2.entries.push({
      name: "resources/" + name2,
      path: _path$2.default.join(resourcesDir, name2)
    });
  }
  return result2;
}
Object.defineProperty(recorderInTraceViewer, "__esModule", {
  value: true
});
recorderInTraceViewer.RecorderInTraceViewer = void 0;
var _path$1 = _interopRequireDefault$3(require$$1);
var _events$4 = require$$0$1;
var _traceViewer = traceViewer;
var _manualPromise$1 = requireManualPromise();
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
class RecorderInTraceViewer extends _events$4.EventEmitter {
  static factory(context) {
    return async (recorder2) => {
      const transport2 = new RecorderTransport();
      const trace = _path$1.default.join(context._browser.options.tracesDir, "trace");
      const {
        wsEndpointForTest,
        tracePage,
        traceServer
      } = await openApp(trace, {
        transport: transport2,
        headless: !context._browser.options.headful
      });
      return new RecorderInTraceViewer(transport2, tracePage, traceServer, wsEndpointForTest);
    };
  }
  constructor(transport2, tracePage, traceServer, wsEndpointForTest) {
    super();
    this.wsEndpointForTest = void 0;
    this._transport = void 0;
    this._tracePage = void 0;
    this._traceServer = void 0;
    this._transport = transport2;
    this._transport.eventSink.resolve(this);
    this._tracePage = tracePage;
    this._traceServer = traceServer;
    this.wsEndpointForTest = wsEndpointForTest;
    this._tracePage.once("close", () => {
      this.close();
    });
  }
  async close() {
    await this._tracePage.context().close({
      reason: "Recorder window closed"
    });
    await this._traceServer.stop();
  }
  async setPaused(paused) {
    this._transport.deliverEvent("setPaused", {
      paused
    });
  }
  async setMode(mode) {
    this._transport.deliverEvent("setMode", {
      mode
    });
  }
  async setRunningFile(file) {
    this._transport.deliverEvent("setRunningFile", {
      file
    });
  }
  async setSelector(selector, userGesture) {
    this._transport.deliverEvent("setSelector", {
      selector,
      userGesture
    });
  }
  async updateCallLogs(callLogs) {
    this._transport.deliverEvent("updateCallLogs", {
      callLogs
    });
  }
  async setSources(sources) {
    this._transport.deliverEvent("setSources", {
      sources
    });
    if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
      if (process._didSetSourcesForTest(sources[0].text)) this.close();
    }
  }
  async setActions(actions, sources) {
    this._transport.deliverEvent("setActions", {
      actions,
      sources
    });
  }
}
recorderInTraceViewer.RecorderInTraceViewer = RecorderInTraceViewer;
async function openApp(trace, options) {
  const traceServer = await (0, _traceViewer.startTraceViewerServer)(options);
  await (0, _traceViewer.installRootRedirect)(traceServer, [trace], {
    ...options,
    webApp: "recorder.html"
  });
  const page2 = await (0, _traceViewer.openTraceViewerApp)(traceServer.urlPrefix("precise"), "chromium", options);
  return {
    wsEndpointForTest: page2.context()._browser.options.wsEndpoint,
    tracePage: page2,
    traceServer
  };
}
class RecorderTransport {
  constructor() {
    this._connected = new _manualPromise$1.ManualPromise();
    this.eventSink = new _manualPromise$1.ManualPromise();
    this.sendEvent = void 0;
    this.close = void 0;
  }
  onconnect() {
    this._connected.resolve();
  }
  async dispatch(method, params) {
    const eventSink = await this.eventSink;
    eventSink.emit("event", {
      event: method,
      params
    });
  }
  onclose() {
  }
  deliverEvent(method, params) {
    this._connected.then(() => {
      var _this$sendEvent;
      return (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === void 0 ? void 0 : _this$sendEvent.call(this, method, params);
    });
  }
}
var hasRequiredBrowserContextDispatcher;
function requireBrowserContextDispatcher() {
  if (hasRequiredBrowserContextDispatcher) return browserContextDispatcher;
  hasRequiredBrowserContextDispatcher = 1;
  Object.defineProperty(browserContextDispatcher, "__esModule", {
    value: true
  });
  browserContextDispatcher.BrowserContextDispatcher = void 0;
  var _browserContext2 = requireBrowserContext$1();
  var _dispatcher2 = dispatcher;
  var _pageDispatcher = requirePageDispatcher();
  var _networkDispatchers2 = requireNetworkDispatchers();
  var _crBrowser = requireCrBrowser();
  var _cdpSessionDispatcher2 = cdpSessionDispatcher;
  var _recorder = requireRecorder();
  var _artifactDispatcher2 = artifactDispatcher;
  var _tracingDispatcher = tracingDispatcher;
  var fs2 = _interopRequireWildcard2(require$$0$2);
  var path2 = _interopRequireWildcard2(require$$1);
  var _utils2 = requireUtils();
  var _writableStreamDispatcher = writableStreamDispatcher;
  var _dialogDispatcher = requireDialogDispatcher();
  var _errors2 = errors$2;
  var _elementHandlerDispatcher2 = requireElementHandlerDispatcher();
  var _recorderInTraceViewer = recorderInTraceViewer;
  var _recorderApp = requireRecorderApp();
  var _webSocketRouteDispatcher = requireWebSocketRouteDispatcher();
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  class BrowserContextDispatcher extends _dispatcher2.Dispatcher {
    constructor(parentScope, context) {
      const requestContext = _networkDispatchers2.APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
      const tracing2 = _tracingDispatcher.TracingDispatcher.from(parentScope, context.tracing);
      super(parentScope, context, "BrowserContext", {
        isChromium: context._browser.options.isChromium,
        isLocalBrowserOnServer: context._browser._isCollocatedWithServer,
        requestContext,
        tracing: tracing2
      });
      this._type_EventTarget = true;
      this._type_BrowserContext = true;
      this._context = void 0;
      this._subscriptions = /* @__PURE__ */ new Set();
      this._webSocketInterceptionPatterns = [];
      this.adopt(requestContext);
      this.adopt(tracing2);
      this._context = context;
      const onVideo = (artifact2) => {
        const artifactDispatcher2 = _artifactDispatcher2.ArtifactDispatcher.from(parentScope, artifact2);
        this._dispatchEvent("video", {
          artifact: artifactDispatcher2
        });
      };
      this.addObjectListener(_browserContext2.BrowserContext.Events.VideoStarted, onVideo);
      for (const video2 of context._browser._idToVideo.values()) {
        if (video2.context === context) onVideo(video2.artifact);
      }
      for (const page2 of context.pages()) this._dispatchEvent("page", {
        page: _pageDispatcher.PageDispatcher.from(this, page2)
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.Page, (page2) => {
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        });
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.PageError, (error, page2) => {
        this._dispatchEvent("pageError", {
          error: (0, _errors2.serializeError)(error),
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        });
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.Console, (message) => {
        const page2 = message.page();
        if (this._shouldDispatchEvent(page2, "console")) {
          const pageDispatcher2 = _pageDispatcher.PageDispatcher.from(this, page2);
          this._dispatchEvent("console", {
            page: pageDispatcher2,
            type: message.type(),
            text: message.text(),
            args: message.args().map((a) => _elementHandlerDispatcher2.ElementHandleDispatcher.fromJSHandle(pageDispatcher2, a)),
            location: message.location()
          });
        }
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.Dialog, (dialog2) => {
        if (this._shouldDispatchEvent(dialog2.page(), "dialog")) this._dispatchEvent("dialog", {
          dialog: new _dialogDispatcher.DialogDispatcher(this, dialog2)
        });
        else dialog2.close().catch(() => {
        });
      });
      if (context._browser.options.name === "chromium") {
        for (const page2 of context.backgroundPages()) this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.BackgroundPage, (page2) => this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page2)
        }));
        for (const serviceWorker of context.serviceWorkers()) this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.ServiceWorker, (serviceWorker) => this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        }));
      }
      this.addObjectListener(_browserContext2.BrowserContext.Events.Request, (request2) => {
        var _request$frame;
        const redirectFromDispatcher = request2.redirectedFrom() && (0, _dispatcher2.existingDispatcher)(request2.redirectedFrom());
        if (!redirectFromDispatcher && !this._shouldDispatchNetworkEvent(request2, "request") && !request2.isNavigationRequest()) return;
        const requestDispatcher = _networkDispatchers2.RequestDispatcher.from(this, request2);
        this._dispatchEvent("request", {
          request: requestDispatcher,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame = request2.frame()) === null || _request$frame === void 0 ? void 0 : _request$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.Response, (response) => {
        var _response$frame;
        const requestDispatcher = (0, _dispatcher2.existingDispatcher)(response.request());
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(response.request(), "response")) return;
        this._dispatchEvent("response", {
          response: _networkDispatchers2.ResponseDispatcher.from(this, response),
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_response$frame = response.frame()) === null || _response$frame === void 0 ? void 0 : _response$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.RequestFailed, (request2) => {
        var _request$frame2;
        const requestDispatcher = (0, _dispatcher2.existingDispatcher)(request2);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request2, "requestFailed")) return;
        this._dispatchEvent("requestFailed", {
          request: _networkDispatchers2.RequestDispatcher.from(this, request2),
          failureText: request2._failureText || void 0,
          responseEndTiming: request2._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame2 = request2.frame()) === null || _request$frame2 === void 0 ? void 0 : _request$frame2._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext2.BrowserContext.Events.RequestFinished, ({
        request: request2,
        response
      }) => {
        var _request$frame3;
        const requestDispatcher = (0, _dispatcher2.existingDispatcher)(request2);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request2, "requestFinished")) return;
        this._dispatchEvent("requestFinished", {
          request: _networkDispatchers2.RequestDispatcher.from(this, request2),
          response: _networkDispatchers2.ResponseDispatcher.fromNullable(this, response),
          responseEndTiming: request2._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame3 = request2.frame()) === null || _request$frame3 === void 0 ? void 0 : _request$frame3._page.initializedOrUndefined())
        });
      });
    }
    _shouldDispatchNetworkEvent(request2, event) {
      var _request$frame4;
      return this._shouldDispatchEvent((_request$frame4 = request2.frame()) === null || _request$frame4 === void 0 || (_request$frame4 = _request$frame4._page) === null || _request$frame4 === void 0 ? void 0 : _request$frame4.initializedOrUndefined(), event);
    }
    _shouldDispatchEvent(page2, event) {
      if (this._subscriptions.has(event)) return true;
      const pageDispatcher2 = page2 ? (0, _dispatcher2.existingDispatcher)(page2) : void 0;
      if (pageDispatcher2 !== null && pageDispatcher2 !== void 0 && pageDispatcher2._subscriptions.has(event)) return true;
      return false;
    }
    async createTempFiles(params) {
      const dir = this._context._browser.options.artifactsDir;
      const tmpDir = path2.join(dir, "upload-" + (0, _utils2.createGuid)());
      const tempDirWithRootName = params.rootDirName ? path2.join(tmpDir, path2.basename(params.rootDirName)) : tmpDir;
      await fs2.promises.mkdir(tempDirWithRootName, {
        recursive: true
      });
      this._context._tempDirs.push(tmpDir);
      return {
        rootDir: params.rootDirName ? new _writableStreamDispatcher.WritableStreamDispatcher(this, tempDirWithRootName) : void 0,
        writableStreams: await Promise.all(params.items.map(async (item) => {
          await fs2.promises.mkdir(path2.dirname(path2.join(tempDirWithRootName, item.name)), {
            recursive: true
          });
          const file = fs2.createWriteStream(path2.join(tempDirWithRootName, item.name));
          return new _writableStreamDispatcher.WritableStreamDispatcher(this, file, item.lastModifiedMs);
        }))
      };
    }
    async setDefaultNavigationTimeoutNoReply(params) {
      this._context.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params) {
      this._context.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params) {
      await this._context.exposeBinding(params.name, !!params.needsHandle, (source2, ...args) => {
        if (this._disposed) return;
        const pageDispatcher2 = _pageDispatcher.PageDispatcher.from(this, source2.page);
        const binding = new _pageDispatcher.BindingCallDispatcher(pageDispatcher2, params.name, !!params.needsHandle, source2, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async newPage(params, metadata) {
      return {
        page: _pageDispatcher.PageDispatcher.from(this, await this._context.newPage(metadata))
      };
    }
    async cookies(params) {
      return {
        cookies: await this._context.cookies(params.urls)
      };
    }
    async addCookies(params) {
      await this._context.addCookies(params.cookies);
    }
    async clearCookies(params) {
      const nameRe = params.nameRegexSource !== void 0 && params.nameRegexFlags !== void 0 ? new RegExp(params.nameRegexSource, params.nameRegexFlags) : void 0;
      const domainRe = params.domainRegexSource !== void 0 && params.domainRegexFlags !== void 0 ? new RegExp(params.domainRegexSource, params.domainRegexFlags) : void 0;
      const pathRe = params.pathRegexSource !== void 0 && params.pathRegexFlags !== void 0 ? new RegExp(params.pathRegexSource, params.pathRegexFlags) : void 0;
      await this._context.clearCookies({
        name: nameRe || params.name,
        domain: domainRe || params.domain,
        path: pathRe || params.path
      });
    }
    async grantPermissions(params) {
      await this._context.grantPermissions(params.permissions, params.origin);
    }
    async clearPermissions() {
      await this._context.clearPermissions();
    }
    async setGeolocation(params) {
      await this._context.setGeolocation(params.geolocation);
    }
    async setExtraHTTPHeaders(params) {
      await this._context.setExtraHTTPHeaders(params.headers);
    }
    async setOffline(params) {
      await this._context.setOffline(params.offline);
    }
    async setHTTPCredentials(params) {
      await this._context.setHTTPCredentials(params.httpCredentials);
    }
    async addInitScript(params) {
      await this._context.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params) {
      if (!params.patterns.length) {
        await this._context.setRequestInterceptor(void 0);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._context.setRequestInterceptor((route, request2) => {
        const matchesSome = urlMatchers.some((urlMatch2) => (0, _utils2.urlMatches)(this._context._options.baseURL, request2.url(), urlMatch2));
        if (!matchesSome) return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers2.RouteDispatcher.from(_networkDispatchers2.RequestDispatcher.from(this, request2), route)
        });
        return true;
      });
    }
    async setWebSocketInterceptionPatterns(params, metadata) {
      this._webSocketInterceptionPatterns = params.patterns;
      if (params.patterns.length) await _webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this, this._context);
    }
    async storageState(params, metadata) {
      return await this._context.storageState();
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._context.close(params);
    }
    async enableRecorder(params) {
      if (params.codegenMode === "trace-events") {
        await this._context.tracing.start({
          name: "trace",
          snapshots: true,
          screenshots: true,
          live: true
        });
        await _recorder.Recorder.show("trace-events", this._context, _recorderInTraceViewer.RecorderInTraceViewer.factory(this._context), params);
      } else {
        await _recorder.Recorder.show("actions", this._context, _recorderApp.RecorderApp.factory(this._context), params);
      }
    }
    async pause(params, metadata) {
    }
    async newCDPSession(params) {
      if (!this._object._browser.options.isChromium) throw new Error(`CDP session is only available in Chromium`);
      if (!params.page && !params.frame || params.page && params.frame) throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
      const crBrowserContext = this._object;
      return {
        session: new _cdpSessionDispatcher2.CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page : params.frame)._object))
      };
    }
    async harStart(params) {
      const harId = await this._context._harStart(params.page ? params.page._object : null, params.options);
      return {
        harId
      };
    }
    async harExport(params) {
      const artifact2 = await this._context._harExport(params.harId);
      if (!artifact2) throw new Error("No HAR artifact. Ensure record.harPath is set.");
      return {
        artifact: _artifactDispatcher2.ArtifactDispatcher.from(this, artifact2)
      };
    }
    async clockFastForward(params, metadata) {
      var _ref, _params$ticksString;
      await this._context.clock.fastForward((_ref = (_params$ticksString = params.ticksString) !== null && _params$ticksString !== void 0 ? _params$ticksString : params.ticksNumber) !== null && _ref !== void 0 ? _ref : 0);
    }
    async clockInstall(params, metadata) {
      var _ref2, _params$timeString;
      await this._context.clock.install((_ref2 = (_params$timeString = params.timeString) !== null && _params$timeString !== void 0 ? _params$timeString : params.timeNumber) !== null && _ref2 !== void 0 ? _ref2 : void 0);
    }
    async clockPauseAt(params, metadata) {
      var _ref3, _params$timeString2;
      await this._context.clock.pauseAt((_ref3 = (_params$timeString2 = params.timeString) !== null && _params$timeString2 !== void 0 ? _params$timeString2 : params.timeNumber) !== null && _ref3 !== void 0 ? _ref3 : 0);
    }
    async clockResume(params, metadata) {
      await this._context.clock.resume();
    }
    async clockRunFor(params, metadata) {
      var _ref4, _params$ticksString2;
      await this._context.clock.runFor((_ref4 = (_params$ticksString2 = params.ticksString) !== null && _params$ticksString2 !== void 0 ? _params$ticksString2 : params.ticksNumber) !== null && _ref4 !== void 0 ? _ref4 : 0);
    }
    async clockSetFixedTime(params, metadata) {
      var _ref5, _params$timeString3;
      await this._context.clock.setFixedTime((_ref5 = (_params$timeString3 = params.timeString) !== null && _params$timeString3 !== void 0 ? _params$timeString3 : params.timeNumber) !== null && _ref5 !== void 0 ? _ref5 : 0);
    }
    async clockSetSystemTime(params, metadata) {
      var _ref6, _params$timeString4;
      await this._context.clock.setSystemTime((_ref6 = (_params$timeString4 = params.timeString) !== null && _params$timeString4 !== void 0 ? _params$timeString4 : params.timeNumber) !== null && _ref6 !== void 0 ? _ref6 : 0);
    }
    async updateSubscription(params) {
      if (params.enabled) this._subscriptions.add(params.event);
      else this._subscriptions.delete(params.event);
    }
    _onDispose() {
      if (!this._context.isClosingOrClosed()) this._context.setRequestInterceptor(void 0).catch(() => {
      });
    }
  }
  browserContextDispatcher.BrowserContextDispatcher = BrowserContextDispatcher;
  return browserContextDispatcher;
}
Object.defineProperty(androidDispatcher, "__esModule", {
  value: true
});
androidDispatcher.AndroidSocketDispatcher = androidDispatcher.AndroidDispatcher = androidDispatcher.AndroidDeviceDispatcher = void 0;
var _dispatcher$8 = dispatcher;
var _android$2 = requireAndroid$1();
var _browserContextDispatcher$3 = requireBrowserContextDispatcher();
class AndroidDispatcher extends _dispatcher$8.Dispatcher {
  constructor(scope, android2) {
    super(scope, android2, "Android", {});
    this._type_Android = true;
  }
  async devices(params) {
    const devices2 = await this._object.devices(params);
    return {
      devices: devices2.map((d) => AndroidDeviceDispatcher.from(this, d))
    };
  }
  async setDefaultTimeoutNoReply(params) {
    this._object.setDefaultTimeout(params.timeout);
  }
}
androidDispatcher.AndroidDispatcher = AndroidDispatcher;
class AndroidDeviceDispatcher extends _dispatcher$8.Dispatcher {
  static from(scope, device) {
    const result2 = (0, _dispatcher$8.existingDispatcher)(device);
    return result2 || new AndroidDeviceDispatcher(scope, device);
  }
  constructor(scope, device) {
    super(scope, device, "AndroidDevice", {
      model: device.model,
      serial: device.serial
    });
    this._type_EventTarget = true;
    this._type_AndroidDevice = true;
    for (const webView of device.webViews()) this._dispatchEvent("webViewAdded", {
      webView
    });
    this.addObjectListener(_android$2.AndroidDevice.Events.WebViewAdded, (webView) => this._dispatchEvent("webViewAdded", {
      webView
    }));
    this.addObjectListener(_android$2.AndroidDevice.Events.WebViewRemoved, (socketName) => this._dispatchEvent("webViewRemoved", {
      socketName
    }));
    this.addObjectListener(_android$2.AndroidDevice.Events.Close, (socketName) => this._dispatchEvent("close"));
  }
  async wait(params) {
    await this._object.send("wait", params);
  }
  async fill(params) {
    await this._object.send("click", {
      selector: params.selector
    });
    await this._object.send("fill", params);
  }
  async tap(params) {
    await this._object.send("click", params);
  }
  async drag(params) {
    await this._object.send("drag", params);
  }
  async fling(params) {
    await this._object.send("fling", params);
  }
  async longTap(params) {
    await this._object.send("longClick", params);
  }
  async pinchClose(params) {
    await this._object.send("pinchClose", params);
  }
  async pinchOpen(params) {
    await this._object.send("pinchOpen", params);
  }
  async scroll(params) {
    await this._object.send("scroll", params);
  }
  async swipe(params) {
    await this._object.send("swipe", params);
  }
  async info(params) {
    return {
      info: await this._object.send("info", params)
    };
  }
  async inputType(params) {
    const text = params.text;
    const keyCodes = [];
    for (let i = 0; i < text.length; ++i) {
      const code = keyMap.get(text[i].toUpperCase());
      if (code === void 0) throw new Error("No mapping for " + text[i] + " found");
      keyCodes.push(code);
    }
    await Promise.all(keyCodes.map((keyCode) => this._object.send("inputPress", {
      keyCode
    })));
  }
  async inputPress(params) {
    if (!keyMap.has(params.key)) throw new Error("Unknown key: " + params.key);
    await this._object.send("inputPress", {
      keyCode: keyMap.get(params.key)
    });
  }
  async inputTap(params) {
    await this._object.send("inputClick", params);
  }
  async inputSwipe(params) {
    await this._object.send("inputSwipe", params);
  }
  async inputDrag(params) {
    await this._object.send("inputDrag", params);
  }
  async screenshot(params) {
    return {
      binary: await this._object.screenshot()
    };
  }
  async shell(params) {
    return {
      result: await this._object.shell(params.command)
    };
  }
  async open(params, metadata) {
    const socket = await this._object.open(params.command);
    return {
      socket: new AndroidSocketDispatcher(this, socket)
    };
  }
  async installApk(params) {
    await this._object.installApk(params.file, {
      args: params.args
    });
  }
  async push(params) {
    await this._object.push(params.file, params.path, params.mode);
  }
  async launchBrowser(params) {
    const context = await this._object.launchBrowser(params.pkg, params);
    return {
      context: new _browserContextDispatcher$3.BrowserContextDispatcher(this, context)
    };
  }
  async close(params) {
    await this._object.close();
  }
  async setDefaultTimeoutNoReply(params) {
    this._object.setDefaultTimeout(params.timeout);
  }
  async connectToWebView(params) {
    return {
      context: new _browserContextDispatcher$3.BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName))
    };
  }
}
androidDispatcher.AndroidDeviceDispatcher = AndroidDeviceDispatcher;
class AndroidSocketDispatcher extends _dispatcher$8.Dispatcher {
  constructor(scope, socket) {
    super(scope, socket, "AndroidSocket", {});
    this._type_AndroidSocket = true;
    this.addObjectListener("data", (data) => this._dispatchEvent("data", {
      data
    }));
    this.addObjectListener("close", () => {
      this._dispatchEvent("close");
      this._dispose();
    });
  }
  async write(params, metadata) {
    await this._object.write(params.data);
  }
  async close(params, metadata) {
    this._object.close();
  }
}
androidDispatcher.AndroidSocketDispatcher = AndroidSocketDispatcher;
const keyMap = /* @__PURE__ */ new Map([["Unknown", 0], ["SoftLeft", 1], ["SoftRight", 2], ["Home", 3], ["Back", 4], ["Call", 5], ["EndCall", 6], ["0", 7], ["1", 8], ["2", 9], ["3", 10], ["4", 11], ["5", 12], ["6", 13], ["7", 14], ["8", 15], ["9", 16], ["Star", 17], ["*", 17], ["Pound", 18], ["#", 18], ["DialUp", 19], ["DialDown", 20], ["DialLeft", 21], ["DialRight", 22], ["DialCenter", 23], ["VolumeUp", 24], ["VolumeDown", 25], ["Power", 26], ["Camera", 27], ["Clear", 28], ["A", 29], ["B", 30], ["C", 31], ["D", 32], ["E", 33], ["F", 34], ["G", 35], ["H", 36], ["I", 37], ["J", 38], ["K", 39], ["L", 40], ["M", 41], ["N", 42], ["O", 43], ["P", 44], ["Q", 45], ["R", 46], ["S", 47], ["T", 48], ["U", 49], ["V", 50], ["W", 51], ["X", 52], ["Y", 53], ["Z", 54], ["Comma", 55], [",", 55], ["Period", 56], [".", 56], ["AltLeft", 57], ["AltRight", 58], ["ShiftLeft", 59], ["ShiftRight", 60], ["Tab", 61], ["	", 61], ["Space", 62], [" ", 62], ["Sym", 63], ["Explorer", 64], ["Envelop", 65], ["Enter", 66], ["Del", 67], ["Grave", 68], ["Minus", 69], ["-", 69], ["Equals", 70], ["=", 70], ["LeftBracket", 71], ["(", 71], ["RightBracket", 72], [")", 72], ["Backslash", 73], ["\\", 73], ["Semicolon", 74], [";", 74], ["Apostrophe", 75], ["`", 75], ["Slash", 76], ["/", 76], ["At", 77], ["@", 77], ["Num", 78], ["HeadsetHook", 79], ["Focus", 80], ["Plus", 81], ["Menu", 82], ["Notification", 83], ["Search", 84], ["ChannelUp", 166], ["ChannelDown", 167], ["AppSwitch", 187], ["Assist", 219], ["Cut", 277], ["Copy", 278], ["Paste", 279]]);
var browserTypeDispatcher = {};
var browserDispatcher = {};
Object.defineProperty(browserDispatcher, "__esModule", {
  value: true
});
browserDispatcher.ConnectedBrowserDispatcher = browserDispatcher.BrowserDispatcher = void 0;
var _browser$1 = requireBrowser$1();
var _browserContextDispatcher$2 = requireBrowserContextDispatcher();
var _cdpSessionDispatcher = cdpSessionDispatcher;
var _dispatcher$7 = dispatcher;
var _browserContext$1 = requireBrowserContext$1();
var _selectors = selectors$2;
var _artifactDispatcher = artifactDispatcher;
class BrowserDispatcher extends _dispatcher$7.Dispatcher {
  constructor(scope, browser2) {
    super(scope, browser2, "Browser", {
      version: browser2.version(),
      name: browser2.options.name
    });
    this._type_Browser = true;
    this.addObjectListener(_browser$1.Browser.Events.Disconnected, () => this._didClose());
  }
  _didClose() {
    this._dispatchEvent("close");
    this._dispose();
  }
  async newContext(params, metadata) {
    const context = await this._object.newContext(metadata, params);
    return {
      context: new _browserContextDispatcher$2.BrowserContextDispatcher(this, context)
    };
  }
  async newContextForReuse(params, metadata) {
    return await newContextForReuse(this._object, this, params, null, metadata);
  }
  async stopPendingOperations(params, metadata) {
    await this._object.stopPendingOperations(params.reason);
  }
  async close(params, metadata) {
    metadata.potentiallyClosesScope = true;
    await this._object.close(params);
  }
  async killForTests(_, metadata) {
    metadata.potentiallyClosesScope = true;
    await this._object.killForTests();
  }
  async defaultUserAgentForTest() {
    return {
      userAgent: this._object.userAgent()
    };
  }
  async newBrowserCDPSession() {
    if (!this._object.options.isChromium) throw new Error(`CDP session is only available in Chromium`);
    const crBrowser2 = this._object;
    return {
      session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser2.newBrowserCDPSession())
    };
  }
  async startTracing(params) {
    if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
    const crBrowser2 = this._object;
    await crBrowser2.startTracing(params.page ? params.page._object : void 0, params);
  }
  async stopTracing() {
    if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
    const crBrowser2 = this._object;
    return {
      artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser2.stopTracing())
    };
  }
}
browserDispatcher.BrowserDispatcher = BrowserDispatcher;
class ConnectedBrowserDispatcher extends _dispatcher$7.Dispatcher {
  constructor(scope, browser2) {
    super(scope, browser2, "Browser", {
      version: browser2.version(),
      name: browser2.options.name
    });
    this._type_Browser = true;
    this._contexts = /* @__PURE__ */ new Set();
    this.selectors = void 0;
    this.selectors = new _selectors.Selectors();
  }
  async newContext(params, metadata) {
    if (params.recordVideo) params.recordVideo.dir = this._object.options.artifactsDir;
    const context = await this._object.newContext(metadata, params);
    this._contexts.add(context);
    context.setSelectors(this.selectors);
    context.on(_browserContext$1.BrowserContext.Events.Close, () => this._contexts.delete(context));
    return {
      context: new _browserContextDispatcher$2.BrowserContextDispatcher(this, context)
    };
  }
  async newContextForReuse(params, metadata) {
    return await newContextForReuse(this._object, this, params, this.selectors, metadata);
  }
  async stopPendingOperations(params, metadata) {
    await this._object.stopPendingOperations(params.reason);
  }
  async close() {
  }
  async killForTests() {
  }
  async defaultUserAgentForTest() {
    throw new Error("Client should not send us Browser.defaultUserAgentForTest");
  }
  async newBrowserCDPSession() {
    if (!this._object.options.isChromium) throw new Error(`CDP session is only available in Chromium`);
    const crBrowser2 = this._object;
    return {
      session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser2.newBrowserCDPSession())
    };
  }
  async startTracing(params) {
    if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
    const crBrowser2 = this._object;
    await crBrowser2.startTracing(params.page ? params.page._object : void 0, params);
  }
  async stopTracing() {
    if (!this._object.options.isChromium) throw new Error(`Tracing is only available in Chromium`);
    const crBrowser2 = this._object;
    return {
      artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser2.stopTracing())
    };
  }
  async cleanupContexts() {
    await Promise.all(Array.from(this._contexts).map((context) => context.close({
      reason: "Global context cleanup (connection terminated)"
    })));
  }
}
browserDispatcher.ConnectedBrowserDispatcher = ConnectedBrowserDispatcher;
async function newContextForReuse(browser2, scope, params, selectors2, metadata) {
  const {
    context,
    needsReset
  } = await browser2.newContextForReuse(params, metadata);
  if (needsReset) {
    const oldContextDispatcher = (0, _dispatcher$7.existingDispatcher)(context);
    if (oldContextDispatcher) oldContextDispatcher._dispose();
    await context.resetForReuse(metadata, params);
  }
  if (selectors2) context.setSelectors(selectors2);
  const contextDispatcher = new _browserContextDispatcher$2.BrowserContextDispatcher(scope, context);
  return {
    context: contextDispatcher
  };
}
Object.defineProperty(browserTypeDispatcher, "__esModule", {
  value: true
});
browserTypeDispatcher.BrowserTypeDispatcher = void 0;
var _browserDispatcher$1 = browserDispatcher;
var _dispatcher$6 = dispatcher;
var _browserContextDispatcher$1 = requireBrowserContextDispatcher();
class BrowserTypeDispatcher extends _dispatcher$6.Dispatcher {
  constructor(scope, browserType2) {
    super(scope, browserType2, "BrowserType", {
      executablePath: browserType2.executablePath(),
      name: browserType2.name()
    });
    this._type_BrowserType = true;
  }
  async launch(params, metadata) {
    const browser2 = await this._object.launch(metadata, params);
    return {
      browser: new _browserDispatcher$1.BrowserDispatcher(this, browser2)
    };
  }
  async launchPersistentContext(params, metadata) {
    const browserContext2 = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
    return {
      context: new _browserContextDispatcher$1.BrowserContextDispatcher(this, browserContext2)
    };
  }
  async connectOverCDP(params, metadata) {
    const browser2 = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);
    const browserDispatcher2 = new _browserDispatcher$1.BrowserDispatcher(this, browser2);
    return {
      browser: browserDispatcher2,
      defaultContext: browser2._defaultContext ? new _browserContextDispatcher$1.BrowserContextDispatcher(browserDispatcher2, browser2._defaultContext) : void 0
    };
  }
}
browserTypeDispatcher.BrowserTypeDispatcher = BrowserTypeDispatcher;
var electronDispatcher = {};
Object.defineProperty(electronDispatcher, "__esModule", {
  value: true
});
electronDispatcher.ElectronDispatcher = electronDispatcher.ElectronApplicationDispatcher = void 0;
var _dispatcher$5 = dispatcher;
var _electron$1 = requireElectron();
var _browserContextDispatcher = requireBrowserContextDispatcher();
var _jsHandleDispatcher = requireJsHandleDispatcher();
var _elementHandlerDispatcher = requireElementHandlerDispatcher();
class ElectronDispatcher extends _dispatcher$5.Dispatcher {
  constructor(scope, electron2) {
    super(scope, electron2, "Electron", {});
    this._type_Electron = true;
  }
  async launch(params) {
    const electronApplication = await this._object.launch(params);
    return {
      electronApplication: new ElectronApplicationDispatcher(this, electronApplication)
    };
  }
}
electronDispatcher.ElectronDispatcher = ElectronDispatcher;
class ElectronApplicationDispatcher extends _dispatcher$5.Dispatcher {
  constructor(scope, electronApplication) {
    super(scope, electronApplication, "ElectronApplication", {
      context: new _browserContextDispatcher.BrowserContextDispatcher(scope, electronApplication.context())
    });
    this._type_EventTarget = true;
    this._type_ElectronApplication = true;
    this._subscriptions = /* @__PURE__ */ new Set();
    this.addObjectListener(_electron$1.ElectronApplication.Events.Close, () => {
      this._dispatchEvent("close");
      this._dispose();
    });
    this.addObjectListener(_electron$1.ElectronApplication.Events.Console, (message) => {
      if (!this._subscriptions.has("console")) return;
      this._dispatchEvent("console", {
        type: message.type(),
        text: message.text(),
        args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, a)),
        location: message.location()
      });
    });
  }
  async browserWindow(params) {
    const handle = await this._object.browserWindow(params.page.page());
    return {
      handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, handle)
    };
  }
  async evaluateExpression(params) {
    const handle = await this._object._nodeElectronHandlePromise;
    return {
      value: (0, _jsHandleDispatcher.serializeResult)(await handle.evaluateExpression(params.expression, {
        isFunction: params.isFunction
      }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
    };
  }
  async evaluateExpressionHandle(params) {
    const handle = await this._object._nodeElectronHandlePromise;
    const result2 = await handle.evaluateExpressionHandle(params.expression, {
      isFunction: params.isFunction
    }, (0, _jsHandleDispatcher.parseArgument)(params.arg));
    return {
      handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, result2)
    };
  }
  async updateSubscription(params) {
    if (params.enabled) this._subscriptions.add(params.event);
    else this._subscriptions.delete(params.event);
  }
  async close() {
    await this._object.close();
  }
}
electronDispatcher.ElectronApplicationDispatcher = ElectronApplicationDispatcher;
var localUtilsDispatcher = {};
var jsonPipeDispatcher = {};
Object.defineProperty(jsonPipeDispatcher, "__esModule", {
  value: true
});
jsonPipeDispatcher.JsonPipeDispatcher = void 0;
var _dispatcher$4 = dispatcher;
var _utils$e = requireUtils();
class JsonPipeDispatcher extends _dispatcher$4.Dispatcher {
  constructor(scope) {
    super(scope, {
      guid: "jsonPipe@" + (0, _utils$e.createGuid)()
    }, "JsonPipe", {});
    this._type_JsonPipe = true;
  }
  async send(params) {
    this.emit("message", params.message);
  }
  async close() {
    this.emit("close");
    if (!this._disposed) {
      this._dispatchEvent("closed", {});
      this._dispose();
    }
  }
  dispatch(message) {
    if (!this._disposed) this._dispatchEvent("message", {
      message
    });
  }
  wasClosed(reason) {
    if (!this._disposed) {
      this._dispatchEvent("closed", {
        reason
      });
      this._dispose();
    }
  }
  dispose() {
    this._dispose();
  }
}
jsonPipeDispatcher.JsonPipeDispatcher = JsonPipeDispatcher;
var socksInterceptor = {};
Object.defineProperty(socksInterceptor, "__esModule", {
  value: true
});
socksInterceptor.SocksInterceptor = void 0;
var socks = _interopRequireWildcard$1(socksProxy);
var _events$3 = _interopRequireDefault$2(require$$0$1);
var _validator$1 = validator;
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function _getRequireWildcardCache$1(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache$1 = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard$1(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache$1(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class SocksInterceptor {
  constructor(transport2, pattern, redirectPortForTest) {
    this._handler = void 0;
    this._channel = void 0;
    this._socksSupportObjectGuid = void 0;
    this._ids = /* @__PURE__ */ new Set();
    this._handler = new socks.SocksProxyHandler(pattern, redirectPortForTest);
    let lastId = -1;
    this._channel = new Proxy(new _events$3.default(), {
      get: (obj, prop) => {
        if (prop in obj || obj[prop] !== void 0 || typeof prop !== "string") return obj[prop];
        return (params) => {
          try {
            const id = --lastId;
            this._ids.add(id);
            const validator2 = (0, _validator$1.findValidator)("SocksSupport", prop, "Params");
            params = validator2(params, "", {
              tChannelImpl: tChannelForSocks,
              binary: "toBase64"
            });
            transport2.send({
              id,
              guid: this._socksSupportObjectGuid,
              method: prop,
              params,
              metadata: {
                stack: [],
                apiName: "",
                internal: true
              }
            });
          } catch (e) {
          }
        };
      }
    });
    this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload) => this._channel.socksConnected(payload));
    this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload) => this._channel.socksData(payload));
    this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload) => this._channel.socksError(payload));
    this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload) => this._channel.socksFailed(payload));
    this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload) => this._channel.socksEnd(payload));
    this._channel.on("socksRequested", (payload) => this._handler.socketRequested(payload));
    this._channel.on("socksClosed", (payload) => this._handler.socketClosed(payload));
    this._channel.on("socksData", (payload) => this._handler.sendSocketData(payload));
  }
  cleanup() {
    this._handler.cleanup();
  }
  interceptMessage(message) {
    if (this._ids.has(message.id)) {
      this._ids.delete(message.id);
      return true;
    }
    if (message.method === "__create__" && message.params.type === "SocksSupport") {
      this._socksSupportObjectGuid = message.params.guid;
      return false;
    }
    if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {
      const validator2 = (0, _validator$1.findValidator)("SocksSupport", message.method, "Event");
      const params = validator2(message.params, "", {
        tChannelImpl: tChannelForSocks,
        binary: "fromBase64"
      });
      this._channel.emit(message.method, params);
      return true;
    }
    return false;
  }
}
socksInterceptor.SocksInterceptor = SocksInterceptor;
function tChannelForSocks(names, arg, path2, context) {
  throw new _validator$1.ValidationError(`${path2}: channels are not expected in SocksSupport`);
}
Object.defineProperty(localUtilsDispatcher, "__esModule", {
  value: true
});
localUtilsDispatcher.LocalUtilsDispatcher = void 0;
localUtilsDispatcher.urlToWSEndpoint = urlToWSEndpoint;
var _fs$1 = _interopRequireDefault$1(require$$0$2);
var _path = _interopRequireDefault$1(require$$1);
var _os = _interopRequireDefault$1(require$$0$3);
var _manualPromise = requireManualPromise();
var _utils$d = requireUtils();
var _dispatcher$3 = dispatcher;
var _zipBundle = zipBundle;
var _zipFile = zipFile;
var _jsonPipeDispatcher = jsonPipeDispatcher;
var _transport = transport;
var _socksInterceptor = socksInterceptor;
var _userAgent = userAgent;
var _progress = progress;
var _network = requireNetwork$2();
var _instrumentation$2 = instrumentation;
var _deviceDescriptors = deviceDescriptors;
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
class LocalUtilsDispatcher extends _dispatcher$3.Dispatcher {
  constructor(scope, playwright2) {
    const localUtils2 = new _instrumentation$2.SdkObject(playwright2, "localUtils", "localUtils");
    const deviceDescriptors2 = Object.entries(_deviceDescriptors.deviceDescriptors).map(([name2, descriptor]) => ({
      name: name2,
      descriptor
    }));
    super(scope, localUtils2, "LocalUtils", {
      deviceDescriptors: deviceDescriptors2
    });
    this._type_LocalUtils = void 0;
    this._harBackends = /* @__PURE__ */ new Map();
    this._stackSessions = /* @__PURE__ */ new Map();
    this._type_LocalUtils = true;
  }
  async zip(params) {
    const promise = new _manualPromise.ManualPromise();
    const zipFile2 = new _zipBundle.yazl.ZipFile();
    zipFile2.on("error", (error) => promise.reject(error));
    const addFile = (file, name2) => {
      try {
        if (_fs$1.default.statSync(file).isFile()) zipFile2.addFile(file, name2);
      } catch (e) {
      }
    };
    for (const entry of params.entries) addFile(entry.value, entry.name);
    const stackSession = params.stacksId ? this._stackSessions.get(params.stacksId) : void 0;
    if (stackSession !== null && stackSession !== void 0 && stackSession.callStacks.length) {
      await stackSession.writer;
      if (process.env.PW_LIVE_TRACE_STACKS) {
        zipFile2.addFile(stackSession.file, "trace.stacks");
      } else {
        const buffer = Buffer.from(JSON.stringify((0, _utils$d.serializeClientSideCallMetadata)(stackSession.callStacks)));
        zipFile2.addBuffer(buffer, "trace.stacks");
      }
    }
    if (params.includeSources) {
      const sourceFiles = /* @__PURE__ */ new Set();
      for (const {
        stack
      } of (stackSession === null || stackSession === void 0 ? void 0 : stackSession.callStacks) || []) {
        if (!stack) continue;
        for (const {
          file
        } of stack) sourceFiles.add(file);
      }
      for (const sourceFile of sourceFiles) addFile(sourceFile, "resources/src@" + (0, _utils$d.calculateSha1)(sourceFile) + ".txt");
    }
    if (params.mode === "write") {
      await _fs$1.default.promises.mkdir(_path.default.dirname(params.zipFile), {
        recursive: true
      });
      zipFile2.end(void 0, () => {
        zipFile2.outputStream.pipe(_fs$1.default.createWriteStream(params.zipFile)).on("close", () => promise.resolve()).on("error", (error) => promise.reject(error));
      });
      await promise;
      await this._deleteStackSession(params.stacksId);
      return;
    }
    const tempFile = params.zipFile + ".tmp";
    await _fs$1.default.promises.rename(params.zipFile, tempFile);
    _zipBundle.yauzl.open(tempFile, (err, inZipFile) => {
      if (err) {
        promise.reject(err);
        return;
      }
      (0, _utils$d.assert)(inZipFile);
      let pendingEntries = inZipFile.entryCount;
      inZipFile.on("entry", (entry) => {
        inZipFile.openReadStream(entry, (err2, readStream) => {
          if (err2) {
            promise.reject(err2);
            return;
          }
          zipFile2.addReadStream(readStream, entry.fileName);
          if (--pendingEntries === 0) {
            zipFile2.end(void 0, () => {
              zipFile2.outputStream.pipe(_fs$1.default.createWriteStream(params.zipFile)).on("close", () => {
                _fs$1.default.promises.unlink(tempFile).then(() => {
                  promise.resolve();
                }).catch((error) => promise.reject(error));
              });
            });
          }
        });
      });
    });
    await promise;
    await this._deleteStackSession(params.stacksId);
  }
  async harOpen(params, metadata) {
    let harBackend;
    if (params.file.endsWith(".zip")) {
      const zipFile2 = new _zipFile.ZipFile(params.file);
      const entryNames = await zipFile2.entries();
      const harEntryName = entryNames.find((e) => e.endsWith(".har"));
      if (!harEntryName) return {
        error: "Specified archive does not have a .har file"
      };
      const har = await zipFile2.read(harEntryName);
      const harFile = JSON.parse(har.toString());
      harBackend = new HarBackend(harFile, null, zipFile2);
    } else {
      const harFile = JSON.parse(await _fs$1.default.promises.readFile(params.file, "utf-8"));
      harBackend = new HarBackend(harFile, _path.default.dirname(params.file), null);
    }
    this._harBackends.set(harBackend.id, harBackend);
    return {
      harId: harBackend.id
    };
  }
  async harLookup(params, metadata) {
    const harBackend = this._harBackends.get(params.harId);
    if (!harBackend) return {
      action: "error",
      message: `Internal error: har was not opened`
    };
    return await harBackend.lookup(params.url, params.method, params.headers, params.postData, params.isNavigationRequest);
  }
  async harClose(params, metadata) {
    const harBackend = this._harBackends.get(params.harId);
    if (harBackend) {
      this._harBackends.delete(harBackend.id);
      harBackend.dispose();
    }
  }
  async harUnzip(params, metadata) {
    const dir = _path.default.dirname(params.zipFile);
    const zipFile2 = new _zipFile.ZipFile(params.zipFile);
    for (const entry of await zipFile2.entries()) {
      const buffer = await zipFile2.read(entry);
      if (entry === "har.har") await _fs$1.default.promises.writeFile(params.harFile, buffer);
      else await _fs$1.default.promises.writeFile(_path.default.join(dir, entry), buffer);
    }
    zipFile2.close();
    await _fs$1.default.promises.unlink(params.zipFile);
  }
  async connect(params, metadata) {
    const controller = new _progress.ProgressController(metadata, this._object);
    controller.setLogName("browser");
    return await controller.run(async (progress2) => {
      var _params$exposeNetwork;
      const wsHeaders = {
        "User-Agent": (0, _userAgent.getUserAgent)(),
        "x-playwright-proxy": (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== void 0 ? _params$exposeNetwork : "",
        ...params.headers
      };
      const wsEndpoint = await urlToWSEndpoint(progress2, params.wsEndpoint);
      const transport2 = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, wsHeaders, true, "x-playwright-debug-log");
      const socksInterceptor2 = new _socksInterceptor.SocksInterceptor(transport2, params.exposeNetwork, params.socksProxyRedirectPortForTest);
      const pipe = new _jsonPipeDispatcher.JsonPipeDispatcher(this);
      transport2.onmessage = (json) => {
        if (socksInterceptor2.interceptMessage(json)) return;
        const cb = () => {
          try {
            pipe.dispatch(json);
          } catch (e) {
            transport2.close();
          }
        };
        if (params.slowMo) setTimeout(cb, params.slowMo);
        else cb();
      };
      pipe.on("message", (message) => {
        transport2.send(message);
      });
      transport2.onclose = (reason) => {
        socksInterceptor2 === null || socksInterceptor2 === void 0 || socksInterceptor2.cleanup();
        pipe.wasClosed(reason);
      };
      pipe.on("close", () => transport2.close());
      return {
        pipe,
        headers: transport2.headers
      };
    }, params.timeout || 0);
  }
  async tracingStarted(params, metadata) {
    let tmpDir = void 0;
    if (!params.tracesDir) tmpDir = await _fs$1.default.promises.mkdtemp(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
    const traceStacksFile = _path.default.join(params.tracesDir || tmpDir, params.traceName + ".stacks");
    this._stackSessions.set(traceStacksFile, {
      callStacks: [],
      file: traceStacksFile,
      writer: Promise.resolve(),
      tmpDir
    });
    return {
      stacksId: traceStacksFile
    };
  }
  async traceDiscarded(params, metadata) {
    await this._deleteStackSession(params.stacksId);
  }
  async addStackToTracingNoReply(params, metadata) {
    for (const session2 of this._stackSessions.values()) {
      session2.callStacks.push(params.callData);
      if (process.env.PW_LIVE_TRACE_STACKS) {
        session2.writer = session2.writer.then(() => {
          const buffer = Buffer.from(JSON.stringify((0, _utils$d.serializeClientSideCallMetadata)(session2.callStacks)));
          return _fs$1.default.promises.writeFile(session2.file, buffer);
        });
      }
    }
  }
  async _deleteStackSession(stacksId) {
    const session2 = stacksId ? this._stackSessions.get(stacksId) : void 0;
    if (!session2) return;
    await session2.writer;
    if (session2.tmpDir) await (0, _utils$d.removeFolders)([session2.tmpDir]);
    this._stackSessions.delete(stacksId);
  }
}
localUtilsDispatcher.LocalUtilsDispatcher = LocalUtilsDispatcher;
const redirectStatus = [301, 302, 303, 307, 308];
class HarBackend {
  constructor(harFile, baseDir, zipFile2) {
    this.id = (0, _utils$d.createGuid)();
    this._harFile = void 0;
    this._zipFile = void 0;
    this._baseDir = void 0;
    this._harFile = harFile;
    this._baseDir = baseDir;
    this._zipFile = zipFile2;
  }
  async lookup(url, method, headers2, postData, isNavigationRequest) {
    let entry;
    try {
      entry = await this._harFindResponse(url, method, headers2, postData);
    } catch (e) {
      return {
        action: "error",
        message: "HAR error: " + e.message
      };
    }
    if (!entry) return {
      action: "noentry"
    };
    if (entry.request.url !== url && isNavigationRequest) return {
      action: "redirect",
      redirectURL: entry.request.url
    };
    const response = entry.response;
    try {
      const buffer = await this._loadContent(response.content);
      return {
        action: "fulfill",
        status: response.status,
        headers: response.headers,
        body: buffer
      };
    } catch (e) {
      return {
        action: "error",
        message: e.message
      };
    }
  }
  async _loadContent(content) {
    const file = content._file;
    let buffer;
    if (file) {
      if (this._zipFile) buffer = await this._zipFile.read(file);
      else buffer = await _fs$1.default.promises.readFile(_path.default.resolve(this._baseDir, file));
    } else {
      buffer = Buffer.from(content.text || "", content.encoding === "base64" ? "base64" : "utf-8");
    }
    return buffer;
  }
  async _harFindResponse(url, method, headers2, postData) {
    const harLog = this._harFile.log;
    const visited = /* @__PURE__ */ new Set();
    while (true) {
      const entries = [];
      for (const candidate of harLog.entries) {
        if (candidate.request.url !== url || candidate.request.method !== method) continue;
        if (method === "POST" && postData && candidate.request.postData) {
          const buffer = await this._loadContent(candidate.request.postData);
          if (!buffer.equals(postData)) {
            const boundary = multipartBoundary(headers2);
            if (!boundary) continue;
            const candidataBoundary = multipartBoundary(candidate.request.headers);
            if (!candidataBoundary) continue;
            if (postData.toString().replaceAll(boundary, "") !== buffer.toString().replaceAll(candidataBoundary, "")) continue;
          }
        }
        entries.push(candidate);
      }
      if (!entries.length) return;
      let entry = entries[0];
      if (entries.length > 1) {
        const list = [];
        for (const candidate of entries) {
          const matchingHeaders = countMatchingHeaders(candidate.request.headers, headers2);
          list.push({
            candidate,
            matchingHeaders
          });
        }
        list.sort((a, b) => b.matchingHeaders - a.matchingHeaders);
        entry = list[0].candidate;
      }
      if (visited.has(entry)) throw new Error(`Found redirect cycle for ${url}`);
      visited.add(entry);
      const locationHeader = entry.response.headers.find((h) => h.name.toLowerCase() === "location");
      if (redirectStatus.includes(entry.response.status) && locationHeader) {
        const locationURL = new URL(locationHeader.value, url);
        url = locationURL.toString();
        if ((entry.response.status === 301 || entry.response.status === 302) && method === "POST" || entry.response.status === 303 && !["GET", "HEAD"].includes(method)) {
          method = "GET";
        }
        continue;
      }
      return entry;
    }
  }
  dispose() {
    var _this$_zipFile;
    (_this$_zipFile = this._zipFile) === null || _this$_zipFile === void 0 || _this$_zipFile.close();
  }
}
function countMatchingHeaders(harHeaders, headers2) {
  const set = new Set(headers2.map((h) => h.name.toLowerCase() + ":" + h.value));
  let matches = 0;
  for (const h of harHeaders) {
    if (set.has(h.name.toLowerCase() + ":" + h.value)) ++matches;
  }
  return matches;
}
async function urlToWSEndpoint(progress2, endpointURL) {
  var _progress$timeUntilDe;
  if (endpointURL.startsWith("ws")) return endpointURL;
  progress2 === null || progress2 === void 0 || progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
  const fetchUrl = new URL(endpointURL);
  if (!fetchUrl.pathname.endsWith("/")) fetchUrl.pathname += "/";
  fetchUrl.pathname += "json";
  const json = await (0, _network.fetchData)({
    url: fetchUrl.toString(),
    method: "GET",
    timeout: (_progress$timeUntilDe = progress2 === null || progress2 === void 0 ? void 0 : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== void 0 ? _progress$timeUntilDe : 3e4,
    headers: {
      "User-Agent": (0, _userAgent.getUserAgent)()
    }
  }, async (params, response) => {
    return new Error(`Unexpected status ${response.statusCode} when connecting to ${fetchUrl.toString()}.
This does not look like a Playwright server, try connecting via ws://.`);
  });
  progress2 === null || progress2 === void 0 || progress2.throwIfAborted();
  const wsUrl = new URL(endpointURL);
  let wsEndpointPath = JSON.parse(json).wsEndpointPath;
  if (wsEndpointPath.startsWith("/")) wsEndpointPath = wsEndpointPath.substring(1);
  if (!wsUrl.pathname.endsWith("/")) wsUrl.pathname += "/";
  wsUrl.pathname += wsEndpointPath;
  wsUrl.protocol = wsUrl.protocol === "https:" ? "wss:" : "ws:";
  return wsUrl.toString();
}
function multipartBoundary(headers2) {
  const contentType = headers2.find((h) => h.name.toLowerCase() === "content-type");
  if (!(contentType !== null && contentType !== void 0 && contentType.value.includes("multipart/form-data"))) return void 0;
  const boundary = contentType.value.match(/boundary=(\S+)/);
  if (boundary) return boundary[1];
  return void 0;
}
var selectorsDispatcher = {};
Object.defineProperty(selectorsDispatcher, "__esModule", {
  value: true
});
selectorsDispatcher.SelectorsDispatcher = void 0;
var _dispatcher$2 = dispatcher;
class SelectorsDispatcher extends _dispatcher$2.Dispatcher {
  constructor(scope, selectors2) {
    super(scope, selectors2, "Selectors", {});
    this._type_Selectors = true;
  }
  async register(params) {
    await this._object.register(params.name, params.source, params.contentScript);
  }
  async setTestIdAttributeName(params) {
    this._object.setTestIdAttributeName(params.testIdAttributeName);
  }
}
selectorsDispatcher.SelectorsDispatcher = SelectorsDispatcher;
Object.defineProperty(playwrightDispatcher, "__esModule", {
  value: true
});
playwrightDispatcher.PlaywrightDispatcher = void 0;
var _fetch = requireFetch$1();
var _socksProxy$1 = socksProxy;
var _androidDispatcher = androidDispatcher;
var _browserTypeDispatcher = browserTypeDispatcher;
var _dispatcher$1 = dispatcher;
var _electronDispatcher = electronDispatcher;
var _localUtilsDispatcher = localUtilsDispatcher;
var _networkDispatchers = requireNetworkDispatchers();
var _selectorsDispatcher = selectorsDispatcher;
var _browserDispatcher = browserDispatcher;
var _utils$c = requireUtils();
var _eventsHelper = eventsHelper;
class PlaywrightDispatcher extends _dispatcher$1.Dispatcher {
  constructor(scope, playwright2, socksProxy2, preLaunchedBrowser, prelaunchedAndroidDevice) {
    const browserDispatcher2 = preLaunchedBrowser ? new _browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : void 0;
    const android2 = new _androidDispatcher.AndroidDispatcher(scope, playwright2.android);
    const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new _androidDispatcher.AndroidDeviceDispatcher(android2, prelaunchedAndroidDevice) : void 0;
    super(scope, playwright2, "Playwright", {
      chromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.chromium),
      firefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.firefox),
      webkit: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.webkit),
      bidiChromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.bidiChromium),
      bidiFirefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright2.bidiFirefox),
      android: android2,
      electron: new _electronDispatcher.ElectronDispatcher(scope, playwright2.electron),
      utils: playwright2.options.isServer ? void 0 : new _localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright2),
      selectors: new _selectorsDispatcher.SelectorsDispatcher(scope, (browserDispatcher2 === null || browserDispatcher2 === void 0 ? void 0 : browserDispatcher2.selectors) || playwright2.selectors),
      preLaunchedBrowser: browserDispatcher2,
      preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
      socksSupport: socksProxy2 ? new SocksSupportDispatcher(scope, socksProxy2) : void 0
    });
    this._type_Playwright = void 0;
    this._browserDispatcher = void 0;
    this._type_Playwright = true;
    this._browserDispatcher = browserDispatcher2;
  }
  async newRequest(params) {
    const request2 = new _fetch.GlobalAPIRequestContext(this._object, params);
    return {
      request: _networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request2)
    };
  }
  async cleanup() {
    var _this$_browserDispatc;
    await ((_this$_browserDispatc = this._browserDispatcher) === null || _this$_browserDispatc === void 0 ? void 0 : _this$_browserDispatc.cleanupContexts());
  }
}
playwrightDispatcher.PlaywrightDispatcher = PlaywrightDispatcher;
class SocksSupportDispatcher extends _dispatcher$1.Dispatcher {
  constructor(scope, socksProxy2) {
    super(scope, {
      guid: "socksSupport@" + (0, _utils$c.createGuid)()
    }, "SocksSupport", {});
    this._type_SocksSupport = void 0;
    this._socksProxy = void 0;
    this._socksListeners = void 0;
    this._type_SocksSupport = true;
    this._socksProxy = socksProxy2;
    this._socksListeners = [_eventsHelper.eventsHelper.addEventListener(socksProxy2, _socksProxy$1.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy2, _socksProxy$1.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy2, _socksProxy$1.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))];
  }
  async socksConnected(params) {
    var _this$_socksProxy;
    (_this$_socksProxy = this._socksProxy) === null || _this$_socksProxy === void 0 || _this$_socksProxy.socketConnected(params);
  }
  async socksFailed(params) {
    var _this$_socksProxy2;
    (_this$_socksProxy2 = this._socksProxy) === null || _this$_socksProxy2 === void 0 || _this$_socksProxy2.socketFailed(params);
  }
  async socksData(params) {
    var _this$_socksProxy3;
    (_this$_socksProxy3 = this._socksProxy) === null || _this$_socksProxy3 === void 0 || _this$_socksProxy3.sendSocketData(params);
  }
  async socksError(params) {
    var _this$_socksProxy4;
    (_this$_socksProxy4 = this._socksProxy) === null || _this$_socksProxy4 === void 0 || _this$_socksProxy4.sendSocketError(params);
  }
  async socksEnd(params) {
    var _this$_socksProxy5;
    (_this$_socksProxy5 = this._socksProxy) === null || _this$_socksProxy5 === void 0 || _this$_socksProxy5.sendSocketEnd(params);
  }
  _onDispose() {
    _eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
  }
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  Object.defineProperty(exports2, "DispatcherConnection", {
    enumerable: true,
    get: function() {
      return _dispatcher2.DispatcherConnection;
    }
  });
  Object.defineProperty(exports2, "PlaywrightDispatcher", {
    enumerable: true,
    get: function() {
      return _playwrightDispatcher.PlaywrightDispatcher;
    }
  });
  Object.defineProperty(exports2, "Registry", {
    enumerable: true,
    get: function() {
      return _registry2.Registry;
    }
  });
  Object.defineProperty(exports2, "RootDispatcher", {
    enumerable: true,
    get: function() {
      return _dispatcher2.RootDispatcher;
    }
  });
  Object.defineProperty(exports2, "SocksProxy", {
    enumerable: true,
    get: function() {
      return _socksProxy2.SocksProxy;
    }
  });
  Object.defineProperty(exports2, "createPlaywright", {
    enumerable: true,
    get: function() {
      return _playwright2.createPlaywright;
    }
  });
  Object.defineProperty(exports2, "installBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry2.installBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports2, "installDefaultBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry2.installDefaultBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports2, "installRootRedirect", {
    enumerable: true,
    get: function() {
      return _traceViewer2.installRootRedirect;
    }
  });
  Object.defineProperty(exports2, "openTraceInBrowser", {
    enumerable: true,
    get: function() {
      return _traceViewer2.openTraceInBrowser;
    }
  });
  Object.defineProperty(exports2, "openTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer2.openTraceViewerApp;
    }
  });
  Object.defineProperty(exports2, "registry", {
    enumerable: true,
    get: function() {
      return _registry2.registry;
    }
  });
  Object.defineProperty(exports2, "registryDirectory", {
    enumerable: true,
    get: function() {
      return _registry2.registryDirectory;
    }
  });
  Object.defineProperty(exports2, "runTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer2.runTraceViewerApp;
    }
  });
  Object.defineProperty(exports2, "serverSideCallMetadata", {
    enumerable: true,
    get: function() {
      return _instrumentation2.serverSideCallMetadata;
    }
  });
  Object.defineProperty(exports2, "startTraceViewerServer", {
    enumerable: true,
    get: function() {
      return _traceViewer2.startTraceViewerServer;
    }
  });
  Object.defineProperty(exports2, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _registry2.writeDockerVersion;
    }
  });
  var _registry2 = requireRegistry();
  var _dispatcher2 = dispatcher;
  var _playwrightDispatcher = playwrightDispatcher;
  var _playwright2 = requirePlaywright$1();
  var _traceViewer2 = traceViewer;
  var _instrumentation2 = instrumentation;
  var _socksProxy2 = socksProxy;
})(server);
var connection = {};
var browser = {};
var browserContext = {};
var page = {};
var errors$1 = {};
Object.defineProperty(errors$1, "__esModule", {
  value: true
});
errors$1.TimeoutError = errors$1.TargetClosedError = void 0;
errors$1.isTargetClosedError = isTargetClosedError;
errors$1.parseError = parseError;
errors$1.serializeError = serializeError;
var _utils$b = requireUtils();
var _serializers$1 = serializers;
class TimeoutError2 extends Error {
  constructor(message) {
    super(message);
    this.name = "TimeoutError";
  }
}
errors$1.TimeoutError = TimeoutError2;
class TargetClosedError2 extends Error {
  constructor(cause) {
    super(cause || "Target page, context or browser has been closed");
  }
}
errors$1.TargetClosedError = TargetClosedError2;
function isTargetClosedError(error) {
  return error instanceof TargetClosedError2;
}
function serializeError(e) {
  if ((0, _utils$b.isError)(e)) return {
    error: {
      message: e.message,
      stack: e.stack,
      name: e.name
    }
  };
  return {
    value: (0, _serializers$1.serializeValue)(e, (value) => ({
      fallThrough: value
    }))
  };
}
function parseError(error) {
  if (!error.error) {
    if (error.value === void 0) throw new Error("Serialized error must have either an error or a value");
    return (0, _serializers$1.parseSerializedValue)(error.value, void 0);
  }
  if (error.error.name === "TimeoutError") {
    const e2 = new TimeoutError2(error.error.message);
    e2.stack = error.error.stack || "";
    return e2;
  }
  if (error.error.name === "TargetClosedError") {
    const e2 = new TargetClosedError2(error.error.message);
    e2.stack = error.error.stack || "";
    return e2;
  }
  const e = new Error(error.error.message);
  e.stack = error.error.stack || "";
  e.name = error.error.name;
  return e;
}
var accessibility = {};
Object.defineProperty(accessibility, "__esModule", {
  value: true
});
accessibility.Accessibility = void 0;
function axNodeFromProtocol(axNode) {
  const result2 = {
    ...axNode,
    value: axNode.valueNumber !== void 0 ? axNode.valueNumber : axNode.valueString,
    checked: axNode.checked === "checked" ? true : axNode.checked === "unchecked" ? false : axNode.checked,
    pressed: axNode.pressed === "pressed" ? true : axNode.pressed === "released" ? false : axNode.pressed,
    children: axNode.children ? axNode.children.map(axNodeFromProtocol) : void 0
  };
  delete result2.valueNumber;
  delete result2.valueString;
  return result2;
}
class Accessibility2 {
  constructor(channel) {
    this._channel = void 0;
    this._channel = channel;
  }
  async snapshot(options = {}) {
    const root = options.root ? options.root._elementChannel : void 0;
    const result2 = await this._channel.accessibilitySnapshot({
      interestingOnly: options.interestingOnly,
      root
    });
    return result2.rootAXNode ? axNodeFromProtocol(result2.rootAXNode) : null;
  }
}
accessibility.Accessibility = Accessibility2;
var artifact = {};
var stream = {};
var channelOwner = {};
var eventEmitter = {};
Object.defineProperty(eventEmitter, "__esModule", {
  value: true
});
eventEmitter.EventEmitter = void 0;
var _events$2 = require$$0$1;
var _utils$a = requireUtils();
class EventEmitter {
  constructor() {
    this._events = void 0;
    this._eventsCount = 0;
    this._maxListeners = void 0;
    this._pendingHandlers = /* @__PURE__ */ new Map();
    this._rejectionHandler = void 0;
    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || void 0;
    this.on = this.addListener;
    this.off = this.removeListener;
  }
  setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || Number.isNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
  }
  getMaxListeners() {
    return this._maxListeners === void 0 ? _events$2.EventEmitter.defaultMaxListeners : this._maxListeners;
  }
  emit(type, ...args) {
    const events2 = this._events;
    if (events2 === void 0) return false;
    const handler = events2 === null || events2 === void 0 ? void 0 : events2[type];
    if (handler === void 0) return false;
    if (typeof handler === "function") {
      this._callHandler(type, handler, args);
    } else {
      const len = handler.length;
      const listeners = handler.slice();
      for (let i = 0; i < len; ++i) this._callHandler(type, listeners[i], args);
    }
    return true;
  }
  _callHandler(type, handler, args) {
    const promise = Reflect.apply(handler, this, args);
    if (!(promise instanceof Promise)) return;
    let set = this._pendingHandlers.get(type);
    if (!set) {
      set = /* @__PURE__ */ new Set();
      this._pendingHandlers.set(type, set);
    }
    set.add(promise);
    promise.catch((e) => {
      if (this._rejectionHandler) this._rejectionHandler(e);
      else throw e;
    }).finally(() => set.delete(promise));
  }
  addListener(type, listener) {
    return this._addListener(type, listener, false);
  }
  on(type, listener) {
    return this._addListener(type, listener, false);
  }
  _addListener(type, listener, prepend) {
    checkListener(listener);
    let events2 = this._events;
    let existing;
    if (events2 === void 0) {
      events2 = this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    } else {
      if (events2.newListener !== void 0) {
        this.emit("newListener", type, unwrapListener(listener));
        events2 = this._events;
      }
      existing = events2[type];
    }
    if (existing === void 0) {
      existing = events2[type] = listener;
      ++this._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
      const m = this.getMaxListeners();
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        const w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w.name = "MaxListenersExceededWarning";
        w.emitter = this;
        w.type = type;
        w.count = existing.length;
        if (!(0, _utils$a.isUnderTest)()) {
          console.warn(w);
        }
      }
    }
    return this;
  }
  prependListener(type, listener) {
    return this._addListener(type, listener, true);
  }
  once(type, listener) {
    checkListener(listener);
    this.on(type, new OnceWrapper(this, type, listener).wrapperFunction);
    return this;
  }
  prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, new OnceWrapper(this, type, listener).wrapperFunction);
    return this;
  }
  removeListener(type, listener) {
    checkListener(listener);
    const events2 = this._events;
    if (events2 === void 0) return this;
    const list = events2[type];
    if (list === void 0) return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
      } else {
        var _listener;
        delete events2[type];
        if (events2.removeListener) this.emit("removeListener", type, (_listener = list.listener) !== null && _listener !== void 0 ? _listener : listener);
      }
    } else if (typeof list !== "function") {
      let position = -1;
      let originalListener;
      for (let i = list.length - 1; i >= 0; i--) {
        if (list[i] === listener || wrappedListener(list[i]) === listener) {
          originalListener = wrappedListener(list[i]);
          position = i;
          break;
        }
      }
      if (position < 0) return this;
      if (position === 0) list.shift();
      else list.splice(position, 1);
      if (list.length === 1) events2[type] = list[0];
      if (events2.removeListener !== void 0) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
  }
  off(type, listener) {
    return this.removeListener(type, listener);
  }
  removeAllListeners(type, options) {
    this._removeAllListeners(type);
    if (!options) return this;
    if (options.behavior === "wait") {
      const errors2 = [];
      this._rejectionHandler = (error) => errors2.push(error);
      return this._waitFor(type).then(() => {
        if (errors2.length) throw errors2[0];
      });
    }
    if (options.behavior === "ignoreErrors") this._rejectionHandler = () => {
    };
    return Promise.resolve();
  }
  _removeAllListeners(type) {
    const events2 = this._events;
    if (!events2) return;
    if (!events2.removeListener) {
      if (type === void 0) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else if (events2[type] !== void 0) {
        if (--this._eventsCount === 0) this._events = /* @__PURE__ */ Object.create(null);
        else delete events2[type];
      }
      return;
    }
    if (type === void 0) {
      const keys = Object.keys(events2);
      let key;
      for (let i = 0; i < keys.length; ++i) {
        key = keys[i];
        if (key === "removeListener") continue;
        this._removeAllListeners(key);
      }
      this._removeAllListeners("removeListener");
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
      return;
    }
    const listeners = events2[type];
    if (typeof listeners === "function") {
      this.removeListener(type, listeners);
    } else if (listeners !== void 0) {
      for (let i = listeners.length - 1; i >= 0; i--) this.removeListener(type, listeners[i]);
    }
  }
  listeners(type) {
    return this._listeners(this, type, true);
  }
  rawListeners(type) {
    return this._listeners(this, type, false);
  }
  listenerCount(type) {
    const events2 = this._events;
    if (events2 !== void 0) {
      const listener = events2[type];
      if (typeof listener === "function") return 1;
      if (listener !== void 0) return listener.length;
    }
    return 0;
  }
  eventNames() {
    return this._eventsCount > 0 && this._events ? Reflect.ownKeys(this._events) : [];
  }
  async _waitFor(type) {
    let promises = [];
    if (type) {
      promises = [...this._pendingHandlers.get(type) || []];
    } else {
      promises = [];
      for (const [, pending] of this._pendingHandlers) promises.push(...pending);
    }
    await Promise.all(promises);
  }
  _listeners(target, type, unwrap) {
    const events2 = target._events;
    if (events2 === void 0) return [];
    const listener = events2[type];
    if (listener === void 0) return [];
    if (typeof listener === "function") return unwrap ? [unwrapListener(listener)] : [listener];
    return unwrap ? unwrapListeners(listener) : listener.slice();
  }
}
eventEmitter.EventEmitter = EventEmitter;
function checkListener(listener) {
  if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
class OnceWrapper {
  constructor(eventEmitter2, eventType, listener) {
    this._fired = false;
    this.wrapperFunction = void 0;
    this._listener = void 0;
    this._eventEmitter = void 0;
    this._eventType = void 0;
    this._eventEmitter = eventEmitter2;
    this._eventType = eventType;
    this._listener = listener;
    this.wrapperFunction = this._handle.bind(this);
    this.wrapperFunction.listener = listener;
  }
  _handle(...args) {
    if (this._fired) return;
    this._fired = true;
    this._eventEmitter.removeListener(this._eventType, this.wrapperFunction);
    return this._listener.apply(this._eventEmitter, args);
  }
}
function unwrapListener(l) {
  var _wrappedListener;
  return (_wrappedListener = wrappedListener(l)) !== null && _wrappedListener !== void 0 ? _wrappedListener : l;
}
function unwrapListeners(arr) {
  return arr.map((l) => {
    var _wrappedListener2;
    return (_wrappedListener2 = wrappedListener(l)) !== null && _wrappedListener2 !== void 0 ? _wrappedListener2 : l;
  });
}
function wrappedListener(l) {
  return l.listener;
}
Object.defineProperty(channelOwner, "__esModule", {
  value: true
});
channelOwner.ChannelOwner = void 0;
var _eventEmitter = eventEmitter;
var _validator = validator;
var _debugLogger$3 = debugLogger;
var _stackTrace$2 = requireStackTrace();
var _utils$9 = requireUtils();
var _zones = zones;
class ChannelOwner extends _eventEmitter.EventEmitter {
  constructor(parent, type, guid, initializer) {
    super();
    this._connection = void 0;
    this._parent = void 0;
    this._objects = /* @__PURE__ */ new Map();
    this._type = void 0;
    this._guid = void 0;
    this._channel = void 0;
    this._initializer = void 0;
    this._logger = void 0;
    this._instrumentation = void 0;
    this._eventToSubscriptionMapping = /* @__PURE__ */ new Map();
    this._isInternalType = false;
    this._wasCollected = false;
    this.setMaxListeners(0);
    this._connection = parent instanceof ChannelOwner ? parent._connection : parent;
    this._type = type;
    this._guid = guid;
    this._parent = parent instanceof ChannelOwner ? parent : void 0;
    this._instrumentation = this._connection._instrumentation;
    this._connection._objects.set(guid, this);
    if (this._parent) {
      this._parent._objects.set(guid, this);
      this._logger = this._parent._logger;
    }
    this._channel = this._createChannel(new _eventEmitter.EventEmitter());
    this._initializer = initializer;
  }
  markAsInternalType() {
    this._isInternalType = true;
  }
  _setEventToSubscriptionMapping(mapping) {
    this._eventToSubscriptionMapping = mapping;
  }
  _updateSubscription(event, enabled) {
    const protocolEvent = this._eventToSubscriptionMapping.get(String(event));
    if (protocolEvent) {
      this._wrapApiCall(async () => {
        await this._channel.updateSubscription({
          event: protocolEvent,
          enabled
        });
      }, true).catch(() => {
      });
    }
  }
  on(event, listener) {
    if (!this.listenerCount(event)) this._updateSubscription(event, true);
    super.on(event, listener);
    return this;
  }
  addListener(event, listener) {
    if (!this.listenerCount(event)) this._updateSubscription(event, true);
    super.addListener(event, listener);
    return this;
  }
  prependListener(event, listener) {
    if (!this.listenerCount(event)) this._updateSubscription(event, true);
    super.prependListener(event, listener);
    return this;
  }
  off(event, listener) {
    super.off(event, listener);
    if (!this.listenerCount(event)) this._updateSubscription(event, false);
    return this;
  }
  removeListener(event, listener) {
    super.removeListener(event, listener);
    if (!this.listenerCount(event)) this._updateSubscription(event, false);
    return this;
  }
  _adopt(child) {
    child._parent._objects.delete(child._guid);
    this._objects.set(child._guid, child);
    child._parent = this;
  }
  _dispose(reason) {
    if (this._parent) this._parent._objects.delete(this._guid);
    this._connection._objects.delete(this._guid);
    this._wasCollected = reason === "gc";
    for (const object of [...this._objects.values()]) object._dispose(reason);
    this._objects.clear();
  }
  _debugScopeState() {
    return {
      _guid: this._guid,
      objects: Array.from(this._objects.values()).map((o) => o._debugScopeState())
    };
  }
  _createChannel(base) {
    const channel = new Proxy(base, {
      get: (obj, prop) => {
        if (typeof prop === "string") {
          const validator2 = (0, _validator.maybeFindValidator)(this._type, prop, "Params");
          if (validator2) {
            return async (params) => {
              return await this._wrapApiCall(async (apiZone) => {
                const {
                  apiName,
                  frames: frames2,
                  csi,
                  callCookie,
                  stepId
                } = apiZone.reported ? {
                  apiName: void 0,
                  csi: void 0,
                  callCookie: void 0,
                  frames: [],
                  stepId: void 0
                } : apiZone;
                apiZone.reported = true;
                let currentStepId = stepId;
                if (csi && apiName) {
                  const out = {};
                  csi.onApiCallBegin(apiName, params, frames2, callCookie, out);
                  currentStepId = out.stepId;
                }
                return await this._connection.sendMessageToServer(this, prop, validator2(params, "", {
                  tChannelImpl: tChannelImplToWire,
                  binary: this._connection.rawBuffers() ? "buffer" : "toBase64"
                }), apiName, frames2, currentStepId);
              });
            };
          }
        }
        return obj[prop];
      }
    });
    channel._object = this;
    return channel;
  }
  async _wrapApiCall(func, isInternal = false) {
    const logger = this._logger;
    const apiZone = _zones.zones.zoneData("apiZone");
    if (apiZone) return await func(apiZone);
    const stackTrace2 = (0, _stackTrace$2.captureLibraryStackTrace)();
    let apiName = stackTrace2.apiName;
    const frames2 = stackTrace2.frames;
    isInternal = isInternal || this._isInternalType;
    if (isInternal) apiName = void 0;
    const expectZone = _zones.zones.zoneData("expectZone");
    const stepId = expectZone === null || expectZone === void 0 ? void 0 : expectZone.stepId;
    if (!isInternal && expectZone) apiName = expectZone.title;
    const csi = isInternal || expectZone ? void 0 : this._instrumentation;
    const callCookie = {};
    try {
      logApiCall(logger, `=> ${apiName} started`, isInternal);
      const apiZone2 = {
        apiName,
        frames: frames2,
        isInternal,
        reported: false,
        csi,
        callCookie,
        stepId
      };
      const result2 = await _zones.zones.run("apiZone", apiZone2, async () => await func(apiZone2));
      csi === null || csi === void 0 || csi.onApiCallEnd(callCookie);
      logApiCall(logger, `<= ${apiName} succeeded`, isInternal);
      return result2;
    } catch (e) {
      const innerError = (process.env.PWDEBUGIMPL || (0, _utils$9.isUnderTest)()) && e.stack ? "\n<inner error>\n" + e.stack : "";
      if (apiName && !apiName.includes("<anonymous>")) e.message = apiName + ": " + e.message;
      const stackFrames = "\n" + (0, _stackTrace$2.stringifyStackFrames)(stackTrace2.frames).join("\n") + innerError;
      if (stackFrames.trim()) e.stack = e.message + stackFrames;
      else e.stack = "";
      csi === null || csi === void 0 || csi.onApiCallEnd(callCookie, e);
      logApiCall(logger, `<= ${apiName} failed`, isInternal);
      throw e;
    }
  }
  _toImpl() {
    var _this$_connection$toI, _this$_connection;
    return (_this$_connection$toI = (_this$_connection = this._connection).toImpl) === null || _this$_connection$toI === void 0 ? void 0 : _this$_connection$toI.call(_this$_connection, this);
  }
  toJSON() {
    return {
      _type: this._type,
      _guid: this._guid
    };
  }
}
channelOwner.ChannelOwner = ChannelOwner;
function logApiCall(logger, message, isNested) {
  if (isNested) return;
  if (logger && logger.isEnabled("api", "info")) logger.log("api", "info", message, [], {
    color: "cyan"
  });
  _debugLogger$3.debugLogger.log("api", message);
}
function tChannelImplToWire(names, arg, path2, context) {
  if (arg._object instanceof ChannelOwner && (names === "*" || names.includes(arg._object._type))) return {
    guid: arg._object._guid
  };
  throw new _validator.ValidationError(`${path2}: expected channel ${names.toString()}`);
}
Object.defineProperty(stream, "__esModule", {
  value: true
});
stream.Stream = void 0;
var _stream$2 = require$$12;
var _channelOwner$a = channelOwner;
class Stream extends _channelOwner$a.ChannelOwner {
  static from(Stream2) {
    return Stream2._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
  }
  stream() {
    return new StreamImpl(this._channel);
  }
}
stream.Stream = Stream;
class StreamImpl extends _stream$2.Readable {
  constructor(channel) {
    super();
    this._channel = void 0;
    this._channel = channel;
  }
  async _read() {
    const result2 = await this._channel.read({
      size: 1024 * 1024
    });
    if (result2.binary.byteLength) this.push(result2.binary);
    else this.push(null);
  }
  _destroy(error, callback) {
    this._channel.close().catch((e) => null);
    super._destroy(error, callback);
  }
}
Object.defineProperty(artifact, "__esModule", {
  value: true
});
artifact.Artifact = void 0;
var fs = _interopRequireWildcard(require$$0$2);
var _stream$1 = stream;
var _fileUtils = requireFileUtils();
var _channelOwner$9 = channelOwner;
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (_getRequireWildcardCache = function(e2) {
    return e2 ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
class Artifact2 extends _channelOwner$9.ChannelOwner {
  static from(channel) {
    return channel._object;
  }
  async pathAfterFinished() {
    if (this._connection.isRemote()) throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
    return (await this._channel.pathAfterFinished()).value;
  }
  async saveAs(path2) {
    if (!this._connection.isRemote()) {
      await this._channel.saveAs({
        path: path2
      });
      return;
    }
    const result2 = await this._channel.saveAsStream();
    const stream2 = _stream$1.Stream.from(result2.stream);
    await (0, _fileUtils.mkdirIfNeeded)(path2);
    await new Promise((resolve, reject) => {
      stream2.stream().pipe(fs.createWriteStream(path2)).on("finish", resolve).on("error", reject);
    });
  }
  async failure() {
    return (await this._channel.failure()).error || null;
  }
  async createReadStream() {
    const result2 = await this._channel.stream();
    const stream2 = _stream$1.Stream.from(result2.stream);
    return stream2.stream();
  }
  async readIntoBuffer() {
    const stream2 = await this.createReadStream();
    return await new Promise((resolve, reject) => {
      const chunks = [];
      stream2.on("data", (chunk) => {
        chunks.push(chunk);
      });
      stream2.on("end", () => {
        resolve(Buffer.concat(chunks));
      });
      stream2.on("error", reject);
    });
  }
  async cancel() {
    return await this._channel.cancel();
  }
  async delete() {
    return await this._channel.delete();
  }
}
artifact.Artifact = Artifact2;
var clientHelper = {};
Object.defineProperty(clientHelper, "__esModule", {
  value: true
});
clientHelper.addSourceUrlToScript = addSourceUrlToScript;
clientHelper.envObjectToArray = envObjectToArray;
clientHelper.evaluationScript = evaluationScript;
var _fs = _interopRequireDefault(require$$0$2);
var _utils$8 = requireUtils();
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function envObjectToArray(env2) {
  const result2 = [];
  for (const name2 in env2) {
    if (!Object.is(env2[name2], void 0)) result2.push({
      name: name2,
      value: String(env2[name2])
    });
  }
  return result2;
}
async function evaluationScript(fun, arg, addSourceUrl = true) {
  if (typeof fun === "function") {
    const source2 = fun.toString();
    const argString = Object.is(arg, void 0) ? "undefined" : JSON.stringify(arg);
    return `(${source2})(${argString})`;
  }
  if (arg !== void 0) throw new Error("Cannot evaluate a string with arguments");
  if ((0, _utils$8.isString)(fun)) return fun;
  if (fun.content !== void 0) return fun.content;
  if (fun.path !== void 0) {
    let source2 = await _fs.default.promises.readFile(fun.path, "utf8");
    if (addSourceUrl) source2 = addSourceUrlToScript(source2, fun.path);
    return source2;
  }
  throw new Error("Either path or content property must be present");
}
function addSourceUrlToScript(source2, path2) {
  return `${source2}
//# sourceURL=${path2.replace(/\n/g, "")}`;
}
var coverage = {};
Object.defineProperty(coverage, "__esModule", {
  value: true
});
coverage.Coverage = void 0;
class Coverage {
  constructor(channel) {
    this._channel = void 0;
    this._channel = channel;
  }
  async startJSCoverage(options = {}) {
    await this._channel.startJSCoverage(options);
  }
  async stopJSCoverage() {
    return (await this._channel.stopJSCoverage()).entries;
  }
  async startCSSCoverage(options = {}) {
    await this._channel.startCSSCoverage(options);
  }
  async stopCSSCoverage() {
    return (await this._channel.stopCSSCoverage()).entries;
  }
}
coverage.Coverage = Coverage;
var download = {};
Object.defineProperty(download, "__esModule", {
  value: true
});
download.Download = void 0;
class Download {
  constructor(page2, url, suggestedFilename, artifact2) {
    this._page = void 0;
    this._url = void 0;
    this._suggestedFilename = void 0;
    this._artifact = void 0;
    this._page = page2;
    this._url = url;
    this._suggestedFilename = suggestedFilename;
    this._artifact = artifact2;
  }
  page() {
    return this._page;
  }
  url() {
    return this._url;
  }
  suggestedFilename() {
    return this._suggestedFilename;
  }
  async path() {
    return await this._artifact.pathAfterFinished();
  }
  async saveAs(path2) {
    return await this._artifact.saveAs(path2);
  }
  async failure() {
    return await this._artifact.failure();
  }
  async createReadStream() {
    return await this._artifact.createReadStream();
  }
  async cancel() {
    return await this._artifact.cancel();
  }
  async delete() {
    return await this._artifact.delete();
  }
}
download.Download = Download;
var elementHandle = {};
var frame = {};
var locator = {};
var jsHandle = {};
Object.defineProperty(jsHandle, "__esModule", {
  value: true
});
jsHandle.JSHandle = void 0;
jsHandle.assertMaxArguments = assertMaxArguments;
jsHandle.parseResult = parseResult;
jsHandle.serializeArgument = serializeArgument;
var _channelOwner$8 = channelOwner;
var _serializers = serializers;
var _errors$3 = errors$1;
let _Symbol$asyncDispose$2;
_Symbol$asyncDispose$2 = Symbol.asyncDispose;
class JSHandle2 extends _channelOwner$8.ChannelOwner {
  static from(handle) {
    return handle._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this._preview = void 0;
    this._preview = this._initializer.preview;
    this._channel.on("previewUpdated", ({
      preview
    }) => this._preview = preview);
  }
  async evaluate(pageFunction, arg) {
    const result2 = await this._channel.evaluateExpression({
      expression: String(pageFunction),
      isFunction: typeof pageFunction === "function",
      arg: serializeArgument(arg)
    });
    return parseResult(result2.value);
  }
  async evaluateHandle(pageFunction, arg) {
    const result2 = await this._channel.evaluateExpressionHandle({
      expression: String(pageFunction),
      isFunction: typeof pageFunction === "function",
      arg: serializeArgument(arg)
    });
    return JSHandle2.from(result2.handle);
  }
  async getProperty(propertyName) {
    const result2 = await this._channel.getProperty({
      name: propertyName
    });
    return JSHandle2.from(result2.handle);
  }
  async getProperties() {
    const map = /* @__PURE__ */ new Map();
    for (const {
      name: name2,
      value
    } of (await this._channel.getPropertyList()).properties) map.set(name2, JSHandle2.from(value));
    return map;
  }
  async jsonValue() {
    return parseResult((await this._channel.jsonValue()).value);
  }
  asElement() {
    return null;
  }
  async [_Symbol$asyncDispose$2]() {
    await this.dispose();
  }
  async dispose() {
    try {
      await this._channel.dispose();
    } catch (e) {
      if ((0, _errors$3.isTargetClosedError)(e)) return;
      throw e;
    }
  }
  toString() {
    return this._preview;
  }
}
jsHandle.JSHandle = JSHandle2;
function serializeArgument(arg) {
  const handles = [];
  const pushHandle = (channel) => {
    handles.push(channel);
    return handles.length - 1;
  };
  const value = (0, _serializers.serializeValue)(arg, (value2) => {
    if (value2 instanceof JSHandle2) return {
      h: pushHandle(value2._channel)
    };
    return {
      fallThrough: value2
    };
  });
  return {
    value,
    handles
  };
}
function parseResult(value) {
  return (0, _serializers.parseSerializedValue)(value, void 0);
}
function assertMaxArguments(count, max) {
  if (count > max) throw new Error("Too many arguments. If you need to pass more than 1 argument to the function wrap them in an object.");
}
var locatorUtils = {};
Object.defineProperty(locatorUtils, "__esModule", {
  value: true
});
locatorUtils.getByAltTextSelector = getByAltTextSelector;
locatorUtils.getByLabelSelector = getByLabelSelector;
locatorUtils.getByPlaceholderSelector = getByPlaceholderSelector;
locatorUtils.getByRoleSelector = getByRoleSelector;
locatorUtils.getByTestIdSelector = getByTestIdSelector;
locatorUtils.getByTextSelector = getByTextSelector;
locatorUtils.getByTitleSelector = getByTitleSelector;
var _stringUtils = stringUtils;
function getByAttributeTextSelector(attrName, text, options) {
  return `internal:attr=[${attrName}=${(0, _stringUtils.escapeForAttributeSelector)(text, (options === null || options === void 0 ? void 0 : options.exact) || false)}]`;
}
function getByTestIdSelector(testIdAttributeName, testId) {
  return `internal:testid=[${testIdAttributeName}=${(0, _stringUtils.escapeForAttributeSelector)(testId, true)}]`;
}
function getByLabelSelector(text, options) {
  return "internal:label=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== void 0 && options.exact));
}
function getByAltTextSelector(text, options) {
  return getByAttributeTextSelector("alt", text, options);
}
function getByTitleSelector(text, options) {
  return getByAttributeTextSelector("title", text, options);
}
function getByPlaceholderSelector(text, options) {
  return getByAttributeTextSelector("placeholder", text, options);
}
function getByTextSelector(text, options) {
  return "internal:text=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== void 0 && options.exact));
}
function getByRoleSelector(role, options = {}) {
  const props = [];
  if (options.checked !== void 0) props.push(["checked", String(options.checked)]);
  if (options.disabled !== void 0) props.push(["disabled", String(options.disabled)]);
  if (options.selected !== void 0) props.push(["selected", String(options.selected)]);
  if (options.expanded !== void 0) props.push(["expanded", String(options.expanded)]);
  if (options.includeHidden !== void 0) props.push(["include-hidden", String(options.includeHidden)]);
  if (options.level !== void 0) props.push(["level", String(options.level)]);
  if (options.name !== void 0) props.push(["name", (0, _stringUtils.escapeForAttributeSelector)(options.name, !!options.exact)]);
  if (options.pressed !== void 0) props.push(["pressed", String(options.pressed)]);
  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;
}
var hasRequiredLocator;
function requireLocator() {
  if (hasRequiredLocator) return locator;
  hasRequiredLocator = 1;
  Object.defineProperty(locator, "__esModule", {
    value: true
  });
  locator.Locator = locator.FrameLocator = void 0;
  locator.setTestIdAttribute = setTestIdAttribute;
  locator.testIdAttributeName = testIdAttributeName;
  var util = _interopRequireWildcard2(require$$1$1);
  var _utils2 = requireUtils();
  var _elementHandle = requireElementHandle();
  var _jsHandle2 = jsHandle;
  var _stringUtils2 = stringUtils;
  var _locatorUtils = locatorUtils;
  let _util$inspect$custom;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  _util$inspect$custom = util.inspect.custom;
  class Locator {
    constructor(frame2, selector, options) {
      this._frame = void 0;
      this._selector = void 0;
      this._frame = frame2;
      this._selector = selector;
      if (options !== null && options !== void 0 && options.hasText) this._selector += ` >> internal:has-text=${(0, _stringUtils2.escapeForTextSelector)(options.hasText, false)}`;
      if (options !== null && options !== void 0 && options.hasNotText) this._selector += ` >> internal:has-not-text=${(0, _stringUtils2.escapeForTextSelector)(options.hasNotText, false)}`;
      if (options !== null && options !== void 0 && options.has) {
        const locator2 = options.has;
        if (locator2._frame !== frame2) throw new Error(`Inner "has" locator must belong to the same frame.`);
        this._selector += ` >> internal:has=` + JSON.stringify(locator2._selector);
      }
      if (options !== null && options !== void 0 && options.hasNot) {
        const locator2 = options.hasNot;
        if (locator2._frame !== frame2) throw new Error(`Inner "hasNot" locator must belong to the same frame.`);
        this._selector += ` >> internal:has-not=` + JSON.stringify(locator2._selector);
      }
    }
    async _withElement(task2, timeout) {
      timeout = this._frame.page()._timeoutSettings.timeout({
        timeout
      });
      const deadline = timeout ? (0, _utils2.monotonicTime)() + timeout : 0;
      return await this._frame._wrapApiCall(async () => {
        const result2 = await this._frame._channel.waitForSelector({
          selector: this._selector,
          strict: true,
          state: "attached",
          timeout
        });
        const handle = _elementHandle.ElementHandle.fromNullable(result2.element);
        if (!handle) throw new Error(`Could not resolve ${this._selector} to DOM Element`);
        try {
          return await task2(handle, deadline ? deadline - (0, _utils2.monotonicTime)() : 0);
        } finally {
          await handle.dispose();
        }
      });
    }
    _equals(locator2) {
      return this._frame === locator2._frame && this._selector === locator2._selector;
    }
    page() {
      return this._frame.page();
    }
    async boundingBox(options) {
      return await this._withElement((h) => h.boundingBox(), options === null || options === void 0 ? void 0 : options.timeout);
    }
    async check(options = {}) {
      return await this._frame.check(this._selector, {
        strict: true,
        ...options
      });
    }
    async click(options = {}) {
      return await this._frame.click(this._selector, {
        strict: true,
        ...options
      });
    }
    async dblclick(options = {}) {
      return await this._frame.dblclick(this._selector, {
        strict: true,
        ...options
      });
    }
    async dispatchEvent(type, eventInit = {}, options) {
      return await this._frame.dispatchEvent(this._selector, type, eventInit, {
        strict: true,
        ...options
      });
    }
    async dragTo(target, options = {}) {
      return await this._frame.dragAndDrop(this._selector, target._selector, {
        strict: true,
        ...options
      });
    }
    async evaluate(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluate(pageFunction, arg), options === null || options === void 0 ? void 0 : options.timeout);
    }
    async evaluateAll(pageFunction, arg) {
      return await this._frame.$$eval(this._selector, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluateHandle(pageFunction, arg), options === null || options === void 0 ? void 0 : options.timeout);
    }
    async fill(value, options = {}) {
      return await this._frame.fill(this._selector, value, {
        strict: true,
        ...options
      });
    }
    async clear(options = {}) {
      return await this.fill("", options);
    }
    async _highlight() {
      return await this._frame._highlight(this._selector);
    }
    async highlight() {
      return await this._frame._highlight(this._selector);
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils2.isString)(selectorOrLocator)) return new Locator(this._frame, this._selector + " >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + " >> internal:chain=" + JSON.stringify(selectorOrLocator._selector), options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._selector + " >> " + selector);
    }
    filter(options) {
      return new Locator(this._frame, this._selector, options);
    }
    async elementHandle(options) {
      return await this._frame.waitForSelector(this._selector, {
        strict: true,
        state: "attached",
        ...options
      });
    }
    async elementHandles() {
      return await this._frame.$$(this._selector);
    }
    contentFrame() {
      return new FrameLocator(this._frame, this._selector);
    }
    first() {
      return new Locator(this._frame, this._selector + " >> nth=0");
    }
    last() {
      return new Locator(this._frame, this._selector + ` >> nth=-1`);
    }
    nth(index) {
      return new Locator(this._frame, this._selector + ` >> nth=${index}`);
    }
    and(locator2) {
      if (locator2._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:and=` + JSON.stringify(locator2._selector));
    }
    or(locator2) {
      if (locator2._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:or=` + JSON.stringify(locator2._selector));
    }
    async focus(options) {
      return await this._frame.focus(this._selector, {
        strict: true,
        ...options
      });
    }
    async blur(options) {
      await this._frame._channel.blur({
        selector: this._selector,
        strict: true,
        ...options
      });
    }
    async count() {
      return await this._frame._queryCount(this._selector);
    }
    async getAttribute(name2, options) {
      return await this._frame.getAttribute(this._selector, name2, {
        strict: true,
        ...options
      });
    }
    async hover(options = {}) {
      return await this._frame.hover(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerHTML(options) {
      return await this._frame.innerHTML(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerText(options) {
      return await this._frame.innerText(this._selector, {
        strict: true,
        ...options
      });
    }
    async inputValue(options) {
      return await this._frame.inputValue(this._selector, {
        strict: true,
        ...options
      });
    }
    async isChecked(options) {
      return await this._frame.isChecked(this._selector, {
        strict: true,
        ...options
      });
    }
    async isDisabled(options) {
      return await this._frame.isDisabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEditable(options) {
      return await this._frame.isEditable(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEnabled(options) {
      return await this._frame.isEnabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isHidden(options) {
      return await this._frame.isHidden(this._selector, {
        strict: true,
        ...options
      });
    }
    async isVisible(options) {
      return await this._frame.isVisible(this._selector, {
        strict: true,
        ...options
      });
    }
    async press(key, options = {}) {
      return await this._frame.press(this._selector, key, {
        strict: true,
        ...options
      });
    }
    async screenshot(options = {}) {
      return await this._withElement((h, timeout) => h.screenshot({
        ...options,
        timeout
      }), options.timeout);
    }
    async scrollIntoViewIfNeeded(options = {}) {
      return await this._withElement((h, timeout) => h.scrollIntoViewIfNeeded({
        ...options,
        timeout
      }), options.timeout);
    }
    async selectOption(values, options = {}) {
      return await this._frame.selectOption(this._selector, values, {
        strict: true,
        ...options
      });
    }
    async selectText(options = {}) {
      return await this._withElement((h, timeout) => h.selectText({
        ...options,
        timeout
      }), options.timeout);
    }
    async setChecked(checked, options) {
      if (checked) await this.check(options);
      else await this.uncheck(options);
    }
    async setInputFiles(files, options = {}) {
      return await this._frame.setInputFiles(this._selector, files, {
        strict: true,
        ...options
      });
    }
    async tap(options = {}) {
      return await this._frame.tap(this._selector, {
        strict: true,
        ...options
      });
    }
    async textContent(options) {
      return await this._frame.textContent(this._selector, {
        strict: true,
        ...options
      });
    }
    async type(text, options = {}) {
      return await this._frame.type(this._selector, text, {
        strict: true,
        ...options
      });
    }
    async pressSequentially(text, options = {}) {
      return await this.type(text, options);
    }
    async uncheck(options = {}) {
      return await this._frame.uncheck(this._selector, {
        strict: true,
        ...options
      });
    }
    async all() {
      return new Array(await this.count()).fill(0).map((e, i) => this.nth(i));
    }
    async allInnerTexts() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.innerText));
    }
    async allTextContents() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.textContent || ""));
    }
    async waitFor(options) {
      await this._frame._channel.waitForSelector({
        selector: this._selector,
        strict: true,
        omitReturnValue: true,
        ...options
      });
    }
    async _expect(expression, options) {
      const params = {
        selector: this._selector,
        expression,
        ...options,
        isNot: !!options.isNot
      };
      params.expectedValue = (0, _jsHandle2.serializeArgument)(options.expectedValue);
      const result2 = await this._frame._channel.expect(params);
      if (result2.received !== void 0) result2.received = (0, _jsHandle2.parseResult)(result2.received);
      return result2;
    }
    [_util$inspect$custom]() {
      return this.toString();
    }
    toString() {
      return (0, _utils2.asLocator)("javascript", this._selector);
    }
  }
  locator.Locator = Locator;
  class FrameLocator {
    constructor(frame2, selector) {
      this._frame = void 0;
      this._frameSelector = void 0;
      this._frame = frame2;
      this._frameSelector = selector;
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils2.isString)(selectorOrLocator)) return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame) throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator._selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    owner() {
      return new Locator(this._frame, this._frameSelector);
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selector);
    }
    first() {
      return new FrameLocator(this._frame, this._frameSelector + " >> nth=0");
    }
    last() {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=-1`);
    }
    nth(index) {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=${index}`);
    }
  }
  locator.FrameLocator = FrameLocator;
  let _testIdAttributeName = "data-testid";
  function testIdAttributeName() {
    return _testIdAttributeName;
  }
  function setTestIdAttribute(attributeName) {
    _testIdAttributeName = attributeName;
  }
  return locator;
}
var network = {};
var worker = {};
var events = {};
Object.defineProperty(events, "__esModule", {
  value: true
});
events.Events = void 0;
events.Events = {
  AndroidDevice: {
    WebView: "webview",
    Close: "close"
  },
  AndroidSocket: {
    Data: "data",
    Close: "close"
  },
  AndroidWebView: {
    Close: "close"
  },
  Browser: {
    Disconnected: "disconnected"
  },
  BrowserContext: {
    Console: "console",
    Close: "close",
    Dialog: "dialog",
    Page: "page",
    // Can't use just 'error' due to node.js special treatment of error events.
    // @see https://nodejs.org/api/events.html#events_error_events
    WebError: "weberror",
    BackgroundPage: "backgroundpage",
    ServiceWorker: "serviceworker",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished"
  },
  BrowserServer: {
    Close: "close"
  },
  Page: {
    Close: "close",
    Crash: "crash",
    Console: "console",
    Dialog: "dialog",
    Download: "download",
    FileChooser: "filechooser",
    DOMContentLoaded: "domcontentloaded",
    // Can't use just 'error' due to node.js special treatment of error events.
    // @see https://nodejs.org/api/events.html#events_error_events
    PageError: "pageerror",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished",
    FrameAttached: "frameattached",
    FrameDetached: "framedetached",
    FrameNavigated: "framenavigated",
    Load: "load",
    Popup: "popup",
    WebSocket: "websocket",
    Worker: "worker"
  },
  WebSocket: {
    Close: "close",
    Error: "socketerror",
    FrameReceived: "framereceived",
    FrameSent: "framesent"
  },
  Worker: {
    Close: "close"
  },
  ElectronApplication: {
    Close: "close",
    Console: "console",
    Window: "window"
  }
};
Object.defineProperty(worker, "__esModule", {
  value: true
});
worker.Worker = void 0;
var _events$1 = events;
var _channelOwner$7 = channelOwner;
var _jsHandle$1 = jsHandle;
var _utils$7 = requireUtils();
var _errors$2 = errors$1;
class Worker extends _channelOwner$7.ChannelOwner {
  static from(worker2) {
    return worker2._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this._page = void 0;
    this._context = void 0;
    this._closedScope = new _utils$7.LongStandingScope();
    this._channel.on("close", () => {
      if (this._page) this._page._workers.delete(this);
      if (this._context) this._context._serviceWorkers.delete(this);
      this.emit(_events$1.Events.Worker.Close, this);
    });
    this.once(_events$1.Events.Worker.Close, () => {
      var _this$_page;
      return this._closedScope.close(((_this$_page = this._page) === null || _this$_page === void 0 ? void 0 : _this$_page._closeErrorWithReason()) || new _errors$2.TargetClosedError());
    });
  }
  url() {
    return this._initializer.url;
  }
  async evaluate(pageFunction, arg) {
    (0, _jsHandle$1.assertMaxArguments)(arguments.length, 2);
    const result2 = await this._channel.evaluateExpression({
      expression: String(pageFunction),
      isFunction: typeof pageFunction === "function",
      arg: (0, _jsHandle$1.serializeArgument)(arg)
    });
    return (0, _jsHandle$1.parseResult)(result2.value);
  }
  async evaluateHandle(pageFunction, arg) {
    (0, _jsHandle$1.assertMaxArguments)(arguments.length, 2);
    const result2 = await this._channel.evaluateExpressionHandle({
      expression: String(pageFunction),
      isFunction: typeof pageFunction === "function",
      arg: (0, _jsHandle$1.serializeArgument)(arg)
    });
    return _jsHandle$1.JSHandle.from(result2.handle);
  }
}
worker.Worker = Worker;
var waiter = {};
Object.defineProperty(waiter, "__esModule", {
  value: true
});
waiter.Waiter = void 0;
var _stackTrace$1 = requireStackTrace();
var _errors$1 = errors$1;
var _utils$6 = requireUtils();
class Waiter {
  constructor(channelOwner2, event) {
    this._dispose = void 0;
    this._failures = [];
    this._immediateError = void 0;
    this._logs = [];
    this._channelOwner = void 0;
    this._waitId = void 0;
    this._error = void 0;
    this._waitId = (0, _utils$6.createGuid)();
    this._channelOwner = channelOwner2;
    this._channelOwner._channel.waitForEventInfo({
      info: {
        waitId: this._waitId,
        phase: "before",
        event
      }
    }).catch(() => {
    });
    this._dispose = [() => this._channelOwner._wrapApiCall(async () => {
      await this._channelOwner._channel.waitForEventInfo({
        info: {
          waitId: this._waitId,
          phase: "after",
          error: this._error
        }
      });
    }, true).catch(() => {
    })];
  }
  static createForEvent(channelOwner2, event) {
    return new Waiter(channelOwner2, event);
  }
  async waitForEvent(emitter, event, predicate) {
    const {
      promise,
      dispose
    } = waitForEvent(emitter, event, predicate);
    return await this.waitForPromise(promise, dispose);
  }
  rejectOnEvent(emitter, event, error, predicate) {
    const {
      promise,
      dispose
    } = waitForEvent(emitter, event, predicate);
    this._rejectOn(promise.then(() => {
      throw typeof error === "function" ? error() : error;
    }), dispose);
  }
  rejectOnTimeout(timeout, message) {
    if (!timeout) return;
    const {
      promise,
      dispose
    } = waitForTimeout(timeout);
    this._rejectOn(promise.then(() => {
      throw new _errors$1.TimeoutError(message);
    }), dispose);
  }
  rejectImmediately(error) {
    this._immediateError = error;
  }
  dispose() {
    for (const dispose of this._dispose) dispose();
  }
  async waitForPromise(promise, dispose) {
    try {
      if (this._immediateError) throw this._immediateError;
      const result2 = await Promise.race([promise, ...this._failures]);
      if (dispose) dispose();
      return result2;
    } catch (e) {
      if (dispose) dispose();
      this._error = e.message;
      this.dispose();
      (0, _stackTrace$1.rewriteErrorMessage)(e, e.message + formatLogRecording(this._logs));
      throw e;
    }
  }
  log(s) {
    this._logs.push(s);
    this._channelOwner._wrapApiCall(async () => {
      await this._channelOwner._channel.waitForEventInfo({
        info: {
          waitId: this._waitId,
          phase: "log",
          message: s
        }
      }).catch(() => {
      });
    }, true);
  }
  _rejectOn(promise, dispose) {
    this._failures.push(promise);
    if (dispose) this._dispose.push(dispose);
  }
}
waiter.Waiter = Waiter;
function waitForEvent(emitter, event, predicate) {
  let listener;
  const promise = new Promise((resolve, reject) => {
    listener = async (eventArg) => {
      try {
        if (predicate && !await predicate(eventArg)) return;
        emitter.removeListener(event, listener);
        resolve(eventArg);
      } catch (e) {
        emitter.removeListener(event, listener);
        reject(e);
      }
    };
    emitter.addListener(event, listener);
  });
  const dispose = () => emitter.removeListener(event, listener);
  return {
    promise,
    dispose
  };
}
function waitForTimeout(timeout) {
  let timeoutId;
  const promise = new Promise((resolve) => timeoutId = setTimeout(resolve, timeout));
  const dispose = () => clearTimeout(timeoutId);
  return {
    promise,
    dispose
  };
}
function formatLogRecording(log) {
  if (!log.length) return "";
  const header = ` logs `;
  const headerLength = 60;
  const leftLength = (headerLength - header.length) / 2;
  const rightLength = headerLength - header.length - leftLength;
  return `
${"=".repeat(leftLength)}${header}${"=".repeat(rightLength)}
${log.join("\n")}
${"=".repeat(headerLength)}`;
}
var fetch = {};
var tracing = {};
Object.defineProperty(tracing, "__esModule", {
  value: true
});
tracing.Tracing = void 0;
var _artifact = artifact;
var _channelOwner$6 = channelOwner;
class Tracing extends _channelOwner$6.ChannelOwner {
  static from(channel) {
    return channel._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this._includeSources = false;
    this._tracesDir = void 0;
    this._stacksId = void 0;
    this._isTracing = false;
    this.markAsInternalType();
  }
  async start(options = {}) {
    this._includeSources = !!options.sources;
    await this._channel.tracingStart({
      name: options.name,
      snapshots: options.snapshots,
      screenshots: options.screenshots,
      live: options._live
    });
    const {
      traceName
    } = await this._channel.tracingStartChunk({
      name: options.name,
      title: options.title
    });
    await this._startCollectingStacks(traceName);
  }
  async startChunk(options = {}) {
    const {
      traceName
    } = await this._channel.tracingStartChunk(options);
    await this._startCollectingStacks(traceName);
  }
  async _startCollectingStacks(traceName) {
    if (!this._isTracing) {
      this._isTracing = true;
      this._connection.setIsTracing(true);
    }
    const result2 = await this._connection.localUtils()._channel.tracingStarted({
      tracesDir: this._tracesDir,
      traceName
    });
    this._stacksId = result2.stacksId;
  }
  async stopChunk(options = {}) {
    await this._doStopChunk(options.path);
  }
  async stop(options = {}) {
    await this._doStopChunk(options.path);
    await this._channel.tracingStop();
  }
  async _doStopChunk(filePath) {
    this._resetStackCounter();
    if (!filePath) {
      await this._channel.tracingStopChunk({
        mode: "discard"
      });
      if (this._stacksId) await this._connection.localUtils()._channel.traceDiscarded({
        stacksId: this._stacksId
      });
      return;
    }
    const isLocal = !this._connection.isRemote();
    if (isLocal) {
      const result3 = await this._channel.tracingStopChunk({
        mode: "entries"
      });
      await this._connection.localUtils()._channel.zip({
        zipFile: filePath,
        entries: result3.entries,
        mode: "write",
        stacksId: this._stacksId,
        includeSources: this._includeSources
      });
      return;
    }
    const result2 = await this._channel.tracingStopChunk({
      mode: "archive"
    });
    if (!result2.artifact) {
      if (this._stacksId) await this._connection.localUtils()._channel.traceDiscarded({
        stacksId: this._stacksId
      });
      return;
    }
    const artifact2 = _artifact.Artifact.from(result2.artifact);
    await artifact2.saveAs(filePath);
    await artifact2.delete();
    await this._connection.localUtils()._channel.zip({
      zipFile: filePath,
      entries: [],
      mode: "append",
      stacksId: this._stacksId,
      includeSources: this._includeSources
    });
  }
  _resetStackCounter() {
    if (this._isTracing) {
      this._isTracing = false;
      this._connection.setIsTracing(false);
    }
  }
}
tracing.Tracing = Tracing;
var hasRequiredFetch;
function requireFetch() {
  if (hasRequiredFetch) return fetch;
  hasRequiredFetch = 1;
  Object.defineProperty(fetch, "__esModule", {
    value: true
  });
  fetch.APIResponse = fetch.APIRequestContext = fetch.APIRequest = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var util = _interopRequireWildcard2(require$$1$1);
  var _utils2 = requireUtils();
  var _fileUtils2 = requireFileUtils();
  var _channelOwner2 = channelOwner;
  var _network2 = requireNetwork();
  var _tracing = tracing;
  var _errors2 = errors$1;
  var _browserContext2 = requireBrowserContext();
  let _Symbol$asyncDispose2, _Symbol$asyncDispose22, _util$inspect$custom;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class APIRequest {
    constructor(playwright2) {
      this._playwright = void 0;
      this._contexts = /* @__PURE__ */ new Set();
      this._defaultContextOptions = void 0;
      this._playwright = playwright2;
    }
    async newContext(options = {}) {
      var _this$_defaultContext;
      options = {
        ...this._defaultContextOptions,
        ...options
      };
      const storageState = typeof options.storageState === "string" ? JSON.parse(await _fs2.default.promises.readFile(options.storageState, "utf8")) : options.storageState;
      const tracesDir = (_this$_defaultContext = this._defaultContextOptions) === null || _this$_defaultContext === void 0 ? void 0 : _this$_defaultContext.tracesDir;
      const context = APIRequestContext.from((await this._playwright._channel.newRequest({
        ...options,
        extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils2.headersObjectToArray)(options.extraHTTPHeaders) : void 0,
        storageState,
        tracesDir,
        clientCertificates: await (0, _browserContext2.toClientCertificatesProtocol)(options.clientCertificates)
      })).request);
      this._contexts.add(context);
      context._request = this;
      context._tracing._tracesDir = tracesDir;
      await context._instrumentation.runAfterCreateRequestContext(context);
      return context;
    }
  }
  fetch.APIRequest = APIRequest;
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  class APIRequestContext extends _channelOwner2.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._request = void 0;
      this._tracing = void 0;
      this._closeReason = void 0;
      this._tracing = _tracing.Tracing.from(initializer.tracing);
    }
    async [_Symbol$asyncDispose2]() {
      await this.dispose();
    }
    async dispose(options = {}) {
      var _this$_request;
      this._closeReason = options.reason;
      await this._instrumentation.runBeforeCloseRequestContext(this);
      try {
        await this._channel.dispose(options);
      } catch (e) {
        if ((0, _errors2.isTargetClosedError)(e)) return;
        throw e;
      }
      this._tracing._resetStackCounter();
      (_this$_request = this._request) === null || _this$_request === void 0 || _this$_request._contexts.delete(this);
    }
    async delete(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "DELETE"
      });
    }
    async head(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "HEAD"
      });
    }
    async get(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "GET"
      });
    }
    async patch(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PATCH"
      });
    }
    async post(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "POST"
      });
    }
    async put(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PUT"
      });
    }
    async fetch(urlOrRequest, options = {}) {
      const url = (0, _utils2.isString)(urlOrRequest) ? urlOrRequest : void 0;
      const request2 = (0, _utils2.isString)(urlOrRequest) ? void 0 : urlOrRequest;
      return await this._innerFetch({
        url,
        request: request2,
        ...options
      });
    }
    async _innerFetch(options = {}) {
      return await this._wrapApiCall(async () => {
        var _options$request, _options$request2, _options$request3;
        if (this._closeReason) throw new _errors2.TargetClosedError(this._closeReason);
        (0, _utils2.assert)(options.request || typeof options.url === "string", "First argument must be either URL string or Request");
        (0, _utils2.assert)((options.data === void 0 ? 0 : 1) + (options.form === void 0 ? 0 : 1) + (options.multipart === void 0 ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
        (0, _utils2.assert)(options.maxRedirects === void 0 || options.maxRedirects >= 0, `'maxRedirects' must be greater than or equal to '0'`);
        (0, _utils2.assert)(options.maxRetries === void 0 || options.maxRetries >= 0, `'maxRetries' must be greater than or equal to '0'`);
        const url = options.url !== void 0 ? options.url : options.request.url();
        const method = options.method || ((_options$request = options.request) === null || _options$request === void 0 ? void 0 : _options$request.method());
        let encodedParams = void 0;
        if (typeof options.params === "string") encodedParams = options.params;
        else if (options.params instanceof URLSearchParams) encodedParams = options.params.toString();
        const headersObj = options.headers || ((_options$request2 = options.request) === null || _options$request2 === void 0 ? void 0 : _options$request2.headers());
        const headers2 = headersObj ? (0, _utils2.headersObjectToArray)(headersObj) : void 0;
        let jsonData;
        let formData2;
        let multipartData;
        let postDataBuffer;
        if (options.data !== void 0) {
          if ((0, _utils2.isString)(options.data)) {
            if (isJsonContentType(headers2)) jsonData = isJsonParsable(options.data) ? options.data : JSON.stringify(options.data);
            else postDataBuffer = Buffer.from(options.data, "utf8");
          } else if (Buffer.isBuffer(options.data)) {
            postDataBuffer = options.data;
          } else if (typeof options.data === "object" || typeof options.data === "number" || typeof options.data === "boolean") {
            jsonData = JSON.stringify(options.data);
          } else {
            throw new Error(`Unexpected 'data' type`);
          }
        } else if (options.form) {
          if (globalThis.FormData && options.form instanceof FormData) {
            formData2 = [];
            for (const [name2, value] of options.form.entries()) {
              if (typeof value !== "string") throw new Error(`Expected string for options.form["${name2}"], found File. Please use options.multipart instead.`);
              formData2.push({
                name: name2,
                value
              });
            }
          } else {
            formData2 = objectToArray(options.form);
          }
        } else if (options.multipart) {
          multipartData = [];
          if (globalThis.FormData && options.multipart instanceof FormData) {
            const form = options.multipart;
            for (const [name2, value] of form.entries()) {
              if ((0, _utils2.isString)(value)) {
                multipartData.push({
                  name: name2,
                  value
                });
              } else {
                const file = {
                  name: value.name,
                  mimeType: value.type,
                  buffer: Buffer.from(await value.arrayBuffer())
                };
                multipartData.push({
                  name: name2,
                  file
                });
              }
            }
          } else {
            for (const [name2, value] of Object.entries(options.multipart)) multipartData.push(await toFormField(name2, value));
          }
        }
        if (postDataBuffer === void 0 && jsonData === void 0 && formData2 === void 0 && multipartData === void 0) postDataBuffer = ((_options$request3 = options.request) === null || _options$request3 === void 0 ? void 0 : _options$request3.postDataBuffer()) || void 0;
        const fixtures = {
          __testHookLookup: options.__testHookLookup
        };
        const result2 = await this._channel.fetch({
          url,
          params: typeof options.params === "object" ? objectToArray(options.params) : void 0,
          encodedParams,
          method,
          headers: headers2,
          postData: postDataBuffer,
          jsonData,
          formData: formData2,
          multipartData,
          timeout: options.timeout,
          failOnStatusCode: options.failOnStatusCode,
          ignoreHTTPSErrors: options.ignoreHTTPSErrors,
          maxRedirects: options.maxRedirects,
          maxRetries: options.maxRetries,
          ...fixtures
        });
        return new APIResponse(this, result2.response);
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _fileUtils2.mkdirIfNeeded)(options.path);
        await _fs2.default.promises.writeFile(options.path, JSON.stringify(state, void 0, 2), "utf8");
      }
      return state;
    }
  }
  fetch.APIRequestContext = APIRequestContext;
  async function toFormField(name2, value) {
    if (isFilePayload(value)) {
      const payload = value;
      if (!Buffer.isBuffer(payload.buffer)) throw new Error(`Unexpected buffer type of 'data.${name2}'`);
      return {
        name: name2,
        file: filePayloadToJson(payload)
      };
    } else if (value instanceof _fs2.default.ReadStream) {
      return {
        name: name2,
        file: await readStreamToJson(value)
      };
    } else {
      return {
        name: name2,
        value: String(value)
      };
    }
  }
  function isJsonParsable(value) {
    if (typeof value !== "string") return false;
    try {
      JSON.parse(value);
      return true;
    } catch (e) {
      if (e instanceof SyntaxError) return false;
      else throw e;
    }
  }
  _Symbol$asyncDispose22 = Symbol.asyncDispose;
  _util$inspect$custom = util.inspect.custom;
  class APIResponse {
    constructor(context, initializer) {
      this._initializer = void 0;
      this._headers = void 0;
      this._request = void 0;
      this._request = context;
      this._initializer = initializer;
      this._headers = new _network2.RawHeaders(this._initializer.headers);
    }
    ok() {
      return this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    url() {
      return this._initializer.url;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    headers() {
      return this._headers.headers();
    }
    headersArray() {
      return this._headers.headersArray();
    }
    async body() {
      try {
        const result2 = await this._request._channel.fetchResponseBody({
          fetchUid: this._fetchUid()
        });
        if (result2.binary === void 0) throw new Error("Response has been disposed");
        return result2.binary;
      } catch (e) {
        if ((0, _errors2.isTargetClosedError)(e)) throw new Error("Response has been disposed");
        throw e;
      }
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    async [_Symbol$asyncDispose22]() {
      await this.dispose();
    }
    async dispose() {
      await this._request._channel.disposeAPIResponse({
        fetchUid: this._fetchUid()
      });
    }
    [_util$inspect$custom]() {
      const headers2 = this.headersArray().map(({
        name: name2,
        value
      }) => `  ${name2}: ${value}`);
      return `APIResponse: ${this.status()} ${this.statusText()}
${headers2.join("\n")}`;
    }
    _fetchUid() {
      return this._initializer.fetchUid;
    }
    async _fetchLog() {
      const {
        log
      } = await this._request._channel.fetchLog({
        fetchUid: this._fetchUid()
      });
      return log;
    }
  }
  fetch.APIResponse = APIResponse;
  function filePayloadToJson(payload) {
    return {
      name: payload.name,
      mimeType: payload.mimeType,
      buffer: payload.buffer
    };
  }
  async function readStreamToJson(stream2) {
    const buffer = await new Promise((resolve, reject) => {
      const chunks = [];
      stream2.on("data", (chunk) => chunks.push(chunk));
      stream2.on("end", () => resolve(Buffer.concat(chunks)));
      stream2.on("error", (err) => reject(err));
    });
    const streamPath = Buffer.isBuffer(stream2.path) ? stream2.path.toString("utf8") : stream2.path;
    return {
      name: _path2.default.basename(streamPath),
      buffer
    };
  }
  function isJsonContentType(headers2) {
    if (!headers2) return false;
    for (const {
      name: name2,
      value
    } of headers2) {
      if (name2.toLocaleLowerCase() === "content-type") return value === "application/json";
    }
    return false;
  }
  function objectToArray(map) {
    if (!map) return void 0;
    const result2 = [];
    for (const [name2, value] of Object.entries(map)) result2.push({
      name: name2,
      value: String(value)
    });
    return result2;
  }
  function isFilePayload(value) {
    return typeof value === "object" && value["name"] && value["mimeType"] && value["buffer"];
  }
  return fetch;
}
var hasRequiredNetwork;
function requireNetwork() {
  if (hasRequiredNetwork) return network;
  hasRequiredNetwork = 1;
  Object.defineProperty(network, "__esModule", {
    value: true
  });
  network.WebSocketRouteHandler = network.WebSocketRoute = network.WebSocket = network.RouteHandler = network.Route = network.Response = network.Request = network.RawHeaders = void 0;
  network.validateHeaders = validateHeaders;
  var _url2 = require$$6;
  var _channelOwner2 = channelOwner;
  var _frame = requireFrame();
  var _worker = worker;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _utilsBundle2 = utilsBundle;
  var _utils2 = requireUtils();
  var _manualPromise2 = requireManualPromise();
  var _events2 = events;
  var _waiter2 = waiter;
  var _fetch2 = requireFetch();
  var _errors2 = errors$1;
  let _Symbol$asyncDispose2;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class Request extends _channelOwner2.ChannelOwner {
    static from(request2) {
      return request2._object;
    }
    static fromNullable(request2) {
      return request2 ? Request.from(request2) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._redirectedFrom = null;
      this._redirectedTo = null;
      this._failureText = null;
      this._provisionalHeaders = void 0;
      this._actualHeadersPromise = void 0;
      this._timing = void 0;
      this._fallbackOverrides = {};
      this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);
      if (this._redirectedFrom) this._redirectedFrom._redirectedTo = this;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._timing = {
        startTime: 0,
        domainLookupStart: -1,
        domainLookupEnd: -1,
        connectStart: -1,
        secureConnectionStart: -1,
        connectEnd: -1,
        requestStart: -1,
        responseStart: -1,
        responseEnd: -1
      };
    }
    url() {
      return this._fallbackOverrides.url || this._initializer.url;
    }
    resourceType() {
      return this._initializer.resourceType;
    }
    method() {
      return this._fallbackOverrides.method || this._initializer.method;
    }
    postData() {
      var _ref;
      return ((_ref = this._fallbackOverrides.postDataBuffer || this._initializer.postData) === null || _ref === void 0 ? void 0 : _ref.toString("utf-8")) || null;
    }
    postDataBuffer() {
      return this._fallbackOverrides.postDataBuffer || this._initializer.postData || null;
    }
    postDataJSON() {
      const postData = this.postData();
      if (!postData) return null;
      const contentType = this.headers()["content-type"];
      if (contentType !== null && contentType !== void 0 && contentType.includes("application/x-www-form-urlencoded")) {
        const entries = {};
        const parsed = new _url2.URLSearchParams(postData);
        for (const [k, v] of parsed.entries()) entries[k] = v;
        return entries;
      }
      try {
        return JSON.parse(postData);
      } catch (e) {
        throw new Error("POST data is not a valid JSON object: " + postData);
      }
    }
    /**
     * @deprecated
     */
    headers() {
      if (this._fallbackOverrides.headers) return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers).headers();
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (this._fallbackOverrides.headers) return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers);
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = this._wrapApiCall(async () => {
          return new RawHeaders((await this._channel.rawRequestHeaders()).headers);
        });
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray();
    }
    async headerValue(name2) {
      return (await this._actualHeaders()).get(name2);
    }
    async response() {
      return Response.fromNullable((await this._channel.response()).response);
    }
    async _internalResponse() {
      return await this._wrapApiCall(async () => {
        return Response.fromNullable((await this._channel.response()).response);
      }, true);
    }
    frame() {
      if (!this._initializer.frame) {
        (0, _utils2.assert)(this.serviceWorker());
        throw new Error("Service Worker requests do not have an associated frame.");
      }
      const frame2 = _frame.Frame.from(this._initializer.frame);
      if (!frame2._page) {
        throw new Error(["Frame for this navigation request is not available, because the request", "was issued before the frame is created. You can check whether the request", "is a navigation request by calling isNavigationRequest() method."].join("\n"));
      }
      return frame2;
    }
    _safePage() {
      var _Frame$fromNullable;
      return ((_Frame$fromNullable = _frame.Frame.fromNullable(this._initializer.frame)) === null || _Frame$fromNullable === void 0 ? void 0 : _Frame$fromNullable._page) || null;
    }
    serviceWorker() {
      return this._initializer.serviceWorker ? _worker.Worker.from(this._initializer.serviceWorker) : null;
    }
    isNavigationRequest() {
      return this._initializer.isNavigationRequest;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    redirectedTo() {
      return this._redirectedTo;
    }
    failure() {
      if (this._failureText === null) return null;
      return {
        errorText: this._failureText
      };
    }
    timing() {
      return this._timing;
    }
    async sizes() {
      const response = await this.response();
      if (!response) throw new Error("Unable to fetch sizes for failed request");
      return (await response._channel.sizes()).sizes;
    }
    _setResponseEndTiming(responseEndTiming) {
      this._timing.responseEnd = responseEndTiming;
      if (this._timing.responseStart === -1) this._timing.responseStart = responseEndTiming;
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    _applyFallbackOverrides(overrides) {
      if (overrides.url) this._fallbackOverrides.url = overrides.url;
      if (overrides.method) this._fallbackOverrides.method = overrides.method;
      if (overrides.headers) this._fallbackOverrides.headers = overrides.headers;
      if ((0, _utils2.isString)(overrides.postData)) this._fallbackOverrides.postDataBuffer = Buffer.from(overrides.postData, "utf-8");
      else if (overrides.postData instanceof Buffer) this._fallbackOverrides.postDataBuffer = overrides.postData;
      else if (overrides.postData) this._fallbackOverrides.postDataBuffer = Buffer.from(JSON.stringify(overrides.postData), "utf-8");
    }
    _fallbackOverridesForContinue() {
      return this._fallbackOverrides;
    }
    _targetClosedScope() {
      var _this$serviceWorker, _this$_safePage;
      return ((_this$serviceWorker = this.serviceWorker()) === null || _this$serviceWorker === void 0 ? void 0 : _this$serviceWorker._closedScope) || ((_this$_safePage = this._safePage()) === null || _this$_safePage === void 0 ? void 0 : _this$_safePage._closedOrCrashedScope) || new _manualPromise2.LongStandingScope();
    }
  }
  network.Request = Request;
  class Route extends _channelOwner2.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._handlingPromise = null;
      this._context = void 0;
      this._didThrow = false;
      this.markAsInternalType();
    }
    request() {
      return Request.from(this._initializer.request);
    }
    async _raceWithTargetClose(promise) {
      return await this.request()._targetClosedScope().safeRace(promise);
    }
    async _startHandling() {
      this._handlingPromise = new _manualPromise2.ManualPromise();
      return await this._handlingPromise;
    }
    async fallback(options = {}) {
      this._checkNotHandled();
      this.request()._applyFallbackOverrides(options);
      this._reportHandled(false);
    }
    async abort(errorCode) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.abort({
          errorCode
        }));
      });
    }
    async _redirectNavigationRequest(url) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.redirectNavigationRequest({
          url
        }));
      });
    }
    async fetch(options = {}) {
      return await this._wrapApiCall(async () => {
        return await this._context.request._innerFetch({
          request: this.request(),
          data: options.postData,
          ...options
        });
      });
    }
    async fulfill(options = {}) {
      await this._handleRoute(async () => {
        await this._wrapApiCall(async () => {
          await this._innerFulfill(options);
        });
      });
    }
    async _handleRoute(callback) {
      this._checkNotHandled();
      try {
        await callback();
        this._reportHandled(true);
      } catch (e) {
        this._didThrow = true;
        throw e;
      }
    }
    async _innerFulfill(options = {}) {
      let fetchResponseUid;
      let {
        status: statusOption,
        headers: headersOption,
        body
      } = options;
      if (options.json !== void 0) {
        (0, _utils2.assert)(options.body === void 0, "Can specify either body or json parameters");
        body = JSON.stringify(options.json);
      }
      if (options.response instanceof _fetch2.APIResponse) {
        var _statusOption, _headersOption;
        (_statusOption = statusOption) !== null && _statusOption !== void 0 ? _statusOption : statusOption = options.response.status();
        (_headersOption = headersOption) !== null && _headersOption !== void 0 ? _headersOption : headersOption = options.response.headers();
        if (body === void 0 && options.path === void 0) {
          if (options.response._request._connection === this._connection) fetchResponseUid = options.response._fetchUid();
          else body = await options.response.body();
        }
      }
      let isBase64 = false;
      let length = 0;
      if (options.path) {
        const buffer = await _fs2.default.promises.readFile(options.path);
        body = buffer.toString("base64");
        isBase64 = true;
        length = buffer.length;
      } else if ((0, _utils2.isString)(body)) {
        isBase64 = false;
        length = Buffer.byteLength(body);
      } else if (body) {
        length = body.length;
        body = body.toString("base64");
        isBase64 = true;
      }
      const headers2 = {};
      for (const header of Object.keys(headersOption || {})) headers2[header.toLowerCase()] = String(headersOption[header]);
      if (options.contentType) headers2["content-type"] = String(options.contentType);
      else if (options.json) headers2["content-type"] = "application/json";
      else if (options.path) headers2["content-type"] = _utilsBundle2.mime.getType(options.path) || "application/octet-stream";
      if (length && !("content-length" in headers2)) headers2["content-length"] = String(length);
      await this._raceWithTargetClose(this._channel.fulfill({
        status: statusOption || 200,
        headers: (0, _utils2.headersObjectToArray)(headers2),
        body,
        isBase64,
        fetchResponseUid
      }));
    }
    async continue(options = {}) {
      await this._handleRoute(async () => {
        this.request()._applyFallbackOverrides(options);
        await this._innerContinue(
          false
          /* isFallback */
        );
      });
    }
    _checkNotHandled() {
      if (!this._handlingPromise) throw new Error("Route is already handled!");
    }
    _reportHandled(done) {
      const chain = this._handlingPromise;
      this._handlingPromise = null;
      chain.resolve(done);
    }
    async _innerContinue(isFallback) {
      const options = this.request()._fallbackOverridesForContinue();
      return await this._raceWithTargetClose(this._channel.continue({
        url: options.url,
        method: options.method,
        headers: options.headers ? (0, _utils2.headersObjectToArray)(options.headers) : void 0,
        postData: options.postDataBuffer,
        isFallback
      }));
    }
  }
  network.Route = Route;
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  class WebSocketRoute extends _channelOwner2.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._onPageMessage = void 0;
      this._onPageClose = void 0;
      this._onServerMessage = void 0;
      this._onServerClose = void 0;
      this._server = void 0;
      this._connected = false;
      this.markAsInternalType();
      this._server = {
        onMessage: (handler) => {
          this._onServerMessage = handler;
        },
        onClose: (handler) => {
          this._onServerClose = handler;
        },
        connectToServer: () => {
          throw new Error(`connectToServer must be called on the page-side WebSocketRoute`);
        },
        url: () => {
          return this._initializer.url;
        },
        close: async (options = {}) => {
          await this._channel.closeServer({
            ...options,
            wasClean: true
          }).catch(() => {
          });
        },
        send: (message) => {
          if ((0, _utils2.isString)(message)) this._channel.sendToServer({
            message,
            isBase64: false
          }).catch(() => {
          });
          else this._channel.sendToServer({
            message: message.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        },
        async [Symbol.asyncDispose]() {
          await this.close();
        }
      };
      this._channel.on("messageFromPage", ({
        message,
        isBase64
      }) => {
        if (this._onPageMessage) this._onPageMessage(isBase64 ? Buffer.from(message, "base64") : message);
        else if (this._connected) this._channel.sendToServer({
          message,
          isBase64
        }).catch(() => {
        });
      });
      this._channel.on("messageFromServer", ({
        message,
        isBase64
      }) => {
        if (this._onServerMessage) this._onServerMessage(isBase64 ? Buffer.from(message, "base64") : message);
        else this._channel.sendToPage({
          message,
          isBase64
        }).catch(() => {
        });
      });
      this._channel.on("closePage", ({
        code,
        reason,
        wasClean
      }) => {
        if (this._onPageClose) this._onPageClose(code, reason);
        else this._channel.closeServer({
          code,
          reason,
          wasClean
        }).catch(() => {
        });
      });
      this._channel.on("closeServer", ({
        code,
        reason,
        wasClean
      }) => {
        if (this._onServerClose) this._onServerClose(code, reason);
        else this._channel.closePage({
          code,
          reason,
          wasClean
        }).catch(() => {
        });
      });
    }
    url() {
      return this._initializer.url;
    }
    async close(options = {}) {
      await this._channel.closePage({
        ...options,
        wasClean: true
      }).catch(() => {
      });
    }
    connectToServer() {
      if (this._connected) throw new Error("Already connected to the server");
      this._connected = true;
      this._channel.connect().catch(() => {
      });
      return this._server;
    }
    send(message) {
      if ((0, _utils2.isString)(message)) this._channel.sendToPage({
        message,
        isBase64: false
      }).catch(() => {
      });
      else this._channel.sendToPage({
        message: message.toString("base64"),
        isBase64: true
      }).catch(() => {
      });
    }
    onMessage(handler) {
      this._onPageMessage = handler;
    }
    onClose(handler) {
      this._onPageClose = handler;
    }
    async [_Symbol$asyncDispose2]() {
      await this.close();
    }
    async _afterHandle() {
      if (this._connected) return;
      await this._channel.ensureOpened();
    }
  }
  network.WebSocketRoute = WebSocketRoute;
  class WebSocketRouteHandler {
    constructor(baseURL, url, handler) {
      this._baseURL = void 0;
      this.url = void 0;
      this.handler = void 0;
      this._baseURL = baseURL;
      this.url = url;
      this.handler = handler;
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _utils2.isString)(handler.url)) patterns.push({
          glob: handler.url
        });
        else if ((0, _utils2.isRegExp)(handler.url)) patterns.push({
          regexSource: handler.url.source,
          regexFlags: handler.url.flags
        });
        else all = true;
      }
      if (all) return [{
        glob: "**/*"
      }];
      return patterns;
    }
    matches(wsURL) {
      return (0, _utils2.urlMatches)(this._baseURL, wsURL, this.url);
    }
    async handle(webSocketRoute) {
      const handler = this.handler;
      await handler(webSocketRoute);
      await webSocketRoute._afterHandle();
    }
  }
  network.WebSocketRouteHandler = WebSocketRouteHandler;
  class Response extends _channelOwner2.ChannelOwner {
    static from(response) {
      return response._object;
    }
    static fromNullable(response) {
      return response ? Response.from(response) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._provisionalHeaders = void 0;
      this._actualHeadersPromise = void 0;
      this._request = void 0;
      this._finishedPromise = new _manualPromise2.ManualPromise();
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._request = Request.from(this._initializer.request);
      Object.assign(this._request._timing, this._initializer.timing);
    }
    url() {
      return this._initializer.url;
    }
    ok() {
      return this._initializer.status === 0 || this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    fromServiceWorker() {
      return this._initializer.fromServiceWorker;
    }
    /**
     * @deprecated
     */
    headers() {
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = (async () => {
          return new RawHeaders((await this._channel.rawResponseHeaders()).headers);
        })();
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray().slice();
    }
    async headerValue(name2) {
      return (await this._actualHeaders()).get(name2);
    }
    async headerValues(name2) {
      return (await this._actualHeaders()).getAll(name2);
    }
    async finished() {
      return await this.request()._targetClosedScope().race(this._finishedPromise);
    }
    async body() {
      return (await this._channel.body()).binary;
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    async serverAddr() {
      return (await this._channel.serverAddr()).value || null;
    }
    async securityDetails() {
      return (await this._channel.securityDetails()).value || null;
    }
  }
  network.Response = Response;
  class WebSocket extends _channelOwner2.ChannelOwner {
    static from(webSocket) {
      return webSocket._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = void 0;
      this._isClosed = void 0;
      this._isClosed = false;
      this._page = parent;
      this._channel.on("frameSent", (event) => {
        if (event.opcode === 1) this.emit(_events2.Events.WebSocket.FrameSent, {
          payload: event.data
        });
        else if (event.opcode === 2) this.emit(_events2.Events.WebSocket.FrameSent, {
          payload: Buffer.from(event.data, "base64")
        });
      });
      this._channel.on("frameReceived", (event) => {
        if (event.opcode === 1) this.emit(_events2.Events.WebSocket.FrameReceived, {
          payload: event.data
        });
        else if (event.opcode === 2) this.emit(_events2.Events.WebSocket.FrameReceived, {
          payload: Buffer.from(event.data, "base64")
        });
      });
      this._channel.on("socketError", ({
        error
      }) => this.emit(_events2.Events.WebSocket.Error, error));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events2.Events.WebSocket.Close, this);
      });
    }
    url() {
      return this._initializer.url;
    }
    isClosed() {
      return this._isClosed;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter2.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events2.Events.WebSocket.Error) waiter2.rejectOnEvent(this, _events2.Events.WebSocket.Error, new Error("Socket error"));
        if (event !== _events2.Events.WebSocket.Close) waiter2.rejectOnEvent(this, _events2.Events.WebSocket.Close, new Error("Socket closed"));
        waiter2.rejectOnEvent(this._page, _events2.Events.Page.Close, () => this._page._closeErrorWithReason());
        const result2 = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result2;
      });
    }
  }
  network.WebSocket = WebSocket;
  function validateHeaders(headers2) {
    for (const key of Object.keys(headers2)) {
      const value = headers2[key];
      if (!Object.is(value, void 0) && !(0, _utils2.isString)(value)) throw new Error(`Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
    }
  }
  class RouteHandler {
    constructor(baseURL, url, handler, times = Number.MAX_SAFE_INTEGER) {
      this.handledCount = 0;
      this._baseURL = void 0;
      this._times = void 0;
      this.url = void 0;
      this.handler = void 0;
      this._ignoreException = false;
      this._activeInvocations = /* @__PURE__ */ new Set();
      this._baseURL = baseURL;
      this._times = times;
      this.url = url;
      this.handler = handler;
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _utils2.isString)(handler.url)) patterns.push({
          glob: handler.url
        });
        else if ((0, _utils2.isRegExp)(handler.url)) patterns.push({
          regexSource: handler.url.source,
          regexFlags: handler.url.flags
        });
        else all = true;
      }
      if (all) return [{
        glob: "**/*"
      }];
      return patterns;
    }
    matches(requestURL) {
      return (0, _utils2.urlMatches)(this._baseURL, requestURL, this.url);
    }
    async handle(route) {
      const handlerInvocation = {
        complete: new _manualPromise2.ManualPromise(),
        route
      };
      this._activeInvocations.add(handlerInvocation);
      try {
        return await this._handleInternal(route);
      } catch (e) {
        if (this._ignoreException) return false;
        if ((0, _errors2.isTargetClosedError)(e)) {
          (0, _utils2.rewriteErrorMessage)(e, `"${e.message}" while running route callback.
Consider awaiting \`await page.unrouteAll({ behavior: 'ignoreErrors' })\`
before the end of the test to ignore remaining routes in flight.`);
        }
        throw e;
      } finally {
        handlerInvocation.complete.resolve();
        this._activeInvocations.delete(handlerInvocation);
      }
    }
    async stop(behavior) {
      if (behavior === "ignoreErrors") {
        this._ignoreException = true;
      } else {
        const promises = [];
        for (const activation of this._activeInvocations) {
          if (!activation.route._didThrow) promises.push(activation.complete);
        }
        await Promise.all(promises);
      }
    }
    async _handleInternal(route) {
      ++this.handledCount;
      const handledPromise = route._startHandling();
      const handler = this.handler;
      const [handled] = await Promise.all([handledPromise, handler(route, route.request())]);
      return handled;
    }
    willExpire() {
      return this.handledCount + 1 >= this._times;
    }
  }
  network.RouteHandler = RouteHandler;
  class RawHeaders {
    static _fromHeadersObjectLossy(headers2) {
      const headersArray = Object.entries(headers2).map(([name2, value]) => ({
        name: name2,
        value
      })).filter((header) => header.value !== void 0);
      return new RawHeaders(headersArray);
    }
    constructor(headers2) {
      this._headersArray = void 0;
      this._headersMap = new _utils2.MultiMap();
      this._headersArray = headers2;
      for (const header of headers2) this._headersMap.set(header.name.toLowerCase(), header.value);
    }
    get(name2) {
      const values = this.getAll(name2);
      if (!values || !values.length) return null;
      return values.join(name2.toLowerCase() === "set-cookie" ? "\n" : ", ");
    }
    getAll(name2) {
      return [...this._headersMap.get(name2.toLowerCase())];
    }
    headers() {
      const result2 = {};
      for (const name2 of this._headersMap.keys()) result2[name2] = this.get(name2);
      return result2;
    }
    headersArray() {
      return this._headersArray;
    }
  }
  network.RawHeaders = RawHeaders;
  return network;
}
var types = {};
Object.defineProperty(types, "__esModule", {
  value: true
});
types.kLifecycleEvents = void 0;
types.kLifecycleEvents = /* @__PURE__ */ new Set(["load", "domcontentloaded", "networkidle", "commit"]);
var hasRequiredFrame;
function requireFrame() {
  if (hasRequiredFrame) return frame;
  hasRequiredFrame = 1;
  Object.defineProperty(frame, "__esModule", {
    value: true
  });
  frame.Frame = void 0;
  frame.verifyLoadState = verifyLoadState;
  var _utils2 = requireUtils();
  var _channelOwner2 = channelOwner;
  var _locator2 = requireLocator();
  var _locatorUtils = locatorUtils;
  var _elementHandle = requireElementHandle();
  var _jsHandle2 = jsHandle;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var network2 = _interopRequireWildcard2(requireNetwork());
  var _events2 = require$$0$1;
  var _waiter2 = waiter;
  var _events22 = events;
  var _types = types;
  var _clientHelper2 = clientHelper;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class Frame extends _channelOwner2.ChannelOwner {
    static from(frame2) {
      return frame2._object;
    }
    static fromNullable(frame2) {
      return frame2 ? Frame.from(frame2) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._eventEmitter = void 0;
      this._loadStates = void 0;
      this._parentFrame = null;
      this._url = "";
      this._name = "";
      this._detached = false;
      this._childFrames = /* @__PURE__ */ new Set();
      this._page = void 0;
      this._eventEmitter = new _events2.EventEmitter();
      this._eventEmitter.setMaxListeners(0);
      this._parentFrame = Frame.fromNullable(initializer.parentFrame);
      if (this._parentFrame) this._parentFrame._childFrames.add(this);
      this._name = initializer.name;
      this._url = initializer.url;
      this._loadStates = new Set(initializer.loadStates);
      this._channel.on("loadstate", (event) => {
        if (event.add) {
          this._loadStates.add(event.add);
          this._eventEmitter.emit("loadstate", event.add);
        }
        if (event.remove) this._loadStates.delete(event.remove);
        if (!this._parentFrame && event.add === "load" && this._page) this._page.emit(_events22.Events.Page.Load, this._page);
        if (!this._parentFrame && event.add === "domcontentloaded" && this._page) this._page.emit(_events22.Events.Page.DOMContentLoaded, this._page);
      });
      this._channel.on("navigated", (event) => {
        this._url = event.url;
        this._name = event.name;
        this._eventEmitter.emit("navigated", event);
        if (!event.error && this._page) this._page.emit(_events22.Events.Page.FrameNavigated, this);
      });
    }
    page() {
      return this._page;
    }
    async goto(url, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return network2.Response.fromNullable((await this._channel.goto({
        url,
        ...options,
        waitUntil
      })).response);
    }
    _setupNavigationWaiter(options) {
      const waiter2 = new _waiter2.Waiter(this._page, "");
      if (this._page.isClosed()) waiter2.rejectImmediately(this._page._closeErrorWithReason());
      waiter2.rejectOnEvent(this._page, _events22.Events.Page.Close, () => this._page._closeErrorWithReason());
      waiter2.rejectOnEvent(this._page, _events22.Events.Page.Crash, new Error("Navigation failed because page crashed!"));
      waiter2.rejectOnEvent(this._page, _events22.Events.Page.FrameDetached, new Error("Navigating frame was detached!"), (frame2) => frame2 === this);
      const timeout = this._page._timeoutSettings.navigationTimeout(options);
      waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded.`);
      return waiter2;
    }
    async waitForNavigation(options = {}) {
      return await this._page._wrapApiCall(async () => {
        const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
        const waiter2 = this._setupNavigationWaiter(options);
        const toUrl = typeof options.url === "string" ? ` to "${options.url}"` : "";
        waiter2.log(`waiting for navigation${toUrl} until "${waitUntil}"`);
        const navigatedEvent = await waiter2.waitForEvent(this._eventEmitter, "navigated", (event) => {
          var _this$_page;
          if (event.error) return true;
          waiter2.log(`  navigated to "${event.url}"`);
          return (0, _utils2.urlMatches)((_this$_page = this._page) === null || _this$_page === void 0 ? void 0 : _this$_page.context()._options.baseURL, event.url, options.url);
        });
        if (navigatedEvent.error) {
          const e = new Error(navigatedEvent.error);
          e.stack = "";
          await waiter2.waitForPromise(Promise.reject(e));
        }
        if (!this._loadStates.has(waitUntil)) {
          await waiter2.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter2.log(`  "${s}" event fired`);
            return s === waitUntil;
          });
        }
        const request2 = navigatedEvent.newDocument ? network2.Request.fromNullable(navigatedEvent.newDocument.request) : null;
        const response = request2 ? await waiter2.waitForPromise(request2._finalRequest()._internalResponse()) : null;
        waiter2.dispose();
        return response;
      });
    }
    async waitForLoadState(state = "load", options = {}) {
      state = verifyLoadState("state", state);
      return await this._page._wrapApiCall(async () => {
        const waiter2 = this._setupNavigationWaiter(options);
        if (this._loadStates.has(state)) {
          waiter2.log(`  not waiting, "${state}" event already fired`);
        } else {
          await waiter2.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter2.log(`  "${s}" event fired`);
            return s === state;
          });
        }
        waiter2.dispose();
      });
    }
    async waitForURL(url, options = {}) {
      var _this$_page2;
      if ((0, _utils2.urlMatches)((_this$_page2 = this._page) === null || _this$_page2 === void 0 ? void 0 : _this$_page2.context()._options.baseURL, this.url(), url)) return await this.waitForLoadState(options.waitUntil, options);
      await this.waitForNavigation({
        url,
        ...options
      });
    }
    async frameElement() {
      return _elementHandle.ElementHandle.from((await this._channel.frameElement()).element);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 2);
      const result2 = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return _jsHandle2.JSHandle.from(result2.handle);
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 2);
      const result2 = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return (0, _jsHandle2.parseResult)(result2.value);
    }
    async _evaluateExposeUtilityScript(pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 2);
      const result2 = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return (0, _jsHandle2.parseResult)(result2.value);
    }
    async $(selector, options) {
      const result2 = await this._channel.querySelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result2.element);
    }
    async waitForSelector(selector, options = {}) {
      if (options.visibility) throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible") throw new Error("options.waitFor is not supported, did you mean options.state?");
      const result2 = await this._channel.waitForSelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result2.element);
    }
    async dispatchEvent(selector, type, eventInit, options = {}) {
      await this._channel.dispatchEvent({
        selector,
        type,
        eventInit: (0, _jsHandle2.serializeArgument)(eventInit),
        ...options
      });
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 3);
      const result2 = await this._channel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return (0, _jsHandle2.parseResult)(result2.value);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 3);
      const result2 = await this._channel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return (0, _jsHandle2.parseResult)(result2.value);
    }
    async $$(selector) {
      const result2 = await this._channel.querySelectorAll({
        selector
      });
      return result2.elements.map((e) => _elementHandle.ElementHandle.from(e));
    }
    async _queryCount(selector) {
      return (await this._channel.queryCount({
        selector
      })).value;
    }
    async content() {
      return (await this._channel.content()).value;
    }
    async setContent(html, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      await this._channel.setContent({
        html,
        ...options,
        waitUntil
      });
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    isDetached() {
      return this._detached;
    }
    async addScriptTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs2.default.promises.readFile(copy.path)).toString();
        copy.content = (0, _clientHelper2.addSourceUrlToScript)(copy.content, copy.path);
      }
      return _elementHandle.ElementHandle.from((await this._channel.addScriptTag({
        ...copy
      })).element);
    }
    async addStyleTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs2.default.promises.readFile(copy.path)).toString();
        copy.content += "/*# sourceURL=" + copy.path.replace(/\n/g, "") + "*/";
      }
      return _elementHandle.ElementHandle.from((await this._channel.addStyleTag({
        ...copy
      })).element);
    }
    async click(selector, options = {}) {
      return await this._channel.click({
        selector,
        ...options
      });
    }
    async dblclick(selector, options = {}) {
      return await this._channel.dblclick({
        selector,
        ...options
      });
    }
    async dragAndDrop(source2, target, options = {}) {
      return await this._channel.dragAndDrop({
        source: source2,
        target,
        ...options
      });
    }
    async tap(selector, options = {}) {
      return await this._channel.tap({
        selector,
        ...options
      });
    }
    async fill(selector, value, options = {}) {
      return await this._channel.fill({
        selector,
        value,
        ...options
      });
    }
    async _highlight(selector) {
      return await this._channel.highlight({
        selector
      });
    }
    locator(selector, options) {
      return new _locator2.Locator(this, selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)((0, _locator2.testIdAttributeName)(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new _locator2.FrameLocator(this, selector);
    }
    async focus(selector, options = {}) {
      await this._channel.focus({
        selector,
        ...options
      });
    }
    async textContent(selector, options = {}) {
      const value = (await this._channel.textContent({
        selector,
        ...options
      })).value;
      return value === void 0 ? null : value;
    }
    async innerText(selector, options = {}) {
      return (await this._channel.innerText({
        selector,
        ...options
      })).value;
    }
    async innerHTML(selector, options = {}) {
      return (await this._channel.innerHTML({
        selector,
        ...options
      })).value;
    }
    async getAttribute(selector, name2, options = {}) {
      const value = (await this._channel.getAttribute({
        selector,
        name: name2,
        ...options
      })).value;
      return value === void 0 ? null : value;
    }
    async inputValue(selector, options = {}) {
      return (await this._channel.inputValue({
        selector,
        ...options
      })).value;
    }
    async isChecked(selector, options = {}) {
      return (await this._channel.isChecked({
        selector,
        ...options
      })).value;
    }
    async isDisabled(selector, options = {}) {
      return (await this._channel.isDisabled({
        selector,
        ...options
      })).value;
    }
    async isEditable(selector, options = {}) {
      return (await this._channel.isEditable({
        selector,
        ...options
      })).value;
    }
    async isEnabled(selector, options = {}) {
      return (await this._channel.isEnabled({
        selector,
        ...options
      })).value;
    }
    async isHidden(selector, options = {}) {
      return (await this._channel.isHidden({
        selector,
        ...options
      })).value;
    }
    async isVisible(selector, options = {}) {
      return (await this._channel.isVisible({
        selector,
        ...options
      })).value;
    }
    async hover(selector, options = {}) {
      await this._channel.hover({
        selector,
        ...options
      });
    }
    async selectOption(selector, values, options = {}) {
      return (await this._channel.selectOption({
        selector,
        ...(0, _elementHandle.convertSelectOptionValues)(values),
        ...options
      })).values;
    }
    async setInputFiles(selector, files, options = {}) {
      const converted = await (0, _elementHandle.convertInputFiles)(files, this.page().context());
      await this._channel.setInputFiles({
        selector,
        ...converted,
        ...options
      });
    }
    async type(selector, text, options = {}) {
      await this._channel.type({
        selector,
        text,
        ...options
      });
    }
    async press(selector, key, options = {}) {
      await this._channel.press({
        selector,
        key,
        ...options
      });
    }
    async check(selector, options = {}) {
      await this._channel.check({
        selector,
        ...options
      });
    }
    async uncheck(selector, options = {}) {
      await this._channel.uncheck({
        selector,
        ...options
      });
    }
    async setChecked(selector, checked, options) {
      if (checked) await this.check(selector, options);
      else await this.uncheck(selector, options);
    }
    async waitForTimeout(timeout) {
      await this._channel.waitForTimeout({
        timeout
      });
    }
    async waitForFunction(pageFunction, arg, options = {}) {
      if (typeof options.polling === "string") (0, _utils2.assert)(options.polling === "raf", "Unknown polling option: " + options.polling);
      const result2 = await this._channel.waitForFunction({
        ...options,
        pollingInterval: options.polling === "raf" ? void 0 : options.polling,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return _jsHandle2.JSHandle.from(result2.handle);
    }
    async title() {
      return (await this._channel.title()).value;
    }
  }
  frame.Frame = Frame;
  function verifyLoadState(name2, waitUntil) {
    if (waitUntil === "networkidle0") waitUntil = "networkidle";
    if (!_types.kLifecycleEvents.has(waitUntil)) throw new Error(`${name2}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  }
  return frame;
}
var writableStream = {};
Object.defineProperty(writableStream, "__esModule", {
  value: true
});
writableStream.WritableStream = void 0;
var _stream = require$$12;
var _channelOwner$5 = channelOwner;
class WritableStream extends _channelOwner$5.ChannelOwner {
  static from(Stream2) {
    return Stream2._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
  }
  stream() {
    return new WritableStreamImpl(this._channel);
  }
}
writableStream.WritableStream = WritableStream;
class WritableStreamImpl extends _stream.Writable {
  constructor(channel) {
    super();
    this._channel = void 0;
    this._channel = channel;
  }
  async _write(chunk, encoding, callback) {
    const error = await this._channel.write({
      binary: typeof chunk === "string" ? Buffer.from(chunk) : chunk
    }).catch((e) => e);
    callback(error || null);
  }
  async _final(callback) {
    const error = await this._channel.close().catch((e) => e);
    callback(error || null);
  }
}
var hasRequiredElementHandle;
function requireElementHandle() {
  if (hasRequiredElementHandle) return elementHandle;
  hasRequiredElementHandle = 1;
  Object.defineProperty(elementHandle, "__esModule", {
    value: true
  });
  elementHandle.ElementHandle = void 0;
  elementHandle.convertInputFiles = convertInputFiles;
  elementHandle.convertSelectOptionValues = convertSelectOptionValues;
  elementHandle.determineScreenshotType = determineScreenshotType;
  var _frame = requireFrame();
  var _jsHandle2 = jsHandle;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _utilsBundle2 = utilsBundle;
  var _path2 = _interopRequireDefault2(require$$1);
  var _utils2 = requireUtils();
  var _fileUtils2 = requireFileUtils();
  var _writableStream = writableStream;
  var _stream2 = require$$12;
  var _util = require$$1$1;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  const pipelineAsync = (0, _util.promisify)(_stream2.pipeline);
  class ElementHandle2 extends _jsHandle2.JSHandle {
    static from(handle) {
      return handle._object;
    }
    static fromNullable(handle) {
      return handle ? ElementHandle2.from(handle) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._elementChannel = void 0;
      this._elementChannel = this._channel;
    }
    asElement() {
      return this;
    }
    async ownerFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.ownerFrame()).frame);
    }
    async contentFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.contentFrame()).frame);
    }
    async getAttribute(name2) {
      const value = (await this._elementChannel.getAttribute({
        name: name2
      })).value;
      return value === void 0 ? null : value;
    }
    async inputValue() {
      return (await this._elementChannel.inputValue()).value;
    }
    async textContent() {
      const value = (await this._elementChannel.textContent()).value;
      return value === void 0 ? null : value;
    }
    async innerText() {
      return (await this._elementChannel.innerText()).value;
    }
    async innerHTML() {
      return (await this._elementChannel.innerHTML()).value;
    }
    async isChecked() {
      return (await this._elementChannel.isChecked()).value;
    }
    async isDisabled() {
      return (await this._elementChannel.isDisabled()).value;
    }
    async isEditable() {
      return (await this._elementChannel.isEditable()).value;
    }
    async isEnabled() {
      return (await this._elementChannel.isEnabled()).value;
    }
    async isHidden() {
      return (await this._elementChannel.isHidden()).value;
    }
    async isVisible() {
      return (await this._elementChannel.isVisible()).value;
    }
    async dispatchEvent(type, eventInit = {}) {
      await this._elementChannel.dispatchEvent({
        type,
        eventInit: (0, _jsHandle2.serializeArgument)(eventInit)
      });
    }
    async scrollIntoViewIfNeeded(options = {}) {
      await this._elementChannel.scrollIntoViewIfNeeded(options);
    }
    async hover(options = {}) {
      await this._elementChannel.hover(options);
    }
    async click(options = {}) {
      return await this._elementChannel.click(options);
    }
    async dblclick(options = {}) {
      return await this._elementChannel.dblclick(options);
    }
    async tap(options = {}) {
      return await this._elementChannel.tap(options);
    }
    async selectOption(values, options = {}) {
      const result2 = await this._elementChannel.selectOption({
        ...convertSelectOptionValues(values),
        ...options
      });
      return result2.values;
    }
    async fill(value, options = {}) {
      return await this._elementChannel.fill({
        value,
        ...options
      });
    }
    async selectText(options = {}) {
      await this._elementChannel.selectText(options);
    }
    async setInputFiles(files, options = {}) {
      const frame2 = await this.ownerFrame();
      if (!frame2) throw new Error("Cannot set input files to detached element");
      const converted = await convertInputFiles(files, frame2.page().context());
      await this._elementChannel.setInputFiles({
        ...converted,
        ...options
      });
    }
    async focus() {
      await this._elementChannel.focus();
    }
    async type(text, options = {}) {
      await this._elementChannel.type({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._elementChannel.press({
        key,
        ...options
      });
    }
    async check(options = {}) {
      return await this._elementChannel.check(options);
    }
    async uncheck(options = {}) {
      return await this._elementChannel.uncheck(options);
    }
    async setChecked(checked, options) {
      if (checked) await this.check(options);
      else await this.uncheck(options);
    }
    async boundingBox() {
      const value = (await this._elementChannel.boundingBox()).value;
      return value === void 0 ? null : value;
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: void 0
      };
      if (!copy.type) copy.type = determineScreenshotType(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator2) => ({
          frame: locator2._frame._channel,
          selector: locator2._selector
        }));
      }
      const result2 = await this._elementChannel.screenshot(copy);
      if (options.path) {
        await (0, _fileUtils2.mkdirIfNeeded)(options.path);
        await _fs2.default.promises.writeFile(options.path, result2.binary);
      }
      return result2.binary;
    }
    async $(selector) {
      return ElementHandle2.fromNullable((await this._elementChannel.querySelector({
        selector
      })).element);
    }
    async $$(selector) {
      const result2 = await this._elementChannel.querySelectorAll({
        selector
      });
      return result2.elements.map((h) => ElementHandle2.from(h));
    }
    async $eval(selector, pageFunction, arg) {
      const result2 = await this._elementChannel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return (0, _jsHandle2.parseResult)(result2.value);
    }
    async $$eval(selector, pageFunction, arg) {
      const result2 = await this._elementChannel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle2.serializeArgument)(arg)
      });
      return (0, _jsHandle2.parseResult)(result2.value);
    }
    async waitForElementState(state, options = {}) {
      return await this._elementChannel.waitForElementState({
        state,
        ...options
      });
    }
    async waitForSelector(selector, options = {}) {
      const result2 = await this._elementChannel.waitForSelector({
        selector,
        ...options
      });
      return ElementHandle2.fromNullable(result2.element);
    }
  }
  elementHandle.ElementHandle = ElementHandle2;
  function convertSelectOptionValues(values) {
    if (values === null) return {};
    if (!Array.isArray(values)) values = [values];
    if (!values.length) return {};
    for (let i = 0; i < values.length; i++) (0, _utils2.assert)(values[i] !== null, `options[${i}]: expected object, got null`);
    if (values[0] instanceof ElementHandle2) return {
      elements: values.map((v) => v._elementChannel)
    };
    if ((0, _utils2.isString)(values[0])) return {
      options: values.map((valueOrLabel) => ({
        valueOrLabel
      }))
    };
    return {
      options: values
    };
  }
  function filePayloadExceedsSizeLimit(payloads) {
    return payloads.reduce((size, item) => size + (item.buffer ? item.buffer.byteLength : 0), 0) >= _fileUtils2.fileUploadSizeLimit;
  }
  async function resolvePathsAndDirectoryForInputFiles(items) {
    var _localPaths2;
    let localPaths;
    let localDirectory;
    for (const item of items) {
      const stat = await _fs2.default.promises.stat(item);
      if (stat.isDirectory()) {
        if (localDirectory) throw new Error("Multiple directories are not supported");
        localDirectory = _path2.default.resolve(item);
      } else {
        var _localPaths;
        (_localPaths = localPaths) !== null && _localPaths !== void 0 ? _localPaths : localPaths = [];
        localPaths.push(_path2.default.resolve(item));
      }
    }
    if ((_localPaths2 = localPaths) !== null && _localPaths2 !== void 0 && _localPaths2.length && localDirectory) throw new Error("File paths must be all files or a single directory");
    return [localPaths, localDirectory];
  }
  async function convertInputFiles(files, context) {
    const items = Array.isArray(files) ? files.slice() : [files];
    if (items.some((item) => typeof item === "string")) {
      if (!items.every((item) => typeof item === "string")) throw new Error("File paths cannot be mixed with buffers");
      const [localPaths, localDirectory] = await resolvePathsAndDirectoryForInputFiles(items);
      if (context._connection.isRemote()) {
        const files2 = localDirectory ? (await _fs2.default.promises.readdir(localDirectory, {
          withFileTypes: true,
          recursive: true
        })).filter((f) => f.isFile()).map((f) => _path2.default.join(f.path, f.name)) : localPaths;
        const {
          writableStreams,
          rootDir
        } = await context._wrapApiCall(async () => context._channel.createTempFiles({
          rootDirName: localDirectory ? _path2.default.basename(localDirectory) : void 0,
          items: await Promise.all(files2.map(async (file) => {
            const lastModifiedMs = (await _fs2.default.promises.stat(file)).mtimeMs;
            return {
              name: localDirectory ? _path2.default.relative(localDirectory, file) : _path2.default.basename(file),
              lastModifiedMs
            };
          }))
        }), true);
        for (let i = 0; i < files2.length; i++) {
          const writable = _writableStream.WritableStream.from(writableStreams[i]);
          await pipelineAsync(_fs2.default.createReadStream(files2[i]), writable.stream());
        }
        return {
          directoryStream: rootDir,
          streams: localDirectory ? void 0 : writableStreams
        };
      }
      return {
        localPaths,
        localDirectory
      };
    }
    const payloads = items;
    if (filePayloadExceedsSizeLimit(payloads)) throw new Error("Cannot set buffer larger than 50Mb, please write it to a file and pass its path instead.");
    return {
      payloads
    };
  }
  function determineScreenshotType(options) {
    if (options.path) {
      const mimeType2 = _utilsBundle2.mime.getType(options.path);
      if (mimeType2 === "image/png") return "png";
      else if (mimeType2 === "image/jpeg") return "jpeg";
      throw new Error(`path: unsupported mime type "${mimeType2}"`);
    }
    return options.type;
  }
  return elementHandle;
}
var fileChooser = {};
Object.defineProperty(fileChooser, "__esModule", {
  value: true
});
fileChooser.FileChooser = void 0;
class FileChooser2 {
  constructor(page2, elementHandle2, isMultiple) {
    this._page = void 0;
    this._elementHandle = void 0;
    this._isMultiple = void 0;
    this._page = page2;
    this._elementHandle = elementHandle2;
    this._isMultiple = isMultiple;
  }
  element() {
    return this._elementHandle;
  }
  isMultiple() {
    return this._isMultiple;
  }
  page() {
    return this._page;
  }
  async setFiles(files, options) {
    return await this._elementHandle.setInputFiles(files, options);
  }
}
fileChooser.FileChooser = FileChooser2;
var input = {};
Object.defineProperty(input, "__esModule", {
  value: true
});
input.Touchscreen = input.Mouse = input.Keyboard = void 0;
class Keyboard2 {
  constructor(page2) {
    this._page = void 0;
    this._page = page2;
  }
  async down(key) {
    await this._page._channel.keyboardDown({
      key
    });
  }
  async up(key) {
    await this._page._channel.keyboardUp({
      key
    });
  }
  async insertText(text) {
    await this._page._channel.keyboardInsertText({
      text
    });
  }
  async type(text, options = {}) {
    await this._page._channel.keyboardType({
      text,
      ...options
    });
  }
  async press(key, options = {}) {
    await this._page._channel.keyboardPress({
      key,
      ...options
    });
  }
}
input.Keyboard = Keyboard2;
class Mouse2 {
  constructor(page2) {
    this._page = void 0;
    this._page = page2;
  }
  async move(x, y, options = {}) {
    await this._page._channel.mouseMove({
      x,
      y,
      ...options
    });
  }
  async down(options = {}) {
    await this._page._channel.mouseDown({
      ...options
    });
  }
  async up(options = {}) {
    await this._page._channel.mouseUp(options);
  }
  async click(x, y, options = {}) {
    await this._page._channel.mouseClick({
      x,
      y,
      ...options
    });
  }
  async dblclick(x, y, options = {}) {
    await this.click(x, y, {
      ...options,
      clickCount: 2
    });
  }
  async wheel(deltaX, deltaY) {
    await this._page._channel.mouseWheel({
      deltaX,
      deltaY
    });
  }
}
input.Mouse = Mouse2;
class Touchscreen2 {
  constructor(page2) {
    this._page = void 0;
    this._page = page2;
  }
  async tap(x, y) {
    await this._page._channel.touchscreenTap({
      x,
      y
    });
  }
}
input.Touchscreen = Touchscreen2;
var video = {};
Object.defineProperty(video, "__esModule", {
  value: true
});
video.Video = void 0;
var _utils$5 = requireUtils();
class Video {
  constructor(page2, connection2) {
    this._artifact = null;
    this._artifactReadyPromise = new _utils$5.ManualPromise();
    this._isRemote = false;
    this._isRemote = connection2.isRemote();
    this._artifact = page2._closedOrCrashedScope.safeRace(this._artifactReadyPromise);
  }
  _artifactReady(artifact2) {
    this._artifactReadyPromise.resolve(artifact2);
  }
  async path() {
    if (this._isRemote) throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
    const artifact2 = await this._artifact;
    if (!artifact2) throw new Error("Page did not produce any video frames");
    return artifact2._initializer.absolutePath;
  }
  async saveAs(path2) {
    const artifact2 = await this._artifact;
    if (!artifact2) throw new Error("Page did not produce any video frames");
    return await artifact2.saveAs(path2);
  }
  async delete() {
    const artifact2 = await this._artifact;
    if (artifact2) await artifact2.delete();
  }
}
video.Video = Video;
var harRouter = {};
Object.defineProperty(harRouter, "__esModule", {
  value: true
});
harRouter.HarRouter = void 0;
var _debugLogger$2 = debugLogger;
let _Symbol$asyncDispose$1;
_Symbol$asyncDispose$1 = Symbol.asyncDispose;
class HarRouter {
  static async create(localUtils2, file, notFoundAction, options) {
    const {
      harId,
      error
    } = await localUtils2._channel.harOpen({
      file
    });
    if (error) throw new Error(error);
    return new HarRouter(localUtils2, harId, notFoundAction, options);
  }
  constructor(localUtils2, harId, notFoundAction, options) {
    this._localUtils = void 0;
    this._harId = void 0;
    this._notFoundAction = void 0;
    this._options = void 0;
    this._localUtils = localUtils2;
    this._harId = harId;
    this._options = options;
    this._notFoundAction = notFoundAction;
  }
  async _handle(route) {
    const request2 = route.request();
    const response = await this._localUtils._channel.harLookup({
      harId: this._harId,
      url: request2.url(),
      method: request2.method(),
      headers: await request2.headersArray(),
      postData: request2.postDataBuffer() || void 0,
      isNavigationRequest: request2.isNavigationRequest()
    });
    if (response.action === "redirect") {
      _debugLogger$2.debugLogger.log("api", `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);
      await route._redirectNavigationRequest(response.redirectURL);
      return;
    }
    if (response.action === "fulfill") {
      if (response.status === -1) return;
      await route.fulfill({
        status: response.status,
        headers: Object.fromEntries(response.headers.map((h) => [h.name, h.value])),
        body: response.body
      });
      return;
    }
    if (response.action === "error") _debugLogger$2.debugLogger.log("api", "HAR: " + response.message);
    if (this._notFoundAction === "abort") {
      await route.abort();
      return;
    }
    await route.fallback();
  }
  async addContextRoute(context) {
    await context.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
  }
  async addPageRoute(page2) {
    await page2.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
  }
  async [_Symbol$asyncDispose$1]() {
    await this.dispose();
  }
  dispose() {
    this._localUtils._channel.harClose({
      harId: this._harId
    }).catch(() => {
    });
  }
}
harRouter.HarRouter = HarRouter;
var hasRequiredPage;
function requirePage() {
  if (hasRequiredPage) return page;
  hasRequiredPage = 1;
  Object.defineProperty(page, "__esModule", {
    value: true
  });
  page.Page = page.BindingCall = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var _errors2 = errors$1;
  var _timeoutSettings2 = timeoutSettings;
  var _utils2 = requireUtils();
  var _accessibility = accessibility;
  var _artifact2 = artifact;
  var _channelOwner2 = channelOwner;
  var _clientHelper2 = clientHelper;
  var _coverage = coverage;
  var _download = download;
  var _elementHandle = requireElementHandle();
  var _events2 = events;
  var _fileChooser = fileChooser;
  var _frame = requireFrame();
  var _input = input;
  var _jsHandle2 = jsHandle;
  var _network2 = requireNetwork();
  var _video = video;
  var _waiter2 = waiter;
  var _worker = worker;
  var _harRouter = harRouter;
  let _Symbol$asyncDispose2;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  class Page extends _channelOwner2.ChannelOwner {
    static from(page2) {
      return page2._object;
    }
    static fromNullable(page2) {
      return page2 ? Page.from(page2) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._browserContext = void 0;
      this._ownedContext = void 0;
      this._mainFrame = void 0;
      this._frames = /* @__PURE__ */ new Set();
      this._workers = /* @__PURE__ */ new Set();
      this._closed = false;
      this._closedOrCrashedScope = new _utils2.LongStandingScope();
      this._viewportSize = void 0;
      this._routes = [];
      this._webSocketRoutes = [];
      this.accessibility = void 0;
      this.coverage = void 0;
      this.keyboard = void 0;
      this.mouse = void 0;
      this.request = void 0;
      this.touchscreen = void 0;
      this.clock = void 0;
      this._bindings = /* @__PURE__ */ new Map();
      this._timeoutSettings = void 0;
      this._video = null;
      this._opener = void 0;
      this._closeReason = void 0;
      this._closeWasCalled = false;
      this._harRouters = [];
      this._locatorHandlers = /* @__PURE__ */ new Map();
      this._browserContext = parent;
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings(this._browserContext._timeoutSettings);
      this.accessibility = new _accessibility.Accessibility(this._channel);
      this.keyboard = new _input.Keyboard(this);
      this.mouse = new _input.Mouse(this);
      this.request = this._browserContext.request;
      this.touchscreen = new _input.Touchscreen(this);
      this.clock = this._browserContext.clock;
      this._mainFrame = _frame.Frame.from(initializer.mainFrame);
      this._mainFrame._page = this;
      this._frames.add(this._mainFrame);
      this._viewportSize = initializer.viewportSize || null;
      this._closed = initializer.isClosed;
      this._opener = Page.fromNullable(initializer.opener);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("crash", () => this._onCrash());
      this._channel.on("download", ({
        url,
        suggestedFilename,
        artifact: artifact2
      }) => {
        const artifactObject = _artifact2.Artifact.from(artifact2);
        this.emit(_events2.Events.Page.Download, new _download.Download(this, url, suggestedFilename, artifactObject));
      });
      this._channel.on("fileChooser", ({
        element,
        isMultiple
      }) => this.emit(_events2.Events.Page.FileChooser, new _fileChooser.FileChooser(this, _elementHandle.ElementHandle.from(element), isMultiple)));
      this._channel.on("frameAttached", ({
        frame: frame2
      }) => this._onFrameAttached(_frame.Frame.from(frame2)));
      this._channel.on("frameDetached", ({
        frame: frame2
      }) => this._onFrameDetached(_frame.Frame.from(frame2)));
      this._channel.on("locatorHandlerTriggered", ({
        uid
      }) => this._onLocatorHandlerTriggered(uid));
      this._channel.on("route", ({
        route
      }) => this._onRoute(_network2.Route.from(route)));
      this._channel.on("webSocketRoute", ({
        webSocketRoute
      }) => this._onWebSocketRoute(_network2.WebSocketRoute.from(webSocketRoute)));
      this._channel.on("video", ({
        artifact: artifact2
      }) => {
        const artifactObject = _artifact2.Artifact.from(artifact2);
        this._forceVideo()._artifactReady(artifactObject);
      });
      this._channel.on("webSocket", ({
        webSocket
      }) => this.emit(_events2.Events.Page.WebSocket, _network2.WebSocket.from(webSocket)));
      this._channel.on("worker", ({
        worker: worker2
      }) => this._onWorker(_worker.Worker.from(worker2)));
      this.coverage = new _coverage.Coverage(this._channel);
      this.once(_events2.Events.Page.Close, () => this._closedOrCrashedScope.close(this._closeErrorWithReason()));
      this.once(_events2.Events.Page.Crash, () => this._closedOrCrashedScope.close(new _errors2.TargetClosedError()));
      this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([[_events2.Events.Page.Console, "console"], [_events2.Events.Page.Dialog, "dialog"], [_events2.Events.Page.Request, "request"], [_events2.Events.Page.Response, "response"], [_events2.Events.Page.RequestFinished, "requestFinished"], [_events2.Events.Page.RequestFailed, "requestFailed"], [_events2.Events.Page.FileChooser, "fileChooser"]]));
    }
    _onFrameAttached(frame2) {
      frame2._page = this;
      this._frames.add(frame2);
      if (frame2._parentFrame) frame2._parentFrame._childFrames.add(frame2);
      this.emit(_events2.Events.Page.FrameAttached, frame2);
    }
    _onFrameDetached(frame2) {
      this._frames.delete(frame2);
      frame2._detached = true;
      if (frame2._parentFrame) frame2._parentFrame._childFrames.delete(frame2);
      this.emit(_events2.Events.Page.FrameDetached, frame2);
    }
    async _onRoute(route) {
      route._context = this.context();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (this._closeWasCalled || this._browserContext._closeWasCalled) return;
        if (!routeHandler.matches(route.request().url())) continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1) continue;
        if (routeHandler.willExpire()) this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length) this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
        });
        if (handled) return;
      }
      await this._browserContext._onRoute(route);
    }
    async _onWebSocketRoute(webSocketRoute) {
      const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
      if (routeHandler) await routeHandler.handle(webSocketRoute);
      else await this._browserContext._onWebSocketRoute(webSocketRoute);
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (func) {
        await bindingCall.call(func);
        return;
      }
      await this._browserContext._onBinding(bindingCall);
    }
    _onWorker(worker2) {
      this._workers.add(worker2);
      worker2._page = this;
      this.emit(_events2.Events.Page.Worker, worker2);
    }
    _onClose() {
      this._closed = true;
      this._browserContext._pages.delete(this);
      this._browserContext._backgroundPages.delete(this);
      this._disposeHarRouters();
      this.emit(_events2.Events.Page.Close, this);
    }
    _onCrash() {
      this.emit(_events2.Events.Page.Crash, this);
    }
    context() {
      return this._browserContext;
    }
    async opener() {
      if (!this._opener || this._opener.isClosed()) return null;
      return this._opener;
    }
    mainFrame() {
      return this._mainFrame;
    }
    frame(frameSelector) {
      const name2 = (0, _utils2.isString)(frameSelector) ? frameSelector : frameSelector.name;
      const url = (0, _utils2.isObject)(frameSelector) ? frameSelector.url : void 0;
      (0, _utils2.assert)(name2 || url, "Either name or url matcher should be specified");
      return this.frames().find((f) => {
        if (name2) return f.name() === name2;
        return (0, _utils2.urlMatches)(this._browserContext._options.baseURL, f.url(), url);
      }) || null;
    }
    frames() {
      return [...this._frames];
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    _forceVideo() {
      if (!this._video) this._video = new _video.Video(this, this._connection);
      return this._video;
    }
    video() {
      if (!this._browserContext._options.recordVideo) return null;
      return this._forceVideo();
    }
    async $(selector, options) {
      return await this._mainFrame.$(selector, options);
    }
    async waitForSelector(selector, options) {
      return await this._mainFrame.waitForSelector(selector, options);
    }
    async dispatchEvent(selector, type, eventInit, options) {
      return await this._mainFrame.dispatchEvent(selector, type, eventInit, options);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluateHandle(pageFunction, arg);
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$eval(selector, pageFunction, arg);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$$eval(selector, pageFunction, arg);
    }
    async $$(selector) {
      return await this._mainFrame.$$(selector);
    }
    async addScriptTag(options = {}) {
      return await this._mainFrame.addScriptTag(options);
    }
    async addStyleTag(options = {}) {
      return await this._mainFrame.addStyleTag(options);
    }
    async exposeFunction(name2, callback) {
      await this._channel.exposeBinding({
        name: name2
      });
      const binding = (source2, ...args) => callback(...args);
      this._bindings.set(name2, binding);
    }
    async exposeBinding(name2, callback, options = {}) {
      await this._channel.exposeBinding({
        name: name2,
        needsHandle: options.handle
      });
      this._bindings.set(name2, callback);
    }
    async setExtraHTTPHeaders(headers2) {
      (0, _network2.validateHeaders)(headers2);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils2.headersObjectToArray)(headers2)
      });
    }
    url() {
      return this._mainFrame.url();
    }
    async content() {
      return await this._mainFrame.content();
    }
    async setContent(html, options) {
      return await this._mainFrame.setContent(html, options);
    }
    async goto(url, options) {
      return await this._mainFrame.goto(url, options);
    }
    async reload(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.reload({
        ...options,
        waitUntil
      })).response);
    }
    async addLocatorHandler(locator2, handler, options = {}) {
      if (locator2._frame !== this._mainFrame) throw new Error(`Locator must belong to the main frame of this page`);
      if (options.times === 0) return;
      const {
        uid
      } = await this._channel.registerLocatorHandler({
        selector: locator2._selector,
        noWaitAfter: options.noWaitAfter
      });
      this._locatorHandlers.set(uid, {
        locator: locator2,
        handler,
        times: options.times
      });
    }
    async _onLocatorHandlerTriggered(uid) {
      let remove = false;
      try {
        const handler = this._locatorHandlers.get(uid);
        if (handler && handler.times !== 0) {
          if (handler.times !== void 0) handler.times--;
          await handler.handler(handler.locator);
        }
        remove = (handler === null || handler === void 0 ? void 0 : handler.times) === 0;
      } finally {
        if (remove) this._locatorHandlers.delete(uid);
        this._wrapApiCall(() => this._channel.resolveLocatorHandlerNoReply({
          uid,
          remove
        }), true).catch(() => {
        });
      }
    }
    async removeLocatorHandler(locator2) {
      for (const [uid, data] of this._locatorHandlers) {
        if (data.locator._equals(locator2)) {
          this._locatorHandlers.delete(uid);
          await this._channel.unregisterLocatorHandler({
            uid
          }).catch(() => {
          });
        }
      }
    }
    async waitForLoadState(state, options) {
      return await this._mainFrame.waitForLoadState(state, options);
    }
    async waitForNavigation(options) {
      return await this._mainFrame.waitForNavigation(options);
    }
    async waitForURL(url, options) {
      return await this._mainFrame.waitForURL(url, options);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
      const predicate = async (request2) => {
        if ((0, _utils2.isString)(urlOrPredicate) || (0, _utils2.isRegExp)(urlOrPredicate)) return (0, _utils2.urlMatches)(this._browserContext._options.baseURL, request2.url(), urlOrPredicate);
        return await urlOrPredicate(request2);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for request ${trimmedUrl}` : void 0;
      return await this._waitForEvent(_events2.Events.Page.Request, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
      const predicate = async (response) => {
        if ((0, _utils2.isString)(urlOrPredicate) || (0, _utils2.isRegExp)(urlOrPredicate)) return (0, _utils2.urlMatches)(this._browserContext._options.baseURL, response.url(), urlOrPredicate);
        return await urlOrPredicate(response);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for response ${trimmedUrl}` : void 0;
      return await this._waitForEvent(_events2.Events.Page.Response, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._waitForEvent(event, optionsOrPredicate, `waiting for event "${event}"`);
    }
    _closeErrorWithReason() {
      return new _errors2.TargetClosedError(this._closeReason || this._browserContext._effectiveCloseReason());
    }
    async _waitForEvent(event, optionsOrPredicate, logLine) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter2.Waiter.createForEvent(this, event);
        if (logLine) waiter2.log(logLine);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events2.Events.Page.Crash) waiter2.rejectOnEvent(this, _events2.Events.Page.Crash, new Error("Page crashed"));
        if (event !== _events2.Events.Page.Close) waiter2.rejectOnEvent(this, _events2.Events.Page.Close, () => this._closeErrorWithReason());
        const result2 = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result2;
      });
    }
    async goBack(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.goBack({
        ...options,
        waitUntil
      })).response);
    }
    async goForward(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
      return _network2.Response.fromNullable((await this._channel.goForward({
        ...options,
        waitUntil
      })).response);
    }
    async requestGC() {
      await this._channel.requestGC();
    }
    async emulateMedia(options = {}) {
      await this._channel.emulateMedia({
        media: options.media === null ? "no-override" : options.media,
        colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
        reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
        forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors
      });
    }
    async setViewportSize(viewportSize) {
      this._viewportSize = viewportSize;
      await this._channel.setViewportSize({
        viewportSize
      });
    }
    viewportSize() {
      return this._viewportSize;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle2.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluate(pageFunction, arg);
    }
    async addInitScript(script, arg) {
      const source2 = await (0, _clientHelper2.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source: source2
      });
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new _network2.RouteHandler(this._browserContext._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._browserContext._recordIntoHAR(har, this, options);
        return;
      }
      const harRouter2 = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter2);
      await harRouter2.addPageRoute(this);
    }
    async routeWebSocket(url, handler) {
      this._webSocketRoutes.unshift(new _network2.WebSocketRouteHandler(this._browserContext._options.baseURL, url, handler));
      await this._updateWebSocketInterceptionPatterns();
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === void 0 ? void 0 : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils2.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler)) removed.push(route);
        else remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default") return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = _network2.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async _updateWebSocketInterceptionPatterns() {
      const patterns = _network2.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
      await this._channel.setWebSocketInterceptionPatterns({
        patterns
      });
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: void 0
      };
      if (!copy.type) copy.type = (0, _elementHandle.determineScreenshotType)(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator2) => ({
          frame: locator2._frame._channel,
          selector: locator2._selector
        }));
      }
      const result2 = await this._channel.screenshot(copy);
      if (options.path) {
        await (0, _utils2.mkdirIfNeeded)(options.path);
        await _fs2.default.promises.writeFile(options.path, result2.binary);
      }
      return result2.binary;
    }
    async _expectScreenshot(options) {
      const mask = options !== null && options !== void 0 && options.mask ? options === null || options === void 0 ? void 0 : options.mask.map((locator3) => ({
        frame: locator3._frame._channel,
        selector: locator3._selector
      })) : void 0;
      const locator2 = options.locator ? {
        frame: options.locator._frame._channel,
        selector: options.locator._selector
      } : void 0;
      return await this._channel.expectScreenshot({
        ...options,
        isNot: !!options.isNot,
        locator: locator2,
        mask
      });
    }
    async title() {
      return await this._mainFrame.title();
    }
    async bringToFront() {
      await this._channel.bringToFront();
    }
    async [_Symbol$asyncDispose2]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      try {
        if (this._ownedContext) await this._ownedContext.close();
        else await this._channel.close(options);
      } catch (e) {
        if ((0, _errors2.isTargetClosedError)(e) && !options.runBeforeUnload) return;
        throw e;
      }
    }
    isClosed() {
      return this._closed;
    }
    async click(selector, options) {
      return await this._mainFrame.click(selector, options);
    }
    async dragAndDrop(source2, target, options) {
      return await this._mainFrame.dragAndDrop(source2, target, options);
    }
    async dblclick(selector, options) {
      return await this._mainFrame.dblclick(selector, options);
    }
    async tap(selector, options) {
      return await this._mainFrame.tap(selector, options);
    }
    async fill(selector, value, options) {
      return await this._mainFrame.fill(selector, value, options);
    }
    locator(selector, options) {
      return this.mainFrame().locator(selector, options);
    }
    getByTestId(testId) {
      return this.mainFrame().getByTestId(testId);
    }
    getByAltText(text, options) {
      return this.mainFrame().getByAltText(text, options);
    }
    getByLabel(text, options) {
      return this.mainFrame().getByLabel(text, options);
    }
    getByPlaceholder(text, options) {
      return this.mainFrame().getByPlaceholder(text, options);
    }
    getByText(text, options) {
      return this.mainFrame().getByText(text, options);
    }
    getByTitle(text, options) {
      return this.mainFrame().getByTitle(text, options);
    }
    getByRole(role, options = {}) {
      return this.mainFrame().getByRole(role, options);
    }
    frameLocator(selector) {
      return this.mainFrame().frameLocator(selector);
    }
    async focus(selector, options) {
      return await this._mainFrame.focus(selector, options);
    }
    async textContent(selector, options) {
      return await this._mainFrame.textContent(selector, options);
    }
    async innerText(selector, options) {
      return await this._mainFrame.innerText(selector, options);
    }
    async innerHTML(selector, options) {
      return await this._mainFrame.innerHTML(selector, options);
    }
    async getAttribute(selector, name2, options) {
      return await this._mainFrame.getAttribute(selector, name2, options);
    }
    async inputValue(selector, options) {
      return await this._mainFrame.inputValue(selector, options);
    }
    async isChecked(selector, options) {
      return await this._mainFrame.isChecked(selector, options);
    }
    async isDisabled(selector, options) {
      return await this._mainFrame.isDisabled(selector, options);
    }
    async isEditable(selector, options) {
      return await this._mainFrame.isEditable(selector, options);
    }
    async isEnabled(selector, options) {
      return await this._mainFrame.isEnabled(selector, options);
    }
    async isHidden(selector, options) {
      return await this._mainFrame.isHidden(selector, options);
    }
    async isVisible(selector, options) {
      return await this._mainFrame.isVisible(selector, options);
    }
    async hover(selector, options) {
      return await this._mainFrame.hover(selector, options);
    }
    async selectOption(selector, values, options) {
      return await this._mainFrame.selectOption(selector, values, options);
    }
    async setInputFiles(selector, files, options) {
      return await this._mainFrame.setInputFiles(selector, files, options);
    }
    async type(selector, text, options) {
      return await this._mainFrame.type(selector, text, options);
    }
    async press(selector, key, options) {
      return await this._mainFrame.press(selector, key, options);
    }
    async check(selector, options) {
      return await this._mainFrame.check(selector, options);
    }
    async uncheck(selector, options) {
      return await this._mainFrame.uncheck(selector, options);
    }
    async setChecked(selector, checked, options) {
      return await this._mainFrame.setChecked(selector, checked, options);
    }
    async waitForTimeout(timeout) {
      return await this._mainFrame.waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
      return await this._mainFrame.waitForFunction(pageFunction, arg, options);
    }
    workers() {
      return [...this._workers];
    }
    async pause() {
      var _this$_instrumentatio;
      if (require$$2$2.url()) return;
      const defaultNavigationTimeout = this._browserContext._timeoutSettings.defaultNavigationTimeout();
      const defaultTimeout = this._browserContext._timeoutSettings.defaultTimeout();
      this._browserContext.setDefaultNavigationTimeout(0);
      this._browserContext.setDefaultTimeout(0);
      (_this$_instrumentatio = this._instrumentation) === null || _this$_instrumentatio === void 0 || _this$_instrumentatio.onWillPause();
      await this._closedOrCrashedScope.safeRace(this.context()._channel.pause());
      this._browserContext.setDefaultNavigationTimeout(defaultNavigationTimeout);
      this._browserContext.setDefaultTimeout(defaultTimeout);
    }
    async pdf(options = {}) {
      const transportOptions = {
        ...options
      };
      if (transportOptions.margin) transportOptions.margin = {
        ...transportOptions.margin
      };
      if (typeof options.width === "number") transportOptions.width = options.width + "px";
      if (typeof options.height === "number") transportOptions.height = options.height + "px";
      for (const margin of ["top", "right", "bottom", "left"]) {
        const index = margin;
        if (options.margin && typeof options.margin[index] === "number") transportOptions.margin[index] = transportOptions.margin[index] + "px";
      }
      const result2 = await this._channel.pdf(transportOptions);
      if (options.path) {
        await _fs2.default.promises.mkdir(_path2.default.dirname(options.path), {
          recursive: true
        });
        await _fs2.default.promises.writeFile(options.path, result2.pdf);
      }
      return result2.pdf;
    }
  }
  page.Page = Page;
  class BindingCall extends _channelOwner2.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async call(func) {
      try {
        const frame2 = _frame.Frame.from(this._initializer.frame);
        const source2 = {
          context: frame2._page.context(),
          page: frame2._page,
          frame: frame2
        };
        let result2;
        if (this._initializer.handle) result2 = await func(source2, _jsHandle2.JSHandle.from(this._initializer.handle));
        else result2 = await func(source2, ...this._initializer.args.map(_jsHandle2.parseResult));
        this._channel.resolve({
          result: (0, _jsHandle2.serializeArgument)(result2)
        }).catch(() => {
        });
      } catch (e) {
        this._channel.reject({
          error: (0, _errors2.serializeError)(e)
        }).catch(() => {
        });
      }
    }
  }
  page.BindingCall = BindingCall;
  function trimUrl(param) {
    if ((0, _utils2.isRegExp)(param)) return `/${(0, _utils2.trimStringWithEllipsis)(param.source, 50)}/${param.flags}`;
    if ((0, _utils2.isString)(param)) return `"${(0, _utils2.trimStringWithEllipsis)(param, 50)}"`;
  }
  return page;
}
var cdpSession = {};
Object.defineProperty(cdpSession, "__esModule", {
  value: true
});
cdpSession.CDPSession = void 0;
var _channelOwner$4 = channelOwner;
class CDPSession2 extends _channelOwner$4.ChannelOwner {
  static from(cdpSession2) {
    return cdpSession2._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this._channel.on("event", ({
      method,
      params
    }) => {
      this.emit(method, params);
    });
    this.on = super.on;
    this.addListener = super.addListener;
    this.off = super.removeListener;
    this.removeListener = super.removeListener;
    this.once = super.once;
  }
  async send(method, params) {
    const result2 = await this._channel.send({
      method,
      params
    });
    return result2.result;
  }
  async detach() {
    return await this._channel.detach();
  }
}
cdpSession.CDPSession = CDPSession2;
var consoleMessage = {};
var hasRequiredConsoleMessage;
function requireConsoleMessage() {
  if (hasRequiredConsoleMessage) return consoleMessage;
  hasRequiredConsoleMessage = 1;
  Object.defineProperty(consoleMessage, "__esModule", {
    value: true
  });
  consoleMessage.ConsoleMessage = void 0;
  var util = _interopRequireWildcard2(require$$1$1);
  var _jsHandle2 = jsHandle;
  var _page = requirePage();
  let _util$inspect$custom;
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  _util$inspect$custom = util.inspect.custom;
  class ConsoleMessage2 {
    constructor(event) {
      this._page = void 0;
      this._event = void 0;
      this._page = "page" in event && event.page ? _page.Page.from(event.page) : null;
      this._event = event;
    }
    page() {
      return this._page;
    }
    type() {
      return this._event.type;
    }
    text() {
      return this._event.text;
    }
    args() {
      return this._event.args.map(_jsHandle2.JSHandle.from);
    }
    location() {
      return this._event.location;
    }
    [_util$inspect$custom]() {
      return this.text();
    }
  }
  consoleMessage.ConsoleMessage = ConsoleMessage2;
  return consoleMessage;
}
var dialog = {};
var hasRequiredDialog;
function requireDialog() {
  if (hasRequiredDialog) return dialog;
  hasRequiredDialog = 1;
  Object.defineProperty(dialog, "__esModule", {
    value: true
  });
  dialog.Dialog = void 0;
  var _channelOwner2 = channelOwner;
  var _page = requirePage();
  class Dialog2 extends _channelOwner2.ChannelOwner {
    static from(dialog2) {
      return dialog2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = void 0;
      this._page = _page.Page.fromNullable(initializer.page);
    }
    page() {
      return this._page;
    }
    type() {
      return this._initializer.type;
    }
    message() {
      return this._initializer.message;
    }
    defaultValue() {
      return this._initializer.defaultValue;
    }
    async accept(promptText) {
      await this._channel.accept({
        promptText
      });
    }
    async dismiss() {
      await this._channel.dismiss();
    }
  }
  dialog.Dialog = Dialog2;
  return dialog;
}
var webError = {};
Object.defineProperty(webError, "__esModule", {
  value: true
});
webError.WebError = void 0;
class WebError {
  constructor(page2, error) {
    this._page = void 0;
    this._error = void 0;
    this._page = page2;
    this._error = error;
  }
  page() {
    return this._page;
  }
  error() {
    return this._error;
  }
}
webError.WebError = WebError;
var clock = {};
Object.defineProperty(clock, "__esModule", {
  value: true
});
clock.Clock = void 0;
class Clock2 {
  constructor(browserContext2) {
    this._browserContext = void 0;
    this._browserContext = browserContext2;
  }
  async install(options = {}) {
    await this._browserContext._channel.clockInstall(options.time !== void 0 ? parseTime(options.time) : {});
  }
  async fastForward(ticks) {
    await this._browserContext._channel.clockFastForward(parseTicks(ticks));
  }
  async pauseAt(time2) {
    await this._browserContext._channel.clockPauseAt(parseTime(time2));
  }
  async resume() {
    await this._browserContext._channel.clockResume({});
  }
  async runFor(ticks) {
    await this._browserContext._channel.clockRunFor(parseTicks(ticks));
  }
  async setFixedTime(time2) {
    await this._browserContext._channel.clockSetFixedTime(parseTime(time2));
  }
  async setSystemTime(time2) {
    await this._browserContext._channel.clockSetSystemTime(parseTime(time2));
  }
}
clock.Clock = Clock2;
function parseTime(time2) {
  if (typeof time2 === "number") return {
    timeNumber: time2
  };
  if (typeof time2 === "string") return {
    timeString: time2
  };
  if (!isFinite(time2.getTime())) throw new Error(`Invalid date: ${time2}`);
  return {
    timeNumber: time2.getTime()
  };
}
function parseTicks(ticks) {
  return {
    ticksNumber: typeof ticks === "number" ? ticks : void 0,
    ticksString: typeof ticks === "string" ? ticks : void 0
  };
}
var hasRequiredBrowserContext;
function requireBrowserContext() {
  if (hasRequiredBrowserContext) return browserContext;
  hasRequiredBrowserContext = 1;
  Object.defineProperty(browserContext, "__esModule", {
    value: true
  });
  browserContext.BrowserContext = void 0;
  browserContext.prepareBrowserContextParams = prepareBrowserContextParams;
  browserContext.toClientCertificatesProtocol = toClientCertificatesProtocol;
  var _page = requirePage();
  var _frame = requireFrame();
  var network2 = _interopRequireWildcard2(requireNetwork());
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _path2 = _interopRequireDefault2(require$$1);
  var _channelOwner2 = channelOwner;
  var _clientHelper2 = clientHelper;
  var _browser2 = requireBrowser();
  var _worker = worker;
  var _events2 = events;
  var _timeoutSettings2 = timeoutSettings;
  var _waiter2 = waiter;
  var _utils2 = requireUtils();
  var _cdpSession = cdpSession;
  var _tracing = tracing;
  var _artifact2 = artifact;
  var _fetch2 = requireFetch();
  var _stackTrace2 = requireStackTrace();
  var _harRouter = harRouter;
  var _consoleMessage2 = requireConsoleMessage();
  var _dialog = requireDialog();
  var _webError = webError;
  var _errors2 = errors$1;
  var _clock = clock;
  let _Symbol$asyncDispose2;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache2(e) {
    if ("function" != typeof WeakMap) return null;
    var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
    return (_getRequireWildcardCache2 = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard2(e, r) {
    if (e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
    var t = _getRequireWildcardCache2(r);
    if (t && t.has(e)) return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  class BrowserContext extends _channelOwner2.ChannelOwner {
    static from(context) {
      return context._object;
    }
    static fromNullable(context) {
      return context ? BrowserContext.from(context) : null;
    }
    constructor(parent, type, guid, initializer) {
      var _this$_browser, _this$_browser2;
      super(parent, type, guid, initializer);
      this._pages = /* @__PURE__ */ new Set();
      this._routes = [];
      this._webSocketRoutes = [];
      this._browser = null;
      this._browserType = void 0;
      this._bindings = /* @__PURE__ */ new Map();
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings();
      this._ownerPage = void 0;
      this._closedPromise = void 0;
      this._options = {};
      this.request = void 0;
      this.tracing = void 0;
      this.clock = void 0;
      this._backgroundPages = /* @__PURE__ */ new Set();
      this._serviceWorkers = /* @__PURE__ */ new Set();
      this._isChromium = void 0;
      this._harRecorders = /* @__PURE__ */ new Map();
      this._closeWasCalled = false;
      this._closeReason = void 0;
      this._harRouters = [];
      if (parent instanceof _browser2.Browser) this._browser = parent;
      (_this$_browser = this._browser) === null || _this$_browser === void 0 || _this$_browser._contexts.add(this);
      this._isChromium = ((_this$_browser2 = this._browser) === null || _this$_browser2 === void 0 ? void 0 : _this$_browser2._name) === "chromium";
      this.tracing = _tracing.Tracing.from(initializer.tracing);
      this.request = _fetch2.APIRequestContext.from(initializer.requestContext);
      this.clock = new _clock.Clock(this);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(_page.BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("page", ({
        page: page2
      }) => this._onPage(_page.Page.from(page2)));
      this._channel.on("route", ({
        route
      }) => this._onRoute(network2.Route.from(route)));
      this._channel.on("webSocketRoute", ({
        webSocketRoute
      }) => this._onWebSocketRoute(network2.WebSocketRoute.from(webSocketRoute)));
      this._channel.on("backgroundPage", ({
        page: page2
      }) => {
        const backgroundPage = _page.Page.from(page2);
        this._backgroundPages.add(backgroundPage);
        this.emit(_events2.Events.BrowserContext.BackgroundPage, backgroundPage);
      });
      this._channel.on("serviceWorker", ({
        worker: worker2
      }) => {
        const serviceWorker = _worker.Worker.from(worker2);
        serviceWorker._context = this;
        this._serviceWorkers.add(serviceWorker);
        this.emit(_events2.Events.BrowserContext.ServiceWorker, serviceWorker);
      });
      this._channel.on("console", (event) => {
        const consoleMessage2 = new _consoleMessage2.ConsoleMessage(event);
        this.emit(_events2.Events.BrowserContext.Console, consoleMessage2);
        const page2 = consoleMessage2.page();
        if (page2) page2.emit(_events2.Events.Page.Console, consoleMessage2);
      });
      this._channel.on("pageError", ({
        error,
        page: page2
      }) => {
        const pageObject = _page.Page.from(page2);
        const parsedError = (0, _errors2.parseError)(error);
        this.emit(_events2.Events.BrowserContext.WebError, new _webError.WebError(pageObject, parsedError));
        if (pageObject) pageObject.emit(_events2.Events.Page.PageError, parsedError);
      });
      this._channel.on("dialog", ({
        dialog: dialog2
      }) => {
        const dialogObject = _dialog.Dialog.from(dialog2);
        let hasListeners = this.emit(_events2.Events.BrowserContext.Dialog, dialogObject);
        const page2 = dialogObject.page();
        if (page2) hasListeners = page2.emit(_events2.Events.Page.Dialog, dialogObject) || hasListeners;
        if (!hasListeners) {
          if (dialogObject.type() === "beforeunload") dialog2.accept({}).catch(() => {
          });
          else dialog2.dismiss().catch(() => {
          });
        }
      });
      this._channel.on("request", ({
        request: request2,
        page: page2
      }) => this._onRequest(network2.Request.from(request2), _page.Page.fromNullable(page2)));
      this._channel.on("requestFailed", ({
        request: request2,
        failureText,
        responseEndTiming,
        page: page2
      }) => this._onRequestFailed(network2.Request.from(request2), responseEndTiming, failureText, _page.Page.fromNullable(page2)));
      this._channel.on("requestFinished", (params) => this._onRequestFinished(params));
      this._channel.on("response", ({
        response,
        page: page2
      }) => this._onResponse(network2.Response.from(response), _page.Page.fromNullable(page2)));
      this._closedPromise = new Promise((f) => this.once(_events2.Events.BrowserContext.Close, f));
      this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([[_events2.Events.BrowserContext.Console, "console"], [_events2.Events.BrowserContext.Dialog, "dialog"], [_events2.Events.BrowserContext.Request, "request"], [_events2.Events.BrowserContext.Response, "response"], [_events2.Events.BrowserContext.RequestFinished, "requestFinished"], [_events2.Events.BrowserContext.RequestFailed, "requestFailed"]]));
    }
    _setOptions(contextOptions, browserOptions) {
      this._options = contextOptions;
      if (this._options.recordHar) this._harRecorders.set("", {
        path: this._options.recordHar.path,
        content: this._options.recordHar.content
      });
      this.tracing._tracesDir = browserOptions.tracesDir;
    }
    _onPage(page2) {
      this._pages.add(page2);
      this.emit(_events2.Events.BrowserContext.Page, page2);
      if (page2._opener && !page2._opener.isClosed()) page2._opener.emit(_events2.Events.Page.Popup, page2);
    }
    _onRequest(request2, page2) {
      this.emit(_events2.Events.BrowserContext.Request, request2);
      if (page2) page2.emit(_events2.Events.Page.Request, request2);
    }
    _onResponse(response, page2) {
      this.emit(_events2.Events.BrowserContext.Response, response);
      if (page2) page2.emit(_events2.Events.Page.Response, response);
    }
    _onRequestFailed(request2, responseEndTiming, failureText, page2) {
      request2._failureText = failureText || null;
      request2._setResponseEndTiming(responseEndTiming);
      this.emit(_events2.Events.BrowserContext.RequestFailed, request2);
      if (page2) page2.emit(_events2.Events.Page.RequestFailed, request2);
    }
    _onRequestFinished(params) {
      const {
        responseEndTiming
      } = params;
      const request2 = network2.Request.from(params.request);
      const response = network2.Response.fromNullable(params.response);
      const page2 = _page.Page.fromNullable(params.page);
      request2._setResponseEndTiming(responseEndTiming);
      this.emit(_events2.Events.BrowserContext.RequestFinished, request2);
      if (page2) page2.emit(_events2.Events.Page.RequestFinished, request2);
      if (response) response._finishedPromise.resolve(null);
    }
    async _onRoute(route) {
      route._context = this;
      const page2 = route.request()._safePage();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (page2 !== null && page2 !== void 0 && page2._closeWasCalled || this._closeWasCalled) return;
        if (!routeHandler.matches(route.request().url())) continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1) continue;
        if (routeHandler.willExpire()) this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length) this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
        });
        if (handled) return;
      }
      await route._innerContinue(
        true
        /* isFallback */
      ).catch(() => {
      });
    }
    async _onWebSocketRoute(webSocketRoute) {
      const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
      if (routeHandler) await routeHandler.handle(webSocketRoute);
      else webSocketRoute.connectToServer();
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (!func) return;
      await bindingCall.call(func);
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    browser() {
      return this._browser;
    }
    pages() {
      return [...this._pages];
    }
    async newPage() {
      if (this._ownerPage) throw new Error("Please use browser.newContext()");
      return _page.Page.from((await this._channel.newPage()).page);
    }
    async cookies(urls) {
      if (!urls) urls = [];
      if (urls && typeof urls === "string") urls = [urls];
      return (await this._channel.cookies({
        urls
      })).cookies;
    }
    async addCookies(cookies) {
      await this._channel.addCookies({
        cookies
      });
    }
    async clearCookies(options = {}) {
      await this._channel.clearCookies({
        name: (0, _utils2.isString)(options.name) ? options.name : void 0,
        nameRegexSource: (0, _utils2.isRegExp)(options.name) ? options.name.source : void 0,
        nameRegexFlags: (0, _utils2.isRegExp)(options.name) ? options.name.flags : void 0,
        domain: (0, _utils2.isString)(options.domain) ? options.domain : void 0,
        domainRegexSource: (0, _utils2.isRegExp)(options.domain) ? options.domain.source : void 0,
        domainRegexFlags: (0, _utils2.isRegExp)(options.domain) ? options.domain.flags : void 0,
        path: (0, _utils2.isString)(options.path) ? options.path : void 0,
        pathRegexSource: (0, _utils2.isRegExp)(options.path) ? options.path.source : void 0,
        pathRegexFlags: (0, _utils2.isRegExp)(options.path) ? options.path.flags : void 0
      });
    }
    async grantPermissions(permissions, options) {
      await this._channel.grantPermissions({
        permissions,
        ...options
      });
    }
    async clearPermissions() {
      await this._channel.clearPermissions();
    }
    async setGeolocation(geolocation) {
      await this._channel.setGeolocation({
        geolocation: geolocation || void 0
      });
    }
    async setExtraHTTPHeaders(headers2) {
      network2.validateHeaders(headers2);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils2.headersObjectToArray)(headers2)
      });
    }
    async setOffline(offline) {
      await this._channel.setOffline({
        offline
      });
    }
    async setHTTPCredentials(httpCredentials) {
      await this._channel.setHTTPCredentials({
        httpCredentials: httpCredentials || void 0
      });
    }
    async addInitScript(script, arg) {
      const source2 = await (0, _clientHelper2.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source: source2
      });
    }
    async exposeBinding(name2, callback, options = {}) {
      await this._channel.exposeBinding({
        name: name2,
        needsHandle: options.handle
      });
      this._bindings.set(name2, callback);
    }
    async exposeFunction(name2, callback) {
      await this._channel.exposeBinding({
        name: name2
      });
      const binding = (source2, ...args) => callback(...args);
      this._bindings.set(name2, binding);
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new network2.RouteHandler(this._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeWebSocket(url, handler) {
      this._webSocketRoutes.unshift(new network2.WebSocketRouteHandler(this._options.baseURL, url, handler));
      await this._updateWebSocketInterceptionPatterns();
    }
    async _recordIntoHAR(har, page2, options = {}) {
      var _options$updateConten, _options$updateMode, _options$updateConten2;
      const {
        harId
      } = await this._channel.harStart({
        page: page2 === null || page2 === void 0 ? void 0 : page2._channel,
        options: prepareRecordHarOptions({
          path: har,
          content: (_options$updateConten = options.updateContent) !== null && _options$updateConten !== void 0 ? _options$updateConten : "attach",
          mode: (_options$updateMode = options.updateMode) !== null && _options$updateMode !== void 0 ? _options$updateMode : "minimal",
          urlFilter: options.url
        })
      });
      this._harRecorders.set(harId, {
        path: har,
        content: (_options$updateConten2 = options.updateContent) !== null && _options$updateConten2 !== void 0 ? _options$updateConten2 : "attach"
      });
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._recordIntoHAR(har, null, options);
        return;
      }
      const harRouter2 = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter2);
      await harRouter2.addContextRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === void 0 ? void 0 : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils2.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler)) removed.push(route);
        else remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default") return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = network2.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async _updateWebSocketInterceptionPatterns() {
      const patterns = network2.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
      await this._channel.setWebSocketInterceptionPatterns({
        patterns
      });
    }
    _effectiveCloseReason() {
      var _this$_browser3;
      return this._closeReason || ((_this$_browser3 = this._browser) === null || _this$_browser3 === void 0 ? void 0 : _this$_browser3._closeReason);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter2.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events2.Events.BrowserContext.Close) waiter2.rejectOnEvent(this, _events2.Events.BrowserContext.Close, () => new _errors2.TargetClosedError(this._effectiveCloseReason()));
        const result2 = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result2;
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _utils2.mkdirIfNeeded)(options.path);
        await _fs2.default.promises.writeFile(options.path, JSON.stringify(state, void 0, 2), "utf8");
      }
      return state;
    }
    backgroundPages() {
      return [...this._backgroundPages];
    }
    serviceWorkers() {
      return [...this._serviceWorkers];
    }
    async newCDPSession(page2) {
      if (!(page2 instanceof _page.Page) && !(page2 instanceof _frame.Frame)) throw new Error("page: expected Page or Frame");
      const result2 = await this._channel.newCDPSession(page2 instanceof _page.Page ? {
        page: page2._channel
      } : {
        frame: page2._channel
      });
      return _cdpSession.CDPSession.from(result2.session);
    }
    _onClose() {
      var _this$_browserType;
      if (this._browser) this._browser._contexts.delete(this);
      (_this$_browserType = this._browserType) === null || _this$_browserType === void 0 || (_this$_browserType = _this$_browserType._contexts) === null || _this$_browserType === void 0 || _this$_browserType.delete(this);
      this._disposeHarRouters();
      this.tracing._resetStackCounter();
      this.emit(_events2.Events.BrowserContext.Close, this);
    }
    async [_Symbol$asyncDispose2]() {
      await this.close();
    }
    async close(options = {}) {
      if (this._closeWasCalled) return;
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      await this._wrapApiCall(async () => {
        await this.request.dispose(options);
      }, true);
      await this._wrapApiCall(async () => {
        var _this$_browserType2;
        await ((_this$_browserType2 = this._browserType) === null || _this$_browserType2 === void 0 ? void 0 : _this$_browserType2._willCloseContext(this));
        for (const [harId, harParams] of this._harRecorders) {
          const har = await this._channel.harExport({
            harId
          });
          const artifact2 = _artifact2.Artifact.from(har.artifact);
          const isCompressed = harParams.content === "attach" || harParams.path.endsWith(".zip");
          const needCompressed = harParams.path.endsWith(".zip");
          if (isCompressed && !needCompressed) {
            await artifact2.saveAs(harParams.path + ".tmp");
            await this._connection.localUtils()._channel.harUnzip({
              zipFile: harParams.path + ".tmp",
              harFile: harParams.path
            });
          } else {
            await artifact2.saveAs(harParams.path);
          }
          await artifact2.delete();
        }
      }, true);
      await this._channel.close(options);
      await this._closedPromise;
    }
    async _enableRecorder(params) {
      await this._channel.enableRecorder(params);
    }
  }
  browserContext.BrowserContext = BrowserContext;
  async function prepareStorageState(options) {
    if (typeof options.storageState !== "string") return options.storageState;
    try {
      return JSON.parse(await _fs2.default.promises.readFile(options.storageState, "utf8"));
    } catch (e) {
      (0, _stackTrace2.rewriteErrorMessage)(e, `Error reading storage state from ${options.storageState}:
` + e.message);
      throw e;
    }
  }
  function prepareRecordHarOptions(options) {
    if (!options) return;
    return {
      path: options.path,
      content: options.content || (options.omitContent ? "omit" : void 0),
      urlGlob: (0, _utils2.isString)(options.urlFilter) ? options.urlFilter : void 0,
      urlRegexSource: (0, _utils2.isRegExp)(options.urlFilter) ? options.urlFilter.source : void 0,
      urlRegexFlags: (0, _utils2.isRegExp)(options.urlFilter) ? options.urlFilter.flags : void 0,
      mode: options.mode
    };
  }
  async function prepareBrowserContextParams(options) {
    if (options.videoSize && !options.videosPath) throw new Error(`"videoSize" option requires "videosPath" to be specified`);
    if (options.extraHTTPHeaders) network2.validateHeaders(options.extraHTTPHeaders);
    const contextParams = {
      ...options,
      viewport: options.viewport === null ? void 0 : options.viewport,
      noDefaultViewport: options.viewport === null,
      extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils2.headersObjectToArray)(options.extraHTTPHeaders) : void 0,
      storageState: await prepareStorageState(options),
      serviceWorkers: options.serviceWorkers,
      recordHar: prepareRecordHarOptions(options.recordHar),
      colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
      reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
      forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
      acceptDownloads: toAcceptDownloadsProtocol(options.acceptDownloads),
      clientCertificates: await toClientCertificatesProtocol(options.clientCertificates)
    };
    if (!contextParams.recordVideo && options.videosPath) {
      contextParams.recordVideo = {
        dir: options.videosPath,
        size: options.videoSize
      };
    }
    if (contextParams.recordVideo && contextParams.recordVideo.dir) contextParams.recordVideo.dir = _path2.default.resolve(process.cwd(), contextParams.recordVideo.dir);
    return contextParams;
  }
  function toAcceptDownloadsProtocol(acceptDownloads) {
    if (acceptDownloads === void 0) return void 0;
    if (acceptDownloads) return "accept";
    return "deny";
  }
  async function toClientCertificatesProtocol(certs) {
    if (!certs) return void 0;
    const bufferizeContent = async (value, path2) => {
      if (value) return value;
      if (path2) return await _fs2.default.promises.readFile(path2);
    };
    return await Promise.all(certs.map(async (cert) => ({
      origin: cert.origin,
      cert: await bufferizeContent(cert.cert, cert.certPath),
      key: await bufferizeContent(cert.key, cert.keyPath),
      pfx: await bufferizeContent(cert.pfx, cert.pfxPath),
      passphrase: cert.passphrase
    })));
  }
  return browserContext;
}
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser;
  hasRequiredBrowser = 1;
  Object.defineProperty(browser, "__esModule", {
    value: true
  });
  browser.Browser = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _browserContext2 = requireBrowserContext();
  var _channelOwner2 = channelOwner;
  var _events2 = events;
  var _errors2 = errors$1;
  var _cdpSession = cdpSession;
  var _artifact2 = artifact;
  var _utils2 = requireUtils();
  let _Symbol$asyncDispose2;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  class Browser extends _channelOwner2.ChannelOwner {
    static from(browser2) {
      return browser2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._contexts = /* @__PURE__ */ new Set();
      this._isConnected = true;
      this._closedPromise = void 0;
      this._shouldCloseConnectionOnClose = false;
      this._browserType = void 0;
      this._options = {};
      this._name = void 0;
      this._path = void 0;
      this._connectHeaders = void 0;
      this._closeReason = void 0;
      this._name = initializer.name;
      this._channel.on("close", () => this._didClose());
      this._closedPromise = new Promise((f) => this.once(_events2.Events.Browser.Disconnected, f));
    }
    browserType() {
      return this._browserType;
    }
    async newContext(options = {}) {
      return await this._innerNewContext(options, false);
    }
    async _newContextForReuse(options = {}) {
      return await this._wrapApiCall(async () => {
        for (const context of this._contexts) {
          await this._browserType._willCloseContext(context);
          for (const page2 of context.pages()) page2._onClose();
          context._onClose();
        }
        return await this._innerNewContext(options, true);
      }, true);
    }
    async _stopPendingOperations(reason) {
      return await this._wrapApiCall(async () => {
        await this._channel.stopPendingOperations({
          reason
        });
      }, true);
    }
    async _innerNewContext(options = {}, forReuse) {
      options = {
        ...this._browserType._defaultContextOptions,
        ...options
      };
      const contextOptions = await (0, _browserContext2.prepareBrowserContextParams)(options);
      const response = forReuse ? await this._channel.newContextForReuse(contextOptions) : await this._channel.newContext(contextOptions);
      const context = _browserContext2.BrowserContext.from(response.context);
      await this._browserType._didCreateContext(context, contextOptions, this._options, options.logger || this._logger);
      return context;
    }
    contexts() {
      return [...this._contexts];
    }
    version() {
      return this._initializer.version;
    }
    async newPage(options = {}) {
      return await this._wrapApiCall(async () => {
        const context = await this.newContext(options);
        const page2 = await context.newPage();
        page2._ownedContext = context;
        context._ownerPage = page2;
        return page2;
      });
    }
    isConnected() {
      return this._isConnected;
    }
    async newBrowserCDPSession() {
      return _cdpSession.CDPSession.from((await this._channel.newBrowserCDPSession()).session);
    }
    async startTracing(page2, options = {}) {
      this._path = options.path;
      await this._channel.startTracing({
        ...options,
        page: page2 ? page2._channel : void 0
      });
    }
    async stopTracing() {
      const artifact2 = _artifact2.Artifact.from((await this._channel.stopTracing()).artifact);
      const buffer = await artifact2.readIntoBuffer();
      await artifact2.delete();
      if (this._path) {
        await (0, _utils2.mkdirIfNeeded)(this._path);
        await _fs2.default.promises.writeFile(this._path, buffer);
        this._path = void 0;
      }
      return buffer;
    }
    async [_Symbol$asyncDispose2]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      try {
        if (this._shouldCloseConnectionOnClose) this._connection.close();
        else await this._channel.close(options);
        await this._closedPromise;
      } catch (e) {
        if ((0, _errors2.isTargetClosedError)(e)) return;
        throw e;
      }
    }
    _didClose() {
      this._isConnected = false;
      this.emit(_events2.Events.Browser.Disconnected, this);
    }
  }
  browser.Browser = Browser;
  return browser;
}
var browserType = {};
var hasRequiredBrowserType;
function requireBrowserType() {
  if (hasRequiredBrowserType) return browserType;
  hasRequiredBrowserType = 1;
  Object.defineProperty(browserType, "__esModule", {
    value: true
  });
  browserType.BrowserType = void 0;
  var _browser3 = requireBrowser();
  var _browserContext2 = requireBrowserContext();
  var _channelOwner2 = channelOwner;
  var _connection2 = requireConnection();
  var _events2 = events;
  var _clientHelper2 = clientHelper;
  var _utils2 = requireUtils();
  var _timeoutRunner = requireTimeoutRunner();
  class BrowserType extends _channelOwner2.ChannelOwner {
    constructor(...args) {
      super(...args);
      this._serverLauncher = void 0;
      this._contexts = /* @__PURE__ */ new Set();
      this._playwright = void 0;
      this._defaultContextOptions = void 0;
      this._defaultContextTimeout = void 0;
      this._defaultContextNavigationTimeout = void 0;
      this._defaultLaunchOptions = void 0;
    }
    static from(browserType2) {
      return browserType2._object;
    }
    executablePath() {
      if (!this._initializer.executablePath) throw new Error("Browser is not supported on current platform");
      return this._initializer.executablePath;
    }
    name() {
      return this._initializer.name;
    }
    async launch(options = {}) {
      var _this$_defaultLaunchO;
      (0, _utils2.assert)(!options.userDataDir, "userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead");
      (0, _utils2.assert)(!options.port, "Cannot specify a port without launching as a server.");
      const logger = options.logger || ((_this$_defaultLaunchO = this._defaultLaunchOptions) === null || _this$_defaultLaunchO === void 0 ? void 0 : _this$_defaultLaunchO.logger);
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      const launchOptions = {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper2.envObjectToArray)(options.env) : void 0
      };
      return await this._wrapApiCall(async () => {
        const browser2 = _browser3.Browser.from((await this._channel.launch(launchOptions)).browser);
        this._didLaunchBrowser(browser2, options, logger);
        return browser2;
      });
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher) throw new Error("Launching server is not supported");
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      return await this._serverLauncher.launchServer(options);
    }
    async launchPersistentContext(userDataDir, options = {}) {
      var _this$_defaultLaunchO2;
      const logger = options.logger || ((_this$_defaultLaunchO2 = this._defaultLaunchOptions) === null || _this$_defaultLaunchO2 === void 0 ? void 0 : _this$_defaultLaunchO2.logger);
      (0, _utils2.assert)(!options.port, "Cannot specify a port without launching as a server.");
      options = {
        ...this._defaultLaunchOptions,
        ...this._defaultContextOptions,
        ...options
      };
      const contextParams = await (0, _browserContext2.prepareBrowserContextParams)(options);
      const persistentParams = {
        ...contextParams,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper2.envObjectToArray)(options.env) : void 0,
        channel: options.channel,
        userDataDir
      };
      return await this._wrapApiCall(async () => {
        const result2 = await this._channel.launchPersistentContext(persistentParams);
        const context = _browserContext2.BrowserContext.from(result2.context);
        await this._didCreateContext(context, contextParams, options, logger);
        return context;
      });
    }
    async connect(optionsOrWsEndpoint, options) {
      if (typeof optionsOrWsEndpoint === "string") return await this._connect({
        ...options,
        wsEndpoint: optionsOrWsEndpoint
      });
      (0, _utils2.assert)(optionsOrWsEndpoint.wsEndpoint, "options.wsEndpoint is required");
      return await this._connect(optionsOrWsEndpoint);
    }
    async _connect(params) {
      const logger = params.logger;
      return await this._wrapApiCall(async () => {
        var _params$exposeNetwork;
        const deadline = params.timeout ? (0, _utils2.monotonicTime)() + params.timeout : 0;
        const headers2 = {
          "x-playwright-browser": this.name(),
          ...params.headers
        };
        const localUtils2 = this._connection.localUtils();
        const connectParams = {
          wsEndpoint: params.wsEndpoint,
          headers: headers2,
          exposeNetwork: (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== void 0 ? _params$exposeNetwork : params._exposeNetwork,
          slowMo: params.slowMo,
          timeout: params.timeout
        };
        if (params.__testHookRedirectPortForwarding) connectParams.socksProxyRedirectPortForTest = params.__testHookRedirectPortForwarding;
        const {
          pipe,
          headers: connectHeaders
        } = await localUtils2._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection2 = new _connection2.Connection(localUtils2, this._instrumentation);
        connection2.markAsRemote();
        connection2.on("close", closePipe);
        let browser2;
        let closeError;
        const onPipeClosed = (reason) => {
          for (const context of ((_browser2 = browser2) === null || _browser2 === void 0 ? void 0 : _browser2.contexts()) || []) {
            var _browser2;
            for (const page2 of context.pages()) page2._onClose();
            context._onClose();
          }
          connection2.close(reason || closeError);
          setTimeout(() => {
            var _browser22;
            return (_browser22 = browser2) === null || _browser22 === void 0 ? void 0 : _browser22._didClose();
          }, 0);
        };
        pipe.on("closed", (params2) => onPipeClosed(params2.reason));
        connection2.onmessage = (message) => this._wrapApiCall(
          () => pipe.send({
            message
          }).catch(() => onPipeClosed()),
          /* isInternal */
          true
        );
        pipe.on("message", ({
          message
        }) => {
          try {
            connection2.dispatch(message);
          } catch (e) {
            closeError = String(e);
            closePipe();
          }
        });
        const result2 = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          if (params.__testHookBeforeCreateBrowser) await params.__testHookBeforeCreateBrowser();
          const playwright2 = await connection2.initializePlaywright();
          if (!playwright2._initializer.preLaunchedBrowser) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use BrowserType.launchServer method?");
          }
          playwright2._setSelectors(this._playwright.selectors);
          browser2 = _browser3.Browser.from(playwright2._initializer.preLaunchedBrowser);
          this._didLaunchBrowser(browser2, {}, logger);
          browser2._shouldCloseConnectionOnClose = true;
          browser2._connectHeaders = connectHeaders;
          browser2.on(_events2.Events.Browser.Disconnected, () => this._wrapApiCall(
            () => closePipe(),
            /* isInternal */
            true
          ));
          return browser2;
        }, deadline);
        if (!result2.timedOut) {
          return result2.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${params.timeout}ms exceeded`);
        }
      });
    }
    async connectOverCDP(endpointURLOrOptions, options) {
      if (typeof endpointURLOrOptions === "string") return await this._connectOverCDP(endpointURLOrOptions, options);
      const endpointURL = "endpointURL" in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;
      (0, _utils2.assert)(endpointURL, "Cannot connect over CDP without wsEndpoint.");
      return await this.connectOverCDP(endpointURL, endpointURLOrOptions);
    }
    async _connectOverCDP(endpointURL, params = {}) {
      if (this.name() !== "chromium") throw new Error("Connecting over CDP is only supported in Chromium.");
      const headers2 = params.headers ? (0, _utils2.headersObjectToArray)(params.headers) : void 0;
      const result2 = await this._channel.connectOverCDP({
        endpointURL,
        headers: headers2,
        slowMo: params.slowMo,
        timeout: params.timeout
      });
      const browser2 = _browser3.Browser.from(result2.browser);
      this._didLaunchBrowser(browser2, {}, params.logger);
      if (result2.defaultContext) await this._didCreateContext(_browserContext2.BrowserContext.from(result2.defaultContext), {}, {}, params.logger);
      return browser2;
    }
    _didLaunchBrowser(browser2, browserOptions, logger) {
      browser2._browserType = this;
      browser2._options = browserOptions;
      browser2._logger = logger;
    }
    async _didCreateContext(context, contextOptions, browserOptions, logger) {
      context._logger = logger;
      context._browserType = this;
      this._contexts.add(context);
      context._setOptions(contextOptions, browserOptions);
      if (this._defaultContextTimeout !== void 0) context.setDefaultTimeout(this._defaultContextTimeout);
      if (this._defaultContextNavigationTimeout !== void 0) context.setDefaultNavigationTimeout(this._defaultContextNavigationTimeout);
      await this._instrumentation.runAfterCreateBrowserContext(context);
    }
    async _willCloseContext(context) {
      this._contexts.delete(context);
      await this._instrumentation.runBeforeCloseBrowserContext(context);
    }
  }
  browserType.BrowserType = BrowserType;
  return browserType;
}
var playwright$1 = {};
var android = {};
var hasRequiredAndroid;
function requireAndroid() {
  if (hasRequiredAndroid) return android;
  hasRequiredAndroid = 1;
  Object.defineProperty(android, "__esModule", {
    value: true
  });
  android.AndroidWebView = android.AndroidSocket = android.AndroidInput = android.AndroidDevice = android.Android = void 0;
  var _fs2 = _interopRequireDefault2(require$$0$2);
  var _utils2 = requireUtils();
  var _events2 = events;
  var _browserContext2 = requireBrowserContext();
  var _channelOwner2 = channelOwner;
  var _timeoutSettings2 = timeoutSettings;
  var _waiter2 = waiter;
  var _events22 = require$$0$1;
  var _connection2 = requireConnection();
  var _errors2 = errors$1;
  var _timeoutRunner = requireTimeoutRunner();
  let _Symbol$asyncDispose2;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  class Android extends _channelOwner2.ChannelOwner {
    static from(android2) {
      return android2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = void 0;
      this._serverLauncher = void 0;
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    async devices(options = {}) {
      const {
        devices: devices2
      } = await this._channel.devices(options);
      return devices2.map((d) => AndroidDevice.from(d));
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher) throw new Error("Launching server is not supported");
      return await this._serverLauncher.launchServer(options);
    }
    async connect(wsEndpoint, options = {}) {
      return await this._wrapApiCall(async () => {
        const deadline = options.timeout ? (0, _utils2.monotonicTime)() + options.timeout : 0;
        const headers2 = {
          "x-playwright-browser": "android",
          ...options.headers
        };
        const localUtils2 = this._connection.localUtils();
        const connectParams = {
          wsEndpoint,
          headers: headers2,
          slowMo: options.slowMo,
          timeout: options.timeout
        };
        const {
          pipe
        } = await localUtils2._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection2 = new _connection2.Connection(localUtils2, this._instrumentation);
        connection2.markAsRemote();
        connection2.on("close", closePipe);
        let device;
        let closeError;
        const onPipeClosed = () => {
          var _device;
          (_device = device) === null || _device === void 0 || _device._didClose();
          connection2.close(closeError);
        };
        pipe.on("closed", onPipeClosed);
        connection2.onmessage = (message) => pipe.send({
          message
        }).catch(onPipeClosed);
        pipe.on("message", ({
          message
        }) => {
          try {
            connection2.dispatch(message);
          } catch (e) {
            closeError = String(e);
            closePipe();
          }
        });
        const result2 = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          const playwright2 = await connection2.initializePlaywright();
          if (!playwright2._initializer.preConnectedAndroidDevice) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use Android.launchServer method?");
          }
          device = AndroidDevice.from(playwright2._initializer.preConnectedAndroidDevice);
          device._shouldCloseConnectionOnClose = true;
          device.on(_events2.Events.AndroidDevice.Close, closePipe);
          return device;
        }, deadline);
        if (!result2.timedOut) {
          return result2.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${options.timeout}ms exceeded`);
        }
      });
    }
  }
  android.Android = Android;
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  class AndroidDevice extends _channelOwner2.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = void 0;
      this._webViews = /* @__PURE__ */ new Map();
      this._shouldCloseConnectionOnClose = false;
      this.input = void 0;
      this.input = new AndroidInput(this);
      this._timeoutSettings = new _timeoutSettings2.TimeoutSettings(parent._timeoutSettings);
      this._channel.on("webViewAdded", ({
        webView
      }) => this._onWebViewAdded(webView));
      this._channel.on("webViewRemoved", ({
        socketName
      }) => this._onWebViewRemoved(socketName));
      this._channel.on("close", () => this._didClose());
    }
    _onWebViewAdded(webView) {
      const view = new AndroidWebView(this, webView);
      this._webViews.set(webView.socketName, view);
      this.emit(_events2.Events.AndroidDevice.WebView, view);
    }
    _onWebViewRemoved(socketName) {
      const view = this._webViews.get(socketName);
      this._webViews.delete(socketName);
      if (view) view.emit(_events2.Events.AndroidWebView.Close);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    serial() {
      return this._initializer.serial;
    }
    model() {
      return this._initializer.model;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async webView(selector, options) {
      const predicate = (v) => {
        if (selector.pkg) return v.pkg() === selector.pkg;
        if (selector.socketName) return v._socketName() === selector.socketName;
        return false;
      };
      const webView = [...this._webViews.values()].find(predicate);
      if (webView) return webView;
      return await this.waitForEvent("webview", {
        ...options,
        predicate
      });
    }
    async wait(selector, options) {
      await this._channel.wait({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async fill(selector, text, options) {
      await this._channel.fill({
        selector: toSelectorChannel(selector),
        text,
        ...options
      });
    }
    async press(selector, key, options) {
      await this.tap(selector, options);
      await this.input.press(key);
    }
    async tap(selector, options) {
      await this._channel.tap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async drag(selector, dest, options) {
      await this._channel.drag({
        selector: toSelectorChannel(selector),
        dest,
        ...options
      });
    }
    async fling(selector, direction, options) {
      await this._channel.fling({
        selector: toSelectorChannel(selector),
        direction,
        ...options
      });
    }
    async longTap(selector, options) {
      await this._channel.longTap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async pinchClose(selector, percent, options) {
      await this._channel.pinchClose({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async pinchOpen(selector, percent, options) {
      await this._channel.pinchOpen({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async scroll(selector, direction, percent, options) {
      await this._channel.scroll({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async swipe(selector, direction, percent, options) {
      await this._channel.swipe({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async info(selector) {
      return (await this._channel.info({
        selector: toSelectorChannel(selector)
      })).info;
    }
    async screenshot(options = {}) {
      const {
        binary
      } = await this._channel.screenshot();
      if (options.path) await _fs2.default.promises.writeFile(options.path, binary);
      return binary;
    }
    async [_Symbol$asyncDispose2]() {
      await this.close();
    }
    async close() {
      try {
        if (this._shouldCloseConnectionOnClose) this._connection.close();
        else await this._channel.close();
      } catch (e) {
        if ((0, _errors2.isTargetClosedError)(e)) return;
        throw e;
      }
    }
    _didClose() {
      this.emit(_events2.Events.AndroidDevice.Close, this);
    }
    async shell(command) {
      const {
        result: result2
      } = await this._channel.shell({
        command
      });
      return result2;
    }
    async open(command) {
      return AndroidSocket.from((await this._channel.open({
        command
      })).socket);
    }
    async installApk(file, options) {
      await this._channel.installApk({
        file: await loadFile(file),
        args: options && options.args
      });
    }
    async push(file, path2, options) {
      await this._channel.push({
        file: await loadFile(file),
        path: path2,
        mode: options ? options.mode : void 0
      });
    }
    async launchBrowser(options = {}) {
      const contextOptions = await (0, _browserContext2.prepareBrowserContextParams)(options);
      const result2 = await this._channel.launchBrowser(contextOptions);
      const context = _browserContext2.BrowserContext.from(result2.context);
      context._setOptions(contextOptions, {});
      return context;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter2 = _waiter2.Waiter.createForEvent(this, event);
        waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events2.Events.AndroidDevice.Close) waiter2.rejectOnEvent(this, _events2.Events.AndroidDevice.Close, () => new _errors2.TargetClosedError());
        const result2 = await waiter2.waitForEvent(this, event, predicate);
        waiter2.dispose();
        return result2;
      });
    }
  }
  android.AndroidDevice = AndroidDevice;
  class AndroidSocket extends _channelOwner2.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("data", ({
        data
      }) => this.emit(_events2.Events.AndroidSocket.Data, data));
      this._channel.on("close", () => this.emit(_events2.Events.AndroidSocket.Close));
    }
    async write(data) {
      await this._channel.write({
        data
      });
    }
    async close() {
      await this._channel.close();
    }
    async [Symbol.asyncDispose]() {
      await this.close();
    }
  }
  android.AndroidSocket = AndroidSocket;
  async function loadFile(file) {
    if ((0, _utils2.isString)(file)) return await _fs2.default.promises.readFile(file);
    return file;
  }
  class AndroidInput {
    constructor(device) {
      this._device = void 0;
      this._device = device;
    }
    async type(text) {
      await this._device._channel.inputType({
        text
      });
    }
    async press(key) {
      await this._device._channel.inputPress({
        key
      });
    }
    async tap(point) {
      await this._device._channel.inputTap({
        point
      });
    }
    async swipe(from, segments, steps) {
      await this._device._channel.inputSwipe({
        segments,
        steps
      });
    }
    async drag(from, to2, steps) {
      await this._device._channel.inputDrag({
        from,
        to: to2,
        steps
      });
    }
  }
  android.AndroidInput = AndroidInput;
  function toSelectorChannel(selector) {
    const {
      checkable,
      checked,
      clazz,
      clickable,
      depth,
      desc,
      enabled,
      focusable,
      focused,
      hasChild,
      hasDescendant,
      longClickable,
      pkg,
      res,
      scrollable,
      selected,
      text
    } = selector;
    const toRegex = (value) => {
      if (value === void 0) return void 0;
      if ((0, _utils2.isRegExp)(value)) return value.source;
      return "^" + value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d") + "$";
    };
    return {
      checkable,
      checked,
      clazz: toRegex(clazz),
      pkg: toRegex(pkg),
      desc: toRegex(desc),
      res: toRegex(res),
      text: toRegex(text),
      clickable,
      depth,
      enabled,
      focusable,
      focused,
      hasChild: hasChild ? {
        selector: toSelectorChannel(hasChild.selector)
      } : void 0,
      hasDescendant: hasDescendant ? {
        selector: toSelectorChannel(hasDescendant.selector),
        maxDepth: hasDescendant.maxDepth
      } : void 0,
      longClickable,
      scrollable,
      selected
    };
  }
  class AndroidWebView extends _events22.EventEmitter {
    constructor(device, data) {
      super();
      this._device = void 0;
      this._data = void 0;
      this._pagePromise = void 0;
      this._device = device;
      this._data = data;
    }
    pid() {
      return this._data.pid;
    }
    pkg() {
      return this._data.pkg;
    }
    _socketName() {
      return this._data.socketName;
    }
    async page() {
      if (!this._pagePromise) this._pagePromise = this._fetchPage();
      return await this._pagePromise;
    }
    async _fetchPage() {
      const {
        context
      } = await this._device._channel.connectToWebView({
        socketName: this._data.socketName
      });
      return _browserContext2.BrowserContext.from(context).pages()[0];
    }
  }
  android.AndroidWebView = AndroidWebView;
  return android;
}
var electron = {};
Object.defineProperty(electron, "__esModule", {
  value: true
});
electron.ElectronApplication = electron.Electron = void 0;
var _timeoutSettings = timeoutSettings;
var _browserContext = requireBrowserContext();
var _channelOwner$3 = channelOwner;
var _clientHelper$2 = clientHelper;
var _events = events;
var _jsHandle = jsHandle;
var _consoleMessage = requireConsoleMessage();
var _waiter = waiter;
var _errors = errors$1;
let _Symbol$asyncDispose;
class Electron extends _channelOwner$3.ChannelOwner {
  static from(electron2) {
    return electron2._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
  }
  async launch(options = {}) {
    const params = {
      ...await (0, _browserContext.prepareBrowserContextParams)(options),
      env: (0, _clientHelper$2.envObjectToArray)(options.env ? options.env : process.env),
      tracesDir: options.tracesDir
    };
    const app = ElectronApplication.from((await this._channel.launch(params)).electronApplication);
    app._context._setOptions(params, options);
    return app;
  }
}
electron.Electron = Electron;
_Symbol$asyncDispose = Symbol.asyncDispose;
class ElectronApplication extends _channelOwner$3.ChannelOwner {
  static from(electronApplication) {
    return electronApplication._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this._context = void 0;
    this._windows = /* @__PURE__ */ new Set();
    this._timeoutSettings = new _timeoutSettings.TimeoutSettings();
    this._context = _browserContext.BrowserContext.from(initializer.context);
    for (const page2 of this._context._pages) this._onPage(page2);
    this._context.on(_events.Events.BrowserContext.Page, (page2) => this._onPage(page2));
    this._channel.on("close", () => {
      this.emit(_events.Events.ElectronApplication.Close);
    });
    this._channel.on("console", (event) => this.emit(_events.Events.ElectronApplication.Console, new _consoleMessage.ConsoleMessage(event)));
    this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([[_events.Events.ElectronApplication.Console, "console"]]));
  }
  process() {
    return this._toImpl().process();
  }
  _onPage(page2) {
    this._windows.add(page2);
    this.emit(_events.Events.ElectronApplication.Window, page2);
    page2.once(_events.Events.Page.Close, () => this._windows.delete(page2));
  }
  windows() {
    return [...this._windows];
  }
  async firstWindow(options) {
    if (this._windows.size) return this._windows.values().next().value;
    return await this.waitForEvent("window", options);
  }
  context() {
    return this._context;
  }
  async [_Symbol$asyncDispose]() {
    await this.close();
  }
  async close() {
    try {
      await this._context.close();
    } catch (e) {
      if ((0, _errors.isTargetClosedError)(e)) return;
      throw e;
    }
  }
  async waitForEvent(event, optionsOrPredicate = {}) {
    return await this._wrapApiCall(async () => {
      const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
      const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
      const waiter2 = _waiter.Waiter.createForEvent(this, event);
      waiter2.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
      if (event !== _events.Events.ElectronApplication.Close) waiter2.rejectOnEvent(this, _events.Events.ElectronApplication.Close, () => new _errors.TargetClosedError());
      const result2 = await waiter2.waitForEvent(this, event, predicate);
      waiter2.dispose();
      return result2;
    });
  }
  async browserWindow(page2) {
    const result2 = await this._channel.browserWindow({
      page: page2._channel
    });
    return _jsHandle.JSHandle.from(result2.handle);
  }
  async evaluate(pageFunction, arg) {
    const result2 = await this._channel.evaluateExpression({
      expression: String(pageFunction),
      isFunction: typeof pageFunction === "function",
      arg: (0, _jsHandle.serializeArgument)(arg)
    });
    return (0, _jsHandle.parseResult)(result2.value);
  }
  async evaluateHandle(pageFunction, arg) {
    const result2 = await this._channel.evaluateExpressionHandle({
      expression: String(pageFunction),
      isFunction: typeof pageFunction === "function",
      arg: (0, _jsHandle.serializeArgument)(arg)
    });
    return _jsHandle.JSHandle.from(result2.handle);
  }
}
electron.ElectronApplication = ElectronApplication;
var selectors$1 = {};
Object.defineProperty(selectors$1, "__esModule", {
  value: true
});
selectors$1.SelectorsOwner = selectors$1.Selectors = void 0;
var _clientHelper$1 = clientHelper;
var _channelOwner$2 = channelOwner;
var _locator = requireLocator();
class Selectors2 {
  constructor() {
    this._channels = /* @__PURE__ */ new Set();
    this._registrations = [];
  }
  async register(name2, script, options = {}) {
    const source2 = await (0, _clientHelper$1.evaluationScript)(script, void 0, false);
    const params = {
      ...options,
      name: name2,
      source: source2
    };
    for (const channel of this._channels) await channel._channel.register(params);
    this._registrations.push(params);
  }
  setTestIdAttribute(attributeName) {
    (0, _locator.setTestIdAttribute)(attributeName);
    for (const channel of this._channels) channel._channel.setTestIdAttributeName({
      testIdAttributeName: attributeName
    }).catch(() => {
    });
  }
  _addChannel(channel) {
    this._channels.add(channel);
    for (const params of this._registrations) {
      channel._channel.register(params).catch(() => {
      });
      channel._channel.setTestIdAttributeName({
        testIdAttributeName: (0, _locator.testIdAttributeName)()
      }).catch(() => {
      });
    }
  }
  _removeChannel(channel) {
    this._channels.delete(channel);
  }
}
selectors$1.Selectors = Selectors2;
class SelectorsOwner extends _channelOwner$2.ChannelOwner {
  static from(browser2) {
    return browser2._object;
  }
}
selectors$1.SelectorsOwner = SelectorsOwner;
var hasRequiredPlaywright;
function requirePlaywright() {
  if (hasRequiredPlaywright) return playwright$1;
  hasRequiredPlaywright = 1;
  Object.defineProperty(playwright$1, "__esModule", {
    value: true
  });
  playwright$1.Playwright = void 0;
  var _errors2 = errors$1;
  var _android2 = requireAndroid();
  var _browserType = requireBrowserType();
  var _channelOwner2 = channelOwner;
  var _electron2 = electron;
  var _fetch2 = requireFetch();
  var _selectors2 = selectors$1;
  class Playwright extends _channelOwner2.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      var _this$_connection$loc, _this$_connection$loc2;
      super(parent, type, guid, initializer);
      this._android = void 0;
      this._electron = void 0;
      this._bidiChromium = void 0;
      this._bidiFirefox = void 0;
      this.chromium = void 0;
      this.firefox = void 0;
      this.webkit = void 0;
      this.devices = void 0;
      this.selectors = void 0;
      this.request = void 0;
      this.errors = void 0;
      this.request = new _fetch2.APIRequest(this);
      this.chromium = _browserType.BrowserType.from(initializer.chromium);
      this.chromium._playwright = this;
      this.firefox = _browserType.BrowserType.from(initializer.firefox);
      this.firefox._playwright = this;
      this.webkit = _browserType.BrowserType.from(initializer.webkit);
      this.webkit._playwright = this;
      this._android = _android2.Android.from(initializer.android);
      this._electron = _electron2.Electron.from(initializer.electron);
      this._bidiChromium = _browserType.BrowserType.from(initializer.bidiChromium);
      this._bidiChromium._playwright = this;
      this._bidiFirefox = _browserType.BrowserType.from(initializer.bidiFirefox);
      this._bidiFirefox._playwright = this;
      this.devices = (_this$_connection$loc = (_this$_connection$loc2 = this._connection.localUtils()) === null || _this$_connection$loc2 === void 0 ? void 0 : _this$_connection$loc2.devices) !== null && _this$_connection$loc !== void 0 ? _this$_connection$loc : {};
      this.selectors = new _selectors2.Selectors();
      this.errors = {
        TimeoutError: _errors2.TimeoutError
      };
      const selectorsOwner = _selectors2.SelectorsOwner.from(initializer.selectors);
      this.selectors._addChannel(selectorsOwner);
      this._connection.on("close", () => {
        this.selectors._removeChannel(selectorsOwner);
      });
      commonjsGlobal._playwrightInstance = this;
    }
    _setSelectors(selectors2) {
      const selectorsOwner = _selectors2.SelectorsOwner.from(this._initializer.selectors);
      this.selectors._removeChannel(selectorsOwner);
      this.selectors = selectors2;
      this.selectors._addChannel(selectorsOwner);
    }
    static from(channel) {
      return channel._object;
    }
  }
  playwright$1.Playwright = Playwright;
  return playwright$1;
}
var jsonPipe = {};
Object.defineProperty(jsonPipe, "__esModule", {
  value: true
});
jsonPipe.JsonPipe = void 0;
var _channelOwner$1 = channelOwner;
class JsonPipe extends _channelOwner$1.ChannelOwner {
  static from(jsonPipe2) {
    return jsonPipe2._object;
  }
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
  }
  channel() {
    return this._channel;
  }
}
jsonPipe.JsonPipe = JsonPipe;
var localUtils = {};
Object.defineProperty(localUtils, "__esModule", {
  value: true
});
localUtils.LocalUtils = void 0;
var _channelOwner = channelOwner;
class LocalUtils extends _channelOwner.ChannelOwner {
  constructor(parent, type, guid, initializer) {
    super(parent, type, guid, initializer);
    this.devices = void 0;
    this.markAsInternalType();
    this.devices = {};
    for (const {
      name: name2,
      descriptor
    } of initializer.deviceDescriptors) this.devices[name2] = descriptor;
  }
}
localUtils.LocalUtils = LocalUtils;
var clientInstrumentation = {};
Object.defineProperty(clientInstrumentation, "__esModule", {
  value: true
});
clientInstrumentation.createInstrumentation = createInstrumentation;
function createInstrumentation() {
  const listeners = [];
  return new Proxy({}, {
    get: (obj, prop) => {
      if (typeof prop !== "string") return obj[prop];
      if (prop === "addListener") return (listener) => listeners.push(listener);
      if (prop === "removeListener") return (listener) => listeners.splice(listeners.indexOf(listener), 1);
      if (prop === "removeAllListeners") return () => listeners.splice(0, listeners.length);
      if (prop.startsWith("run")) {
        return async (...params) => {
          for (const listener of listeners) {
            var _prop, _ref;
            await ((_prop = (_ref = listener)[prop]) === null || _prop === void 0 ? void 0 : _prop.call(_ref, ...params));
          }
        };
      }
      if (prop.startsWith("on")) {
        return (...params) => {
          for (const listener of listeners) {
            var _prop2, _ref2;
            (_prop2 = (_ref2 = listener)[prop]) === null || _prop2 === void 0 || _prop2.call(_ref2, ...params);
          }
        };
      }
      return obj[prop];
    }
  });
}
var hasRequiredConnection;
function requireConnection() {
  if (hasRequiredConnection) return connection;
  hasRequiredConnection = 1;
  Object.defineProperty(connection, "__esModule", {
    value: true
  });
  connection.Connection = void 0;
  var _browser2 = requireBrowser();
  var _browserContext2 = requireBrowserContext();
  var _browserType = requireBrowserType();
  var _channelOwner2 = channelOwner;
  var _elementHandle = requireElementHandle();
  var _frame = requireFrame();
  var _jsHandle2 = jsHandle;
  var _network2 = requireNetwork();
  var _page = requirePage();
  var _worker = worker;
  var _dialog = requireDialog();
  var _errors2 = errors$1;
  var _cdpSession = cdpSession;
  var _playwright2 = requirePlaywright();
  var _electron2 = electron;
  var _stream2 = stream;
  var _writableStream = writableStream;
  var _debugLogger2 = debugLogger;
  var _selectors2 = selectors$1;
  var _android2 = requireAndroid();
  var _artifact2 = artifact;
  var _events2 = require$$0$1;
  var _jsonPipe = jsonPipe;
  var _fetch2 = requireFetch();
  var _localUtils = localUtils;
  var _tracing = tracing;
  var _validator2 = validator;
  var _clientInstrumentation = clientInstrumentation;
  var _utils2 = requireUtils();
  class Root extends _channelOwner2.ChannelOwner {
    constructor(connection2) {
      super(connection2, "Root", "", {});
    }
    async initialize() {
      return _playwright2.Playwright.from((await this._channel.initialize({
        sdkLanguage: "javascript"
      })).playwright);
    }
  }
  class DummyChannelOwner extends _channelOwner2.ChannelOwner {
  }
  class Connection extends _events2.EventEmitter {
    constructor(localUtils2, instrumentation2) {
      super();
      this._objects = /* @__PURE__ */ new Map();
      this.onmessage = (message) => {
      };
      this._lastId = 0;
      this._callbacks = /* @__PURE__ */ new Map();
      this._rootObject = void 0;
      this._closedError = void 0;
      this._isRemote = false;
      this._localUtils = void 0;
      this._rawBuffers = false;
      this.toImpl = void 0;
      this._tracingCount = 0;
      this._instrumentation = void 0;
      this._rootObject = new Root(this);
      this._localUtils = localUtils2;
      this._instrumentation = instrumentation2 || (0, _clientInstrumentation.createInstrumentation)();
    }
    markAsRemote() {
      this._isRemote = true;
    }
    isRemote() {
      return this._isRemote;
    }
    useRawBuffers() {
      this._rawBuffers = true;
    }
    rawBuffers() {
      return this._rawBuffers;
    }
    localUtils() {
      return this._localUtils;
    }
    async initializePlaywright() {
      return await this._rootObject.initialize();
    }
    getObjectWithKnownName(guid) {
      return this._objects.get(guid);
    }
    setIsTracing(isTracing) {
      if (isTracing) this._tracingCount++;
      else this._tracingCount--;
    }
    async sendMessageToServer(object, method, params, apiName, frames2, stepId) {
      var _this$_localUtils;
      if (this._closedError) throw this._closedError;
      if (object._wasCollected) throw new Error("The object has been collected to prevent unbounded heap growth.");
      const guid = object._guid;
      const type = object._type;
      const id = ++this._lastId;
      const message = {
        id,
        guid,
        method,
        params
      };
      if (_debugLogger2.debugLogger.isEnabled("channel")) {
        _debugLogger2.debugLogger.log("channel", "SEND> " + JSON.stringify(message));
      }
      const location2 = frames2[0] ? {
        file: frames2[0].file,
        line: frames2[0].line,
        column: frames2[0].column
      } : void 0;
      const metadata = {
        apiName,
        location: location2,
        internal: !apiName,
        stepId
      };
      if (this._tracingCount && frames2 && type !== "LocalUtils") (_this$_localUtils = this._localUtils) === null || _this$_localUtils === void 0 || _this$_localUtils._channel.addStackToTracingNoReply({
        callData: {
          stack: frames2,
          id
        }
      }).catch(() => {
      });
      _utils2.zones.exitZones(() => this.onmessage({
        ...message,
        metadata
      }));
      return await new Promise((resolve, reject) => this._callbacks.set(id, {
        resolve,
        reject,
        apiName,
        type,
        method
      }));
    }
    dispatch(message) {
      if (this._closedError) return;
      const {
        id,
        guid,
        method,
        params,
        result: result2,
        error,
        log
      } = message;
      if (id) {
        if (_debugLogger2.debugLogger.isEnabled("channel")) _debugLogger2.debugLogger.log("channel", "<RECV " + JSON.stringify(message));
        const callback = this._callbacks.get(id);
        if (!callback) throw new Error(`Cannot find command to respond: ${id}`);
        this._callbacks.delete(id);
        if (error && !result2) {
          const parsedError = (0, _errors2.parseError)(error);
          (0, _utils2.rewriteErrorMessage)(parsedError, parsedError.message + (0, _utils2.formatCallLog)(log));
          callback.reject(parsedError);
        } else {
          const validator3 = (0, _validator2.findValidator)(callback.type, callback.method, "Result");
          callback.resolve(validator3(result2, "", {
            tChannelImpl: this._tChannelImplFromWire.bind(this),
            binary: this._rawBuffers ? "buffer" : "fromBase64"
          }));
        }
        return;
      }
      if (_debugLogger2.debugLogger.isEnabled("channel")) _debugLogger2.debugLogger.log("channel", "<EVENT " + JSON.stringify(message));
      if (method === "__create__") {
        this._createRemoteObject(guid, params.type, params.guid, params.initializer);
        return;
      }
      const object = this._objects.get(guid);
      if (!object) throw new Error(`Cannot find object to "${method}": ${guid}`);
      if (method === "__adopt__") {
        const child = this._objects.get(params.guid);
        if (!child) throw new Error(`Unknown new child: ${params.guid}`);
        object._adopt(child);
        return;
      }
      if (method === "__dispose__") {
        object._dispose(params.reason);
        return;
      }
      const validator2 = (0, _validator2.findValidator)(object._type, method, "Event");
      object._channel.emit(method, validator2(params, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      }));
    }
    close(cause) {
      if (this._closedError) return;
      this._closedError = new _errors2.TargetClosedError(cause);
      for (const callback of this._callbacks.values()) callback.reject(this._closedError);
      this._callbacks.clear();
      this.emit("close");
    }
    _tChannelImplFromWire(names, arg, path2, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const object = this._objects.get(arg.guid);
        if (!object) throw new Error(`Object with guid ${arg.guid} was not bound in the connection`);
        if (names !== "*" && !names.includes(object._type)) throw new _validator2.ValidationError(`${path2}: expected channel ${names.toString()}`);
        return object._channel;
      }
      throw new _validator2.ValidationError(`${path2}: expected channel ${names.toString()}`);
    }
    _createRemoteObject(parentGuid, type, guid, initializer) {
      const parent = this._objects.get(parentGuid);
      if (!parent) throw new Error(`Cannot find parent object ${parentGuid} to create ${guid}`);
      let result2;
      const validator2 = (0, _validator2.findValidator)(type, "", "Initializer");
      initializer = validator2(initializer, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      });
      switch (type) {
        case "Android":
          result2 = new _android2.Android(parent, type, guid, initializer);
          break;
        case "AndroidSocket":
          result2 = new _android2.AndroidSocket(parent, type, guid, initializer);
          break;
        case "AndroidDevice":
          result2 = new _android2.AndroidDevice(parent, type, guid, initializer);
          break;
        case "APIRequestContext":
          result2 = new _fetch2.APIRequestContext(parent, type, guid, initializer);
          break;
        case "Artifact":
          result2 = new _artifact2.Artifact(parent, type, guid, initializer);
          break;
        case "BindingCall":
          result2 = new _page.BindingCall(parent, type, guid, initializer);
          break;
        case "Browser":
          result2 = new _browser2.Browser(parent, type, guid, initializer);
          break;
        case "BrowserContext":
          result2 = new _browserContext2.BrowserContext(parent, type, guid, initializer);
          break;
        case "BrowserType":
          result2 = new _browserType.BrowserType(parent, type, guid, initializer);
          break;
        case "CDPSession":
          result2 = new _cdpSession.CDPSession(parent, type, guid, initializer);
          break;
        case "Dialog":
          result2 = new _dialog.Dialog(parent, type, guid, initializer);
          break;
        case "Electron":
          result2 = new _electron2.Electron(parent, type, guid, initializer);
          break;
        case "ElectronApplication":
          result2 = new _electron2.ElectronApplication(parent, type, guid, initializer);
          break;
        case "ElementHandle":
          result2 = new _elementHandle.ElementHandle(parent, type, guid, initializer);
          break;
        case "Frame":
          result2 = new _frame.Frame(parent, type, guid, initializer);
          break;
        case "JSHandle":
          result2 = new _jsHandle2.JSHandle(parent, type, guid, initializer);
          break;
        case "JsonPipe":
          result2 = new _jsonPipe.JsonPipe(parent, type, guid, initializer);
          break;
        case "LocalUtils":
          result2 = new _localUtils.LocalUtils(parent, type, guid, initializer);
          if (!this._localUtils) this._localUtils = result2;
          break;
        case "Page":
          result2 = new _page.Page(parent, type, guid, initializer);
          break;
        case "Playwright":
          result2 = new _playwright2.Playwright(parent, type, guid, initializer);
          break;
        case "Request":
          result2 = new _network2.Request(parent, type, guid, initializer);
          break;
        case "Response":
          result2 = new _network2.Response(parent, type, guid, initializer);
          break;
        case "Route":
          result2 = new _network2.Route(parent, type, guid, initializer);
          break;
        case "Stream":
          result2 = new _stream2.Stream(parent, type, guid, initializer);
          break;
        case "Selectors":
          result2 = new _selectors2.SelectorsOwner(parent, type, guid, initializer);
          break;
        case "SocksSupport":
          result2 = new DummyChannelOwner(parent, type, guid, initializer);
          break;
        case "Tracing":
          result2 = new _tracing.Tracing(parent, type, guid, initializer);
          break;
        case "WebSocket":
          result2 = new _network2.WebSocket(parent, type, guid, initializer);
          break;
        case "WebSocketRoute":
          result2 = new _network2.WebSocketRoute(parent, type, guid, initializer);
          break;
        case "Worker":
          result2 = new _worker.Worker(parent, type, guid, initializer);
          break;
        case "WritableStream":
          result2 = new _writableStream.WritableStream(parent, type, guid, initializer);
          break;
        default:
          throw new Error("Missing type " + type);
      }
      return result2;
    }
  }
  connection.Connection = Connection;
  return connection;
}
var browserServerImpl = {};
var playwrightServer = {};
var playwrightConnection = {};
var debugControllerDispatcher = {};
Object.defineProperty(debugControllerDispatcher, "__esModule", {
  value: true
});
debugControllerDispatcher.DebugControllerDispatcher = void 0;
var _utils$4 = requireUtils();
var _debugController = requireDebugController();
var _dispatcher = dispatcher;
class DebugControllerDispatcher extends _dispatcher.Dispatcher {
  constructor(connection2, debugController2) {
    super(connection2, debugController2, "DebugController", {});
    this._type_DebugController = void 0;
    this._listeners = void 0;
    this._type_DebugController = true;
    this._listeners = [_utils$4.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.StateChanged, (params) => {
      this._dispatchEvent("stateChanged", params);
    }), _utils$4.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.InspectRequested, ({
      selector,
      locator: locator2
    }) => {
      this._dispatchEvent("inspectRequested", {
        selector,
        locator: locator2
      });
    }), _utils$4.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SourceChanged, ({
      text,
      header,
      footer,
      actions
    }) => {
      this._dispatchEvent("sourceChanged", {
        text,
        header,
        footer,
        actions
      });
    }), _utils$4.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.Paused, ({
      paused
    }) => {
      this._dispatchEvent("paused", {
        paused
      });
    }), _utils$4.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SetModeRequested, ({
      mode
    }) => {
      this._dispatchEvent("setModeRequested", {
        mode
      });
    })];
  }
  async initialize(params) {
    this._object.initialize(params.codegenId, params.sdkLanguage);
  }
  async setReportStateChanged(params) {
    this._object.setReportStateChanged(params.enabled);
  }
  async resetForReuse() {
    await this._object.resetForReuse();
  }
  async navigate(params) {
    await this._object.navigate(params.url);
  }
  async setRecorderMode(params) {
    await this._object.setRecorderMode(params);
  }
  async highlight(params) {
    await this._object.highlight(params.selector);
  }
  async hideHighlight() {
    await this._object.hideHighlight();
  }
  async resume() {
    await this._object.resume();
  }
  async kill() {
    await this._object.kill();
  }
  async closeAllBrowsers() {
    await this._object.closeAllBrowsers();
  }
  _onDispose() {
    _utils$4.eventsHelper.removeEventListeners(this._listeners);
    this._object.dispose();
  }
}
debugControllerDispatcher.DebugControllerDispatcher = DebugControllerDispatcher;
Object.defineProperty(playwrightConnection, "__esModule", {
  value: true
});
playwrightConnection.PlaywrightConnection = void 0;
var _server$1 = server;
var _browser = requireBrowser$1();
var _instrumentation$1 = instrumentation;
var _socksProxy = socksProxy;
var _utils$3 = requireUtils();
var _android$1 = requireAndroid$1();
var _debugControllerDispatcher = debugControllerDispatcher;
var _debugLogger$1 = debugLogger;
class PlaywrightConnection {
  constructor(lock, clientType, ws2, options, preLaunched, id, onClose) {
    this._ws = void 0;
    this._onClose = void 0;
    this._dispatcherConnection = void 0;
    this._cleanups = [];
    this._id = void 0;
    this._disconnected = false;
    this._preLaunched = void 0;
    this._options = void 0;
    this._root = void 0;
    this._profileName = void 0;
    this._ws = ws2;
    this._preLaunched = preLaunched;
    this._options = options;
    options.launchOptions = filterLaunchOptions(options.launchOptions);
    if (clientType === "reuse-browser" || clientType === "pre-launched-browser-or-android") (0, _utils$3.assert)(preLaunched.playwright);
    if (clientType === "pre-launched-browser-or-android") (0, _utils$3.assert)(preLaunched.browser || preLaunched.androidDevice);
    this._onClose = onClose;
    this._id = id;
    this._profileName = `${(/* @__PURE__ */ new Date()).toISOString()}-${clientType}`;
    this._dispatcherConnection = new _server$1.DispatcherConnection();
    this._dispatcherConnection.onmessage = async (message) => {
      await lock;
      if (ws2.readyState !== ws2.CLOSING) {
        const messageString = JSON.stringify(message);
        if (_debugLogger$1.debugLogger.isEnabled("server:channel")) _debugLogger$1.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils$3.monotonicTime)() * 1e3} SEND ► ${messageString}`);
        if (_debugLogger$1.debugLogger.isEnabled("server:metadata")) this.logServerMetadata(message, messageString, "SEND");
        ws2.send(messageString);
      }
    };
    ws2.on("message", async (message) => {
      await lock;
      const messageString = Buffer.from(message).toString();
      const jsonMessage = JSON.parse(messageString);
      if (_debugLogger$1.debugLogger.isEnabled("server:channel")) _debugLogger$1.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils$3.monotonicTime)() * 1e3} ◀ RECV ${messageString}`);
      if (_debugLogger$1.debugLogger.isEnabled("server:metadata")) this.logServerMetadata(jsonMessage, messageString, "RECV");
      this._dispatcherConnection.dispatch(jsonMessage);
    });
    ws2.on("close", () => this._onDisconnect());
    ws2.on("error", (error) => this._onDisconnect(error));
    if (clientType === "controller") {
      this._root = this._initDebugControllerMode();
      return;
    }
    this._root = new _server$1.RootDispatcher(this._dispatcherConnection, async (scope, options2) => {
      await (0, _utils$3.startProfiling)();
      if (clientType === "reuse-browser") return await this._initReuseBrowsersMode(scope);
      if (clientType === "pre-launched-browser-or-android") return this._preLaunched.browser ? await this._initPreLaunchedBrowserMode(scope) : await this._initPreLaunchedAndroidMode(scope);
      if (clientType === "launch-browser") return await this._initLaunchBrowserMode(scope, options2);
      throw new Error("Unsupported client type: " + clientType);
    });
  }
  async _initLaunchBrowserMode(scope, options) {
    _debugLogger$1.debugLogger.log("server", `[${this._id}] engaged launch mode for "${this._options.browserName}"`);
    const playwright2 = (0, _server$1.createPlaywright)({
      sdkLanguage: options.sdkLanguage,
      isServer: true
    });
    const ownedSocksProxy = await this._createOwnedSocksProxy(playwright2);
    const browser2 = await playwright2[this._options.browserName].launch((0, _instrumentation$1.serverSideCallMetadata)(), this._options.launchOptions);
    this._cleanups.push(async () => {
      for (const browser22 of playwright2.allBrowsers()) await browser22.close({
        reason: "Connection terminated"
      });
    });
    browser2.on(_browser.Browser.Events.Disconnected, () => {
      this.close({
        code: 1001,
        reason: "Browser closed"
      });
    });
    return new _server$1.PlaywrightDispatcher(scope, playwright2, ownedSocksProxy, browser2);
  }
  async _initPreLaunchedBrowserMode(scope) {
    var _this$_preLaunched$so;
    _debugLogger$1.debugLogger.log("server", `[${this._id}] engaged pre-launched (browser) mode`);
    const playwright2 = this._preLaunched.playwright;
    (_this$_preLaunched$so = this._preLaunched.socksProxy) === null || _this$_preLaunched$so === void 0 || _this$_preLaunched$so.setPattern(this._options.socksProxyPattern);
    const browser2 = this._preLaunched.browser;
    browser2.on(_browser.Browser.Events.Disconnected, () => {
      this.close({
        code: 1001,
        reason: "Browser closed"
      });
    });
    const playwrightDispatcher2 = new _server$1.PlaywrightDispatcher(scope, playwright2, this._preLaunched.socksProxy, browser2);
    for (const b of playwright2.allBrowsers()) {
      if (b !== browser2) await b.close({
        reason: "Connection terminated"
      });
    }
    this._cleanups.push(() => playwrightDispatcher2.cleanup());
    return playwrightDispatcher2;
  }
  async _initPreLaunchedAndroidMode(scope) {
    _debugLogger$1.debugLogger.log("server", `[${this._id}] engaged pre-launched (Android) mode`);
    const playwright2 = this._preLaunched.playwright;
    const androidDevice = this._preLaunched.androidDevice;
    androidDevice.on(_android$1.AndroidDevice.Events.Close, () => {
      this.close({
        code: 1001,
        reason: "Android device disconnected"
      });
    });
    const playwrightDispatcher2 = new _server$1.PlaywrightDispatcher(scope, playwright2, void 0, void 0, androidDevice);
    this._cleanups.push(() => playwrightDispatcher2.cleanup());
    return playwrightDispatcher2;
  }
  _initDebugControllerMode() {
    _debugLogger$1.debugLogger.log("server", `[${this._id}] engaged reuse controller mode`);
    const playwright2 = this._preLaunched.playwright;
    return new _debugControllerDispatcher.DebugControllerDispatcher(this._dispatcherConnection, playwright2.debugController);
  }
  async _initReuseBrowsersMode(scope) {
    _debugLogger$1.debugLogger.log("server", `[${this._id}] engaged reuse browsers mode for ${this._options.browserName}`);
    const playwright2 = this._preLaunched.playwright;
    const requestedOptions = launchOptionsHash(this._options.launchOptions);
    let browser2 = playwright2.allBrowsers().find((b) => {
      if (b.options.name !== this._options.browserName) return false;
      const existingOptions = launchOptionsHash(b.options.originalLaunchOptions);
      return existingOptions === requestedOptions;
    });
    for (const b of playwright2.allBrowsers()) {
      if (b === browser2) continue;
      if (b.options.name === this._options.browserName && b.options.channel === this._options.launchOptions.channel) await b.close({
        reason: "Connection terminated"
      });
    }
    if (!browser2) {
      browser2 = await playwright2[this._options.browserName || "chromium"].launch((0, _instrumentation$1.serverSideCallMetadata)(), {
        ...this._options.launchOptions,
        headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
      });
      browser2.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
    }
    this._cleanups.push(async () => {
      for (const browser22 of playwright2.allBrowsers()) {
        for (const context of browser22.contexts()) {
          if (!context.pages().length) await context.close({
            reason: "Connection terminated"
          });
          else await context.stopPendingOperations("Connection closed");
        }
        if (!browser22.contexts()) await browser22.close({
          reason: "Connection terminated"
        });
      }
    });
    const playwrightDispatcher2 = new _server$1.PlaywrightDispatcher(scope, playwright2, void 0, browser2);
    return playwrightDispatcher2;
  }
  async _createOwnedSocksProxy(playwright2) {
    if (!this._options.socksProxyPattern) return;
    const socksProxy2 = new _socksProxy.SocksProxy();
    socksProxy2.setPattern(this._options.socksProxyPattern);
    playwright2.options.socksProxyPort = await socksProxy2.listen(0);
    _debugLogger$1.debugLogger.log("server", `[${this._id}] started socks proxy on port ${playwright2.options.socksProxyPort}`);
    this._cleanups.push(() => socksProxy2.close());
    return socksProxy2;
  }
  async _onDisconnect(error) {
    this._disconnected = true;
    _debugLogger$1.debugLogger.log("server", `[${this._id}] disconnected. error: ${error}`);
    this._root._dispose();
    _debugLogger$1.debugLogger.log("server", `[${this._id}] starting cleanup`);
    for (const cleanup of this._cleanups) await cleanup().catch(() => {
    });
    await (0, _utils$3.stopProfiling)(this._profileName);
    this._onClose();
    _debugLogger$1.debugLogger.log("server", `[${this._id}] finished cleanup`);
  }
  logServerMetadata(message, messageString, direction) {
    const serverLogMetadata = {
      wallTime: Date.now(),
      id: message.id,
      guid: message.guid,
      method: message.method,
      payloadSizeInBytes: Buffer.byteLength(messageString, "utf-8")
    };
    _debugLogger$1.debugLogger.log("server:metadata", (direction === "SEND" ? "SEND ► " : "◀ RECV ") + JSON.stringify(serverLogMetadata));
  }
  async close(reason) {
    if (this._disconnected) return;
    _debugLogger$1.debugLogger.log("server", `[${this._id}] force closing connection: ${(reason === null || reason === void 0 ? void 0 : reason.reason) || ""} (${(reason === null || reason === void 0 ? void 0 : reason.code) || 0})`);
    try {
      this._ws.close(reason === null || reason === void 0 ? void 0 : reason.code, reason === null || reason === void 0 ? void 0 : reason.reason);
    } catch (e) {
    }
  }
}
playwrightConnection.PlaywrightConnection = PlaywrightConnection;
function launchOptionsHash(options) {
  const copy = {
    ...options
  };
  for (const k of Object.keys(copy)) {
    const key = k;
    if (copy[key] === defaultLaunchOptions[key]) delete copy[key];
  }
  for (const key of optionsThatAllowBrowserReuse) delete copy[key];
  return JSON.stringify(copy);
}
function filterLaunchOptions(options) {
  return {
    channel: options.channel,
    args: options.args,
    ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,
    ignoreDefaultArgs: options.ignoreDefaultArgs,
    timeout: options.timeout,
    headless: options.headless,
    proxy: options.proxy,
    chromiumSandbox: options.chromiumSandbox,
    firefoxUserPrefs: options.firefoxUserPrefs,
    slowMo: options.slowMo,
    executablePath: (0, _utils$3.isUnderTest)() ? options.executablePath : void 0
  };
}
const defaultLaunchOptions = {
  ignoreAllDefaultArgs: false,
  handleSIGINT: false,
  handleSIGTERM: false,
  handleSIGHUP: false,
  headless: true,
  devtools: false
};
const optionsThatAllowBrowserReuse = ["headless", "tracesDir"];
Object.defineProperty(playwrightServer, "__esModule", {
  value: true
});
playwrightServer.PlaywrightServer = void 0;
var _playwright$2 = requirePlaywright$1();
var _playwrightConnection = playwrightConnection;
var _semaphore = requireSemaphore();
var _debugLogger = debugLogger;
var _utils$2 = requireUtils();
var _wsServer = requireWsServer();
class PlaywrightServer {
  constructor(options) {
    this._preLaunchedPlaywright = void 0;
    this._options = void 0;
    this._wsServer = void 0;
    this._options = options;
    if (options.preLaunchedBrowser) this._preLaunchedPlaywright = options.preLaunchedBrowser.attribution.playwright;
    if (options.preLaunchedAndroidDevice) this._preLaunchedPlaywright = options.preLaunchedAndroidDevice._android.attribution.playwright;
    const browserSemaphore = new _semaphore.Semaphore(this._options.maxConnections);
    const controllerSemaphore = new _semaphore.Semaphore(1);
    const reuseBrowserSemaphore = new _semaphore.Semaphore(1);
    this._wsServer = new _wsServer.WSServer({
      onUpgrade: (request2, socket) => {
        const uaError = (0, _utils$2.userAgentVersionMatchesErrorMessage)(request2.headers["user-agent"] || "");
        if (uaError) return {
          error: `HTTP/${request2.httpVersion} 428 Precondition Required\r
\r
${uaError}`
        };
      },
      onHeaders: (headers2) => {
        if (process.env.PWTEST_SERVER_WS_HEADERS) headers2.push(process.env.PWTEST_SERVER_WS_HEADERS);
      },
      onConnection: (request2, url, ws2, id) => {
        const browserHeader = request2.headers["x-playwright-browser"];
        const browserName = url.searchParams.get("browser") || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;
        const proxyHeader = request2.headers["x-playwright-proxy"];
        const proxyValue = url.searchParams.get("proxy") || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);
        const launchOptionsHeader = request2.headers["x-playwright-launch-options"] || "";
        const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;
        const launchOptionsParam = url.searchParams.get("launch-options");
        let launchOptions = {};
        try {
          launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);
        } catch (e) {
        }
        const isExtension = this._options.mode === "extension";
        if (isExtension) {
          if (!this._preLaunchedPlaywright) this._preLaunchedPlaywright = (0, _playwright$2.createPlaywright)({
            sdkLanguage: "javascript",
            isServer: true
          });
        }
        let clientType = "launch-browser";
        let semaphore2 = browserSemaphore;
        if (isExtension && url.searchParams.has("debug-controller")) {
          clientType = "controller";
          semaphore2 = controllerSemaphore;
        } else if (isExtension) {
          clientType = "reuse-browser";
          semaphore2 = reuseBrowserSemaphore;
        } else if (this._options.mode === "launchServer") {
          clientType = "pre-launched-browser-or-android";
          semaphore2 = browserSemaphore;
        }
        return new _playwrightConnection.PlaywrightConnection(semaphore2.acquire(), clientType, ws2, {
          socksProxyPattern: proxyValue,
          browserName,
          launchOptions
        }, {
          playwright: this._preLaunchedPlaywright,
          browser: this._options.preLaunchedBrowser,
          androidDevice: this._options.preLaunchedAndroidDevice,
          socksProxy: this._options.preLaunchedSocksProxy
        }, id, () => semaphore2.release());
      },
      onClose: async () => {
        _debugLogger.debugLogger.log("server", "closing browsers");
        if (this._preLaunchedPlaywright) await Promise.all(this._preLaunchedPlaywright.allBrowsers().map((browser2) => browser2.close({
          reason: "Playwright Server stopped"
        })));
        _debugLogger.debugLogger.log("server", "closed browsers");
      }
    });
  }
  async listen(port = 0, hostname) {
    return this._wsServer.listen(port, hostname, this._options.path);
  }
  async close() {
    await this._wsServer.close();
  }
}
playwrightServer.PlaywrightServer = PlaywrightServer;
Object.defineProperty(browserServerImpl, "__esModule", {
  value: true
});
browserServerImpl.BrowserServerLauncherImpl = void 0;
var _utilsBundle$1 = utilsBundle;
var _clientHelper = clientHelper;
var _utils$1 = requireUtils();
var _instrumentation = instrumentation;
var _playwright$1 = requirePlaywright$1();
var _playwrightServer$1 = playwrightServer;
var _helper = helper;
var _stackTrace = requireStackTrace();
class BrowserServerLauncherImpl {
  constructor(browserName) {
    this._browserName = void 0;
    this._browserName = browserName;
  }
  async launchServer(options = {}) {
    const playwright2 = (0, _playwright$1.createPlaywright)({
      sdkLanguage: "javascript",
      isServer: true
    });
    const socksProxy2 = void 0;
    playwright2.options.socksProxyPort = await void 0;
    const metadata = (0, _instrumentation.serverSideCallMetadata)();
    const browser2 = await playwright2[this._browserName].launch(metadata, {
      ...options,
      ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
      ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
      env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : void 0
    }, toProtocolLogger(options.logger)).catch((e) => {
      const log = _helper.helper.formatBrowserLogs(metadata.log);
      (0, _stackTrace.rewriteErrorMessage)(e, `${e.message} Failed to launch browser.${log}`);
      throw e;
    });
    const path2 = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils$1.createGuid)()}`;
    const server2 = new _playwrightServer$1.PlaywrightServer({
      mode: "launchServer",
      path: path2,
      maxConnections: Infinity,
      preLaunchedBrowser: browser2,
      preLaunchedSocksProxy: socksProxy2
    });
    const wsEndpoint = await server2.listen(options.port, options.host);
    const browserServer = new _utilsBundle$1.ws.EventEmitter();
    browserServer.process = () => browser2.options.browserProcess.process;
    browserServer.wsEndpoint = () => wsEndpoint;
    browserServer.close = () => browser2.options.browserProcess.close();
    browserServer[Symbol.asyncDispose] = browserServer.close;
    browserServer.kill = () => browser2.options.browserProcess.kill();
    browserServer._disconnectForTest = () => server2.close();
    browserServer._userDataDirForTest = browser2._userDataDirForTest;
    browser2.options.browserProcess.onclose = (exitCode, signal) => {
      server2.close();
      browserServer.emit("close", exitCode, signal);
    };
    return browserServer;
  }
}
browserServerImpl.BrowserServerLauncherImpl = BrowserServerLauncherImpl;
function toProtocolLogger(logger) {
  return logger ? (direction, message) => {
    if (logger.isEnabled("protocol", "verbose")) logger.log("protocol", "verbose", (direction === "send" ? "SEND ► " : "◀ RECV ") + JSON.stringify(message), [], {});
  } : void 0;
}
var androidServerImpl = {};
Object.defineProperty(androidServerImpl, "__esModule", {
  value: true
});
androidServerImpl.AndroidServerLauncherImpl = void 0;
var _utilsBundle = utilsBundle;
var _utils = requireUtils();
var _playwright = requirePlaywright$1();
var _playwrightServer = playwrightServer;
class AndroidServerLauncherImpl {
  async launchServer(options = {}) {
    const playwright2 = (0, _playwright.createPlaywright)({
      sdkLanguage: "javascript",
      isServer: true
    });
    let devices2 = await playwright2.android.devices({
      host: options.adbHost,
      port: options.adbPort,
      omitDriverInstall: options.omitDriverInstall
    });
    if (devices2.length === 0) throw new Error("No devices found");
    if (options.deviceSerialNumber) {
      devices2 = devices2.filter((d) => d.serial === options.deviceSerialNumber);
      if (devices2.length === 0) throw new Error(`No device with serial number '${options.deviceSerialNumber}' not found`);
    }
    if (devices2.length > 1) throw new Error(`More than one device found. Please specify deviceSerialNumber`);
    const device = devices2[0];
    const path2 = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
    const server2 = new _playwrightServer.PlaywrightServer({
      mode: "launchServer",
      path: path2,
      maxConnections: 1,
      preLaunchedAndroidDevice: device
    });
    const wsEndpoint = await server2.listen(options.port, options.host);
    const browserServer = new _utilsBundle.ws.EventEmitter();
    browserServer.wsEndpoint = () => wsEndpoint;
    browserServer.close = () => device.close();
    browserServer.kill = () => device.close();
    device.on("close", () => {
      server2.close();
      browserServer.emit("close");
    });
    return browserServer;
  }
}
androidServerImpl.AndroidServerLauncherImpl = AndroidServerLauncherImpl;
Object.defineProperty(inProcessFactory, "__esModule", {
  value: true
});
inProcessFactory.createInProcessPlaywright = createInProcessPlaywright;
var _server = server;
var _connection = requireConnection();
var _browserServerImpl = browserServerImpl;
var _androidServerImpl = androidServerImpl;
function createInProcessPlaywright() {
  const playwright2 = (0, _server.createPlaywright)({
    sdkLanguage: process.env.PW_LANG_NAME || "javascript"
  });
  const clientConnection = new _connection.Connection(void 0, void 0);
  clientConnection.useRawBuffers();
  const dispatcherConnection = new _server.DispatcherConnection(
    true
    /* local */
  );
  dispatcherConnection.onmessage = (message) => clientConnection.dispatch(message);
  clientConnection.onmessage = (message) => dispatcherConnection.dispatch(message);
  const rootScope = new _server.RootDispatcher(dispatcherConnection);
  new _server.PlaywrightDispatcher(rootScope, playwright2);
  const playwrightAPI = clientConnection.getObjectWithKnownName("Playwright");
  playwrightAPI.chromium._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("chromium");
  playwrightAPI.firefox._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("firefox");
  playwrightAPI.webkit._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("webkit");
  playwrightAPI._android._serverLauncher = new _androidServerImpl.AndroidServerLauncherImpl();
  dispatcherConnection.onmessage = (message) => setImmediate(() => clientConnection.dispatch(message));
  clientConnection.onmessage = (message) => setImmediate(() => dispatcherConnection.dispatch(message));
  clientConnection.toImpl = (x) => x ? dispatcherConnection._dispatchers.get(x._guid)._object : dispatcherConnection._dispatchers.get("");
  playwrightAPI._toImpl = clientConnection.toImpl;
  return playwrightAPI;
}
var _inProcessFactory = inProcessFactory;
var inprocess = (0, _inProcessFactory.createInProcessPlaywright)();
const minimumMajorNodeVersion = 14;
const currentNodeVersion = process.versions.node;
const semver = currentNodeVersion.split(".");
const [major] = [+semver[0]];
if (major < minimumMajorNodeVersion) {
  console.error(
    "You are running Node.js " + currentNodeVersion + `.
Playwright requires Node.js ${minimumMajorNodeVersion} or higher. 
Please update your version of Node.js.`
  );
  process.exit(1);
}
var playwrightCore = inprocess;
const playwright = /* @__PURE__ */ getDefaultExportFromCjs(playwrightCore);
const chromium = playwright.chromium;
const firefox = playwright.firefox;
const webkit = playwright.webkit;
const selectors = playwright.selectors;
const devices = playwright.devices;
const errors = playwright.errors;
const request = playwright.request;
const _electron = playwright._electron;
const _android = playwright._android;
export {
  _android,
  _electron,
  chromium,
  playwright as default,
  devices,
  errors,
  firefox,
  request,
  selectors,
  webkit
};
